/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "OMINAS API Documentation";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("./dat_add_transient_keyvals.html", "dat_add_transient_keyvals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_add_transient_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_add_transient_keyvals.html#dat_add_transient_keyvals", "dat_add_transient_keyvals", 'routine in <a href="./dat_add_transient_keyvals.html">dat_add_transient_keyvals.pro</a>', "dat_add_transient_keyvals.pro", "", "dat_add_transient_keyvals", "	Records keyword/value pairs from a transient argument string.    ", "_ddData descriptor in which to record transient keyvals.   trsTransient argument string.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_compress.html", "dat_compress.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_compress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_compress.html#dat_compress", "dat_compress", 'routine in <a href="./dat_compress.html">dat_compress.pro</a>', "dat_compress.pro", "", "dat_compress", "	Returns the compression function suffix associated with a data 	descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	String giving the compression suffix.  The full name 	of the compression function is dat_compress_data_<suffix>.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_compress_data_mask.html", "dat_compress_data_mask.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_compress_data_mask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_compress_data_mask.html#dat_compress_data_mask", "dat_compress_data_mask", 'routine in <a href="./dat_compress_data_mask.html">dat_compress_data_mask.pro</a>', "dat_compress_data_mask.pro", "", "dat_compress_data_mask", "", "_dddata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_create_descriptors.html", "dat_create_descriptors.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_create_descriptors.html#dat_create_descriptors", "dat_create_descriptors", 'routine in <a href="./dat_create_descriptors.html">dat_create_descriptors.pro</a>', "dat_create_descriptors.pro", "", "dat_create_descriptors", "	Creates and initializes a data descriptor.    ", "crdddsilentn Number of descriptors to create.   @data__keywords.include", "NV/SYS", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created and initialized data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_data.html", "dat_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_data.html#dat_data", "dat_data", 'routine in <a href="./dat_data.html">dat_data.pro</a>', "dat_data.pro", "", "dat_data", "	Returns the data array associated with a data descriptor.    ", "samplesndtruenoeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	The data array associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_data    ");
  
  

libdata[libdataItem++] = new Array("./dat_detect_filetype.html", "dat_detect_filetype.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_detect_filetype.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_detect_filetype.html#dat_detect_filetype", "dat_detect_filetype", 'routine in <a href="./dat_detect_filetype.html">dat_detect_filetype.pro</a>', "dat_detect_filetype.pro", "", "dat_detect_filetype", "	Attempts to detect the type of the given file by calling the 	detectors in the filetype detectors table.    ", "silentdefaultallactionfilenameName of file to test.   ", "NV/SYS", " 	Written by:	Spitale   	String giving the filetype, or null string if none detected.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_detect_instrument.html", "dat_detect_instrument.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_detect_instrument.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_detect_instrument.html#dat_detect_instrument", "dat_detect_instrument", 'routine in <a href="./dat_detect_instrument.html">dat_detect_instrument.pro</a>', "dat_detect_instrument.pro", "", "dat_detect_instrument", "	Attempts to detect the instrument for a data set by calling the 	detectors in the instrument detectors table.    ", "silentlabeludata	User data for the detectors.   filetypeFiletype from dat_detect_filetype.   ", "NV/SYS", " 	Written by:	Spitale   	String giving the instrument, or 'DEFAULT' if none detected.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_dim.html", "dat_dim.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_dim.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_dim.html#dat_dim", "dat_dim", 'routine in <a href="./dat_dim.html">dat_dim.pro</a>', "dat_dim.pro", "", "dat_dim", "	Returns the dimensions of the data array in the given data 	descriptor.    ", "truenoeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array giving the dimensions of the data in the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_dim_fn.html", "dat_dim_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_dim_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_dim_fn.html#dat_dim_fn", "dat_dim_fn", 'routine in <a href="./dat_dim_fn.html">dat_dim_fn.pro</a>', "dat_dim_fn.pro", "", "dat_dim_fn", "	Returns the dimension function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The dim_fn associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_dim_fn    ");
  
  

libdata[libdataItem++] = new Array("./dat_dim_fn_data.html", "dat_dim_fn_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_dim_fn_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_dim_fn_data.html#dat_dim_fn_data", "dat_dim_fn_data", 'routine in <a href="./dat_dim_fn_data.html">dat_dim_fn_data.pro</a>', "dat_dim_fn_data.pro", "", "dat_dim_fn_data", "	Returns the dimension function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The dim_fn_data associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_dim_fn_data    ");
  
  

libdata[libdataItem++] = new Array("./dat_filetype.html", "dat_filetype.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_filetype.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_filetype.html#dat_filetype", "dat_filetype", 'routine in <a href="./dat_filetype.html">dat_filetype.pro</a>', "dat_filetype.pro", "", "dat_filetype", "	Returns the filetype associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	String giving the filetype.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_get_value.html", "dat_get_value.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_get_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_get_value.html#dat_get_value", "dat_get_value", 'routine in <a href="./dat_get_value.html">dat_get_value.pro</a>', "dat_get_value.pro", "", "dat_get_value", "	Calls input translators, supplying the given keyword, and builds 	a list of  returned values.    ", "statustrsdd	Data descriptor.   keywordKeyword to pass to translators, describing the 			requested quantity.   @nv_trs_keywords_include.pro", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of values returned from all successful translator calls. 	Values are returned in the same order that the corresponding 	translators were called.  The dimensions are determined by the 	output of the first translator call.  Dimensions are (dim,n_values), 	where n_objects is the total number of returned values (there may 	be more than one per translator), and dim is the dimensions of 	each value.  If dim == 1, the dimensions of the dat_get_value result 	are (n_values).    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_header.html", "dat_header.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_header.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_header.html#dat_header", "dat_header", 'routine in <a href="./dat_header.html">dat_header.pro</a>', "dat_header.pro", "", "dat_header", "	Returns the header array associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	The header array associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_header    ");
  
  

libdata[libdataItem++] = new Array("./dat_header_value.html", "dat_header_value.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_header_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_header_value.html#dat_header_value", "dat_header_value", 'routine in <a href="./dat_header_value.html">dat_header_value.pro</a>', "dat_header_value.pro", "", "dat_header_value", "	Reads and write header keyword values.    ", "getsetnoeventdd	Data descriptor.   keywordString giving the name of the keyword to get or set.   ", "NV/SYS", " 	Written by:	Spitale, 8/2013  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_instrument.html", "dat_instrument.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_instrument.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_instrument.html#dat_instrument", "dat_instrument", 'routine in <a href="./dat_instrument.html">dat_instrument.pro</a>', "dat_instrument.pro", "", "dat_instrument", "	Returns the instrument string associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 9/2001  	Adapted by:	Spitale, 5/2016   	The instrument string associated with the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_load_data.html", "dat_load_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_load_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_load_data.html#dat_load_data", "dat_load_data", 'routine in <a href="./dat_load_data.html">dat_load_data.pro</a>', "dat_load_data.pro", "", "dat_load_data", "	Loads the data array for a given data descriptor.  Adds to 	NV state maintained list if maintain == 1.    ", "sampleddData descriptor to test.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Loaded data array.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_lookup_io.html", "dat_lookup_io.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_lookup_io.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_lookup_io.html#dat_lookup_io", "dat_lookup_io", 'routine in <a href="./dat_lookup_io.html">dat_lookup_io.pro</a>', "dat_lookup_io.pro", "", "dat_lookup_io", "	Looks up the names of the data input and output functions in 	the I/O table.    ", "silentfiletypeFiletype string from dat_detect_filetype.   input_fnoutput_fnkeyword_fn", "NV/SYS", " 	Written by:	Spitale   	input_fn:	Name of the input function.  	output_fn:	Name of the output function.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_lookup_transforms.html", "dat_lookup_transforms.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_lookup_transforms.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_lookup_transforms.html#dat_lookup_transforms", "dat_lookup_transforms", 'routine in <a href="./dat_lookup_transforms.html">dat_lookup_transforms.pro</a>', "dat_lookup_transforms.pro", "", "dat_lookup_transforms", "	Looks up the names of the data input and output functions in 	the I/O table.    ", "tab_transformssilentinstrumentInstrument string from dat_detect_instrument.   input_transformsoutput_transforms", "NV/SYS", " 	Written by:	Spitale   	input_transforms:	Array giving the names of the input transform 				functions.  	output_transforms:	Array giving the names of the output transform 				functions.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_lookup_translators.html", "dat_lookup_translators.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_lookup_translators.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_lookup_translators.html#dat_lookup_translators", "dat_lookup_translators", 'routine in <a href="./dat_lookup_translators.html">dat_lookup_translators.pro</a>', "dat_lookup_translators.pro", "", "dat_lookup_translators", "	Looks up the names of the data input and output tranlators in 	the translators table.    ", "tab_translatorssilentinstrumentInstrument string from dat_detect_instrument.   input_translatorsoutput_translatorsinput_keyvalsoutput_keyvals", "NV/SYS", " 	Written by:	Spitale   	input_translators:	Array giving the names of the input translator 				functions.  	output_translators:	Array giving the names of the output translator 				functions.  	input_keyvals:	Array giving the keyword/value pairs the from the 			translators table, for each input translator.  	output_keyvals:	Array giving the keyword/value pairs the from the 			translators table, for each output translator.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_maintain.html", "dat_maintain.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_maintain.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_maintain.html#dat_maintain", "dat_maintain", 'routine in <a href="./dat_maintain.html">dat_maintain.pro</a>', "dat_maintain.pro", "", "dat_maintain", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("./dat_manage_dd.html", "dat_manage_dd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_manage_dd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_manage_dd.html#dat_manage_dd", "dat_manage_dd", 'routine in <a href="./dat_manage_dd.html">dat_manage_dd.pro</a>', "dat_manage_dd.pro", "", "dat_manage_dd", "	Adds a data descriptor to the NV state maintained list.  If the list 	is full, the oldest descriptor is unloaded and removed.    ", "ddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("./dat_max.html", "dat_max.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_max.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_max.html#dat_max", "dat_max", 'routine in <a href="./dat_max.html">dat_max.pro</a>', "dat_max.pro", "", "dat_max", "	Returns the max value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   	The max value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("./dat_min.html", "dat_min.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_min.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_min.html#dat_min", "dat_min", 'routine in <a href="./dat_min.html">dat_min.pro</a>', "dat_min.pro", "", "dat_min", "	Returns the min value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   	The min value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("./dat_ndd.html", "dat_ndd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_ndd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_ndd.html#dat_ndd", "dat_ndd", 'routine in <a href="./dat_ndd.html">dat_ndd.pro</a>', "dat_ndd.pro", "", "dat_ndd", "	Returns the global maintenance ndd value.    ", "ddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The global maintenance ndd value.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("./dat_nhist.html", "dat_nhist.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_nhist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_nhist.html#dat_nhist", "dat_nhist", 'routine in <a href="./dat_nhist.html">dat_nhist.pro</a>', "dat_nhist.pro", "", "dat_nhist", "	Returns the number of archived data states.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Integer giving the number of past data states archived 	in the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_parse_keyval.html", "dat_parse_keyval.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_parse_keyval.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_parse_keyval.html#dat_parse_keyval", "dat_parse_keyval", 'routine in <a href="./dat_parse_keyval.html">dat_parse_keyval.pro</a>', "dat_parse_keyval.pro", "", "dat_parse_keyval", "	Parses a string containing a keyword=value pair.    ", "_keyval	String of the form <keyword>=<value>.   keywordvalue", "NV/SYS", " 	Written by:	Spitale   	keyword:	String giving the keyword.  	value:		String giving the value.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_parse_keyvals.html", "dat_parse_keyvals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_parse_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_parse_keyvals.html#dat_parse_keyvals", "dat_parse_keyvals", 'routine in <a href="./dat_parse_keyvals.html">dat_parse_keyvals.pro</a>', "dat_parse_keyvals.pro", "", "dat_parse_keyvals", "	Parses an array strings containing keyword=value pairs.    ", "keywordskeyvalsArray of strings of the form <keyword>=<value>.   ", "NV/SYS", " 	Written by:	Spitale   	Array of type keyval_struct containing the parsed keywords 	and values.  One element per input array element.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_parse_transient_keyvals.html", "dat_parse_transient_keyvals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_parse_transient_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_parse_transient_keyvals.html#dat_parse_transient_keyvals", "dat_parse_transient_keyvals", 'routine in <a href="./dat_parse_transient_keyvals.html">dat_parse_transient_keyvals.pro</a>', "dat_parse_transient_keyvals.pro", "", "dat_parse_transient_keyvals", "	Parses a comma-delimited transient argument string into an of array 	of strings containing keyword=value pairs.    ", "trsTransient argument string.   ", "NV/SYS", " 	Written by:	Spitale   	Array of strings containing keyword=value pairs.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_put_value.html", "dat_put_value.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_put_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_put_value.html#dat_put_value", "dat_put_value", 'routine in <a href="./dat_put_value.html">dat_put_value.pro</a>', "dat_put_value.pro", "", "dat_put_value", "	Calls output translators, supplying the given keyword and value.    ", "trsstatusdd	Data descriptor.   keywordKeyword to pass to translators, describing the 			requested quantity.   value	Value to write through the translators.   @nv_trs_keywords_include.pro", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	status:		0 if at least one translator call was successful, 			-1 otherwise.    ");
  
  

libdata[libdataItem++] = new Array("./dat_read.html", "dat_read.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_read.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_read.html#dat_read", "dat_read", 'routine in <a href="./dat_read.html">dat_read.pro</a>', "dat_read.pro", "", "dat_read", "	Reads a data file of arbitrary format and produces a data descriptor.    	Under unix, the IDL findfile routine does not expand the ~ symbol, 	but openr does.  In order to salvage some functionality, dat_read 	allows filespecs to pass even if they don't expand to anything using 	findfile.  In this way, a filespec contianing ~ can be properly 	expanded, but only if it expands to one filename.  If it expands 	to multiple filenames, then openr will choke on it.    	dat_read expands all file specifications and then attempts to detect 	the filetype for each resulting filename using the filetype detectors 	table.  If a filetype is detected, dat_read looks up the I/O functions 	and calls the input function to read the file.  Finally, it calls 	nv_init_descriptor to obtain a data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_write    ", "filetypeinput_fnoutput_fnkeyword_fninstrumentinput_translatorsoutput_translatorsinput_transformsoutput_transformstab_translatorsmaintaincompresssilentsamplenodatanamenhistextensionsfilespecArray of strings giving file specifications for 			file to read.   dataheader", "NV/SYS", " 	Written by:	Spitale, 2/1998   	Array of data descriptors - one for each file resulting from the 	expansion of the given file specifications.    ");
  
  

libdata[libdataItem++] = new Array("./dat_read_config.html", "dat_read_config.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_read_config.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_read_config.html#dat_read_config", "dat_read_config", 'routine in <a href="./dat_read_config.html">dat_read_config.pro</a>', "dat_read_config.pro", "", "dat_read_config", "	Reads an NV configuration table.    ", "continueenvName of an environment variable giving the names of the 		configuration files to read, delimited by ':'.   table_pfilenames_p", "NV/SYS", " 	Written by:	Spitale   	table_p:	Pointer to the configuration table contructed by 			concatenating the contents of each file.  	filenames_p:	List of configuration filenames that were read.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_replicate.html", "dat_replicate.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_replicate.html#dat_replicate", "dat_replicate", 'routine in <a href="./dat_replicate.html">dat_replicate.pro</a>', "dat_replicate.pro", "", "dat_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "fndd Data deccriptor to replicate.   dim Dimensions of the result.   ", "NV/LIB/BOD", " 	Written by:	Spitale   	Array of the given dimensions containing cloned versions of the input 	data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_sampling_fn.html", "dat_sampling_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_sampling_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_sampling_fn.html#dat_sampling_fn", "dat_sampling_fn", 'routine in <a href="./dat_sampling_fn.html">dat_sampling_fn.pro</a>', "dat_sampling_fn.pro", "", "dat_sampling_fn", "	Returns the sampling function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The sampling_fn associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_sampling_fn    ");
  
  

libdata[libdataItem++] = new Array("./dat_sampling_fn_data.html", "dat_sampling_fn_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_sampling_fn_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_sampling_fn_data.html#dat_sampling_fn_data", "dat_sampling_fn_data", 'routine in <a href="./dat_sampling_fn_data.html">dat_sampling_fn_data.pro</a>', "dat_sampling_fn_data.pro", "", "dat_sampling_fn_data", "	Returns the sampling function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The sampling_fn_data associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_sampling_fn_data    ");
  
  

libdata[libdataItem++] = new Array("./dat_set_compress.html", "dat_set_compress.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_compress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_compress.html#dat_set_compress", "dat_set_compress", 'routine in <a href="./dat_set_compress.html">dat_set_compress.pro</a>', "dat_set_compress.pro", "", "dat_set_compress", "	Replaces the name of the compression function in a data descriptor.    ", "dd	Data descriptor.   compressString giving the name of a new compression function.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_set_data.html", "dat_set_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_data.html#dat_set_data", "dat_set_data", 'routine in <a href="./dat_set_data.html">dat_set_data.pro</a>', "dat_set_data.pro", "", "dat_set_data", "	Replaces the data array associated with a data descriptor.    ", "silentupdatenoeventddData descriptor.   _dataNew data array.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_set_dim_fn.html", "dat_set_dim_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_dim_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_dim_fn.html#dat_set_dim_fn", "dat_set_dim_fn", 'routine in <a href="./dat_set_dim_fn.html">dat_set_dim_fn.pro</a>', "dat_set_dim_fn.pro", "", "dat_set_dim_fn", "	Replaces the dimension function associated with a data descriptor.    ", "noeventdd	Data descriptor.   dim_fnNew sampling function.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_set_dim_fn_data.html", "dat_set_dim_fn_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_dim_fn_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_dim_fn_data.html#dat_set_dim_fn_data", "dat_set_dim_fn_data", 'routine in <a href="./dat_set_dim_fn_data.html">dat_set_dim_fn_data.pro</a>', "dat_set_dim_fn_data.pro", "", "dat_set_dim_fn_data", "	Replaces the dimension function data associated with a data descriptor.    ", "noeventdd		Data descriptor.   dim_fn_dataNew sampling function data.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_set_header.html", "dat_set_header.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_header.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_header.html#dat_set_header", "dat_set_header", 'routine in <a href="./dat_set_header.html">dat_set_header.pro</a>', "dat_set_header.pro", "", "dat_set_header", "	Replaces the header array associated with a data descriptor.    ", "silentupdatenoeventddData descriptor.   headerNew header array.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_set_maintain.html", "dat_set_maintain.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_maintain.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_maintain.html#dat_set_maintain", "dat_set_maintain", 'routine in <a href="./dat_set_maintain.html">dat_set_maintain.pro</a>', "dat_set_maintain.pro", "", "dat_set_maintain", "	Replaces the maintain flag in a data descriptor.    ", "noeventdd	Data descriptor.   maintainNew maintain flag.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_set_max.html", "dat_set_max.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_max.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_max.html#dat_set_max", "dat_set_max", 'routine in <a href="./dat_set_max.html">dat_set_max.pro</a>', "dat_set_max.pro", "", "dat_set_max", "	Replaces the max value in a data descriptor.    ", "noeventdd	Data descriptor.   maxNew max value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_set_min.html", "dat_set_min.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_min.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_min.html#dat_set_min", "dat_set_min", 'routine in <a href="./dat_set_min.html">dat_set_min.pro</a>', "dat_set_min.pro", "", "dat_set_min", "	Replaces the min value in a data descriptor.    ", "noeventdd	Data descriptor.   minNew min value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_set_ndd.html", "dat_set_ndd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_ndd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_ndd.html#dat_set_ndd", "dat_set_ndd", 'routine in <a href="./dat_set_ndd.html">dat_set_ndd.pro</a>', "dat_set_ndd.pro", "", "dat_set_ndd", "	Sets a new ndd value in the NV state structure.    ", "nddNew ndd value.   ", "NV/SYS", " 	Written by:	Spitale, 1998   ");
  
  

libdata[libdataItem++] = new Array("./dat_set_nhist.html", "dat_set_nhist.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_nhist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_nhist.html#dat_set_nhist", "dat_set_nhist", 'routine in <a href="./dat_set_nhist.html">dat_set_nhist.pro</a>', "dat_set_nhist.pro", "", "dat_set_nhist", "	Changes the number of past states archived in a data descriptor.    ", "noeventddData descriptor.   nhistNew nhist value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_set_sampling_fn.html", "dat_set_sampling_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_sampling_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_sampling_fn.html#dat_set_sampling_fn", "dat_set_sampling_fn", 'routine in <a href="./dat_set_sampling_fn.html">dat_set_sampling_fn.pro</a>', "dat_set_sampling_fn.pro", "", "dat_set_sampling_fn", "	Replaces the sampling function associated with a data descriptor.    ", "noeventdd	Data descriptor.   sampling_fnNew sampling function.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_set_sampling_fn_data.html", "dat_set_sampling_fn_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_sampling_fn_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_sampling_fn_data.html#dat_set_sampling_fn_data", "dat_set_sampling_fn_data", 'routine in <a href="./dat_set_sampling_fn_data.html">dat_set_sampling_fn_data.pro</a>', "dat_set_sampling_fn_data.pro", "", "dat_set_sampling_fn_data", "	Replaces the sampling function data associated with a data descriptor.    ", "noeventdd		Data descriptor.   sampling_fn_dataNew sampling function data.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    KEYWORDS:  ");
  
  

libdata[libdataItem++] = new Array("./dat_set_sibling.html", "dat_set_sibling.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_sibling.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_sibling.html#dat_set_sibling", "dat_set_sibling", 'routine in <a href="./dat_set_sibling.html">dat_set_sibling.pro</a>', "dat_set_sibling.pro", "", "dat_set_sibling", "	Changes the sibling in a data descriptor.    ", "noeventdd	Data descriptor.   dd_siblingData descriptor of new sibling.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_set_update.html", "dat_set_update.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_update.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_update.html#dat_set_update", "dat_set_update", 'routine in <a href="./dat_set_update.html">dat_set_update.pro</a>', "dat_set_update.pro", "", "dat_set_update", "	Changes the update flag in a data descriptor.    ", "noeventddData descriptor.   updateNew update flag.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_sibling.html", "dat_sibling.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_sibling.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_sibling.html#dat_sibling", "dat_sibling", 'routine in <a href="./dat_sibling.html">dat_sibling.pro</a>', "dat_sibling.pro", "", "dat_sibling", "	Returns the sibling data descriptor associated with a data 	descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Data descriptor of the sibling.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_test_dd.html", "dat_test_dd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_test_dd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_test_dd.html#dat_test_dd", "dat_test_dd", 'routine in <a href="./dat_test_dd.html">dat_test_dd.pro</a>', "dat_test_dd.pro", "", "dat_test_dd", "	Determines whether the argument is a valid data descriptor.    ", "noeventddData descriptor to test.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	True if the argument is present, is a valid pointer, and 	points to a data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_type.html", "dat_type.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_type.html#dat_type", "dat_type", 'routine in <a href="./dat_type.html">dat_type.pro</a>', "dat_type.pro", "", "dat_type", "	Returns the type code associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Integer giving the type.    STATUS: 	This data descriptor functonality is not complete.  A 'type' field  	needs to be added to the input functions similar to the 'dim' field. 	Then dat_read would include that argument in its call to input_fn and 	it should work.    ");
  
  

libdata[libdataItem++] = new Array("./dat_uncompress_data_mask.html", "dat_uncompress_data_mask.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_uncompress_data_mask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_uncompress_data_mask.html#dat_uncompress_data_mask", "dat_uncompress_data_mask", 'routine in <a href="./dat_uncompress_data_mask.html">dat_uncompress_data_mask.pro</a>', "dat_uncompress_data_mask.pro", "", "dat_uncompress_data_mask", "", "_ddcdata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_undo.html", "dat_undo.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_undo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_undo.html#dat_undo", "dat_undo", 'routine in <a href="./dat_undo.html">dat_undo.pro</a>', "dat_undo.pro", "", "dat_undo", "	Increments the data archive index in the data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_unload_data.html", "dat_unload_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_unload_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_unload_data.html#dat_unload_data", "dat_unload_data", 'routine in <a href="./dat_unload_data.html">dat_unload_data.pro</a>', "dat_unload_data.pro", "", "dat_unload_data", "	Unloads the dat descriptor data array and removes dd from the NV 	state maintained list if present.    ", "allddData descriptor to test.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./dat_update.html", "dat_update.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_update.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_update.html#dat_update", "dat_update", 'routine in <a href="./dat_update.html">dat_update.pro</a>', "dat_update.pro", "", "dat_update", "	Returns the update flag associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Data descriptor update flag.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_valid_descriptor.html", "dat_valid_descriptor.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_valid_descriptor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_valid_descriptor.html#dat_valid_descriptor", "dat_valid_descriptor", 'routine in <a href="./dat_valid_descriptor.html">dat_valid_descriptor.pro</a>', "dat_valid_descriptor.pro", "", "dat_valid_descriptor", "	Determines whether the argument is a valid data descriptor, 	or data descriptor structure.    ", "ddp", "NV/SYS", " 	Written by:	Spitale   	True if the argument is a data descriptor structure or a 	pointer to one.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./dat_write.html", "dat_write.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_write.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_write.html#dat_write", "dat_write", 'routine in <a href="./dat_write.html">dat_write.pro</a>', "dat_write.pro", "", "dat_write", "	Writes a data file of arbitrary format.    	Under unix, the IDL findfile routine does not expand the ~ symbol, 	but openr does.  In order to salvage some functionality, dat_read 	allows filespecs to pass even if they don't expand to anything using 	findfile.  In this way, a filespec contianing ~ can be properly 	expanded, but only if it expands to one filename.  If it expands 	to multiple filenames, then openr will choke on it.    	dat_write expands all file specifications and attempts to write a 	file corresponding to each given data descriptor.  An error results 	if the filespec expands to a different number of files than the number 	of given data descriptors.    STATUS: 	Complete    SEE ALSO: 	dat_read    ", "nodatafiletypeoutput_fnverbosefilespecArray of strings giving file specifications for 			file to write.   dd	Array of data descriptors.   ", "NV/SYS", " 	Written by:	Spitale, 7/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./keyval_struct__define.html", "keyval_struct__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "keyval_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./keyval_struct__define.html#keyval_struct__define", "keyval_struct__define", 'routine in <a href="./keyval_struct__define.html">keyval_struct__define.pro</a>', "keyval_struct__define.pro", "", "keyval_struct__define", "	Structure defining a keyword/value pair.    ", "", "NV/SYS", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("./ominas_data__define.html", "ominas_data__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "ominas_data__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./ominas_data__define.html#ominas_data::init", "ominas_data::init", 'routine in <a href="./ominas_data__define.html">ominas_data__define.pro</a>', "ominas_data__define.pro", "", "ominas_data::init", "", "crdddii@data__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("./ominas_data__define.html#ominas_data__define", "ominas_data__define", 'routine in <a href="./ominas_data__define.html">ominas_data__define.pro</a>', "ominas_data__define.pro", "", "ominas_data__define", "	Structure defining the data descriptor.    ", "", "NV/SYS", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("./tr_keyword_value.html", "tr_keyword_value.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "tr_keyword_value.pro", "", "", "	Looks up a keyword in the data descriptor stored keyword/value pairs.    ", "", "          -1", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("./tr_keyword_value.html#trkv_match", "trkv_match", 'routine in <a href="./tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "trkv_match", "", "valuekvikeyword", "          -1", "");
  
  libdata[libdataItem++] = new Array("./tr_keyword_value.html#trkv_parse", "trkv_parse", 'routine in <a href="./tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "trkv_parse", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("./tr_keyword_value.html#tr_keyword_value", "tr_keyword_value", 'routine in <a href="./tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "tr_keyword_value", "", "ddkeyword", "          -1", "");
  
  

