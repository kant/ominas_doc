/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "OMINAS API Documentation";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("const/compile_const.html", "compile_const.pro", '.pro file in <a href="const/dir-overview.html">const/ directory</a>', "compile_const.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("sub/compile_sub.html", "compile_sub.pro", '.pro file in <a href="sub/dir-overview.html">sub/ directory</a>', "compile_sub.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("const/doc_const.html", "doc_const.pro", '.pro file in <a href="const/dir-overview.html">const/ directory</a>', "doc_const.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./doc_pg.html", "doc_pg.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "doc_pg.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("sub/doc_sub.html", "doc_sub.pro", '.pro file in <a href="sub/dir-overview.html">sub/ directory</a>', "doc_sub.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("const/mks_const.html", "mks_const.pro", '.pro file in <a href="const/dir-overview.html">const/ directory</a>', "mks_const.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("const/mks_const.html#mks_const", "mks_const", 'routine in <a href="const/mks_const.html">mks_const.pro</a>', "mks_const.pro", "", "mks_const", "", "name", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_array.html", "pg_array.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_array.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_array.html#pg_array", "pg_array", 'routine in <a href="./pg_array.html">pg_array.pro</a>', "pg_array.pro", "", "pg_array", "	Computes image points for given array descriptors.    ", "cdArray (n_timesteps) of camera descriptors.   ardArray (n_objects, n_timesteps) of descriptors of objects 		that must be a subclass of array.   gbxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of GLOBE.   dkxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of DISK.   bxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of BODY, instead of gbx or dkx.   gdGeneric descriptor.  If given, the cd and gbx inputs 		are taken from the cd and gbx fields of this structure 		instead of from those keywords.   fov If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.    ", "NV/PG", " 	Written by:	Spitale, 10/2012   	Array (n_objects) of objects containing image points and 	the corresponding inertial vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_bad_data.html", "pg_bad_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_bad_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_bad_data.html#pg_bad_data", "pg_bad_data", 'routine in <a href="./pg_bad_data.html">pg_bad_data.pro</a>', "pg_bad_data.pro", "", "pg_bad_data", "	Locates areas of bad data values like saturation and dropouts.    ", "dropoutValue to use for dropouts.  Default is 0   sat	If given, value above which to flag as saturated, 			inclusive.   mask	Byte image of the same size as the input image 			in which nonzero pixel values indicate locations 			where problems should not be flagged.   extend	Number of pixels away from masked pixels before 			locations may be flagged as spikes.   edge	Regions closer than this to the edge of the image 			will be ignored.  Default is 0.   subscriptsSubscript of each bad point.    dd	Data descriptor containing the image to be despiked.   ", "NV/PG", " 	Written by:	Spitale, 7/2013   	POINT objects containing the detected bad points.    STATUS: 	Complete    SEE ALSO: 	pg_spikes    ");
  
  

libdata[libdataItem++] = new Array("./pg_blemish.html", "pg_blemish.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_blemish.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_blemish.html#pg_blemish", "pg_blemish", 'routine in <a href="./pg_blemish.html">pg_blemish.pro</a>', "pg_blemish.pro", "", "pg_blemish", "	Removes blemishes from an image using interpolation.    	Blemishes are modeled as ellipses.  Pixels interior to the ellipse 	are interpolated from those on the boundary.    STATUS: 	Complete    SEE ALSO: 	pg_resloc, pg_linearize_image, pg_resfit    ", "a	Semimajor axis of elliptical blemish model.  Default is 			5 pixels.   b	Semiminor axis of elliptical blemish model.  Default is 			5 pixels.   h	Angle of rotation (in radians) of smimajor axis from 			horizontal.  Default is 0.   image	The corrected image.    show	If set, the outlines of the blemishes are plotted on 			the current graphics window.   dd	Data descriptor containing the image to be corrected.   blem_ptdPOINT object containing the known image 			coordinates of the blemishes.  If an array of 			objects is given, then the operation is 			performed repeatedly using each set of blemish 			coordinates.  			This argument can also be specified directly as an 			array of image points.   nom_ptd", "NV/PG", " 	Written by:	Spitale, 5/2002   	Data descriptor containing the corrected image.    ");
  
  

libdata[libdataItem++] = new Array("./pg_center.html", "pg_center.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_center.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_center.html#pg_center", "pg_center", 'routine in <a href="./pg_center.html">pg_center.pro</a>', "pg_center.pro", "", "pg_center", "	Computes image coordinates of the center of each object.    ", "cdArray (n_timesteps) of camera descriptors.   bxArray (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   gdGeneric descriptor.  If given, the cd and bx inputs 		are taken from the cd and bx fields of this structure 		instead of from those keywords.   fov If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	Array (n_objects) of POINT objets containing image points and 	the corresponding inertial vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_chisq.html", "pg_chisq.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_chisq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_chisq.html#pg_chisq", "pg_chisq", 'routine in <a href="./pg_chisq.html">pg_chisq.pro</a>', "pg_chisq.pro", "", "pg_chisq", "	Computes chi-squared value for given curve- or point-fit parameters.    ", "axis_ptdPOINT object containing a single image point 			to be used as the axis of rotation.   fix	Array specifying which parameters to fix as 			[dx,dy,dtheta].   dxy	2-element vector giving the translation as [dx,dy].   dtheta	Rotation in radians.   scan_ptdArray (n_curves) of POINT objects output from 			pg_cvscan or pg_ptscan containing scan data.   ", "NV/PG", " 	Written by:	Spitale, 10/2002   	Normalized chi-square value.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, 	pg_ptchisq, pg_fit, pg_threshold    ");
  
  

libdata[libdataItem++] = new Array("./pg_cntrd.html", "pg_cntrd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_cntrd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_cntrd.html#pg_cntrd", "pg_cntrd", 'routine in <a href="./pg_cntrd.html">pg_cntrd.pro</a>', "pg_cntrd.pro", "", "pg_cntrd", "	Calculates the centroids centered near given features in 	an image.    	Currently does not work for multiple time steps.    	For each visible object, a centroid is calcualted using the 	astronlib cntrd routine.    SEE ALSO: 	ptscan, pg_ptscan, pg_ptcntrd   STATUS: 	Complete.    ", "fwhm          Full-Width Half-maximum to use around expected point                        location.  If not given, a default fwhm of 2 pixels                        is used.   edge          Distance from edge from which to ignore points.  If                        not given, an edge distance of 0 is used.   sigmin          If given, points are discarded if the sigma above                        the mean for the centroid pixel is below this value.    dd	Data descriptor   object_ptd	Array (n_pts) of POINT objects giving the points. 			Only the image coordinates of the points need to be 			specified.   ", "NV/PG", " 	Written by:	Haemmerle, 2/1999   	An array of type POINT objects giving the detected position for        each object.  The max values for each detection is        saved in the data portion of object with tag 'scan_cc'.        The x and y offset from the given position is also saved.    ");
  
  

libdata[libdataItem++] = new Array("./pg_coadd.html", "pg_coadd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_coadd.pro", "", "", "	Averages the given images and geometries.    ", "", "          -1", " 	Written by:	Spitale, 4/2014   ");
  
  
  libdata[libdataItem++] = new Array("./pg_coadd.html#pgc_compute_average", "pgc_compute_average", 'routine in <a href="./pg_coadd.html">pg_coadd.pro</a>', "pg_coadd.pro", "", "pgc_compute_average", "", "dd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_coadd.html#pgc_compute_median", "pgc_compute_median", 'routine in <a href="./pg_coadd.html">pg_coadd.pro</a>', "pg_coadd.pro", "", "pgc_compute_median", "", "dd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_coadd.html#pgc_compute_minimum", "pgc_compute_minimum", 'routine in <a href="./pg_coadd.html">pg_coadd.pro</a>', "pg_coadd.pro", "", "pgc_compute_minimum", "", "dd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_coadd.html#pgc_compute_maximum", "pgc_compute_maximum", 'routine in <a href="./pg_coadd.html">pg_coadd.pro</a>', "pg_coadd.pro", "", "pgc_compute_maximum", "", "dd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_coadd.html#pg_coadd", "pg_coadd", 'routine in <a href="./pg_coadd.html">pg_coadd.pro</a>', "pg_coadd.pro", "", "pg_coadd", "", "cdbxgdmedianminimummaximumalgorithmddbx0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_coregister.html", "pg_coregister.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_coregister.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_coregister.html#pg_coregister", "pg_coregister", 'routine in <a href="./pg_coregister.html">pg_coregister.pro</a>', "pg_coregister.pro", "", "pg_coregister", "	Using the given geometry information, shifts the given images so as 	to center the given bodies at the same pixel in each image, or aligns 	images based on pointing.    	The given data and camera descriptors are modified: the images are 	shifted and the camera descriptor optic axes are changed accordingly.    STATUS: 	Complete    ", "cdArray of camera descripors, one for each input image.   bxArray of descriptors of any superclass of BODY, one for each 		input image.   gdGeneric descriptor containing the camera and body 		descriptors or an array of generic descriptors, one for each 		input image.   shiftOffset applied to each image.    centerImage coordinates at which to center each body.  By default, 		the average center among all the bodies is used.  If this input 		contains a single element, it is taken as the index of the 		input image to use as the reference.   pArray (1,3) giving surface coordinates at which to center 		each body.   xshiftAdditional image offset by which to shift each image.   wrapIf set shifted pixels are wrapped to the opposite side 		of the image.   subpixelBy default, each image is shifted by an integer number of 		  pixels in each direction. If this keyword is set, the 		  image is interpolated onto a new pixel grid such that the 		  sub-pixel shift is obtained.  (Not currently implemented)   no_shiftddArray of data descriptors giving images to shift.   ", "NV/PG", " 	Written by:	Spitale, 11/2002   ");
  
  

libdata[libdataItem++] = new Array("./pg_covariance.html", "pg_covariance.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_covariance.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_covariance.html#pg_covariance", "pg_covariance", 'routine in <a href="./pg_covariance.html">pg_covariance.pro</a>', "pg_covariance.pro", "", "pg_covariance", "	Computes a covariance matrix for the least-square fit specified by the 	input scan coefficients.    	It is the caller's responsibility to ensure that all of the input 	coefficients were computed using with the same set of fixed parameters.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_ptscan, pg_ptscan_coeff, 	pg_cvchisq, pg_ptchisq, pg_threshold    ", "statuscfArray of pg_fit_coeff_struct as produced by pg_cvscan_coeff or 		pg_ptscan_coeff.   ", "NV/PG", " 	Written by:	Spitale, 9/2002   	Covariance matrix.  The diagonal elements are the variances in each fit 	parameter, the off-diagonal elements are the covariances.    ");
  
  

libdata[libdataItem++] = new Array("./pg_crop.html", "pg_crop.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_crop.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_crop.html#pg_crop", "pg_crop", 'routine in <a href="./pg_crop.html">pg_crop.pro</a>', "pg_crop.pro", "", "pg_crop", "       Crops an image and modifies that camera descriptor accordingly.    ", "cdThe optic axis of the camera descriptor is modified to 		correspond to the corrected image.   gd    Generic descriptor to use instead of cd.   imageThe cropped image    cropdd       Data descriptor containing the image to be cropped.   corner_ptdPOINT object containing 2 points, giving the corners 		    for cropping.  May also be an array of 2 image points.   ", "NV/PG", "       Written by:     Spitale; 6/2005   	pg_crop, dd, cd=cd, [[100,200], [800,900]], im=im    STATUS:        Complete.    NOTES: 	This routine should be modified to work with map descriptors as well.        NONE    ");
  
  

libdata[libdataItem++] = new Array("./pg_crop_points.html", "pg_crop_points.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_crop_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_crop_points.html#pg_crop_points", "pg_crop_points", 'routine in <a href="./pg_crop_points.html">pg_crop_points.pro</a>', "pg_crop_points.pro", "", "pg_crop_points", "	Hides image points that lie outside the field of view.    	The given POINT object is modified.    STATUS: 	xx    ", "cdCamera descriptor, used to determine image dimenesions.   slopNumber of pixels outside image to include.  Defautl is 1.   indicesIndices of retained points.    ptdPOINT object containing points to be cropped.   ", "NV/PG", " 	Written by:	Spitale; 5/2005   	NONE    ");
  
  

libdata[libdataItem++] = new Array("./pg_cursor.html", "pg_cursor.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_cursor.pro", "", "", "	Allows the user to obtain information about image pixels selected 	using the mouse in the current graphics window.    ", "", "          -1", " 	Written by:	Spitale, 3/2002   ");
  
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_xy", "_pgc_xy", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_xy", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_dn", "_pgc_dn", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_dn", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_star", "_pgc_star", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_star", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_radec", "_pgc_radec", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_radec", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_globe", "_pgc_globe", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_globe", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_map", "_pgc_map", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_map", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_disk", "_pgc_disk", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_disk", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_disk_scale", "_pgc_disk_scale", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_disk_scale", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_eqplane", "_pgc_eqplane", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_eqplane", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_eqplane_scale", "_pgc_eqplane_scale", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_eqplane_scale", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_photom_globe", "_pgc_photom_globe", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_photom_globe", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_photom_disk", "_pgc_photom_disk", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_photom_disk", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#_pgc_photom_eqplane", "_pgc_photom_eqplane", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_photom_eqplane", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#pgc_table", "pgc_table", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "pgc_table", "", "label_padvalue_padnamename_pvalue_plabel_pformat_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_cursor.html#pg_cursor", "pg_cursor", 'routine in <a href="./pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "pg_cursor", "", "cdgbxdkxsundsdgdfnradecphotomxystringsilentvaluesddptd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_cusps.html", "pg_cusps.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_cusps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_cusps.html#pg_cusps", "pg_cusps", 'routine in <a href="./pg_cusps.html">pg_cusps.pro</a>', "pg_cusps.pro", "", "pg_cusps", "	Computes image points at the limb/terminator cusps for each given 	globe object.    	This program uses an iterative scheme to find the two points on 	the surface of the globe where the surface normal is simultaneously 	perpendicular to the vectors from the camera and the Sun.     STATUS: 	Complete    ", "cd Array (n_timesteps) of camera descriptors.   od Array (n_timesteps) of descriptors for the observer, 		 default is the sun is gd given.   gbx Array (n_objects, n_timesteps) of descriptors of objects 		 which must be a subclass of GLOBE.   gd Generic descriptor.  If given, the cd, od, and gbx inputs 		 are taken from this structure instead of from those keywords.   epsilonMaximum angular error in the result.  Default is 1e-3.   reveal Normally, points computed for objects whose opaque flag 		 is set are made invisible.  /reveal suppresses this behavior.    ", "NV/PG", " 	Written by:	Spitale, 12/2010   	Array (n_objects) of POINT objects containing image 	points and the corresponding inertial vectors.    ");
  
  

libdata[libdataItem++] = new Array("./pg_cvchisq.html", "pg_cvchisq.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_cvchisq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_cvchisq.html#pg_cvchisq", "pg_cvchisq", 'routine in <a href="./pg_cvchisq.html">pg_cvchisq.pro</a>', "pg_cvchisq.pro", "", "pg_cvchisq", "	Computes chi-squared value for given curve fit parameters.    	The caller is responsible for ensuring that the input parameters are 	consistent with those used with other programs like pg_fit.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, 	pg_ptchisq, pg_fit, pg_threshold    ", "axis_ptdPOINT containing a single image  point 			to be used as the axis of rotation.   fix	Array specifying which parameters to fix as 			[dx,dy,dtheta].   dxy	2-element vector giving the translation as [dx,dy].   dtheta	Rotation in radians.   scan_ptdArray (n_curves) of POINT output from 			pg_cvscan containing scanned image points as well as 			other necessary scan data.   ", "NV/PG", " 	Written by:	Spitale, 6/1998   	Chi-square value.    ");
  
  

libdata[libdataItem++] = new Array("./pg_cvscan.html", "pg_cvscan.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_cvscan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_cvscan.html#pg_cvscan", "pg_cvscan", 'routine in <a href="./pg_cvscan.html">pg_cvscan.pro</a>', "pg_cvscan.pro", "", "pg_cvscan", "	Attempts to find points of highest correlation with a given model along 	curves in an image.    	Currently does not work for multiple time steps.    	Normal sines and cosines are computed using icv_compute_directions. 	These directions are input to icv_strip_curve along with the image 	in order to extract an image strip to be scanned.  icv_scan_strip is 	then used to find the optimum scan offsets and icv_convert_scan_offsets 	is used to obtain image coordinates corresponding to each scan offset. 	See the documentation for each of those routines for more details.    ", "algorithmName of alrogithm to use to detect the edge. 			Choices are 'MODEL', 'GRAD', and 'HALF'. 			Default is 'MODEL'.   cdbxgdmodel_pArray (n_curves) of pointers to model arrays.  Each 			model array has dimensions (n_points,nm), where n_points 			is the number of points in the curve and nm is the 			number of points in the model.  Thus, a model may be 			specified for each point on the curve.  Default 			model is edge_model_atan().   mzero	Array (n_curves) or (n_curves,n_points) of zero-point 			offsets for each model in model_p.  mzero must be 			specified if model_p is given.   dir	If given the scan will be performed in this direction 			instead of normal to the curve.  Must be a 2-element 			unit vector.   width	Number of pixels to scan on either side of the curve. 			Default is 20.   edge	Distance from the edge of the image within which 			curve points will not be scanned.  Default is 0.   arg	Argument passed to the edge detection routine. 			For the GRAD algorithm, this argument specifies 			whether each edge is interior (arg=1) or 			exterior (arg=0).   scan_ptdIf given, these previously scanned points are updated 			to be consistent with the given data points.  The image 			is not scanned.   dd	Data descriptor   object_ptd", "NV/PG", " 	Written by:	Spitale, 2/1998   	The following command scans for a limb in the image contained in the 	given data descriptor, dd:  	scan_ptd = pg_cvscan(dd, limb_ptd, width=40, edge=20)  	In this call, limb_ptd is a POINT containing computed limb 	points.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, pg_ptchisq, 	pg_fit, pg_threshold 	Array (n_curves) of POINT objects containing resulting image points, 	as well as additional scan data to be used by pg_cvscan_coeff and 	possibly other programs.  The scan data is as follows:  		 tag			 description 	 	-----			------------- 		scan_cos		Cosine of normal at each point. 		scan_sin		Sine of normal at each point. 		scan_offsets		Raw offsets from computed curve. 		scan_cc			Correlation coefficient for each scanned 					point. 		scan_sigma		Scan offset uncertainties. 		scan_model_xpts		Model points corresponding to each 		scan_model_ypts		 scanned point    ");
  
  

libdata[libdataItem++] = new Array("./pg_cvscan_coeff.html", "pg_cvscan_coeff.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_cvscan_coeff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_cvscan_coeff.html#pg_cvscan_coeff", "pg_cvscan_coeff", 'routine in <a href="./pg_cvscan_coeff.html">pg_cvscan_coeff.pro</a>', "pg_cvscan_coeff.pro", "", "pg_cvscan_coeff", "	Computes linear least-squares coefficients for a fit to the image 	coordinate translation and rotation that matches a computed curve to 	a scanned curve in an image.    	Currently does not work for multiple time steps.    	pg_cvscan_coeff extracts the scan data from the given 	scan_ptd structure and uses icv_coeff to compute the coefficients. 	See the documentation for that routine for details.    ", "axis_ptdPOINT containing a single image  point 			to be used as the axis of rotation in the fit for 			every curve.   fix	Array specifying which parameters to fix in the 			fit as [dx,dy,dtheta].   scan_ptdArray (n_curves) of POINT output from 			pg_cvscan containing scanned image points as well as 			other necessary scan data.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	The following command uses scan data from pg_cvscan to compute 	least square coefficients for a fit such that only dx and dtheta 	will be allowed to vary:  	cvscan_cf = pg_cvscan_coeff(scan_ptd, axis=center_ptd, fix=[1])  	In this call, scan_ptd is a POINT containing the scan data 	from pg_cvscan and center_ptd is a POINT giving the center 	of the planet as computed by pg_center.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, pg_ptchisq, 	pg_fit, pg_threshold 	Array (n_curves) of pg_fit_coeff_struct containing coefficients for 	the least-square fit to be input to pg_fit.    ");
  
  

libdata[libdataItem++] = new Array("./pg_data_adjust.html", "pg_data_adjust.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_data_adjust.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_data_adjust.html#pg_data_adjust", "pg_data_adjust", 'routine in <a href="./pg_data_adjust.html">pg_data_adjust.pro</a>', "pg_data_adjust.pro", "", "pg_data_adjust", "	Allows the user to adjust data values using the mouse.  A rectangle 	is selected height (positve or negative) gives the data value adjustment. 	Works for 1-D or 2_d data sets.   ", "ddData descriptor.   ", "NV/PG", "      NONE    ORIGINAL AUTHOR : J. Spitale ; 2/2014   ");
  
  

libdata[libdataItem++] = new Array("./pg_despike.html", "pg_despike.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_despike.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_despike.html#pg_despike", "pg_despike", 'routine in <a href="./pg_despike.html">pg_despike.pro</a>', "pg_despike.pro", "", "pg_despike", "	Removes previously-located spurious features like cosmic-ray hits.    	pg_despike replaces the values of the desired pixels with those 	computed by smoothing the input image using a box filter of size 	'scale' repeatedly, 'n' times.    STATUS: 	Complete.    SEE ALSO: 	pg_spikes    ", "image	The corrected image.    scale	Typical size of features to be removed.  Default 			is 10.  	n=n:		Number of timers to repeat the box filter.  Default 			is 5.   nnoclonedd	Data descriptor containing the image to be despiked.   spike_ptdPOINT specifying the points to replace; 			typically computed by pg_spikes.   ", "NV/PG", " 	Written by:	Spitale, 2/2004   	Data descriptor containing the corrected image.  If /noclone 	is not set, set input data descriptor is modified.    ");
  
  

libdata[libdataItem++] = new Array("./pg_disk.html", "pg_disk.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_disk.html#pg_disk", "pg_disk", 'routine in <a href="./pg_disk.html">pg_disk.pro</a>', "pg_disk.pro", "", "pg_disk", "	Computes image points on the inner and outer edges of each given disk 	object at all given time steps.    ", "cd Array (n_timesteps) of camera descriptors.   dkx Array (n_objects, n_timesteps) of descriptors of objects 		 which must be a subclass of DISK.   gd Generic descriptor.  If given, the descriptor inputs 		 are taken from the this structure.  	inner/outer: If either of these keywords are set, then only 	             that edge is computed.   fov If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   innerouternpointsNumber of points to compute around each edge.  Default is 		 1000.   reveal Normally, points computed for objects whose opaque flag 		 is set are made invisible.  /reveal suppresses this behavior.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	Array (2*n_objects) of POINT containing image points and 	the corresponding inertial vectors.  The output array is arranged as 	[inner, outer, inner, outer, ...] in the order that the disk 	descriptors are given in the dkx argument.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_drag.html", "pg_drag.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_drag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_drag.html#pg_drag", "pg_drag", 'routine in <a href="./pg_drag.html">pg_drag.pro</a>', "pg_drag.pro", "", "pg_drag", "	Allows the user to graphically translate and rotate an array of points 	using the mouse.    	cursor_move is used to perfform the drag.  See that routine for more 	detail.    STATUS: 	Complete    SEE ALSO: 	pg_move    ", "drawxor_graphicsIf set, grahics are drawn using the XOR function.   dtheta	Dragged rotation in radians.    axis_ptdPOINT containing a single image point 			to be used as the axis of rotation.   sample	Sampling interval for drag graphics.  The input 			points are subsampled at this interval so that the 			dragging can be done smoothly.  Default is 10.   move	If set, object_ptd will be modified on return using 			pg_move.   symbol	If set, the symbol number will be passed to cursor_move 			so something other than a period can be used to mark 			points.   noverboseIf set, turns off the notification that cursor                        movement is required.   color	Drawing color.  Default is ctyellow.   fndataobject_ptdArray (n_objects) of POINT containing the 			image points to be dragged.   ", "NV/PG", " 	Written by:	Spitale, 2/1998       Modified by:     Dyer Lytle, Vance Haemmerle 11/1998   	2-element array giving the drag translation as [dx,dy].    ");
  
  

libdata[libdataItem++] = new Array("./pg_drag_shadow_plane.html", "pg_drag_shadow_plane.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_drag_shadow_plane.pro", "", "", "	Allows the user to graphically rotate a plane passing through the 	center of a planet by dragging the shadow cast by the planet on the 	plane using the mouse.    ", "", "          -1", " 	Written by:	Spitale, 2/2012   ");
  
  
  libdata[libdataItem++] = new Array("./pg_drag_shadow_plane.html#pgdsp_compute", "pgdsp_compute", 'routine in <a href="./pg_drag_shadow_plane.html">pg_drag_shadow_plane.pro</a>', "pg_drag_shadow_plane.pro", "", "pgdsp_compute", "", "ncdpdsundn0term_ptdaxistheta", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_drag_shadow_plane.html#pg_drag_shadow_plane", "pg_drag_shadow_plane", 'routine in <a href="./pg_drag_shadow_plane.html">pg_drag_shadow_plane.pro</a>', "pg_drag_shadow_plane.pro", "", "pg_drag_shadow_plane", "", "cdgbxsundgdxor_graphicsp0n0noverbosecolorgainaxisshadow_ptd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_draw.html", "pg_draw.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_draw.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_draw.html#pg_draw", "pg_draw", 'routine in <a href="./pg_draw.html">pg_draw.pro</a>', "pg_draw.pro", "", "pg_draw", "	Calls pg_draw_point or pg_draw_vector depending on the input arrays. 	pg_draw_point is called is only one argument is given.  Otherwise, 	it assumed that a source and target are given and pg_draw_vector is 	called.    ", "literalcolorsshadespsymspsizesplabelsxormodecsizescthickswnumlabel_shadelabel_pointsthicklineprintcdgdcorientlengthsalignnoshortensolidfixedheadswinglengthgraphicslabel_colorshade_thresholdobject_ptdArray of POINT containing image points 			to be plotted in the current data coordinate system. 			Or inertial vectors to be used as vector sources. 			May also be an array of image points or inertial 			vectors.   target_ptdArray of POINTs giving the inertial 			positions of vector targets.  May also be an 			array of inertial vectors.  If this argument is 			present, then vectors are drawn instead of points.   ", "NV/PG", " 	Written by:	Spitale, 9/2005   	NONE    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_draw_point.html", "pg_draw_point.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_draw_point.pro", "", "", "	Draws points from the given POINT on the current graphics 	window using the current data coordinate system.    ", "", "          -1", " 	Written by:	Spitale, 1/1998 (pg_draw) 	Renamed pg_draw_point: Spitale, 9/2005   	The following command draws and labels a lavender 'limb' and a red 	'ring' (assuming that the points have already been computed):  	pg_draw_point, [limb_ptd, ring_ptd], color=[ctpurple(), ctred()], $ 	         plabels=['LIMB','RING']    STATUS: 	Complete ");
  
  
  libdata[libdataItem++] = new Array("./pg_draw_point.html#pgdp_draw", "pgdp_draw", 'routine in <a href="./pg_draw_point.html">pg_draw_point.pro</a>', "pg_draw_point.pro", "", "pgdp_draw", "", "label_pointsplabelspointscolorspsymspsizesthicklinecsizescthickscorientalignplabel_offsetlabel_colors", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_draw_point.html#pgdp_fill", "pgdp_fill", 'routine in <a href="./pg_draw_point.html">pg_draw_point.pro</a>', "pg_draw_point.pro", "", "pgdp_fill", "", "defall_valn_objects", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_draw_point.html#pg_draw_point", "pg_draw_point", 'routine in <a href="./pg_draw_point.html">pg_draw_point.pro</a>', "pg_draw_point.pro", "", "pg_draw_point", "", "literalcolorspsymspsizesplabelsxormodecsizescthickswnumshadeslabel_pointsthicklineprintlabel_shadealigncorientlabel_colorshade_threshold_pp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_draw_vector.html", "pg_draw_vector.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_draw_vector.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_draw_vector.html#pg_draw_vector", "pg_draw_vector", 'routine in <a href="./pg_draw_vector.html">pg_draw_vector.pro</a>', "pg_draw_vector.pro", "", "pg_draw_vector", "         Draws vectors on an image from a source towards a          target. Very useful for locating off-image objects          (planets, say) in an image for referencing.  By default,          vectors are foreshortened to their projections onto the image          plane so that vectors with large  out-of-plane components          will be shorter.  (This can be deactivated with the          /noshorten keyword.)  Also by default, vectors that point          away from the camera will be drawn as dotted lines while          vectors which point towards the camera will be drawn solid.          (This can be controlled with the /solid keyword.)     ", "cdgdliteralAll of the following input keywords accept an array 			where each element corresponds to an element in the 			object_ptd array.  By default, if the keyword array is 			shorter than the object_ptd array, then the last element 	  		is used to fill out the array.  /literal suppresses 			this behavior and causes unspecified elements to 			take their default values   lengths       Lengths of the vectors.  (Default: 50 pixels)   plabels        Text with which to label vectors.  (Default:                        no label)   colors        Colors to use in drawing.  (Default: current                        default color)   thick        Line thicknesses.  (Default: 1)   csizes     Character sizes for plabels.  (Default: 1)   wnumnoshorten    If set, vectors will not be foreshortened                        depending on how much they point into/out                        of the image plane.   solid        All lines are to be drawn solid (linestyle=0)                        rather than allow vectors pointing into the                        image plane to be dotted.   fixedheads    If set, arrowheads will not be scaled to                         match the foreshortening of the vector.   winglengthdraw_wnumshadeslabel_shadelabel_colorshade_thresholdsourcetarget", "NV/PG", "      Written: John W. Weiss, 5/05      Consolidated some functionality into plot_arrow; Spitale 9/2005           Say moon_points is a POINT object containing the center        data for the four Galilean satellites and jupiter_points has        Jupiter's center data.  Then         IDL> pg_draw_vector, moon_points, jupiter_points, colors=[100, $              150, 200, 250], thick=1.25, length=70, plabels= Jupiter , $              csizes=1.5         will draw vectors from each towards the planet.  Conversely,         IDL> pg_draw_vector, jupiter_points, moon_points, colors=[100, $              150, 200, 250], thick=1.25, length=70, plabels=[ Io ,  Europa , $               Ganymede ,  Callisto ], csizes=1.5         will draw vectors from Jupiter's center towards each moon,        labelling each by the moon's name. ");
  
  

libdata[libdataItem++] = new Array("./pg_edges.html", "pg_edges.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_edges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_edges.html#pg_edges", "pg_edges", 'routine in <a href="./pg_edges.html">pg_edges.pro</a>', "pg_edges.pro", "", "pg_edges", "	Scans an image for candidate edge points.    	At each pixel in the image, an activity is computed (see activity.pro). 	Points with activity greater than the threshold value are accepted.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, pg_ptchisq, 	pg_fit, pg_threshold    ", "thresholdMinimum activity to accept as an edge point.   edge	Distance from the edge of the image within which 			curve points will not be scanned.  Default is 0.   npointsMaximum number of points to return.   gatelowpassIf given, the image is smoothed with a kernel of 			this size.    dd	Data descriptor   ", "NV/PG", " 	Written by:	Spitale, 4/2002   	POINT giving the resulting edge points.    ");
  
  

libdata[libdataItem++] = new Array("./pg_exclude_points.html", "pg_exclude_points.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_exclude_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_exclude_points.html#pg_exclude_points", "pg_exclude_points", 'routine in <a href="./pg_exclude_points.html">pg_exclude_points.pro</a>', "pg_exclude_points.pro", "", "pg_exclude_points", "	xx    Environment variables:   	xx:	xx  	xx:	xx    	xx:	xx  	xx:	xx    	xx    	xx    	xx    ", "radiusptdxptd", "NV/PG", " 	Written by:	xx, xx/xx/xxxx   	xx    STATUS: 	xx    SEE ALSO: 	xx, xx, xx 	xx    ");
  
  

libdata[libdataItem++] = new Array("./pg_farfit.html", "pg_farfit.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_farfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_farfit.html#pg_farfit", "pg_farfit", 'routine in <a href="./pg_farfit.html">pg_farfit.pro</a>', "pg_farfit.pro", "", "pg_farfit", "	Searches for the offset (dx,dy) that gives the best agreement between 	two uncorrelated sets of image points.    	pg_farfit is a wrapper for the routine correlate_points.  See the 	documentation for that routine for details on the fitting procedure    STATUS: 	Complete.    SEE ALSO: 	pg_edges correlate_points    ", "nsamplesNumber of samples in each direction in the grid search. 			See image_correlate.   show	If specified, the search is displayed in the current 			graphics window.  This value can be specified as a 			2-element array giving the size of the displayed image.   bin	Initial bin size for point densities.  Default is 50 			pixels.   max_densityMaximum model point density.  Default = 5.   region	Size of region to scan, centered at offset [0,0].  If not 			specified, the entire image is scanned.   sigma	2-element array giving the width of the correlation 			peak in each direction.   cc	Cross correlation of final result.   mcc	Corss correlation at the model points.   bias	If given, solutions are biased toward the initial 			guess using a weighting function of the form:  				exp(-r^2/2*bias),  			where r is the distance between from the initial 			guess.   nosearchIf set, no search is performed.  An offset of [0,0] 			is returned.    dd	Data descriptor.   base_ptdPOINT giving a set of points to fit to. 			This input may be produced by pg_edges, for example.   model_ptdArray of POINT giving model points (computed 			limb points for example).   ", "NV/PG", " 	Written by:	Spitale, 4/2002   	2-element array giving the fit offset as [dx,dy].    ");
  
  

libdata[libdataItem++] = new Array("./pg_fit.html", "pg_fit.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_fit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_fit.html#pg_fit", "pg_fit", 'routine in <a href="./pg_fit.html">pg_fit.pro</a>', "pg_fit.pro", "", "pg_fit", "	Performs a simultaneous 1-,2-, or 3-parameter linear least-squares fit 	using the given coefficients.    	It is the caller's responsibility to ensure that all of the input 	coefficients were computed using with the same set of fixed parameters.    	pg_fit extracts the fit coefficients from cf and inputs them to mbfit 	to perform a simultatneous least square fit using all of the 	coefficients.  See the documentation for that routine for more detail.    ", "dthetacfArray of pg_fit_coeff_struct as produced by pg_cvscan_coeff or 		pg_ptscan_coeff.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	The following commands perform a simultaneous least square fit to 	a limb, ring and star field with all parameters free:  	cvscan_ptd = pg_cvscan(dd, [limb_ptd,ring_ptd], width=40, edge=20) 	ptscan_ptd = pg_ptscan(dd, [star_ptd], width=40, edge=20)  	cvscan_cf = pg_cvscan_coeff(cvscan_ptd, axis=center_ptd) 	ptscan_cf = pg_ptscan_coeff(ptscan_ptd, axis=center_ptd)  	dxy = pg_fit([cvscan_cf,ptscan_cf], dtheta=dtheta)  	In this example, center_ptd, limb_ptd, ring_ptd, and star_ptd are assumed 	to have been previously computed using the appropriate routines.  	Note that since this is a linear fit, the input systems may have been 	linearized and it may be necessary to iterate this procedure.     STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_ptscan, pg_ptscan_coeff, 	pg_cvchisq, pg_ptchisq, pg_threshold 	2-element array giving the fit offset as [dx,dy].    ");
  
  

libdata[libdataItem++] = new Array("sub/pg_fit_coeff_struct__define.html", "pg_fit_coeff_struct__define.pro", '.pro file in <a href="sub/dir-overview.html">sub/ directory</a>', "pg_fit_coeff_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sub/pg_fit_coeff_struct__define.html#pg_fit_coeff_struct__define", "pg_fit_coeff_struct__define", 'routine in <a href="sub/pg_fit_coeff_struct__define.html">pg_fit_coeff_struct__define.pro</a>', "pg_fit_coeff_struct__define.pro", "", "pg_fit_coeff_struct__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_footprint.html", "pg_footprint.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_footprint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_footprint.html#pg_footprint", "pg_footprint", 'routine in <a href="./pg_footprint.html">pg_footprint.pro</a>', "pg_footprint.pro", "", "pg_footprint", "	Computes the footprint of a camera on a given body.    ", "cdArray (n_timesteps) of camera descriptors.   odbxArray (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   gdGeneric descriptor.  If given, the cd and bx inputs 		are taken from the cd and bx fields of this structure 		instead of from those keywords.   fov If set points are computed only within this many camera 		 fields of view.   sample Sampling rate; default is 1 pixel.   ", "NV/PG", " 	Written by:	Spitale, 5/2014   	Array (n_objects) of POINT containing image points and 	the corresponding inertial vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_get_arrays.html", "pg_get_arrays.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_get_arrays.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_get_arrays.html#pg_get_arrays", "pg_get_arrays", 'routine in <a href="./pg_get_arrays.html">pg_get_arrays.pro</a>', "pg_get_arrays.pro", "", "pg_get_arrays", "	Obtains a array descriptor for the given data descriptor.    	If /override, then a array descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except arr_name) can still be overridden by specifying 	them as keyword parameters.  If arr_name is specified, then 	only descriptors corresponding to those names will be returned.     ", "odbxard	Input array descriptors; used by some translators.   gdno_sortUnless this keyword is set, only the first descriptor 			encountered with a given name is returned.  This allows 			translators to be arranged in the translators table such 			by order of priority.   overrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	arr_*:		All array override keywords are accepted.  See 			array_keywords.include.  			If arr_name is specified, then only descriptors with 			those names are returned.   verbatimIf set, the descriptors requested using arr_name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   arr_namearr_primarytr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.    tr_firstdddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 10/2012   	Array of array descriptors, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("./pg_get_cameras.html", "pg_get_cameras.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_get_cameras.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_get_cameras.html#pg_get_cameras", "pg_get_cameras", 'routine in <a href="./pg_get_cameras.html">pg_get_cameras.pro</a>', "pg_get_cameras.pro", "", "pg_get_cameras", "	Obtains a camera descriptor for the given data descriptor.    	If /override, then a camera descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except cam_name) can still be overridden by specifying 	them as keyword parameters.  If cam_name is specified, then 	only descriptors corresponding to those names will be returned.     ", "cds	Input camera descriptors; used by some translators.   odpdgd	Generic descriptor containing the above descriptors.   no_sortUnless this keyword is set, only the first descriptor 			encountered with a given name is returned.  This allows 			translators to be arranged in the translators table such 			by order of priority.   overrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	cam_*:		All camera override keywords are accepted.  See 			camera_keywords.include.  			If cam_name is specified, then only descriptors with 			those names are returned.   verbatimIf set, the descriptors requested using cam_name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   orient	Default orientation matrix to use if camera 			orientation is not available.  If not specified, 			the identity matrix is used.    no_defaultcam_namecam_timecam_orientcam_avelcam_poscam_velcam_scalecam_oaxiscam_sizecam_fn_psfcam_opaquecam_exposurecam_fn_focal_to_imagecam_fn_image_to_focalcam_fn_datacam_filterscam_fn_filtertr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.   tr_firstdddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 1998 	Modified:	Spitale, 8/2001   	Array of camera descriptors, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("./pg_get_celestial_sphere.html", "pg_get_celestial_sphere.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_get_celestial_sphere.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_get_celestial_sphere.html#pg_get_celestial_sphere", "pg_get_celestial_sphere", 'routine in <a href="./pg_get_celestial_sphere.html">pg_get_celestial_sphere.pro</a>', "pg_get_celestial_sphere.pro", "", "pg_get_celestial_sphere", "	Obtains a globe descriptor describing the celestial sphere.    ", "radius Radius to use for the globe.  Default is 1d30.   ", "NV/PG", " 	Written by:	Spitale, 7/2015   	Globe descriptor with inertial body descriptor and very large radii.     ");
  
  

libdata[libdataItem++] = new Array("./pg_get_maps.html", "pg_get_maps.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_get_maps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_get_maps.html#pg_get_maps", "pg_get_maps", 'routine in <a href="./pg_get_maps.html">pg_get_maps.pro</a>', "pg_get_maps.pro", "", "pg_get_maps", "	Obtains a map descriptor for the given data descriptor.    	If /override, then a map descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except map_name) can still be overridden by specifying 	them as keyword parameters.  If map_name is specified, then 	only descriptors corresponding to those names will be returned.     ", "mds	Input map descriptors; used by some translators.   gbxdkxbxgdno_sortUnless this keyword is set, only the first descriptor 			encountered with a given name is returned.  This allows 			translators to be arranged in the translators table such 			by order of priority.   overrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	map_*:		All map override keywords are accepted.  See 			map_keywords.include.  			If map_name is specified, then only descriptors with 			those names are returned.  			If /override and map name is not specified, then 			the name is taken from the globe descriptor.   verbatimIf set, the descriptors requested using map_name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   map_namemap_typemap_sizemap_scalemap_eccmap_originmap_centermap_rangemap_offsetmap_limitsmap_fn_map_to_imagemap_fn_image_to_mapmap_fn_data_pmap_unitsmap_graphicmap_rotatemap_radiitr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.    tr_firstdddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 1998 	Modified:	Spitale, 8/2001   	Array of map descriptors, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("./pg_get_planets.html", "pg_get_planets.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_get_planets.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_get_planets.html#pg_get_planets", "pg_get_planets", 'routine in <a href="./pg_get_planets.html">pg_get_planets.pro</a>', "pg_get_planets.pro", "", "pg_get_planets", "	Obtains planet descriptors for the given data descriptor.    	If /override, then a planet descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except plt_name) can still be overridden by specifying 	them as keyword parameters.  If plt_name is specified, then 	only descriptors corresponding to those names will be returned.     ", "pd	Input planet descriptors; used by some translators.   od	Observer descriptor, typically a camera descriptor. 			If given, then planet positions will be corrected 			for light travel time and stellar aberration relative 			to this observer unless /raw is set.   sd	Primary star descriptor; needed by some translators.   gd	Generic descriptors.  Can be used in place of od and sd.   no_sortUnless this keyword is set, only the first descriptor 			encountered with a given name is returned.  This allows 			translators to be arranged in the translators table such 			by order of priority.   overrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	plt_*:		All planet override keywords are accepted.  See 			planet_keywords.include.  			If plt_name is specified, then only descriptors with 			those names are returned.   verbatimIf set, the descriptors requested using plt_name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   raw	If set, no aberration corrections are performed.   plt_nameplt_timeplt_orientplt_avelplt_posplt_velplt_radiiplt_loraplt_opaqueplt_opacityplt_massplt_refl_fnplt_refl_parmplt_phase_fnplt_phase_parmplt_albedotr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.    tr_firstdddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 1998 	Modified:	Spitale, 8/2001   	Array of planet descriptors, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("./pg_get_rings.html", "pg_get_rings.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_get_rings.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_get_rings.html#pg_get_rings", "pg_get_rings", 'routine in <a href="./pg_get_rings.html">pg_get_rings.pro</a>', "pg_get_rings.pro", "", "pg_get_rings", "	Obtains ring descriptors for the given data descriptor.    	If /override, then a ring descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except rng_name) can still be overridden by specifying 	them as keyword parameters.  If rng_name is specified, then 	only descriptors corresponding to those names will be returned.     SEE ALSO: 	xx, xx, xx    ", "rd	Input ring descriptors; used by some translators.   pd	Planet descriptors for primary objects.   od	Observer descriptors.   gd	Generic descriptors.  Can be used in place of od.   no_sortUnless this keyword is set, only the first descriptor 			encountered with a given name is returned.  This allows 			translators to be arranged in the translators table such 			by order of priority.   overrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	rng_*:		All ring override keywords are accepted.  See 			ring_keywords.include.  			If rng_name is specified, then only descriptors with 			those names are returned.   verbatimIf set, the descriptors requested using rng_name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   rng_namerng_primaryrng_timerng_orientrng_avelrng_posrng_velrng_smarng_eccrng_daprng_opaquerng_opacityrng_nmrng_mrng_emrng_wmrng_dwmdttr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.    tr_firstdddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 1998 	Modified:	Spitale, 8/2001   	Ring descriptors obtained from the translators, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("./pg_get_stars.html", "pg_get_stars.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_get_stars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_get_stars.html#pg_get_stars", "pg_get_stars", 'routine in <a href="./pg_get_stars.html">pg_get_stars.pro</a>', "pg_get_stars.pro", "", "pg_get_stars", "	Obtain star descriptors for the given data descriptor.    	If /override, then a star descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except str_name) can still be overridden by specifying 	them as keyword parameters.  If str_name is specified, then 	only descriptors corresponding to those names will be returned.     SEE ALSO: 	xx, xx, xx    ", "sd	Input star descriptors; used by some translators.   od	Observer descriptor, typically a camera descriptor. 			If given, then star positions will be corrected 			for stellar aberration (but not light-travel time, 			which is inherently accounted for in star catalogs) 			relative to this observer, unless /raw is set.   sund	Star descriptors for the sun.  Used to correct for 			stellar aberration.   gd	Generic descriptors.  Can be used in place of od.   no_sortUnless this keyword is set, only the first descriptor 			encountered with a given name is returned.  This allows 			translators to be arranged in the translators table such 			by order of priority.   overrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	str_*:		All star override keywords are accepted.  See 			star_keywords.include.  			If str_name is specified, then only descriptors with 			those names are returned.   verbatimIf set, the descriptors requested using str_name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   raw	If set, no aberration corrections are performed.   radeccornersstr_namestr_timestr_orientstr_avelstr_posstr_velstr_radiistr_lorastr_lumstr_spstr_opaquestr_opacitytr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.    tr_firstdddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 1998 	Modified:	Spitale, 8/2001   	Star descriptors obtained from the translators, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("./pg_get_stations.html", "pg_get_stations.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_get_stations.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_get_stations.html#pg_get_stations", "pg_get_stations", 'routine in <a href="./pg_get_stations.html">pg_get_stations.pro</a>', "pg_get_stations.pro", "", "pg_get_stations", "	Obtains a station descriptor for the given data descriptor.    	If /override, then a station descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except stn_name) can still be overridden by specifying 	them as keyword parameters.  If stn_name is specified, then 	only descriptors corresponding to those names will be returned.     ", "odpdstd	Input station descriptors; used by some translators.   gdno_sortUnless this keyword is set, only the first descriptor 			encountered with a given name is returned.  This allows 			translators to be arranged in the translators table such 			by order of priority.   overrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	stn_*:		All station override keywords are accepted.  See 			station_keywords.include.  			If stn_name is specified, then only descriptors with 			those names are returned.   verbatimIf set, the descriptors requested using stn_name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   stn_namestn_timestn_primarytr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.    tr_firstdddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 2/2009   	Array of station descriptors, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("./pg_grid.html", "pg_grid.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_grid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_grid.html#pg_grid", "pg_grid", 'routine in <a href="./pg_grid.html">pg_grid.pro</a>', "pg_grid.pro", "", "pg_grid", "	Computes image points on a surface coordinate grid.    ", "cdArray (n_timesteps) of camera descriptors.   gbxArray (n_objects, n_timesteps) of descriptors of objects 		that must be a subclass of GLOBE.   dkxArray (n_objects, n_timesteps) of descriptors of objects 		that must be a subclass of DISK.   bxArray (n_objects, n_timesteps) of descriptors of objects 		that must be a subclass of BODY.   gdGeneric descriptor.  If given, the cd and gbx inputs 		are taken from the cd and gbx fields of this structure 		instead of from those keywords.   latArray giving grid-line latitudes in radians.   lonArray giving grid-line longitudes in radians.    nlatNumber of equally-spaced latitude lines to generate if keyword 		lat not given.  Default is 12.   nlonNumber of equally-spaced longitude lines to generate if keyword 		lon not given.  Default is 12.   flatThis reference latitude line will be one of the latitude lines generated 		if nlat is specified.  Default is zero.   flonThis reference longitude line will be one of the longitude lines generated 		if nlon is specified.  Default is zero.   npointsNumber of points to compute in each latitude or longitude line, 		 per 2*pi radians; default is 360.   fov If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   slatLatitudes to compute on each longitude circle.   slonLongitudes to compute on each latitude circle.    ", "NV/PG", " 	Written by:	Spitale, 2/1998   	Array (n_objects) of POINT containing image points and 	the corresponding inertial vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_hide.html", "pg_hide.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_hide.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_hide.html#pg_hide", "pg_hide", 'routine in <a href="./pg_hide.html">pg_hide.pro</a>', "pg_hide.pro", "", "pg_hide", "	Hides the given points with respect to each given object and observer 	using pg_hide/rm_disk, pg_hide/rm_globe, or pg_hide_limb.    	The flags arrays in object_ptd are modified.    	For each object in object_ptd, hidden points are computed and 	PS_MASK_INVISIBLE in the POINT is set.  No points are 	removed from the array.    ", "cdodgbxdkxgdone2oneglobeIf set, use pg_hide_globe or pg_rm_globe.   limbIf set, use pg_hide_limb .   diskIf set, use pg_hide_disk or pg_rm_disk.   rmIf set use the *rm* programs instead of *hide* programs.  	  All other keywords are passed directly to pg_rm/hide_globe, 	  pg_hide/rm_disk or pg_hide_limb and are documented with those 	  programs.   revealcatobject_ptdArray of POINT containing inertial vectors.   hide_ptdArray (n_disks, n_timesteps) of POINT 			containing the hidden points.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	(1) The following command hides all points on the planet which lie 	    behind the terminator:  	    pg_hide, object_ptd, /limb, gbx=pd, od=sd  	    In this call, pd is a planet descriptor, and sd is a star descriptor 	    (i.e., the sun).    	(2) This command hides all points on the planet which are shadowed by 	    the rings:  	    pg_hide, object_ptd, /disk, dkx=rd, od=sd  	    In this call, rd is a ring descriptor, and sd is as above.    	(3) This command hides all points which lie behind the planet or the 	    rings:  	    pg_hide, object_ptd, /disk, /globe, dkx=rd, gbx=pd, cd=cd  	    In this call, rd is a ring descriptor, pd is a planet descriptor, 	    cd is a camera descriptor, and sd is as above.    STATUS: 	Complete    SEE ALSO: 	pg_hide_disk, pg_hide_globe, pg_hide_limb ");
  
  

libdata[libdataItem++] = new Array("./pg_hide_disk.html", "pg_hide_disk.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_hide_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_hide_disk.html#pg_hide_disk", "pg_hide_disk", 'routine in <a href="./pg_hide_disk.html">pg_hide_disk.pro</a>', "pg_hide_disk.pro", "", "pg_hide_disk", "	Hides the given points with respect to each given disk and observer.    	The flags arrays in object_ptd are modified.    	For each object in object_ptd, hidden points are computed and 	PTD_MASK_INVISIBLE in the POINT is set.  No points are 	removed from the array.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the observer from which points are hidden.  If no observer 		descriptor is given, the camera descriptor is used.   dkxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of DISK.   gbxArray  of descriptors of objects which must be a subclass 		of GLOBE, describing the primary body for dkx.  For each 		timestep, only the first descriptor is used.   gdGeneric descriptor.  If given, the cd and dkx inputs 		are taken from the cd and dkx fields of this structure 		instead of from those keywords.   reveal Normally, objects whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   catIf set, the hide_ptd points are concatentated into a single 		POINT.   object_ptdArray of POINT containing inertial vectors.   hide_ptdArray (n_disks, n_timesteps) of POINT 			containing the hidden points.   ", "NV/PG", " 	Written by:	Spitale, 2/1998 	7/2004:		Added gbx input; Spitale   	The following command hides all points which are behind the rings as 	seen by the camera:  	pg_hide_disk, object_ptd, cd=cd, dkx=rd  	In this call, rd is a ring descriptor, and cd is a camera descriptor.    STATUS: 	Complete    SEE ALSO: 	pg_hide, pg_hide_globe, pg_hide_limb ");
  
  

libdata[libdataItem++] = new Array("./pg_hide_globe.html", "pg_hide_globe.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_hide_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_hide_globe.html#pg_hide_globe", "pg_hide_globe", 'routine in <a href="./pg_hide_globe.html">pg_hide_globe.pro</a>', "pg_hide_globe.pro", "", "pg_hide_globe", "	Hides the given points with respect to each given globe and observer.    	The flags arrays in object_ptd are modified.    	For each object in object_ptd, hidden points are computed and 	PTD_MASK_INVISIBLE in the POINT is set.  No points are 	removed from the array.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the observer from which points are hidden.  If no observer 		descriptor is given, the camera descriptor is used.   gbxArray (n_globes, n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.   gdGeneric descriptor.  If given, the cd and gbx inputs 		are taken from the cd and gbx fields of this structure 		instead of from those keywords.   reveal Normally, objects whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   compresscatIf set, the hide_ptd points are concatentated into a single 		POINT.   _point_ptdhide_ptdArray (n_disks, n_timesteps) of POINT 			containing the hidden points.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	The following command hides all points which are behind the planet as 	seen by the camera:  	pg_hide_globe, object_ptd, cd=cd, gbx=pd  	In this call, pd is a planet descriptor, and cd is a camera descriptor.    STATUS: 	Complete    SEE ALSO: 	pg_hide, pg_hide_disk, pg_hide_limb ");
  
  

libdata[libdataItem++] = new Array("./pg_hide_limb.html", "pg_hide_limb.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_hide_limb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_hide_limb.html#pg_hide_limb", "pg_hide_limb", 'routine in <a href="./pg_hide_limb.html">pg_hide_limb.pro</a>', "pg_hide_limb.pro", "", "pg_hide_limb", "	Hides the given points with respect to the limb of each given globe and 	observer.  This routine is only relevant for points that lie on the 	surface of a body.  pg_hide_globe should be used for non-surface 	points.    	The flags arrays in object_ptd are modified.    	The result is meaningless if the given inertial vectors do not lie 	on the surface of the globe.    	For each object in object_ptd, hidden points are computed and 	PTD_MASK_INVISIBLE in the POINT is set.  No points are 	removed from the array.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the observer from which points are hidden.  If no observer 		descriptor is given, the camera descriptor is used.   gbxArray (n_globes, n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.  n_globes must be the 		same as the number of object_ptd arrays.   gdGeneric descriptor.  If given, the cd and gbx inputs 		are taken from the cd and gbx fields of this structure 		instead of from those keywords.   reveal Normally, objects whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   point_ptdhide_ptdArray (n_disks, n_timesteps) of POINT 			containing the hidden points.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	The following command hides all points which lie on the surface of the 	planet behind the limb as seen by the camera:  	pg_hide_limb, object_ptd, cd=cd, gbx=pd  	In this call, pd is a planet descriptor, and cd is a camera descriptor.    STATUS: 	Complete    SEE ALSO: 	pg_hide, pg_hide_globe, pg_hide_disk ");
  
  

libdata[libdataItem++] = new Array("./pg_image_sector.html", "pg_image_sector.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_image_sector.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_image_sector.html#pg_image_sector", "pg_image_sector", 'routine in <a href="./pg_image_sector.html">pg_image_sector.pro</a>', "pg_image_sector.pro", "", "pg_image_sector", "	Allows the user to select a rectangular image region, with an 	arbitrary tilt, by clicking and dragging.  A rectangle is selected 	using the left mouse button and a line of zero width is selected 	using the right moise button.   ", "sample    Pixel grid sampling to use instead of 1.   win_num    Window number of IDL graphics window in which to select                    box, default is current window.   width    Width of box instead of letting the user select.   restore    Do not leave the box in the image.   p0    First corner of box.  If set, then the routine immediately                    begins to drag from that point until a button is released.   p1    Endpoint.  If given, p0 must also be given and is taken                    as the starting point for a line along which to scan.                    In this case, the user does not select the box manually.                    Scan width is one pixel unless 'width' is specified,                    and is centered on the line from p0 to p1.   xor_graphics    If set, the sector outline is drawn and erased using xor                    graphics instead of a pixmap.   color    Color to use for rectangle, default is !color.   noverbose    If set, messages are suppressed.    corners    If set, then p0 and p1 are taken as the corners of                    the box, and the user is not prompted to select one.   ", "NV/PG", "      POINT containing points on the sector outline.  The point       spacing is determined by the sample keyword.   ORIGINAL AUTHOR : J. Spitale ; 6/2005   ");
  
  libdata[libdataItem++] = new Array("./pg_image_sector.html#test", "test", 'routine in <a href="./pg_image_sector.html">pg_image_sector.pro</a>', "pg_image_sector.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_limb.html", "pg_limb.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_limb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_limb.html#pg_limb", "pg_limb", 'routine in <a href="./pg_limb.html">pg_limb.pro</a>', "pg_limb.pro", "", "pg_limb", "	Computes image points on the limb of each given globe object.    	By definition, the surface normal at a point on the limb of a body is 	perpendicular to a vector from the observer to that same point, so the 	dot product of the two vectors is zero.  This program uses an iterative 	scheme to find points onthe surface at which this dot product is less 	than epsilon.    ", "cd Array (n_timesteps) of camera descriptors.   od Array (n_timesteps) of descriptors of objects 		 which must be a subclass of BODY.  These objects are used 		 as the observer from which limb is computed.  If no observer 		 descriptor is given, the camera descriptor is used.   gbx Array (n_objects, n_timesteps) of descriptors of objects 		 which must be a subclass of GLOBE.   gd Generic descriptor.  If given, the cd and gbx inputs 		 are taken from the cd and gbx fields of this structure 		 instead of from those keywords.   fov If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   npointsNumber of points to compute.  Default is 1000.   epsilonMaximum angular error in the result.  Default is 1e-3.   reveal Normally, points computed for objects whose opaque flag 		 is set are made invisible.  /reveal suppresses this behavior.   ", "NV/PG", " 	Written by:	Spitale, 1/1998   	The following command computes points on the planet which lie on the 	terminator:  	term_ptd = pg_limb,(cd=cd, gbx=pd, od=sd)  	In this call, pd is a planet descriptor, cd is a camera descriptor, 	and sd is a star descriptor (i.e., the sun).    STATUS: 	Complete 	Array (n_objects) of POINT containing image 	points and the corresponding inertial vectors.    ");
  
  

libdata[libdataItem++] = new Array("./pg_limb_sector.html", "pg_limb_sector.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_limb_sector.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_limb_sector.html#pg_limb_sector", "pg_limb_sector", 'routine in <a href="./pg_limb_sector.html">pg_limb_sector.pro</a>', "pg_limb_sector.pro", "", "pg_limb_sector", "	Allows the user to select an image sector along lines of constant  	azimuth and altitude above a planet by clicking and dragging.   ", "cd    Camera descriptor.   gbx    Globe descriptor for the planet whose limb is to be                    scanned.   gd    Generic descriptor containnig the above descriptors.   lonsample    Sets the grid sampling in pixels.  Default is one.   win_num    Window number of IDL graphics window in which to select                    box, default is current window.   restore    Do not leave the box in the image.   p0    First corner of box.  If set, then the routine immediately                    begins to drag from that point until a button is released.   xor_graphics    If set, the sector outline is drawn and erased using xor                    graphics instead of a pixmap.   color    Color to use for rectangle, default is !color.   noverbose    If set, messages are suppressed.    nodsk    If set, skyplane disk image points will not be included                    in the output POINT.   dkd     Disk desriptor in the skyplane, centered on the planet                    with 0 axis along the skyplane projection of the north                    pole.  For use with pg_profile_ring.   altitudesArray giving altitude at each sample.   azimuthsArray giving azimuth at each sample.   limb_pts_bodyBody coordinates of each limb points on planet surface.    cw    If set, azimuths are assumed to increase in the clockwise                    direction.   ", "NV/PG", "      POINT containing points on the sector outline.  The point       spacing is determined by the sample keyword.  The POINT object       also contains the disk coordinate for each point, relative to the       returned disk descriptor, and the user fields 'nrad' and 'nlon'       giving the number of points in altitude and azimuth.    MODIFICATION HISTORY : 	Spitale; 8/2006		original version   ");
  
  

libdata[libdataItem++] = new Array("./pg_limb_sector_altaz.html", "pg_limb_sector_altaz.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_limb_sector_altaz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_limb_sector_altaz.html#pg_limb_sector_altaz", "pg_limb_sector_altaz", 'routine in <a href="./pg_limb_sector_altaz.html">pg_limb_sector_altaz.pro</a>', "pg_limb_sector_altaz.pro", "", "pg_limb_sector_altaz", "	Constructs a limb sector outline for use with pg_profile_ring given 	altitude and azimuth bounds.   ", "cd    Camera descriptor.   gbx    Globe descriptor giving the planet about whose limb                    the scan will be extracted.   gd    Generic descriptor containing the above descriptors.   dkd    Disk descriptor in the skyplane, centered on the planet                    with 0 axis along the skyplane projection of the north                    pole.  For use with pg_profile_ring.   sample    Sets the grid sampling in pixels.  Default is one.   nodsk    If set, skyplane disk image points will not be included                    in the output POINT.   altitudesArray giving altitude at each sample.   azimuthsArray giving azimuth at each sample.   limb_pts_bodyBody coordinates of each limb points on planet surface.     cw    If set, azimuths are assumed to increase in the clockwise                    direction.   naz    Total number of samples in the azimuthal direction.                    Determined by the 'sample' keyword by default.   nalt    Total number of samples in the altitude direction.                    Determined by the 'sample' keyword by default.   graphic    If set, the sector is computed in the planetographic                    sense, i.e., lines of constant azimuth extend along                    the local surface normal direction instead of the radial                    direction.    alt2-elements array giving the lower and upper altitude bounds 		for the sector.   _az2-elements array giving the lower and upper azimuth bounds 		for the sector in radians, reliative to the skyplane 		projection of the planet's north pole.   ", "NV/PG", "      POINT containing points on the sector outline.  The point       spacing is determined by the sample keyword.  The POINT objects       also contains the disk coordinate for each point, relative to the       returned disk descriptor, and the user fields 'nrad' and 'nlon'       giving the number of points in altitude and azimuth.    ORIGINAL AUTHOR : 	Spitale; 8/2006   ");
  
  

libdata[libdataItem++] = new Array("./pg_limb_sector_linear.html", "pg_limb_sector_linear.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_limb_sector_linear.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_limb_sector_linear.html#pg_limb_sector_linear", "pg_limb_sector_linear", 'routine in <a href="./pg_limb_sector_linear.html">pg_limb_sector_linear.pro</a>', "pg_limb_sector_linear.pro", "", "pg_limb_sector_linear", "	Constructs a limb sector outline for use with pg_profile_image, given 	altitude and length bounds.  The sector is rectangular, being tangent 	to the limb at a given azimuth.   ", "cd    Camera descriptor.   gbx    Globe descriptor giving the planet about whose limb                    the scan will be extracted.   gd    Generic descriptor containig the above descriptors.   sample    Sets the grid sampling in pixels.  Default is one.   altitudesArray giving altitude at each sample.    rimsArray giving azimuth at each sample.   nrim    Total number of samples in the scan direction.                    Determined by the 'sample' keyword by default.   nalt    Total number of samples in the altitude direction.                    Determined by the 'sample' keyword by default.   graphic    If set, the sector is computed in the planetographic                    sense, i.e., lines of constant azimuth extend along                    the local surface normal direction instead of the radial                    direction.    alt2-elements array giving the lower and upper altitude bounds 		for the sector.   _rim2-element array giving the image-coordinate cylidrical coordinates 		of the the ends of the sector.   az0Azimuth of the sector tangent point.   ", "NV/PG", "      POINT object containing points on the sector outline.  The point       spacing is determined by the sample keyword.  The POINT object       also contains the user fields 'nl' and 'nw' giving the number of points       in altitude and r.    ORIGINAL AUTHOR : 	Spitale; 1/2009   ");
  
  

libdata[libdataItem++] = new Array("./pg_limb_sector_oblique.html", "pg_limb_sector_oblique.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_limb_sector_oblique.pro", "", "", "	Allows the user to select an image sector along lines of constant  	azimuth and altitude above a planet by clicking and dragging.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_limb_sector_oblique.html#pg_limb_sector_oblique", "pg_limb_sector_oblique", 'routine in <a href="./pg_limb_sector_oblique.html">pg_limb_sector_oblique.pro</a>', "pg_limb_sector_oblique.pro", "", "pg_limb_sector_oblique", "", "cdgbxgdlonsamplewin_numrestorep0p1widthxor_graphicscolornoverbosenodskdkdaltitudesazimuthslimb_pts_bodycw", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_linearize_image.html", "pg_linearize_image.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_linearize_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_linearize_image.html#pg_linearize_image", "pg_linearize_image", 'routine in <a href="./pg_linearize_image.html">pg_linearize_image.pro</a>', "pg_linearize_image.pro", "", "pg_linearize_image", "	Reprojects an image onto a linear scale.    	The input image is divided into pieces and tranformed one piece at 	a time.  There are two modes of operation: If nmp and scp are 	given, then the image is transformed using them as control points. 	Otherwise, the image is transformed using whatever camera transformation 	is specified in the camera descriptor.    STATUS: 	Control-point scheme not yet implemented.    SEE ALSO: 	pg_resfit, pg_resloc    ", "cdCamera descriptor describing the image to be reprojected.   gdGeneric descriptor containing the above descriptor.   fcpFocal coordinates of known reseau locations.   scpImage coordinates in input image of detected reseau marks 		corresponding to those given by nmp.   scale2-element array giving the camera scale (radians/pixel) 		in each direction for the reprojected image.  If not given, the 		scale of the input image is used.   oaxis2-element array giving the image coordinates of the optic axis 		in the reprojected image.  If not given, the center of 		the reprojected image is used.   size2-element array giving the size of the reprojected image.  If 		not given, the size of the input image is used.   pc_xsizeY-Size of each image piece.  Default is 200 pixels.   pc_ysizeimageThe output image, which is also placed in the data descriptor.    interpType of interpolation to use.  Options are: 		'nearest', 'mean', 'bilinear', 'cubic', 'sinc'.   ddData descriptor containing image to be reprojected.   new_cd", "NV/PG", " 	Written by:	Spitale, 5/2002   	Data descriptor containing the reprojected image.    ");
  
  

libdata[libdataItem++] = new Array("./pg_load_maps.html", "pg_load_maps.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_load_maps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_load_maps.html#pg_load_maps", "pg_load_maps", 'routine in <a href="./pg_load_maps.html">pg_load_maps.pro</a>', "pg_load_maps.pro", "", "pg_load_maps", "	Loads maps and descriptors from a map directory.        ", "mdMap descriptor for each map.    dddir", "NV/PG", " 	Written by:	Spitale  7/2015      STATUS: 	Complete 	Data descriptor containing the rendered image.    ");
  
  

libdata[libdataItem++] = new Array("./pg_map.html", "pg_map.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_map.html#pg_map", "pg_map", 'routine in <a href="./pg_map.html">pg_map.pro</a>', "pg_map.pro", "", "pg_map", "	Generates map projections.    ", "mdMap descriptor describing the projection.   cdCamera descriptor describing the image to be projected.   bxSubclass of BODY giving the body to be projected.  Can be 		GLOBE or RING.  Only bodies whose names match that in the 		map descriptor are mapped.   gbxGlobe descriptor describing the body to be projected. 		This argument is kept for compatibility with earlier 		code.  It is recommended that you use the 'bx' argument 		instead.   dkxDisk descriptor describing the body to be projected. 		This argument is kept for compatibility with earlier 		code.  It is recommended that you use the 'bx' argument 		instead.   sundStar descriptor for the sun.  If given, points behind the 		terminator are excluded.   gdGeneric descriptor.  If given, the above descriptor inputs 		are taken from the corresponding fields of this structure 		instead of from those keywords.   hide_fnString giving the name of a function whose purpose 			is to exclude hidden points from the map.  The only 			function currently packaged is 'pm_hide_ring', which 			takes a ring descriptor as data (see next keyword).   hide_data_pPointer to data for the hide function.   mapFor convenience, the generated map is returned here as 		well as in the returned data descriptor.    aux_namesArray (naux) giving udata names for additional data 			descriptor planes to reproject.  The dimensions of these 			planes must be the same as the image.  	pc_xsize, pc_ysize:	The map is generated in pieces of size pc_xsize 				x pc_ysize.   Default is 100 x 100 pixels.   pc_xsizepc_ysizebounds	Projection bounds specified as [lat0, lat1, lon0, lon1].   interpType of interpolation, see image_interp_cam.   arg_interpInterpolation argument, see image_interp_cam.   offsetOffset in [lat,lon] to apply to map coordinates before 		projecting.   edgeMinimum proximity to image edge.  Default is 0.   wind_fnwind_datasmoothIf set, the input image is smoothed before reprojection.   roiSubscripts in the output map specifying the map region 		to project, instead of the whole thing.   test_factorIf set, a test map, reduced in size by this factor, 			is projected to determine the roi.  For maps with 			large blank areas, this may speed up the projection 			greatly.    ddData descriptor containing image to be projected.   ", "NV/PG", " 	Written by:	Spitale, 1998 	Modified:	Daiana DiNino; 7, 2011 : test_factor   	Data descriptor containing the output map.  The instrument field is set 	to 'MAP'.  User data arrays are created for the reprojected aux_names 	arrays.    STATUS: 	Complete    SEE ALSO: 	pg_mosaic    ");
  
  

libdata[libdataItem++] = new Array("./pg_mask.html", "pg_mask.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_mask.pro", "", "", "	Uses the given geometry to compute an image mask for all objects 	in a scene.    ", "", "          -1", " 	Written by:	Spitale, 4/2004   ");
  
  
  libdata[libdataItem++] = new Array("./pg_mask.html#pgmsk_grow", "pgmsk_grow", 'routine in <a href="./pg_mask.html">pg_mask.pro</a>', "pg_mask.pro", "", "pgmsk_grow", "", "maskdr", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_mask.html#pg_mask", "pg_mask", 'routine in <a href="./pg_mask.html">pg_mask.pro</a>', "pg_mask.pro", "", "pg_mask", "", "maskgdcdgbxdkxbxsundfgbxfdkxfbxdgbxddkxdbxpgbxpdkxpbxlimb_ptdterm_ptdbody_ptddisk_ptdnoddnp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_mask_points.html", "pg_mask_points.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_mask_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_mask_points.html#pg_mask_points", "pg_mask_points", 'routine in <a href="./pg_mask_points.html">pg_mask_points.pro</a>', "pg_mask_points.pro", "", "pg_mask_points", "", "mask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_measure.html", "pg_measure.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_measure.pro", "", "", "	Allows the user to measure quantities between two points in an 	image using the mouse in the current graphics window.    ", "", "          -1", " 	Written by:	Spitale, 3/2002   ");
  
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_xy_test", "_pgm_xy_test", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_xy_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_xy", "_pgm_xy", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_xy", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_dn_test", "_pgm_dn_test", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_dn_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_dn", "_pgm_dn", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_dn", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_radec_test", "_pgm_radec_test", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_radec_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_radec", "_pgm_radec", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_radec", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_globe_test", "_pgm_globe_test", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_globe_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_globe", "_pgm_globe", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_globe", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_disk_test", "_pgm_disk_test", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_disk_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_disk", "_pgm_disk", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_disk", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_eqplane_test", "_pgm_eqplane_test", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_eqplane_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_eqplane", "_pgm_eqplane", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_eqplane", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#____pgm_eqplane", "____pgm_eqplane", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "____pgm_eqplane", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_map_test", "_pgm_map_test", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_map_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#_pgm_map", "_pgm_map", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_map", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#pgm_table", "pgm_table", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "pgm_table", "", "label_padvalue_padnamename_pvalue_plabel_pformat_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_measure.html#pg_measure", "pg_measure", 'routine in <a href="./pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "pg_measure", "", "cdgbxdkxsundsdgdfnradecxystringsilentvaluespdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_mosaic.html", "pg_mosaic.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_mosaic.pro", "", "", "	Combines two or more maps into one.    ", "", "          -1", " 	Written by:	Spitale 1/2002   ");
  
  
  libdata[libdataItem++] = new Array("./pg_mosaic.html#pg_mosaic", "pg_mosaic", 'routine in <a href="./pg_mosaic.html">pg_mosaic.pro</a>', "pg_mosaic.pro", "", "pg_mosaic", "", "combine_fnwt_fnsdatamosaicweightpc_xsizepc_ysizescalesdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_move.html", "pg_move.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_move.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_move.html#pg_move", "pg_move", 'routine in <a href="./pg_move.html">pg_move.pro</a>', "pg_move.pro", "", "pg_move", "	Translates and rotates the given points.    ", "axis_ptdPOINT containing a single image point 			to be used as the axis of rotation.   object_ptdArray (n_objects) of POINT containing the 			image points to be moved.   dxy	2-element array specifying the translation as [dx,dy].   dtheta	Rotation angle in radians.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	object_ptd:	The input points are be modified on return.    ");
  
  

libdata[libdataItem++] = new Array("./pg_nearest_points.html", "pg_nearest_points.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_nearest_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_nearest_points.html#pg_nearest_points", "pg_nearest_points", 'routine in <a href="./pg_nearest_points.html">pg_nearest_points.pro</a>', "pg_nearest_points.pro", "", "pg_nearest_points", "	xx    Environment variables:   	xx:	xx  	xx:	xx    	xx:	xx  	xx:	xx    	xx    	xx    	xx    ", "object_ptd_ptd", "NV/PG", " 	Written by:	xx, xx/xx/xxxx   	xx    STATUS: 	xx    SEE ALSO: 	xx, xx, xx 	xx    ");
  
  

libdata[libdataItem++] = new Array("./pg_northangle.html", "pg_northangle.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_northangle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_northangle.html#pg_northangle", "pg_northangle", 'routine in <a href="./pg_northangle.html">pg_northangle.pro</a>', "pg_northangle.pro", "", "pg_northangle", "	Computes the angle between the image-coordinate y-axis and the 	projected z-axis of the given body.  Increasing angle corresponds to 	clockwise rotation in the image.    ", "cdArray (n_timesteps) of camera descriptors.   bxArray (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   gdGeneric descriptor.  If given, the cd and bx inputs 		are taken from the cd and bx fields of this structure 		instead of from those keywords.   ", "NV/PG", " 	Written by:	Spitale, 11/2001   	Array (n_objects) of double giving the northangles in radians.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_photom.html", "pg_photom.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_photom.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_photom.html#pg_photom", "pg_photom", 'routine in <a href="./pg_photom.html">pg_photom.pro</a>', "pg_photom.pro", "", "pg_photom", "	Photometric image correction for disk or globe objects.    ", "outline_ptdPOINT with image points outlining the 			region of the image to correct.  To correct the entire 			planet, this input could be generated using pg_limb(). 			If this keyword is not given, the entire image is used.   cdCamera descriptor   gbxGlobe descriptor   dkxDisk descriptor   sundSun descriptor   gdGeneric descriptor.  If present, cd, dkx, and gbx are taken 		from here if contained.   refl_fnString naming reflectance function to use.  Default is 			'pht_minneart'.   phase_fnString naming phase function to use.  Default is none.   refl_parmphase_parmemm_outImage emission angles.   inc_outImage incidence angles.   phase_outImage phase angles.    overwriteIf set, the output descriptor is the input descriptor 			with the relevant fields modified.   ddData descriptor containing image to correct.    ", "NV/PG", " 	Written by:	Spitale, 6/2004   	Data descriptor containing the corrected image.  The photometric angles 	emm, inc, and phase are placed in the user data arrays with the tags 	'EMM', 'INC', and 'PHASE' respectively.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_photom_disk.html", "pg_photom_disk.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_photom_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_photom_disk.html#pg_photom_disk", "pg_photom_disk", 'routine in <a href="./pg_photom_disk.html">pg_photom_disk.pro</a>', "pg_photom_disk.pro", "", "pg_photom_disk", "	Photometric image correction for disk objects.    ", "outline_ptdPOINT with image points outlining the 			region of the image to correct.  To correct the entire 			disk, this input could be generated using pg_ring(). 			If this keyword is not given, the entire image is used. 			If two arrays are given, they are taken as the inner 			and outer boundaries.   cdCamera descriptor   dkxDisk descriptor   sundSun descriptor   gdGeneric descriptor.  If present, cd and dkx are taken from 		here if contained.   refl_fnString naming reflectance function to use.  Default is 			'pht_minneart'.   phase_fnString naming phase function to use.  Default is none.   refl_parmphase_parmemm_outImage emission angles.   inc_outImage incidence angles.   phase_outImage phase angles.    overwriteIf set, the output descriptor is the input descriptor 			with the relevant fields modified.   ddData descriptor containing image to correct.    ", "NV/PG", " 	Written by:	Spitale, 1/2002 (pg_photom) 	 Spitale, 6/2004:	changed to pg_photom_disk   	New data descriptor containing the corrected image.  The photometric 	angles emm, inc, and phase are placed in the user data arrays with 	the tags'EMM', 'INC', and 'PHASE' respectively.  Unless /overwrite is 	set, the nw descriptor is a clone of the input descriptor, with the 	relevant fields modified.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_photom_globe.html", "pg_photom_globe.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_photom_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_photom_globe.html#pg_photom_globe", "pg_photom_globe", 'routine in <a href="./pg_photom_globe.html">pg_photom_globe.pro</a>', "pg_photom_globe.pro", "", "pg_photom_globe", "	Photometric image correction for globe objects.    ", "outline_ptdPOINT with image points outlining the 			region of the image to correct.  To correct the entire 			planet, this input could be generated using pg_limb(). 			If this keyword is not given, the entire image is used.   cdCamera descriptor   gbxGlobe descriptor   sundSun descriptor   gdGeneric descriptor.  If present, cd and gbx are taken from 		here if contained.   refl_fnString naming reflectance function to use.  Default is 			'pht_refl_minneart'.   phase_fnString naming phase function to use.  Default is none.   refl_parmphase_parmemm_outImage emission angles.   inc_outImage incidence angles.   phase_outImage phase angles.    overwriteIf set, the output descriptor is the input descriptor 			with the relevant fields modified.   ddData descriptor containing image to correct.    ", "NV/PG", " 	Written by:	Spitale, 1/2002 (pg_photom) 	 Spitale, 6/2004:	changed to pg_photom_globe   	New data descriptor containing the corrected image.  The photometric 	angles emm, inc, and phase are placed in the user data arrays with 	the tags'EMM', 'INC', and 'PHASE' respectively.  Unless /overwrite is 	set, the nw descriptor is a clone of the input descriptor, with the 	relevant fields modified.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_profile_image.html", "pg_profile_image.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_profile_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_profile_image.html#pg_profile_image", "pg_profile_image", 'routine in <a href="./pg_profile_image.html">pg_profile_image.pro</a>', "pg_profile_image.pro", "", "pg_profile_image", "	Generates a dn profile along a line in an image.   ", "cdCamera descriptor.  Needed for sinc interpolation. (to get PSF)   gd  Optional generic descriptor containing cd.   distance Array giving the distance, in pixels, along the profile.   interp  Type of interpolation to use.  Options are:                'nearest', 'mean', 'bilinear', 'cubic', 'sinc'.   arg_interp  Arguments to pass to the interpolation function.    sigma  Array giving the standard deviation at each point in the 		profile.   profile  The profile.   image_pts Image point for each point along the profile.    bgUniform value to subtract from profile.   ddData descriptor.   outline_ptd  POINT giving the outline of the region to plot,                as produced by the pg_image_sector.   ", "NV/PG", "       Written by:     Spitale, 6/2005   	Two data descriptors: the first contains the profile; the second contains 	the profile sigma.    ");
  
  libdata[libdataItem++] = new Array("./pg_profile_image.html#test", "test", 'routine in <a href="./pg_profile_image.html">pg_profile_image.pro</a>', "pg_profile_image.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_profile_ring.html", "pg_profile_ring.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_profile_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_profile_ring.html#pg_profile_ring", "pg_profile_ring", 'routine in <a href="./pg_profile_ring.html">pg_profile_ring.pro</a>', "pg_profile_ring.pro", "", "pg_profile_ring", "	Generates radial or longitudinal ring profiles from the given image 	using an image outline.   	The image points of the sector outline are first calculated.  If        /outline is selected then this is output.  If not, then the        /azimuthal keyword determines if this is a radius or longitude        profile.  The radius and longitude spacing for profile is then is        determined. If n_lon or n_rad is given, then these are used.  If not,        then the outline is used to determine the spacing in radius and        longitude so that the maximum spacing is a pixel.  If oversamp is        given then the number of samples is multiplied by this factor.        Then the image is sampled with this radius x longitude grid and        the dn interpolated with the routine image_interp at each point.        The dn's are then averaged along the requested profile direction.        If /bin keyword is selected then the image is not interpolated but        rather each pixel is binned in a histogram with the calculated        spacing.    ", "cdCamera descriptor.   dkx  Disk descriptor.   gd  Generic descriptor, if used, cd and dkx taken from it unless                overriden by cd and dkx arguments.   azimuthal  If set, the plot is longitudinal instead of radial.   sigma  Array giving the standard deviation at each point in the 		profile.   width  Array giving the width of the scan, in pixels along the                averaging direction, at each point in the profile.   nn  Number of image samples averaged into each profile point.   bin   If set, pixels in sector are binned according to                radius or longitude rather than dn averaged at equal                radius or longitude spacing   dsk_ptsArray of disk coordinates corresponding to each value in the 		returned dn profile.   im_ptsArray of image coordinates corresponding to each value in the 		returned dn profile.   interp   Type of interpolation to use: 'nearest', 'bilinear', 'cubic',                or 'sinc'.  'sinc' is the default.   arg_interp  Arguments to pass to the interpolation function.   profile  The profile.   bgUniform value to subtract from profile.   ddData descriptor.   outline_ptd   POINT giving the outline of the sector to plot,                       as produced by the pg_ring_sector.   ", "NV/PG", "       Written by:     Vance Haemmerle & Spitale, 6/1998 	Modified to use outline_ptd instead of (rad,lon): Spitale 5/2005        lon = [175.,177.]      rad = [65000000.,138000000.]      outline_ptd = pg_ring_sector(cd=cd, dkx=rd, rad=rad, lon=lon)      pg_draw, outline_ptd       profile = pg_profile_ring(dd, cd=cd, dkx=rd, $                                           outline_ptd, dsk_pts=dsk_pts)      window, /free, xs=500, ys=300      plot, dsk_pts[*,0], profile 	Two data descriptors: the first contains the profile; the second contains 	the profile sigma.    ");
  
  

libdata[libdataItem++] = new Array("./pg_ptassoc.html", "pg_ptassoc.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ptassoc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ptassoc.html#pg_ptassoc", "pg_ptassoc", 'routine in <a href="./pg_ptassoc.html">pg_ptassoc.pro</a>', "pg_ptassoc.pro", "", "pg_ptassoc", "	Associates points between two arrays by searching for the most 	frequent offset between the two.    	Points are associated by searching for the most frequent offset 	between scan points and model points.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_ptscan, pg_ptscan_coeff, 	pg_cvchisq, pg_ptchisq, pg_threshold    ", "radiusdxymaxcountscan_ptdPOINT(s) containing first array, typically 			an array of candidate points detected in an image.   model_ptdPOINT(s) containing the second array, typically 			an array of computed model points.   assoc_model_ptd", "NV/PG", " 	Written by:	Spitale, 3/2004   	POINT containing an associated scan point for each output 	model point in assoc_model_ptd.    ");
  
  

libdata[libdataItem++] = new Array("./pg_ptchisq.html", "pg_ptchisq.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ptchisq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ptchisq.html#pg_ptchisq", "pg_ptchisq", 'routine in <a href="./pg_ptchisq.html">pg_ptchisq.pro</a>', "pg_ptchisq.pro", "", "pg_ptchisq", "	Computes chi-squared value for given point fit parameters.    	The caller is responsible for ensuring that the input parameters are 	consistent with those used with other programs like pg_fit.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, 	pg_ptchisq, pg_fit, pg_threshold    ", "axis_ptdPOINT containing a single image  point 			to be used as the axis of rotation.   fix	Array specifying which parameters to fix as 			[dx,dy,dtheta].   dxy	2-element vector giving the translation as [dx,dy].   dtheta	Rotation in radians.   scan_ptdArray (n_points) of POINT output from 			pg_ptscan containing scanned image points as well as 			other necessary scan data.   ", "NV/PG", " 	Written by:	Haemmerle, 12/1998   	Single chi-square values for totality of points.    ");
  
  

libdata[libdataItem++] = new Array("./pg_ptcntrd.html", "pg_ptcntrd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ptcntrd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ptcntrd.html#pg_ptcntrd", "pg_ptcntrd", 'routine in <a href="./pg_ptcntrd.html">pg_ptcntrd.pro</a>', "pg_ptcntrd.pro", "", "pg_ptcntrd", "	Attempts to find points of highest correlation with a given model 	centered near given features in an image, then returns the centroid.    	xx    	Currently does not work for multiple time steps.    	For each visible object, a section of the image of size width +        the size of the model is extracted and sent to routine ptloc to        find the pixel offset with the highest correlation with the given        model. Then call astrolib routine cntrd to return centroid.    ", "model         Point spread model to be used in correlation.  If                        not given a default gaussian is used.   width         Width to search around expected point location.  If                        not given, a default width of 20 pixels is used.   edge          Distance from edge from which to ignore points.  If                        not given, an edge distance of 0 is used.   ccmin         If given, points are discarded if the correlation                        is below this value.   gdmax         If given, points are discarded if the gradiant of                        the correlation function is higher than this value.   dd	Data descriptor   object_ptd	Array (n_pts) of POINT giving the points. 			Only the image coordinates of the points need to be 			specified.   ", "NV/PG", " 	Written by:	Haemmerle, 5/1998   	To find stellar positions with a correlation higher than 0.6...         star_ptd=pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, /rm, /globe        ptscan_ptd=pg_ptscan(dd, star_ptd, edge=30, width=40, ccmin=0.6)   SEE ALSO: 	ptscan, pg_ptscan   STATUS: 	Complete. 	An array of type POINT giving the detected position for        each object.  The correlation coeff values for each detection is        saved in the data portion of POINT with tag 'scan_cc'.        The x and y offset from the given position is also saved.    ");
  
  

libdata[libdataItem++] = new Array("./pg_ptfarscan.html", "pg_ptfarscan.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ptfarscan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ptfarscan.html#pg_ptfarscan", "pg_ptfarscan", 'routine in <a href="./pg_ptfarscan.html">pg_ptfarscan.pro</a>', "pg_ptfarscan.pro", "", "pg_ptfarscan", "	Attempts to find all occurrences of a model in an image.    ", "namemodel         Point spread model to be used in correlation.  If                        not given a default gaussian is used.   edge          Distance from edge from which to ignore points.  If                        not given, an edge distance of 0 is used.   ccmin         Minimum correlation to consider in search.  Default 			is 0.8.   gdmax         If given, points where the gradient of the                        correlation function is higher than this value 			are not considered in the search.   smooth	If given, the input image is smoothed using 			this width before any further processing.   wmod	x, ysize of default gaussian model.   wpsf	Half width of default gaussian psf model.   sky	If set, it is assumed that the image contains only 			point sources and sky.  Any object more than nsig 			standard deviations above the image mean are 			selected as candidates.   nsig	For use with the /sky option, standard deviation 			threshold for detecting point sources.   median	If given, the input image is filtered using 			a median filter of this width before any further 			processing.   mask	If set, an attempt is made to mask out extended 			objects before performing the scan   extend	If nonzero, star masks are extended by this 			many pixels in all directions.   nmax	Max. number of point sources to return.  If more 			are found, nsig is raised until thiws is satisified.   chifitdd	Data descriptor   ", "NV/PG", " 	Written by:	Spitale 2/2004   	An array of type POINT giving the detected position for        each object.  The correlation coeff value for each detection is        saved in the data portion of POINT with tag 'scan_cc'.    SEE ALSO: 	pg_ptscan   STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("./pg_ptscan.html", "pg_ptscan.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ptscan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ptscan.html#pg_ptscan", "pg_ptscan", 'routine in <a href="./pg_ptscan.html">pg_ptscan.pro</a>', "pg_ptscan.pro", "", "pg_ptscan", "	Attempts to find points of highest correlation with a given model 	centered near given features in an image.    	Currently does not work for multiple time steps, only considers 	one point per given POINT.    	For each visible object, a section of the image of size width +        the size of the model is extracted and sent to routine ptloc to        find the pixel offset with the highest correlation with the given        model.    ", "model         Point spread model to be used in correlation.  If                        not given a default gaussian is used.   radius	Width outside of which to exclude detections whose 			offset varies too far from the most frequent offset. 			Detections with offsets outside this radius receive 			correlation coefficients of zero.   width         Width to search around expected point location.  If                        not given, a default width of 20 pixels is used.   edge          Distance from edge from which to ignore points.  If                        not given, an edge distance of 0 is used.   ccmin         If given, points are discarded if the correlation                        is below this value.   gdmax         If given, points are discarded if the gradiant of                        the correlation function is higher than this value.   smooth	If given, the input image is smoothed using 			this width before any further processing.   showwmod	x, ysize of default gaussian model.   wpsf	Half-width of default gaussian psf model.   median	If given, the input image is filtered using 			a median filter of this width before any further 			processing.   chisqmaxMax chisq between the model and the image.   cc_outroundspikedd	Data descriptor   object_ptd	Array (n_pts) of POINT giving the points. 			Only the image coordinates of the points need to be 			specified.   ", "NV/PG", " 	Written by:	Haemmerle, 5/1998 	Modified:	Spitale 9/2002 -- added twice model width to search 			width.   	To find stellar positions with a correlation higher than 0.6...         star_ptd=pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, /rm, /globe        ptscan_ptd=pg_ptscan(dd, star_ptd, edge=30, width=40, ccmin=0.6)   SEE ALSO: 	pg_ptfarscan   STATUS: 	Complete. 	An array of type POINT giving the detected position for        each object.  The correlation coeff value for each detection is        saved in the data portion of POINT with tag 'scan_cc'.        The x and y offset from the given position is also saved.    ");
  
  

libdata[libdataItem++] = new Array("./pg_ptscan_coeff.html", "pg_ptscan_coeff.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ptscan_coeff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ptscan_coeff.html#pg_ptscan_coeff", "pg_ptscan_coeff", 'routine in <a href="./pg_ptscan_coeff.html">pg_ptscan_coeff.pro</a>', "pg_ptscan_coeff.pro", "", "pg_ptscan_coeff", "	Computes linear least-squares coefficients for a fit to the image 	coordinate offset which matches a point to a feature in an image.           pg_ptscan_coeff extracts the scan data from the given        scan_ptd structure and uses ipt_coeff to compute the coefficients.        See the documentation for that routine for details.    ", "axis_ptd       POINT containing a single image point                        to be used as the axis of rotation in the fit for                        every point.   fix           Array specifying which parameters to fix in the                        fit as [dx,dy,dtheta].;   model_ptdpts_ptd        Array (n_pts) of POINT output from                        pg_ptscan containing image points as well as                        other necessary data.;   ", "NV/PG", " 	Written by:	Haemmerle, 5/1998          The following command uses data from pg_ptscan to compute        least square coefficients for a fit such that only dx and dtheta        will be allowed to vary:         optic_ptd = pnt_create_descriptors(points=cam_oaxis(cd))        ptscan_cf = pg_ptscan_coeff(pts_ptd, axis=optic_ptd, fix=[1])         In this call, pts_ptd is a POINT containing the point data        from pg_ptscan and optic_ptd is a POINT giving the optic axis        of the camera as computed by cam_oaxis.    STATUS: 	Complete.        Array (n_pts) of pg_fit_coeff_struct containing coefficients for        the least-square fit to be input to pg_fit.    ");
  
  

libdata[libdataItem++] = new Array("./pg_put_cameras.html", "pg_put_cameras.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_put_cameras.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_put_cameras.html#pg_put_cameras", "pg_put_cameras", 'routine in <a href="./pg_put_cameras.html">pg_put_cameras.pro</a>', "pg_put_cameras.pro", "", "pg_put_cameras", "	Outputs camera descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	Camera descriptors are passed to the translators.  Any camera 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_planets, pg_put_rings, pg_put_stars, pg_put_maps    ", "gdGeneric descriptor.  If present, camera descriptors are 		taken from the gd.cd field.  	cam_*:		All camera override keywords are accepted.   cdsCamera descriptors to output.   cam_namecam_timecam_orientcam_avelcam_poscam_velcam_scalecam_oaxiscam_sizecam_fn_psfcam_opaquecam_exposurecam_fn_focal_to_imagecam_fn_image_to_focalcam_fn_datacam_filterscam_fn_filtertr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.   tr_firstddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("./pg_put_maps.html", "pg_put_maps.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_put_maps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_put_maps.html#pg_put_maps", "pg_put_maps", 'routine in <a href="./pg_put_maps.html">pg_put_maps.pro</a>', "pg_put_maps.pro", "", "pg_put_maps", "	Outputs map descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	Map descriptors are passed to the translators.  Any map 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_planets, pg_put_rings, pg_put_stars, pg_put_cameras    ", "gdGeneric descriptor.  If present, map descriptors are 		taken from the gd.md field.  	map_*:		All map override keywords are accepted.   mdsMap descriptors to output.   map_namemap_typemap_sizemap_scalemap_eccmap_originmap_centermap_rangemap_offsetmap_limitsmap_fn_map_to_imagemap_fn_image_to_mapmap_fn_data_pmap_unitsmap_graphicmap_rotatemap_radiitr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.   tr_firstddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("./pg_put_planets.html", "pg_put_planets.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_put_planets.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_put_planets.html#pg_put_planets", "pg_put_planets", 'routine in <a href="./pg_put_planets.html">pg_put_planets.pro</a>', "pg_put_planets.pro", "", "pg_put_planets", "	Outputs planet descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	Planet descriptors are passed to the translators.  Any planet 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_cameras, pg_put_rings, pg_put_stars, pg_put_maps    ", "pdsPlanet descriptors to output.   odsgdGeneric descriptor.  If present, planet descriptors are 		taken from the gd.pd field.  	plt_*:		All planet override keywords are accepted.   plt_nameplt_timeplt_orientplt_avelplt_posplt_velplt_radiiplt_loraplt_opaqueplt_opacityplt_massplt_refl_fnplt_refl_parmplt_phase_fnplt_phase_parmplt_albedotr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.   tr_firstddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("./pg_put_rings.html", "pg_put_rings.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_put_rings.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_put_rings.html#pg_put_rings", "pg_put_rings", 'routine in <a href="./pg_put_rings.html">pg_put_rings.pro</a>', "pg_put_rings.pro", "", "pg_put_rings", "	Outputs ring descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	Ring descriptors are passed to the translators.  Any ring 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_planets, pg_put_cameras, pg_put_stars, pg_put_maps    ", "rdsRing descriptors to output.   odsgdGeneric descriptor.  If present, ring descriptors are 		taken from the gd.rd field.  	rng_*:		All ring override keywords are accepted.   rng_namerng_primaryrng_timerng_orientrng_avelrng_posrng_velrng_smarng_eccrng_daprng_opaquerng_opacityrng_nmrng_mrng_emrng_wmrng_dwmdttr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.   tr_firstddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("./pg_put_stars.html", "pg_put_stars.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_put_stars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_put_stars.html#pg_put_stars", "pg_put_stars", 'routine in <a href="./pg_put_stars.html">pg_put_stars.pro</a>', "pg_put_stars.pro", "", "pg_put_stars", "	Outputs star descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	CameStarra descriptors are passed to the translators.  Any star 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_planets, pg_put_rings, pg_put_cameras, pg_put_maps    ", "sdsStar descriptors to output.   odsgdGeneric descriptor.  If present, star descriptors are 		taken from the gd.sd field.  	str_*:		All star override keywords are accepted.   str_namestr_timestr_orientstr_avelstr_posstr_velstr_radiistr_lorastr_lumstr_spstr_opaquestr_opacitytr_disabletr_overrideString giving a comma-separated list of translators 			to use instead of those in the translators table.  If 			this keyword is specified, no translators from the 			table are called, but the translators keywords 			from the table are still used.   tr_firstddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   end_keywords", "NV/PG", " 	Written by:	Spitale, 1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("./pg_range.html", "pg_range.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_range.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_range.html#pg_range", "pg_range", 'routine in <a href="./pg_range.html">pg_range.pro</a>', "pg_range.pro", "", "pg_range", "	Computes distance between the centers of two bodies.    ", "bx1Array (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   bx2Array (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   ", "NV/PG", " 	Written by:	Spitale, 11/2001   	Array (n_objects) doubles giving the ranges.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_ray.html", "pg_ray.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ray.pro", "", "", "	Computes image points on each specified ray.    ", "", "          -1", " 	Written by:	Spitale, 9/2012   ");
  
  
  libdata[libdataItem++] = new Array("./pg_ray.html#pgr_density_uniform", "pgr_density_uniform", 'routine in <a href="./pg_ray.html">pg_ray.pro</a>', "pg_ray.pro", "", "pgr_density_uniform", "", "npnvlen", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_ray.html#pg_ray", "pg_ray", 'routine in <a href="./pg_ray.html">pg_ray.pro</a>', "pg_ray.pro", "", "pg_ray", "", "rvlencdbxgdfovcullnpointscatdensity_fndispersion", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_reflection.html", "pg_reflection.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_reflection.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_reflection.html#pg_reflection", "pg_reflection", 'routine in <a href="./pg_reflection.html">pg_reflection.pro</a>', "pg_reflection.pro", "", "pg_reflection", "	Computes image coordinates of given inertial vectors projected onto 	surface of the given disks and globes with respect to the given 	observer.  Returns only the closest reflection point for each objoect 	point.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   dkxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of DISK.   gbxArray (n_globes, n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.   bxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   gdGeneric descriptor.  If given, the cd, dkx, gbx, and bx inputs 		are taken from the corresponding fields of this structure 		instead of from those keywords.  	  All other keywords are passed directly to pg_reflection_globe 	  and pg_reflection_disk and are documented with those programs.   revealfovnocullallobject_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 6/2016   	Array (n_disks,n_objects) of POINT containing image 	points and the corresponding inertial vectors.    STATUS:     SEE ALSO: 	pg_reflection_disk, pg_reflection_globe, pg_reflection_points    ");
  
  

libdata[libdataItem++] = new Array("./pg_reflection_disk.html", "pg_reflection_disk.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_reflection_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_reflection_disk.html#pg_reflection_disk", "pg_reflection_disk", 'routine in <a href="./pg_reflection_disk.html">pg_reflection_disk.pro</a>', "pg_reflection_disk.pro", "", "pg_reflection_disk", "	Computes image coordinates of given inertial vectors reflected onto 	surface of the given disk with respect to the given observer.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the camera descriptor in gd is used. 		Only one observer is allowed.   dkxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of DISK.   gdGeneric descriptor.  If given, the cd and dkx inputs 		are taken from the cd and dkx fields of this structure 		instead of from those keywords.   nocullall_ptdreveal Normally, disks whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   fov If set reflection points are cropped to within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   all If set, all points are returned, even if invalid.   object_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 1/2002   ");
  
  

libdata[libdataItem++] = new Array("./pg_reflection_globe.html", "pg_reflection_globe.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_reflection_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_reflection_globe.html#pg_reflection_globe", "pg_reflection_globe", 'routine in <a href="./pg_reflection_globe.html">pg_reflection_globe.pro</a>', "pg_reflection_globe.pro", "", "pg_reflection_globe", "	Computes image coordinates of the given inertial vectors projected onto 	surface of the given globe with respect to the given observer.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   gbxArray (n_globes, n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.   gdGeneric descriptor.  If given, the cd and gbx inputs 		are taken from the cd and gbx fields of this structure 		instead of from those keywords.   nocullreveal Normally, disks whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   fov If set reflection points are cropped to within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   all If set, all points are returned, even if invalid.   nosolveIf set, reflection points are not computed.   object_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 6/2016   	Array (n_globes,n_objects) of POINT containing image 	points and the corresponding inertial vectors.    STATUS: 	Not tested    SEE ALSO: 	pg_reflection, pg_reflection_disk, pg_reflection_points    ");
  
  

libdata[libdataItem++] = new Array("./pg_render.html", "pg_render.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_render.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_render.html#pg_render", "pg_render", 'routine in <a href="./pg_render.html">pg_render.pro</a>', "pg_render.pro", "", "pg_render", "	Performs rendering on an array of bodies.        ", "cd      Camera descriptor.   sund        Star descriptor for the Sun.   bx      Array of object descriptors; must be a subclass of BODY.   ddmap       Array of data descriptors containing the body maps, 	              one for each body.  If not given, maps are loaded using 		      pg_load_maps.   md          Array of map descriptors for each ddmap.   sample      Amount by which to subsample pixels.   pc_size     To save memory, the projection is performed in pieces 	              of this size.  Default is 65536.   showpht_minno_phtmap       2-D array containing the rendered scene.    standoff    If given, secondary vectors are advanced by this distance 	              before tracing in order to avoid hitting target bodies 	              through round-off error.   limit_sourceIf set, secondary vectors originating on a given 	              body are not considered for targets that are the 	              same body.  Default is on.   nodd        If set, no data descrptor is produced.  The return value 	              is zero and the rendering is returned via the IMAGE 	              keyword.   psf         If set, the rendering is convolved with a point-spread 	              function.  If /psf, then the PSF is obtained via cd; if 	              psf is a 2D array, then is is used as the PSF.   npsf        Width of psf array to use if PSF is obtained via cd. 	              Default is 10.   penumbra    If set, lighting rays are traced to random points on 	              each secondary body rather then the center.   no_secondaryIf set, no secondary ray tracing is performed, 	              resulting in no shadows.   image_ptd   POINT or array with image points 	              specifying the grid to trace.  If not set, the entire 	              image described by cd is used.  The array can have 	              dimensions of (2,np) or (2,nx,ny).  If the latter, 	              the output map will have dimensions (nx,ny).  Note 	              that a PSF cannot be applied if nx and ny are not known.   mask_width  Width of trace mask.  Default is 512.  If set to zero, 	              no masking is performed.   no_maps     If set, maps are not loaded.    ", "NV/PG", " 	Written by:	Spitale      STATUS: 	Complete 	Data descriptor containing the rendered image.    ");
  
  

libdata[libdataItem++] = new Array("./pg_repoint.html", "pg_repoint.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_repoint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_repoint.html#pg_repoint", "pg_repoint", 'routine in <a href="./pg_repoint.html">pg_repoint.pro</a>', "pg_repoint.pro", "", "pg_repoint", "	Modifies the camera orientation matrix based on the given image 	coordinate translation and rotation.    	pg_repoint adds its name to the task list of each given camera 	descriptor.    STATUS: 	Complete    SEE ALSO: 	pg_fit, pg_drag    ", "cd If given, the camera descriptor is modified with a new 		 orientation matrix.   gd If given in this way, the camera descriptor contained in the 		 generic descriptor is modified with a new orientation matrix.    axis_ptdPOINT containing a single image point 		 to be used as the axis of rotation.  Default is the camera 		 optic axis.   bore_cd Array (nt) of camera descriptors from which to copy the 		  new orientation instead of using dxy, dtheta, and axis_ptd.   bore_rotIf given, the orientation from bore_cd will be rotated 		  using this rotation matrix (3,3) before being copied.   bore_dxyBoresight offset in pixels.   absoluteIf set, the dxy argument represents and abosolute image 		  position rather than an offset.   _dxy	Array (2,1,nt) or (2,1) specifying the 			translation as [dx,dy] in pixels.   _dtheta	Array (nt) specfying the rotation angle in radians.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   ");
  
  

libdata[libdataItem++] = new Array("./pg_repos.html", "pg_repos.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_repos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_repos.html#pg_repos", "pg_repos", 'routine in <a href="./pg_repos.html">pg_repos.pro</a>', "pg_repos.pro", "", "pg_repos", "	Modifies the body position based on the given offset and observer.    	pg_repos modifies bx and adds its name to the task list of each given 	descriptor.    STATUS: 	Complete    ", "bx   Array (nt) of body descriptors to translate.   od   Observer descriptor; specifies the body frame for the 		   translation vector.   ref_bx  Body descriptor giving reference position for directional 		   keywords.   toward   Body should be translated toward ref_bx (default).   away     Body should be translated away from ref_bx.   at       Body should be placed at the position of ref_bx.   along    Index of bx axis along which to translate.    _dv	Array (nv,3,nt) specifying the translation vector. 			The components are assumed to be given wrt to the 			inertial frame unless od is given.  In that case 			dv is interpreted as a vector in the body frame of od.  			For convenience, if dv is given in the nonstandard form 			of a 3-element array, it is reinterpreted as a column 			vector (1,3).  			If ref_bx is given, then dv is interpreted as a distance 			and the direction is constructed from one of the directional 			keywords below.   ", "NV/PG", " 	Written by:	Spitale, 3/2007   ");
  
  

libdata[libdataItem++] = new Array("./pg_resfit.html", "pg_resfit.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_resfit.pro", "", "", "	Computes polynomial coefficients for a camera distortion model by 	comparing detected reseaus with the known focal plane locations.    	First, candidate reseaus are associated with nominal reseaus by 	choosing the candidate with the highest correlation coefficient 	within a given number of pixels surrounding each known reseau.  	Next, coefficients for a polynomial of order n are derived using a 	least-squares fit.    STATUS: 	Complete    SEE ALSO: 	pg_resloc, pg_linearize_image, pg_blemish    ", "", "          -1", " 	Written by:	Spitale, 5/2002   ");
  
  
  libdata[libdataItem++] = new Array("./pg_resfit.html#pgrf_associate_marks", "pgrf_associate_marks", 'routine in <a href="./pg_resfit.html">pg_resfit.pro</a>', "pg_resfit.pro", "", "pgrf_associate_marks", "", "scan_ptsfoc_ptsccrange", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_resfit.html#pgrf_get_matches", "pgrf_get_matches", 'routine in <a href="./pg_resfit.html">pg_resfit.pro</a>', "pg_resfit.pro", "", "pgrf_get_matches", "", "nom_ptdfpspscan_subfoc_ptsscan_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_resfit.html#pg_resfit", "pg_resfit", 'routine in <a href="./pg_resfit.html">pg_resfit.pro</a>', "pg_resfit.pro", "", "pg_resfit", "", "cdgdrangenom_ptdres_ptdscpfcpassocuse_nomscan_ptdfoc_ptdn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_residuals.html", "pg_residuals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_residuals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_residuals.html#pg_residuals", "pg_residuals", 'routine in <a href="./pg_residuals.html">pg_residuals.pro</a>', "pg_residuals.pro", "", "pg_residuals", "	Computes residuals value for given curve- or point-fit parameters.    ", "scan_ptdArray (n_curves) of POINT output from 			pg_cvscan or pg_ptscan containing scan data.   ", "NV/PG", " 	Written by:	Spitale   	Array (2,n_curves) of residuals.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_resloc.html", "pg_resloc.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_resloc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_resloc.html#pg_resloc", "pg_resloc", 'routine in <a href="./pg_resloc.html">pg_resloc.pro</a>', "pg_resloc.pro", "", "pg_resloc", "	Scans an image for candidate reseau marks.    	A correlation map is computed across image.  Candidates reseau marks 	are identified as local maxima in the correlation map by accepting 	points where the correlation is above the specified threshold and 	where the gradient of the correlation map is below the specified 	threshold.    STATUS: 	Complete    SEE ALSO: 	pg_resfit, modloc    ", "edge Distance from edge within which points are ignored.   model 2-D array giving a model of the reseau image.  Default model 		is an inverted Gaussian.   ccmin Minimum correlation coefficient to accept.  Default is 0.8 .   gdmax Maximum gradiant of correlation coefficient to accept. 		Default is 0.25   nom_ptdIf given, reseau marks are searched for only within the 		given radius about each nominal point.   radiusRadius about no_ptd to search.  Default is ten pixels.   ddData descriptor containing the image to scan.   ", "NV/PG", " 	Written by:	Spitale, 1998   	Points structure containing the image coordinates of each candidiate 	reseau mark and the corresponding correlation coefficients.  If not 	marks are found, zero is returned.    ");
  
  

libdata[libdataItem++] = new Array("./pg_retarg.html", "pg_retarg.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_retarg.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_retarg.html#pg_retarg", "pg_retarg", 'routine in <a href="./pg_retarg.html">pg_retarg.pro</a>', "pg_retarg.pro", "", "pg_retarg", "	Modifies the camera orientation such that the optic axis points 	along a given vector, or toward a specified body.    	pg_retarg modifies cd and adds its name to the task list of each given 	descriptor.    STATUS: 	Complete    ", "cd Camera descriptor to repoint.   bx Body descriptor at which to point.   ref_bxtowardCamera should be pointed toward bx (default).   away  Camera should be pointed away from bx.   along  Index of bx axis along which to point.    vInertial vector giving new optic axis direction.   ", "NV/PG", " 	Written by:	Spitale, 3/2007   ");
  
  

libdata[libdataItem++] = new Array("./pg_ring_sector.html", "pg_ring_sector.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ring_sector.pro", "", "", "	Allows the user to select a ring sector by clicking and dragging. 	With the left button, the sector is defined along lines of constant 	radius and longitude.  With the right button, the sides of the sector 	are perpendicular to the projected radial direction.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ring_sector.html#pg_ring_sector", "pg_ring_sector", 'routine in <a href="./pg_ring_sector.html">pg_ring_sector.pro</a>', "pg_ring_sector.pro", "", "pg_ring_sector", "", "cddkxgdradlonsamplewin_numrestoreslopep0buttonxor_graphicscolornoverbosenodsk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_ring_sector_box.html", "pg_ring_sector_box.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ring_sector_box.pro", "", "", "	Allows the user to select a box to use with pg_profile_ring.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ring_sector_box.html#pg_ring_sector_box", "pg_ring_sector_box", 'routine in <a href="./pg_ring_sector_box.html">pg_ring_sector_box.pro</a>', "pg_ring_sector_box.pro", "", "pg_ring_sector_box", "", "samplewin_numrestorebuttonp0xor_graphicscolornoverbosep", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_ring_sector_box.html#test", "test", 'routine in <a href="./pg_ring_sector_box.html">pg_ring_sector_box.pro</a>', "pg_ring_sector_box.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_ring_sector_box_oblique.html", "pg_ring_sector_box_oblique.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ring_sector_box_oblique.pro", "", "", "	Allows the user to select an oblique box to use with pg_profile_ring.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ring_sector_box_oblique.html#pg_ring_sector_box_oblique", "pg_ring_sector_box_oblique", 'routine in <a href="./pg_ring_sector_box_oblique.html">pg_ring_sector_box_oblique.pro</a>', "pg_ring_sector_box_oblique.pro", "", "pg_ring_sector_box_oblique", "", "lonsamplewin_numrestorep0xor_graphicscolornoverbosep", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_ring_sector_box_oblique.html#test", "test", 'routine in <a href="./pg_ring_sector_box_oblique.html">pg_ring_sector_box_oblique.pro</a>', "pg_ring_sector_box_oblique.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_ring_sector_box_ortho.html", "pg_ring_sector_box_ortho.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ring_sector_box_ortho.pro", "", "", "	Allows the user to select a box to use with pg_profile_ring.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ring_sector_box_ortho.html#pg_ring_sector_box_ortho", "pg_ring_sector_box_ortho", 'routine in <a href="./pg_ring_sector_box_ortho.html">pg_ring_sector_box_ortho.pro</a>', "pg_ring_sector_box_ortho.pro", "", "pg_ring_sector_box_ortho", "", "samplewin_numrestorep0xor_graphicscolornoverbosep", "          -1", "");
  
  libdata[libdataItem++] = new Array("./pg_ring_sector_box_ortho.html#test", "test", 'routine in <a href="./pg_ring_sector_box_ortho.html">pg_ring_sector_box_ortho.pro</a>', "pg_ring_sector_box_ortho.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_ring_sector_oblique.html", "pg_ring_sector_oblique.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ring_sector_oblique.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ring_sector_oblique.html#pg_ring_sector_oblique", "pg_ring_sector_oblique", 'routine in <a href="./pg_ring_sector_oblique.html">pg_ring_sector_oblique.pro</a>', "pg_ring_sector_oblique.pro", "", "pg_ring_sector_oblique", "	Allows the user to select a ring sector by clicking and dragging. 	The top and bottom of the sector are defined along lines of constant 	radius, while the sides are perpendicular to the image-projected 	radial direction.   ", "cd    Camera descriptor.   dkx    Disk descriptor describing the ring.   gd    Generic descriptor containnig the above descriptors.   lonsample    Grid sampling, default is 1.   win_num    Window number of IDL graphics window in which to select                    box, default is current window.   restore    Do not leave the box in the image.   slope    This keyword allows the longitude to vary from the                    perpendicular direction as a function of radius as:                    lon = slope*(rad - rad0).   p0    First corner of box.  If set, then the routine immediately                    begins to drag from that point until a button is released.   xor_graphics    If set, the sector outline is drawn and erased using xor                    graphics instead of a pixmap.   color    Color to use for rectangle, default is !color.   noverbose    If set, messages are suppressed.   nodsk    If set, image points will not be included in the output                    POINT.   ", "NV/PG", "      POINT containing points on the sector outline.  The point       spacing is determined by the sample keyword.  The POINT object       also contains the disk coordinate for each point and the user fields       'nrad' and 'nlon' giving the number of points in radius and longitude.    ORIGINAL AUTHOR : J. Spitale ; 5/2005   ");
  
  

libdata[libdataItem++] = new Array("./pg_ring_sector_perp.html", "pg_ring_sector_perp.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ring_sector_perp.pro", "", "", "	Allows the user to select a ring sector by clicking and dragging. 	The top and bottom of the sector are defined along lines of constant 	radius, while the sides are perpendicular to the image-projected 	radial direction.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ring_sector_perp.html#pg_ring_sector_perp", "pg_ring_sector_perp", 'routine in <a href="./pg_ring_sector_perp.html">pg_ring_sector_perp.pro</a>', "pg_ring_sector_perp.pro", "", "pg_ring_sector_perp", "", "cddkxgdlonsamplewin_numrestoreslopep0xor_graphicscolornoverbosenodskp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_ring_sector_rad.html", "pg_ring_sector_rad.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ring_sector_rad.pro", "", "", "	Allows the user to select a ring sector by clicking and dragging. 	The sector is defined along lines of constant radius and longitude.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ring_sector_rad.html#pg_ring_sector_rad", "pg_ring_sector_rad", 'routine in <a href="./pg_ring_sector_rad.html">pg_ring_sector_rad.pro</a>', "pg_ring_sector_rad.pro", "", "pg_ring_sector_rad", "", "cddkxgdlonsamplewin_numrestoreslopep0xor_graphicscolornoverbosenodsk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_ring_sector_radlon.html", "pg_ring_sector_radlon.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_ring_sector_radlon.pro", "", "", "	Constructs a ring sector outline for use with pg_profile_ring given 	radius and longitude bounds.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_ring_sector_radlon.html#pg_ring_sector_radlon", "pg_ring_sector_radlon", 'routine in <a href="./pg_ring_sector_radlon.html">pg_ring_sector_radlon.pro</a>', "pg_ring_sector_radlon.pro", "", "pg_ring_sector_radlon", "", "cddkxgdsampleslopenodsknlonnradradlon", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./pg_rm_disk.html", "pg_rm_disk.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_rm_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_rm_disk.html#pg_rm_disk", "pg_rm_disk", 'routine in <a href="./pg_rm_disk.html">pg_rm_disk.pro</a>', "pg_rm_disk.pro", "", "pg_rm_disk", "	Hides the given points with respect to each given disk and observer 	at all given time steps.  Points are hidden whether they lie in 	front of or behind the disk.    	The flags arrays in object_ptd are modified.    	For each object in object_ptd, hidden points are computed and 	PTD_MASK_INVISIBLE in the POINT is set.  No points are 	removed from the array.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the observer from which points are hidden.  If no observer 		descriptor is given, the camera descriptor is used.   dkxArray (n_timesteps) of descriptors of objects 		which must be a subclass of DISK.   gdGeneric descriptor.  If given, the cd and dkx inputs 		are taken from the cd and dkx fields of this structure 		instead of from those keywords.   reveal Normally, objects whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   catIf set, the hide_ptd points are concatentated into a single 		POINT.   point_ptdhide_ptdArray (n_disks, n_timesteps) of POINT 			containing the hidden points.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	The following command hides all points which are directly in front of 	or behind the rings as seen by the camera:  	pg_rm_disk, object_ptd, cd=cd, dkx=rd  	In this call, rd is a ring descriptor, and cd is a camera descriptor.    STATUS: 	Complete ");
  
  

libdata[libdataItem++] = new Array("./pg_rm_globe.html", "pg_rm_globe.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_rm_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_rm_globe.html#pg_rm_globe", "pg_rm_globe", 'routine in <a href="./pg_rm_globe.html">pg_rm_globe.pro</a>', "pg_rm_globe.pro", "", "pg_rm_globe", "	Hides the given points with respect to each given globe and observer 	at all given time steps.  Points are hidden whether the lie in front 	of or behind the globe.    	The flags arrays in object_ptd are modified.    	For each object in object_ptd, hidden points are computed and 	PTD_MASK_INVISIBLE in the POINT is set.  No points are 	removed from the array.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the observer from which points are hidden.  If no observer 		descriptor is given, the camera descriptor is used.   gbxArray (n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.   gdGeneric descriptor.  If given, the cd and gbx inputs 		are taken from the cd and gbx fields of this structure 		instead of from those keywords.   reveal Normally, objects whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   catIf set, the hide_ptd points are concatentated into a single 		POINT.   point_ptdhide_ptdArray (n_disks, n_timesteps) of POINT 			containing the hidden points.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	The following command hides all points which are directly in front 	of or behind the planet as seen by the camera:  	pg_rm_globe, object_ptd, cd=cd, gbx=pd  	In this call, pd is a planet descriptor, and cd is a camera descriptor.    STATUS: 	Complete ");
  
  

libdata[libdataItem++] = new Array("./pg_rm_points.html", "pg_rm_points.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_rm_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_rm_points.html#pg_rm_points", "pg_rm_points", 'routine in <a href="./pg_rm_points.html">pg_rm_points.pro</a>', "pg_rm_points.pro", "", "pg_rm_points", "	xx    Environment variables:   	xx:	xx  	xx:	xx    	xx:	xx  	xx:	xx    	xx    	xx    	xx    ", "radiusptdxptd", "NV/PG", " 	Written by:	xx, xx/xx/xxxx   	xx    STATUS: 	xx    SEE ALSO: 	xx, xx, xx 	xx    ");
  
  

libdata[libdataItem++] = new Array("./pg_select.html", "pg_select.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_select.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_select.html#pg_select", "pg_select", 'routine in <a href="./pg_select.html">pg_select.pro</a>', "pg_select.pro", "", "pg_select", "	Allows the user to select objects in an image using the mouse.    ", "noverbose	If set, turns off the notification that cursor 			movement is required.   region	If set, the user selects a region in the image. 			This is the default.   points	If set, the user selects points.   ddData descriptor containing the image.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	Array of subscripts of all image points which lie within the selected 	region.    STATUS: 	Complete    SEE ALSO: 	pg_trim    ");
  
  

libdata[libdataItem++] = new Array("./pg_select_points.html", "pg_select_points.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_select_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_select_points.html#pg_select_points", "pg_select_points", 'routine in <a href="./pg_select_points.html">pg_select_points.pro</a>', "pg_select_points.pro", "", "pg_select_points", "	Allows the user to select points in an image using the mouse.    ", "psym		Plotting symbol to use for the points.   noverbose	If set, turns off the notification that cursor 			movement is required.   color	Color to use for graphics overlays.   p0	Initial point, instead of user selection.   one	If set, the routine will exit after selecting one point.   number	If set, each point will be labeled with a number.   cancelledSet if routine is caused to return by the cancel button.    ptd_outputIf set, a POINT object is returned instead 			of a points array.   ddData descriptor containing the image.   ", "NV/PG", " 	Written by:	Spitale, 9/2001      To print the coordinates of each point as the user selects them, use:     can=0 & while(NOT can) do print, pg_select_points(dd, /one, /nov, can=can)    STATUS: 	Complete 	Array of image points (2,n).    ");
  
  

libdata[libdataItem++] = new Array("./pg_select_region.html", "pg_select_region.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_select_region.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_select_region.html#pg_select_region", "pg_select_region", 'routine in <a href="./pg_select_region.html">pg_select_region.pro</a>', "pg_select_region.pro", "", "pg_select_region", "	Allows the user to select regions in an image using the mouse.    ", "color	Color to use for graphics overlays.    select_buttonIndex of button to use as the select button instead 			of the left button (1).   cancel_buttonIndex of mouse button to be used as a cancel 			button instead of left+middle, (3).   end_buttonIndex of button to use as the end button instead 			of the right button (4).   noverbose	If set, turns off the notification that cursor 			movement is required.   p0	First point of line.  If set, then the routine 			immediately begins to drag from that point until a 			button is released.   autocloseIf set, the region is automaticaly closed when the 			end button is pressed.   points	If set, the selected points are returned instead 			of enclosed indices.   noclosedatabox	If set, a rectanguar region is selected.    image_ptsddData descriptor containing the image.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	Array of subscripts of all image points which lie within the selected 	region.  -1 is returned if the cancel button is pressed.    STATUS: 	Complete    SEE ALSO: 	pg_trim    ");
  
  

libdata[libdataItem++] = new Array("./pg_shadow.html", "pg_shadow.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_shadow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_shadow.html#pg_shadow", "pg_shadow", 'routine in <a href="./pg_shadow.html">pg_shadow.pro</a>', "pg_shadow.pro", "", "pg_shadow", "	Computes image coordinates of given inertial vectors projected onto 	surface of the given disks and globes with respect to the given 	observer.  Returns only the closest shadow point for each objoect 	point.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   dkxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of DISK.   gbxArray (n_globes, n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.   bxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   gdGeneric descriptor.  If given, the cd, dkx, gbx, and bx inputs 		are taken from the corresponding fields of this structure 		instead of from those keywords.  	  All other keywords are passed directly to pg_shadow_globe 	  and pg_shadow_disk and are documented with those programs.   revealfovnocullallbothbackshadowepsilonnosolveobject_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 1/2002   	Array (n_disks,n_objects) of POINT containing image 	points and the corresponding inertial vectors.    STATUS:     SEE ALSO: 	pg_shadow_disk, pg_shadow_globe, pg_shadow_points    ");
  
  

libdata[libdataItem++] = new Array("./pg_shadow_disk.html", "pg_shadow_disk.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_shadow_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_shadow_disk.html#pg_shadow_disk", "pg_shadow_disk", 'routine in <a href="./pg_shadow_disk.html">pg_shadow_disk.pro</a>', "pg_shadow_disk.pro", "", "pg_shadow_disk", "	Computes image coordinates of given inertial vectors projected onto 	surface of the given disk with respect to the given observer.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   dkxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of DISK.   gbxgdGeneric descriptor.  If given, the cd and gbx inputs 		are taken from the cd and gbx fields of this structure 		instead of from those keywords.   nocullboth If set, both shadows and backshadows are returned.   reveal Normally, disks whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   fov If set shadow points are cropped to within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   backshadow If set, only backshadows (shadows cast between the object and  		 observer) are returned.   all If set, all points are returned, even if invalid.   epsilonIf set, shadow points that are closer than this amount 		 to the source point will be excluded.   object_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 1/2002   	Array (n_disks,n_objects) of POINT containing image 	points and the corresponding inertial vectors.    STATUS:     SEE ALSO: 	pg_shadow, pg_shadow_globe, pg_shadow_points    ");
  
  

libdata[libdataItem++] = new Array("./pg_shadow_globe.html", "pg_shadow_globe.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_shadow_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_shadow_globe.html#pg_shadow_globe", "pg_shadow_globe", 'routine in <a href="./pg_shadow_globe.html">pg_shadow_globe.pro</a>', "pg_shadow_globe.pro", "", "pg_shadow_globe", "	Computes image coordinates of the given inertial vectors projected onto 	surface of the given globe with respect to the given observer.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   gbxArray (n_globes, n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.   gdGeneric descriptor.  If given, the cd and gbx inputs 		are taken from the cd and gbx fields of this structure 		instead of from those keywords.   nocullboth If set, both shadows and backshadows are returned.   reveal Normally, disks whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   fov If set shadow points are cropped to within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   backshadow If set, only backshadows (shadows cast between the object and  		 observer) are returned.   all If set, all points are returned, even if invalid.   epsilonIf set, shadow points that are closer than this amount 		 to the source point will be excluded.   nosolveIf set, shadow points are not computed.   object_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 1/2002   	Array (n_globes,n_objects) of POINT containing image 	points and the corresponding inertial vectors.    STATUS:     SEE ALSO: 	pg_shadow, pg_shadow_disk, pg_shadow_points    ");
  
  

libdata[libdataItem++] = new Array("./pg_shadow_points.html", "pg_shadow_points.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_shadow_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_shadow_points.html#pg_shadow_points", "pg_shadow_points", 'routine in <a href="./pg_shadow_points.html">pg_shadow_points.pro</a>', "pg_shadow_points.pro", "", "pg_shadow_points", "	Determines whether each given point is shadowed by the given object.    	Shadowed points are flagged as invisible.    STATUS:     SEE ALSO: 	pg_shadow, pg_shadow_globe, pg_shadow_disk    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   bxArray (nbx, n_timesteps) of descriptors of objects 		which must be a subclass of BODY describing the shadowing 		bodies.   gdGeneric descriptor.  If given, the cd and bx inputs 		are taken from the corresponding fields of this structure 		instead of from those keywords.   noculledge If set, only points near the edge of the shadow are returned.   nosolvefov If set shadow points are cropped to within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   both If set, both shadows and backshadows are returned.   backshadow If set, only backshadows (shadows cast between the object and  		 observer) are considered.   object_ptdArray of POINT containing inertial vectors 			to shadow.   shadow_ptd", "NV/PG", " 	Written by:	Spitale, 9/2012   	shadow_ptd:	Array of POINT containing the shadowed 			points.    ");
  
  

libdata[libdataItem++] = new Array("./pg_shift.html", "pg_shift.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_shift.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_shift.html#pg_shift", "pg_shift", 'routine in <a href="./pg_shift.html">pg_shift.pro</a>', "pg_shift.pro", "", "pg_shift", "	Shifts the given image by a non-integer offset and adjusts the camera 	pointing accordingly.    	The given data and camera descriptors are modified: the images are 	shifted and the camera descriptor optic axes are changed accordingly.    STATUS: 	xx    ", "cdArray of camera descripors, one for each input image.   gdGeneric descriptor containing the camera and body 		descriptors or an array of generic descriptors, one for each 		input image.    ddArray of data descriptors giving images to shift.   dxy", "NV/PG", " 	Written by:	Spitale, 7/2008   ");
  
  

libdata[libdataItem++] = new Array("./pg_spikes.html", "pg_spikes.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_spikes.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_spikes.html#pg_spikes", "pg_spikes", 'routine in <a href="./pg_spikes.html">pg_spikes.pro</a>', "pg_spikes.pro", "", "pg_spikes", "	Locates spurious features like cosmic-ray hits.     	Clusters of hot pixels of size 'scale' are identified by looking 	for regions bounded by large gradients.  Each cluster is then 	examined for pixels whose values are larger than nsig standard 	deviations above the local mean.    STATUS: 	Complete    SEE ALSO: 	pg_despike, pg_mask    ", "nsig	Number of standard deviations above the local 			mean data value to flag for removal.  Default is 2.   grad	Minimum data value gradient to use when searching 			for clusters of hot pixels.  Default is 5.   maskumask	Byte image of the same size as the input image 			in which nonzero pixel values indicate locations 			where spikes should not be flagged.   extend	Number of pixels away from masked pixels before 			locations may be flagged as spikes.   scale	Typical size of objects to be flagged.  Default is 10.   edge	Regions closer than this to the edge of the image 			will be ignored.  Default is 10.   local	Multiplier that determines the width of the region 			over which the local mean and standard deviation are 			taken.  That width is local * scale.  Default is 5.   nohotallpix	If set, all pixels in the spike region are returned 			instead of of the centroids.   dd	Data descriptor containing the image to be despiked.   ", "NV/PG", " 	Written by:	Spitale, 4/2005   	dd = dat_read(filename) 	spike_ptd = pg_spikes(dd) 	dd1 = pg_despike(dd, spike_ptd) 	POINT containing the detected spike points.    ");
  
  

libdata[libdataItem++] = new Array("./pg_station.html", "pg_station.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_station.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_station.html#pg_station", "pg_station", 'routine in <a href="./pg_station.html">pg_station.pro</a>', "pg_station.pro", "", "pg_station", "	Computes image points for given station descriptors.    ", "cdArray (n_timesteps) of camera descriptors.   stdArray (n_objects, n_timesteps) of descriptors of objects 		that must be a subclass of STATION.   gbxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of GLOBE.   dkxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of DISK.   bxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of BODY, instead of gbx or dkx.   gdGeneric descriptor.  If given, the cd and gbx inputs 		are taken from the cd and gbx fields of this structure 		instead of from those keywords.   fov If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the fov keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.    ", "NV/PG", " 	Written by:	Spitale, 10/2012   	Array (n_objects) of POINT containing image points and 	the corresponding inertial vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_stereo_split.html", "pg_stereo_split.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_stereo_split.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_stereo_split.html#pg_stereo_split", "pg_stereo_split", 'routine in <a href="./pg_stereo_split.html">pg_stereo_split.pro</a>', "pg_stereo_split.pro", "", "pg_stereo_split", "	Produces two camera descriptors whose positions are offset 	in the +/-x image directions for computing stereo overlays.     ", "cd	Camera descriptor to be split.   separationstereo separation for the new camera descriptors.   ", "NV/PG", " 	Written by:	Spitale; 7/29/2005   	Array containing two camera descriptors.    STATUS: 	xx    ");
  
  

libdata[libdataItem++] = new Array("./pg_str_limit_mag.html", "pg_str_limit_mag.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_str_limit_mag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_str_limit_mag.html#pg_str_limit_mag", "pg_str_limit_mag", 'routine in <a href="./pg_str_limit_mag.html">pg_str_limit_mag.pro</a>', "pg_str_limit_mag.pro", "", "pg_str_limit_mag", "	Removes stars whose visual magnitude falls outside the given minimum 	and maximum values.    ", "maxMaximum visual magnitude.   minMinimum visual magnitude.   sds", "NV/PG", " 	Written by:	Haemmerle, 1998   	Array of star descriptors whose visual magnitudes fall within the 	specified range.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_strip.html", "pg_strip.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_strip.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_strip.html#pg_strip", "pg_strip", 'routine in <a href="./pg_strip.html">pg_strip.pro</a>', "pg_strip.pro", "", "pg_strip", "	Plots the portion of an image between two chosen points.    ", "width	An odd integer giving the width in pixels of the 			extracted strip (default=5).  This width is rebinned 			to a single pixel for plotting.   nw	When set, each plot is done in a new window.   nomarksSuppresses the marks that show the locations of 			the chosen points, which are difficult to 			entirely erase.   devicexs	Specifies the x-dimension of the window, in pixels. 			Default is 400.   ys	Specifies the y-dimension of the window, in pixels. 			Default is 300.   im	The two-dimensional array from which the 			plotted strip will be extracted.   ", "COM/PG", "       Written by:     Tiscareno, 7/00          NONE    ");
  
  

libdata[libdataItem++] = new Array("./pg_sub_body.html", "pg_sub_body.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_sub_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_sub_body.html#pg_sub_body", "pg_sub_body", 'routine in <a href="./pg_sub_body.html">pg_sub_body.pro</a>', "pg_sub_body.pro", "", "pg_sub_body", "	Computes surface coordinates of sub-body point.    ", "gbxbxgd", "NV/PG", " 	Written by:	Spitale, 11/2001   	Array (n_objects,3) of surface coordinate vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("./pg_threshold.html", "pg_threshold.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_threshold.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_threshold.html#pg_threshold", "pg_threshold", 'routine in <a href="./pg_threshold.html">pg_threshold.pro</a>', "pg_threshold.pro", "", "pg_threshold", "	Excludes points whose associated data lie outside of specified 	thresholds by setting the PTD_MASK_INVISIBLE.    	The input argument object_ptd is modified.    	xx    	The thresholding is performed by cc_threshold.  See the documentation 	for that routine for details.    ", "tag	Tag name for user data array to threshold.  Default 			is 'scan_cc'.   min	Lower threshold - values less than this will be 			excluded.   max	Upper threshold - values greater than this will be 			excluded.   relativeIf set, the max and min arguments will be taken as 			fractions of the maximum value in the array.   scan_ptd", "NV/PG", " 	Written by:	Spitale, 6/1998   	xx    STATUS: 	Complete 	object_ptd:	Modified array of POINT.  PTD_MASK_INVISIBLE 			is set for all excluded points.    ");
  
  

libdata[libdataItem++] = new Array("./pg_tiepoints.html", "pg_tiepoints.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_tiepoints.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_tiepoints.html#pg_tiepoints", "pg_tiepoints", 'routine in <a href="./pg_tiepoints.html">pg_tiepoints.pro</a>', "pg_tiepoints.pro", "", "pg_tiepoints", "       Computes tiepoint image offsets.    ", "cdCamera descriptor.   bxBody descriptor; can be GLOBE or RING.   gbxGlobe descriptor for each globe in image instead of 		specifying bx.   dkxDisk descriptor for each globe in image instead of 		specifying bx.   body_pts	Array of np column vectors giving the body-frame coordinates 		for each tie point.  If this keyword is given as an input, 		then no output is generated.   dxyptd        POINT containing the image points.   ", "NV/PG", "       Written by:     Spitale, 8/2006     1) Manually select a set of tiepoints in a set of images and fit      a pointing offset:  	ndd = n_elements(dd) 	for i=0, ndd-1 do ptd[i] = pg_select_points(dd[i], /ptd)  	body_pts = 0 	for i=0, ndd-1 do $ 	 begin &$ 	  tie_ptd = pg_tiepoints(cd=cd[i], bx=pd[i], ptd[i], body_pts=body_pts) &$ 	  tpcoeff = pg_ptscan_coeff(tie_ptd, fix=[2]) &$ 	  dxy = pg_fit(tpcoeff) &$ 	  pg_repoint, dxy, 0d, cd=cd[i] &$ 	 end       In the above example, the first image is used as a reference;      because body_pts is initially undefined, those points are computed      for the first image, but not subsequently.  Instead, the subsequent      images will have a nonzero offset stored in the tie_ptd structure,      which are then used by pg_ptscan_coeff to compute fit coefficients.    STATUS:        Complete ");
  
  

libdata[libdataItem++] = new Array("./pg_trim.html", "pg_trim.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_trim.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./pg_trim.html#pg_trim", "pg_trim", 'routine in <a href="./pg_trim.html">pg_trim.pro</a>', "pg_trim.pro", "", "pg_trim", "	For each given object, excludes points contained in the given region 	by setting the PTD_MASK_INVISIBLE.    ", "mask	Mask to use instead of PTD_MASK_INVISIBLE.   off	If set, the masked flag bit will be turned off.   dd	Data descriptor containing the image.   object_ptdArray (n_objects) of POINT containing the 			image points to be trimmed.   region	Array of subscripts of image points to be trimmed.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	object_ptd:	The input points are be modified on return.    ");
  
  

libdata[libdataItem++] = new Array("const/pgc_const.html", "pgc_const.pro", '.pro file in <a href="const/dir-overview.html">const/ directory</a>', "pgc_const.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("const/pgc_const.html#pgc_const", "pgc_const", 'routine in <a href="const/pgc_const.html">pgc_const.pro</a>', "pgc_const.pro", "", "pgc_const", "       Returns the values of physical constants relative to whatever system 	of units is selected.    Environment variables:          PGC_UNITS:    	Selects the unit system to use if one has not been set 			using pgc_set_units.    	The name of the selected units system is taken as a prefix for 	the function <prefix>_const, which takes the name of a unit as input 	and returns the value of the selected constant.  See mks_const.pro 	for an example.           pgc_block:     Stores the name of the software-selected unit system.    STATUS:        Complete    SEE ALSO:        pgc_set_units, mks_const    ", "unitsString giving the name of the unit system.  If not given, 		first the comomn block is checked for any unit system 		set using pgc_set_units.  If no unit system exists, then 		the environment variable PGC_UNITS is checked.  If still no 		unit system ecists, then it defaults to 'mks'.   name", "NV/PGC", "       Written by:     Spitale, 3/2006          The value of the named constant is returned relative to the selected 	unit system.    ");
  
  

libdata[libdataItem++] = new Array("const/pgc_get_units.html", "pgc_get_units.pro", '.pro file in <a href="const/dir-overview.html">const/ directory</a>', "pgc_get_units.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("const/pgc_get_units.html#pgc_get_units", "pgc_get_units", 'routine in <a href="const/pgc_get_units.html">pgc_get_units.pro</a>', "pgc_get_units.pro", "", "pgc_get_units", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("const/pgc_set_units.html", "pgc_set_units.pro", '.pro file in <a href="const/dir-overview.html">const/ directory</a>', "pgc_set_units.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("const/pgc_set_units.html#pgc_set_units", "pgc_set_units", 'routine in <a href="const/pgc_set_units.html">pgc_set_units.pro</a>', "pgc_set_units.pro", "", "pgc_set_units", "", "units", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sub/pgs_cat_gd.html", "pgs_cat_gd.pro", '.pro file in <a href="sub/dir-overview.html">sub/ directory</a>', "pgs_cat_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sub/pgs_cat_gd.html#pgs_cat_gd", "pgs_cat_gd", 'routine in <a href="sub/pgs_cat_gd.html">pgs_cat_gd.pro</a>', "pgs_cat_gd.pro", "", "pgs_cat_gd", "", "gd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sub/pgs_count_descriptors.html", "pgs_count_descriptors.pro", '.pro file in <a href="sub/dir-overview.html">sub/ directory</a>', "pgs_count_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sub/pgs_count_descriptors.html#pgs_count_descriptors", "pgs_count_descriptors", 'routine in <a href="sub/pgs_count_descriptors.html">pgs_count_descriptors.pro</a>', "pgs_count_descriptors.pro", "", "pgs_count_descriptors", "	Determines dimensions of an array of input descriptors.    ", "ndntxds	Array (nd,nt) of descriptors.   ", "NV/PGS", " 	Written by:	Spitale   	nd:	First dimension, number of objects, default is 1.  	nt:	Second dimension, number of 'timesteps', default is 1.    ");
  
  

libdata[libdataItem++] = new Array("sub/pgs_desc_suffix.html", "pgs_desc_suffix.pro", '.pro file in <a href="sub/dir-overview.html">sub/ directory</a>', "pgs_desc_suffix.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sub/pgs_desc_suffix.html#pgs_desc_suffix", "pgs_desc_suffix", 'routine in <a href="sub/pgs_desc_suffix.html">pgs_desc_suffix.pro</a>', "pgs_desc_suffix.pro", "", "pgs_desc_suffix", "	Constructs a string describing all input descriptors.    ", "gdGeneric descriptor from which the above special desccriptors 		will be extracted.    dkxgbxbxsundodsrcdxdArray of descriptors of arbitrary class.   ", "NV/PGS", " 	Written by:	Spitale   	String containing a list of descriptions delimited by '/'.     ");
  
  

libdata[libdataItem++] = new Array("sub/pgs_gd.html", "pgs_gd.pro", '.pro file in <a href="sub/dir-overview.html">sub/ directory</a>', "pgs_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sub/pgs_gd.html#pgs_gd", "pgs_gd", 'routine in <a href="sub/pgs_gd.html">pgs_gd.pro</a>', "pgs_gd.pro", "", "pgs_gd", "	Dereferences a generic descriptor.    ", "ddcrdbdmddkxgbxdkdgbdpdsdstdrdcdsundbxodardframe_bdgdGeneric descriptor.   ", "NV/PGS", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("sub/pgs_make_gd.html", "pgs_make_gd.pro", '.pro file in <a href="sub/dir-overview.html">sub/ directory</a>', "pgs_make_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sub/pgs_make_gd.html#pgs_make_gd", "pgs_make_gd", 'routine in <a href="sub/pgs_make_gd.html">pgs_make_gd.pro</a>', "pgs_make_gd.pro", "", "pgs_make_gd", "	Creates a generic descriptor.    ", "gdGeneric descriptor.  Fields from this descriptor will 		be included in the output generic descriptor.  	<x>d:	There is an input keyword for each descriptor type.   ddcrdbdmddkxgbxdkdgbdpdsdstdardrdcdsundbxodxds", "NV/PGS", " 	Written by:	Spitale   	Generic descriptor containing all of the input fields, and any 	descripors contained in gd.  Note that no descriptors are cloned; 	only the pointers are copied.     ");
  
  

libdata[libdataItem++] = new Array("sub/pgs_name_sort.html", "pgs_name_sort.pro", '.pro file in <a href="sub/dir-overview.html">sub/ directory</a>', "pgs_name_sort.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sub/pgs_name_sort.html#pgs_name_sort", "pgs_name_sort", 'routine in <a href="sub/pgs_name_sort.html">pgs_name_sort.pro</a>', "pgs_name_sort.pro", "", "pgs_name_sort", "", "_names", "          -1", "");
  
  

