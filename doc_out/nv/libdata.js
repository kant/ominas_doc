/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "OMINAS API Documentation";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("obj/bod/_bod_aberration_mask.html", "_bod_aberration_mask.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "_bod_aberration_mask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/_bod_aberration_mask.html#_bod_aberration_mask", "_bod_aberration_mask", 'routine in <a href="obj/bod/_bod_aberration_mask.html">_bod_aberration_mask.pro</a>', "_bod_aberration_mask.pro", "", "_bod_aberration_mask", "	Returns a bitmask for an aberration.    ", "name", "NV/LIB/BOD", " 	Written by:	Spitale, 7/2017   	Aberration mask associated with the given name for each given body 	structure.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/_cor_gd.html", "_cor_gd.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "_cor_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/_cor_gd.html#_cor_gd", "_cor_gd", 'routine in <a href="obj/cor/_cor_gd.html">_cor_gd.pro</a>', "_cor_gd.pro", "", "_cor_gd", "	Retrieves the generic descriptor from a CORE structure.  The generic 	descriptor is stored in a protected structure that prevents its contents 	from being freed by nv_free, while still allowing its references to 	be copied by nv_clone.    ", "_xd", "NV/OBJ/COR", " 	Written by:	Spitale		3/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/cor/_cor_set_gd.html", "_cor_set_gd.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "_cor_set_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/_cor_set_gd.html#_cor_set_gd", "_cor_set_gd", 'routine in <a href="obj/cor/_cor_set_gd.html">_cor_set_gd.pro</a>', "_cor_set_gd.pro", "", "_cor_set_gd", "	Sets the generic descriptor in a CORE structure.  The generic 	descriptor is stored in a protected structure that prevents its contents 	from being freed by nv_free, while still allowing its references to 	be copied by nv_clone.    ", "_xdgd	New gd.   ", "NV/OBJ/COR", " 	Written by:	Spitale		3/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/cor/_cor_test_udata.html", "_cor_test_udata.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "_cor_test_udata.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/_cor_test_udata.html#_cor_test_udata", "_cor_test_udata", 'routine in <a href="obj/cor/_cor_test_udata.html">_cor_test_udata.pro</a>', "_cor_test_udata.pro", "", "_cor_test_udata", "	Tests the existence of data stored in a structure under the 	specified name.    ", "_crd Any subclass of CORE.  Only one structure may be provided.   name", "NV/LIB/COR", " 	Written by:	Spitale, 1/2017   	True if the data is stored under the given name, false otherwise.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/_dat_compress_data.html", "_dat_compress_data.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "_dat_compress_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/_dat_compress_data.html#_dat_compress_data", "_dat_compress_data", 'routine in <a href="obj/dat/_dat_compress_data.html">_dat_compress_data.pro</a>', "_dat_compress_data.pro", "", "_dat_compress_data", "", "cdatacabscissa_dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/_dat_compute_size.html", "_dat_compute_size.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "_dat_compute_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/_dat_compute_size.html#_dat_compute_size", "_dat_compute_size", 'routine in <a href="obj/dat/_dat_compute_size.html">_dat_compute_size.pro</a>', "_dat_compute_size.pro", "", "_dat_compute_size", "", "_ddsamples", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/_dat_uncompress_data.html", "_dat_uncompress_data.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "_dat_uncompress_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/_dat_uncompress_data.html#_dat_uncompress_data", "_dat_uncompress_data", 'routine in <a href="obj/dat/_dat_uncompress_data.html">_dat_uncompress_data.pro</a>', "_dat_uncompress_data.pro", "", "_dat_uncompress_data", "", "cdatacabscissa_dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/glb/_glb_get_surface_normal_body.html", "_glb_get_surface_normal_body.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "_glb_get_surface_normal_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/_glb_get_surface_normal_body.html#_glb_get_surface_normal_body", "_glb_get_surface_normal_body", 'routine in <a href="obj/glb/_glb_get_surface_normal_body.html">_glb_get_surface_normal_body.pro</a>', "_glb_get_surface_normal_body.pro", "", "_glb_get_surface_normal_body", "	Computes the surface normals of a GLOBE object at the given 	body-frame positions.  This is an internal routine.    ", "nonormIf set, the returned vectors are not normalized.   _gbdArray (nt) of GLOBE structures.   rArray (nv,3) of surface positions in the BODY frame.    ", "NV/LIB/GLB", " 	Written by:	Spitale, 6/2016   	Array (nv, 3, nt) of surface unit normals in the BODY frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_apply_pole.html", "_map_apply_pole.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_apply_pole.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_apply_pole.html#_map_apply_pole", "_map_apply_pole", 'routine in <a href="obj/map/_map_apply_pole.html">_map_apply_pole.pro</a>', "_map_apply_pole.pro", "", "_map_apply_pole", "", "inverse_mdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_lookup_transformations.html", "_map_lookup_transformations.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_lookup_transformations.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_lookup_transformations.html#_map_lookup_transformations", "_map_lookup_transformations", 'routine in <a href="obj/map/_map_lookup_transformations.html">_map_lookup_transformations.pro</a>', "_map_lookup_transformations.pro", "", "_map_lookup_transformations", "", "_mdfn_map_to_imagefn_image_to_map", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_valid_points.html", "_map_valid_points.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_valid_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_valid_points.html#_map_valid_points", "_map_valid_points", 'routine in <a href="obj/map/_map_valid_points.html">_map_valid_points.pro</a>', "_map_valid_points.pro", "", "_map_valid_points", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_valid_points_mercator.html", "_map_valid_points_mercator.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_valid_points_mercator.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_valid_points_mercator.html#_map_valid_points_mercator", "_map_valid_points_mercator", 'routine in <a href="obj/map/_map_valid_points_mercator.html">_map_valid_points_mercator.pro</a>', "_map_valid_points_mercator.pro", "", "_map_valid_points_mercator", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_valid_points_mollweide.html", "_map_valid_points_mollweide.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_valid_points_mollweide.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_valid_points_mollweide.html#_map_valid_points_mollweide", "_map_valid_points_mollweide", 'routine in <a href="obj/map/_map_valid_points_mollweide.html">_map_valid_points_mollweide.pro</a>', "_map_valid_points_mollweide.pro", "", "_map_valid_points_mollweide", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_valid_points_orthographic.html", "_map_valid_points_orthographic.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_valid_points_orthographic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_valid_points_orthographic.html#_map_valid_points_orthographic", "_map_valid_points_orthographic", 'routine in <a href="obj/map/_map_valid_points_orthographic.html">_map_valid_points_orthographic.pro</a>', "_map_valid_points_orthographic.pro", "", "_map_valid_points_orthographic", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_valid_points_orthographic_disk.html", "_map_valid_points_orthographic_disk.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_valid_points_orthographic_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_valid_points_orthographic_disk.html#_map_valid_points_orthographic_disk", "_map_valid_points_orthographic_disk", 'routine in <a href="obj/map/_map_valid_points_orthographic_disk.html">_map_valid_points_orthographic_disk.pro</a>', "_map_valid_points_orthographic_disk.pro", "", "_map_valid_points_orthographic_disk", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_valid_points_rectangular.html", "_map_valid_points_rectangular.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_valid_points_rectangular.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_valid_points_rectangular.html#_map_valid_points_rectangular", "_map_valid_points_rectangular", 'routine in <a href="obj/map/_map_valid_points_rectangular.html">_map_valid_points_rectangular.pro</a>', "_map_valid_points_rectangular.pro", "", "_map_valid_points_rectangular", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_valid_points_rectangular_disk.html", "_map_valid_points_rectangular_disk.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_valid_points_rectangular_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_valid_points_rectangular_disk.html#_map_valid_points_rectangular_disk", "_map_valid_points_rectangular_disk", 'routine in <a href="obj/map/_map_valid_points_rectangular_disk.html">_map_valid_points_rectangular_disk.pro</a>', "_map_valid_points_rectangular_disk.pro", "", "_map_valid_points_rectangular_disk", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_valid_points_sinusoidal.html", "_map_valid_points_sinusoidal.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_valid_points_sinusoidal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_valid_points_sinusoidal.html#_map_valid_points_sinusoidal", "_map_valid_points_sinusoidal", 'routine in <a href="obj/map/_map_valid_points_sinusoidal.html">_map_valid_points_sinusoidal.pro</a>', "_map_valid_points_sinusoidal.pro", "", "_map_valid_points_sinusoidal", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_valid_points_stereographic.html", "_map_valid_points_stereographic.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_valid_points_stereographic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_valid_points_stereographic.html#_map_valid_points_stereographic", "_map_valid_points_stereographic", 'routine in <a href="obj/map/_map_valid_points_stereographic.html">_map_valid_points_stereographic.pro</a>', "_map_valid_points_stereographic.pro", "", "_map_valid_points_stereographic", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/_map_wrap_points.html", "_map_wrap_points.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "_map_wrap_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/_map_wrap_points.html#_map_wrap_points", "_map_wrap_points", 'routine in <a href="obj/map/_map_wrap_points.html">_map_wrap_points.pro</a>', "_map_wrap_points.pro", "", "_map_wrap_points", "	Forces all map image points to lie inside a specified map by wrapping 	longitudes.    ", "_md_image_ptsArray (2,nv,nt) of map image points.   _map_pts", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,nv,nt) of wrapped map image points.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/_map_wrap_points.html#__map_wrap_points", "__map_wrap_points", 'routine in <a href="obj/map/_map_wrap_points.html">_map_wrap_points.pro</a>', "_map_wrap_points.pro", "", "__map_wrap_points", "", "_md_image_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/map/_map_wrap_points.html#_map_wrap_points", "_map_wrap_points", 'routine in <a href="obj/map/_map_wrap_points.html">_map_wrap_points.pro</a>', "_map_wrap_points.pro", "", "_map_wrap_points", "", "_md_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/pnt/_pnt_resize.html", "_pnt_resize.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "_pnt_resize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/_pnt_resize.html#_pnt_resize", "_pnt_resize", 'routine in <a href="obj/pnt/_pnt_resize.html">_pnt_resize.pro</a>', "_pnt_resize.pro", "", "_pnt_resize", "	Resizes a POINT structure.  Arrays are padded with zeroes or truncated 	as needed.    ", "nvnt_ptd	POINT struct.  Note this is an actual POINT structure 			rather than an object, as this routine is only 			meant to be called internally.   ", "NV/OBJ/PNT", " 	Written by:	Spitale		12/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/abcorr.html", "abcorr.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "abcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/abcorr.html#abcorr", "abcorr", 'routine in <a href="obj/tools/abcorr.html">abcorr.pro</a>', "abcorr.pro", "", "abcorr", "	Performs stellar aberration and light-travel-time corrections.    ", "citerateepsilonfastinvertobs_bx  Any subclass of BODY describing the observer.   targ_bx Array(nt) of any subclass of BODY describing the targets.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   ");
  
  libdata[libdataItem++] = new Array("obj/tools/abcorr.html#abcorr", "abcorr", 'routine in <a href="obj/tools/abcorr.html">abcorr.pro</a>', "abcorr.pro", "", "abcorr", "", "citerateepsilonfastobs_bxtarg_bx0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/arr/arr_assign.html", "arr_assign.pro", '.pro file in <a href="obj/arr/dir-overview.html">obj/arr/ directory</a>', "arr_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/arr/arr_assign.html#arr_assign", "arr_assign", 'routine in <a href="obj/arr/arr_assign.html">arr_assign.pro</a>', "arr_assign.pro", "", "arr_assign", "	Replaces fields in a ARRAY object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@arr__keywords.include", "NV/OBJ/ARR", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/arr/arr_create_descriptors.html", "arr_create_descriptors.pro", '.pro file in <a href="obj/arr/dir-overview.html">obj/arr/ directory</a>', "arr_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/arr/arr_create_descriptors.html#arr_create_descriptors", "arr_create_descriptors", 'routine in <a href="obj/arr/arr_create_descriptors.html">arr_create_descriptors.pro</a>', "arr_create_descriptors.pro", "", "arr_create_descriptors", "	Init method for the ARRAY class.    ", "crdCore descriptor(s) to pass to cor_create_descriptors.   ardStation descriptor(s) to initialize, instead of creating new 		ones.   n     Number of array descriptors.   @arr__keywords.include", "NV/LIB/arr", "       Written by:     Spitale  	Adapted by:	Spitale, 5/2016          An array (n) of array descriptors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/arr/arr_primary.html", "arr_primary.pro", '.pro file in <a href="obj/arr/dir-overview.html">obj/arr/ directory</a>', "arr_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/arr/arr_primary.html#arr_primary", "arr_primary", 'routine in <a href="obj/arr/arr_primary.html">arr_primary.pro</a>', "arr_primary.pro", "", "arr_primary", "	Returns the primary descriptor for each given array descriptor.    ", "noeventard Array (nt) of ARRAY descriptors.   ", "NV/LIB/arr", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Primary descriptors associated with each given array descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/arr/arr_query.html", "arr_query.pro", '.pro file in <a href="obj/arr/dir-overview.html">obj/arr/ directory</a>', "arr_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/arr/arr_query.html#arr_query", "arr_query", 'routine in <a href="obj/arr/arr_query.html">arr_query.pro</a>', "arr_query.pro", "", "arr_query", "	Returns the fields associated with a ARRAY object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@arr__keywords.include", "NV/OBJ/ARR", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/arr/arr_replicate.html", "arr_replicate.pro", '.pro file in <a href="obj/arr/dir-overview.html">obj/arr/ directory</a>', "arr_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/arr/arr_replicate.html#arr_replicate", "arr_replicate", 'routine in <a href="obj/arr/arr_replicate.html">arr_replicate.pro</a>', "arr_replicate.pro", "", "arr_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "ard Station descriptor.   dim Dimensions of the result.   ", "NV/LIB/arr", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/arr/arr_set_primary.html", "arr_set_primary.pro", '.pro file in <a href="obj/arr/dir-overview.html">obj/arr/ directory</a>', "arr_set_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/arr/arr_set_primary.html#arr_set_primary", "arr_set_primary", 'routine in <a href="obj/arr/arr_set_primary.html">arr_set_primary.pro</a>', "arr_set_primary.pro", "", "arr_set_primary", "	Replaces the primary string in each given array descriptor.    ", "noeventardArray (nt) of ARRAY descriptors.   primaryArray (nt) of primary descriptors.   ", "NV/LIB/arr", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/arr/arr_set_surface_pts.html", "arr_set_surface_pts.pro", '.pro file in <a href="obj/arr/dir-overview.html">obj/arr/ directory</a>', "arr_set_surface_pts.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/arr/arr_set_surface_pts.html#arr_set_surface_pts", "arr_set_surface_pts", 'routine in <a href="obj/arr/arr_set_surface_pts.html">arr_set_surface_pts.pro</a>', "arr_set_surface_pts.pro", "", "arr_set_surface_pts", "	Replaces the surface_pts vector in each given array descriptor.    ", "noeventard	Array (nt) of ARRAY descriptors.   surface_ptsArray (nv,3,nt) of surface_pts vectors.   ", "NV/LIB/arr", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/arr/arr_surface_pts.html", "arr_surface_pts.pro", '.pro file in <a href="obj/arr/dir-overview.html">obj/arr/ directory</a>', "arr_surface_pts.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/arr/arr_surface_pts.html#arr_surface_pts", "arr_surface_pts", 'routine in <a href="obj/arr/arr_surface_pts.html">arr_surface_pts.pro</a>', "arr_surface_pts.pro", "", "arr_surface_pts", "	Returns the surface_pts vector for each given array descriptor.    ", "noeventard Array (nt) of ARRAY descriptors.   ", "NV/LIB/arr", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) of surface_pts vectors associated with each given 	array descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/best_radial_scale_feat.html", "best_radial_scale_feat.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "best_radial_scale_feat.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/best_radial_scale_feat.html#best_radial_scale_feat", "best_radial_scale_feat", 'routine in <a href="obj/tools/best_radial_scale_feat.html">best_radial_scale_feat.pro</a>', "best_radial_scale_feat.pro", "", "best_radial_scale_feat", "", "radminradmaxlonminlonmaxpp_minpp_maxpp0resperpcdrdpd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_aberration.html", "bod_aberration.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_aberration.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_aberration.html#bod_aberration", "bod_aberration", 'routine in <a href="obj/bod/bod_aberration.html">bod_aberration.pro</a>', "bod_aberration.pro", "", "bod_aberration", "	Returns the aberration flags for each given body descriptor.    ", "noeventbdname", "NV/LIB/BOD", " 	Written by:	Spitale, 7/2017   	Aberration flag associated with the given name for each given body 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_assign.html", "bod_assign.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_assign.html#bod_assign", "bod_assign", 'routine in <a href="obj/bod/bod_assign.html">bod_assign.pro</a>', "bod_assign.pro", "", "bod_assign", "	Replaces fields in a BODY object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@bod__keywords.include", "NV/OBJ/BOD", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_avel.html", "bod_avel.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_avel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_avel.html#bod_avel", "bod_avel", 'routine in <a href="obj/bod/bod_avel.html">bod_avel.pro</a>', "bod_avel.pro", "", "bod_avel", "	Returns the angular velocity for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   	Angular velocity value associated with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial.html", "bod_body_to_inertial.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_body_to_inertial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial.html#bod_body_to_inertial", "bod_body_to_inertial", 'routine in <a href="obj/bod/bod_body_to_inertial.html">bod_body_to_inertial.pro</a>', "bod_body_to_inertial.pro", "", "bod_body_to_inertial", "	Transforms the given column vectors from the body coordinate 	system to the inertial coordinate system.    ", "_subbdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   	Array (nv,3,nt) of column vectors in the bx inertial frame.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial.html#bod_body_to_inertial", "bod_body_to_inertial", 'routine in <a href="obj/bod/bod_body_to_inertial.html">bod_body_to_inertial.pro</a>', "bod_body_to_inertial.pro", "", "bod_body_to_inertial", "", "_subbdv", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial_default.html", "bod_body_to_inertial_default.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_body_to_inertial_default.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial_default.html#bod_body_to_inertial_default", "bod_body_to_inertial_default", 'routine in <a href="obj/bod/bod_body_to_inertial_default.html">bod_body_to_inertial_default.pro</a>', "bod_body_to_inertial_default.pro", "", "bod_body_to_inertial_default", "	Transforms the given column vectors from the body coordinate 	system to the inertial coordinate system.    ", "_subbdvp", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   	Array (nv,3,nt) of column vectors in the bx inertial frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial_pos.html", "bod_body_to_inertial_pos.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_body_to_inertial_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial_pos.html#bod_body_to_inertial_pos", "bod_body_to_inertial_pos", 'routine in <a href="obj/bod/bod_body_to_inertial_pos.html">bod_body_to_inertial_pos.pro</a>', "bod_body_to_inertial_pos.pro", "", "bod_body_to_inertial_pos", "       Transforms the given column position vectors from the body        coordinate system to the inertial coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998          Array (nv,3,nt) of column position vectors in the inertial        frame.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial_pos.html#__bod_body_to_inertial_pos", "__bod_body_to_inertial_pos", 'routine in <a href="obj/bod/bod_body_to_inertial_pos.html">bod_body_to_inertial_pos.pro</a>', "bod_body_to_inertial_pos.pro", "", "__bod_body_to_inertial_pos", "", "bdv", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial_vel.html", "bod_body_to_inertial_vel.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_body_to_inertial_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial_vel.html#bod_body_to_inertial_vel", "bod_body_to_inertial_vel", 'routine in <a href="obj/bod/bod_body_to_inertial_vel.html">bod_body_to_inertial_vel.pro</a>', "bod_body_to_inertial_vel.pro", "", "bod_body_to_inertial_vel", "       Transforms the given column velocity vectors from the body        coordinate system to the inertial coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998          Array (nv,3,nt) of column velocity vectors in the inertial        frame.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/bod/bod_body_to_inertial_vel.html#bod_body_to_inertial_vel", "bod_body_to_inertial_vel", 'routine in <a href="obj/bod/bod_body_to_inertial_vel.html">bod_body_to_inertial_vel.pro</a>', "bod_body_to_inertial_vel.pro", "", "bod_body_to_inertial_vel", "", "bdv", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_body_to_radec.html", "bod_body_to_radec.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_body_to_radec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_body_to_radec.html#bod_body_to_radec", "bod_body_to_radec", 'routine in <a href="obj/bod/bod_body_to_radec.html">bod_body_to_radec.pro</a>', "bod_body_to_radec.pro", "", "bod_body_to_radec", "       Transforms the given column vectors from the body coordinate        system to the RA/DEC coordinate system associated to that        body.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998          Array (nv,3,nt) of column vectors in the bx radec frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_body_to_radec_vel.html", "bod_body_to_radec_vel.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_body_to_radec_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_body_to_radec_vel.html#bod_body_to_radec_vel", "bod_body_to_radec_vel", 'routine in <a href="obj/bod/bod_body_to_radec_vel.html">bod_body_to_radec_vel.pro</a>', "bod_body_to_radec_vel.pro", "", "bod_body_to_radec_vel", "       Transforms the given column velocity vectors from the body coordinate        system to the RA/DEC coordinate system associated with that body.    ", "bdrv", "NV/LIB/BOD", " 	Written by:	Spitale, 7/2015          Array (nv,3,nt) of column vectors in the bx radec frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_create_descriptors.html", "bod_create_descriptors.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_create_descriptors.html#bod_create_descriptors", "bod_create_descriptors", 'routine in <a href="obj/bod/bod_create_descriptors.html">bod_create_descriptors.pro</a>', "bod_create_descriptors.pro", "", "bod_create_descriptors", "	Init method for the BODY class.    ", "crdbdnNumber of descriptors to create.   @bod__keywords.include", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016  	Newly created or or freshly initialized body descriptors, depending 	on the presence of the bd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_dlibdt.html", "bod_dlibdt.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_dlibdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_dlibdt.html#bod_dlibdt", "bod_dlibdt", 'routine in <a href="obj/bod/bod_dlibdt.html">bod_dlibdt.pro</a>', "bod_dlibdt.pro", "", "bod_dlibdt", "       Returns the frequency of each libration vector for each given        body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998          Values of the frequency of each libration vector associated        with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_evolve.html", "bod_evolve.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_evolve.html#bod_evolve", "bod_evolve", 'routine in <a href="obj/bod/bod_evolve.html">bod_evolve.pro</a>', "bod_evolve.pro", "", "bod_evolve", "	Computes new body descriptors at the given time offsets from the 	given body descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given body 	descriptor.    ", "nodvIf set, derivatives will not be evolved.   copyIf set, the evolved descriptor is copied into the input 		descriptor and it is freed.  The input descriptor is returned.    bddt Time offset.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   	Array (nbd,ndt) of newly allocated descriptors, of class BODY, 	evolved by time dt, where nbd is the number of bx, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_get_radec_ranges.html", "bod_get_radec_ranges.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_get_radec_ranges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_get_radec_ranges.html#bod_get_radec_ranges", "bod_get_radec_ranges", 'routine in <a href="obj/bod/bod_get_radec_ranges.html">bod_get_radec_ranges.pro</a>', "bod_get_radec_ranges.pro", "", "bod_get_radec_ranges", "	Returns ranges of valid  radec coordinates for the given BODY object.    ", "bd", "NV/LIB/BOD", " 	Written by:	Spitale   	Array (2 x 3) giving the ranges in radius, RA and DEC.    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_ib_data.html", "bod_ib_data.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_ib_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_ib_data.html#bod_ib_data", "bod_ib_data", 'routine in <a href="obj/bod/bod_ib_data.html">bod_ib_data.pro</a>', "bod_ib_data.pro", "", "bod_ib_data", "	Returns the function data for a body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Adapted by:	Spitale, 7/2016   	Function data associated with the given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_inertial.html", "bod_inertial.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_inertial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_inertial.html#bod_inertial", "bod_inertial", 'routine in <a href="obj/bod/bod_inertial.html">bod_inertial.pro</a>', "bod_inertial.pro", "", "bod_inertial", "	Returns body descriptors defining te inertial coordinate system.    ", "nt", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Body descriptor defining the inertial frame.  Note this descriptor is 	not allocated on the heap, so it should not be freed by the caller.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_inertial_to_body.html", "bod_inertial_to_body.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_inertial_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_inertial_to_body.html#bod_inertial_to_body", "bod_inertial_to_body", 'routine in <a href="obj/bod/bod_inertial_to_body.html">bod_inertial_to_body.pro</a>', "bod_inertial_to_body.pro", "", "bod_inertial_to_body", "	Transforms the given column vectors from the inertial coordinate 	system to the body coordinate system.    ", "_subbdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) of column vectors in the bx body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_inertial_to_body_default.html", "bod_inertial_to_body_default.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_inertial_to_body_default.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_inertial_to_body_default.html#bod_inertial_to_body_default", "bod_inertial_to_body_default", 'routine in <a href="obj/bod/bod_inertial_to_body_default.html">bod_inertial_to_body_default.pro</a>', "bod_inertial_to_body_default.pro", "", "bod_inertial_to_body_default", "	Transforms the given column vectors from the inertial coordinate 	system to the body coordinate system.    ", "_subbdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) of column vectors in the bx body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_inertial_to_body_pos.html", "bod_inertial_to_body_pos.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_inertial_to_body_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_inertial_to_body_pos.html#bod_inertial_to_body_pos", "bod_inertial_to_body_pos", 'routine in <a href="obj/bod/bod_inertial_to_body_pos.html">bod_inertial_to_body_pos.pro</a>', "bod_inertial_to_body_pos.pro", "", "bod_inertial_to_body_pos", "       Transforms the given column position vectors from the inertial        coordinate system to the body coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column position vectors in the bx body        frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_inertial_to_body_vel.html", "bod_inertial_to_body_vel.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_inertial_to_body_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_inertial_to_body_vel.html#bod_inertial_to_body_vel", "bod_inertial_to_body_vel", 'routine in <a href="obj/bod/bod_inertial_to_body_vel.html">bod_inertial_to_body_vel.pro</a>', "bod_inertial_to_body_vel.pro", "", "bod_inertial_to_body_vel", "       Transforms the given column velocity vectors from the inertial        coordinate system to the body coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column velocity vectors in the bx body        frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_lib.html", "bod_lib.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_lib.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_lib.html#bod_lib", "bod_lib", 'routine in <a href="obj/bod/bod_lib.html">bod_lib.pro</a>', "bod_lib.pro", "", "bod_lib", "       Returns the phase of the libration vector at body time for        each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Phase of the libraton vectors at body time associated with        each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_libv.html", "bod_libv.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_libv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_libv.html#bod_libv", "bod_libv", 'routine in <a href="obj/bod/bod_libv.html">bod_libv.pro</a>', "bod_libv.pro", "", "bod_libv", "	Returns the libration vector for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Libration vector associated with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_ndv.html", "bod_ndv.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_ndv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_ndv.html#bod_ndv", "bod_ndv", 'routine in <a href="obj/bod/bod_ndv.html">bod_ndv.pro</a>', "bod_ndv.pro", "", "bod_ndv", "	Returns an integer indicating the maximum number of time derivatives 	allowed in the vel and avel fields of the body descriptor.  This number 	can be adjusted using the environment variable 'BOD_NDV'.  The default 	is 4.    Environment variables:   	BOD_NDV:	Sets the ndv value.    ", "", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   	Current ndv value.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_opaque.html", "bod_opaque.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_opaque.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_opaque.html#bod_opaque", "bod_opaque", 'routine in <a href="obj/bod/bod_opaque.html">bod_opaque.pro</a>', "bod_opaque.pro", "", "bod_opaque", "	Returns the opaque value for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Opaque value associated with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_orient.html", "bod_orient.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_orient.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_orient.html#bod_orient", "bod_orient", 'routine in <a href="obj/bod/bod_orient.html">bod_orient.pro</a>', "bod_orient.pro", "", "bod_orient", "	Returns the orientation matrix for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Orientation matrix associated with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_pos.html", "bod_pos.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_pos.html#bod_pos", "bod_pos", 'routine in <a href="obj/bod/bod_pos.html">bod_pos.pro</a>', "bod_pos.pro", "", "bod_pos", "       Returns the position of body center (in the inertial frame)        for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Position of body center (in the inertial frame) associated        with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_query.html", "bod_query.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_query.html#bod_query", "bod_query", 'routine in <a href="obj/bod/bod_query.html">bod_query.pro</a>', "bod_query.pro", "", "bod_query", "	Returns the fields associated with a BODY object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@bod__keywords.include", "NV/OBJ/BOD", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_radec_to_body.html", "bod_radec_to_body.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_radec_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_radec_to_body.html#bod_radec_to_body", "bod_radec_to_body", 'routine in <a href="obj/bod/bod_radec_to_body.html">bod_radec_to_body.pro</a>', "bod_radec_to_body.pro", "", "bod_radec_to_body", "	Transforms the given column vectors from the RA/DEC coordinate        system associated to the body to the body coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) of column vectors in the bx body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_radec_to_body_vel.html", "bod_radec_to_body_vel.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_radec_to_body_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_radec_to_body_vel.html#bod_radec_to_body_vel", "bod_radec_to_body_vel", 'routine in <a href="obj/bod/bod_radec_to_body_vel.html">bod_radec_to_body_vel.pro</a>', "bod_radec_to_body_vel.pro", "", "bod_radec_to_body_vel", "	Transforms the given column velocity vectors from the RA/DEC coordinate        system associated to the body to the body coordinate system.    ", "bdrv", "NV/LIB/BOD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) of column velocity vectors in the bx body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_recenter.html", "bod_recenter.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_recenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_recenter.html#bod_recenter", "bod_recenter", 'routine in <a href="obj/bod/bod_recenter.html">bod_recenter.pro</a>', "bod_recenter.pro", "", "bod_recenter", "	Transforms a body descriptor into another body frame.    ", "bxDescriptor to transform, array (nt) of any subclass of BODY.   bx0Frame to transform into, array (nt) of any subclass of BODY.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_reorient.html", "bod_reorient.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_reorient.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_reorient.html#bod_reorient", "bod_reorient", 'routine in <a href="obj/bod/bod_reorient.html">bod_reorient.pro</a>', "bod_reorient.pro", "", "bod_reorient", "	Rotates the orientation matrix of each body such that the specified 	axis vector is parallel to the given vector.    ", "bxArray (nt) of any subclass of BODY.   ii_vArray (nv,3,nt) of column vectors to align with the 		each reference axis.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_replicate.html", "bod_replicate.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_replicate.html#bod_replicate", "bod_replicate", 'routine in <a href="obj/bod/bod_replicate.html">bod_replicate.pro</a>', "bod_replicate.pro", "", "bod_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "bddim Dimensions of the result.   ", "NV/LIB/BOD", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_rotate.html", "bod_rotate.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_rotate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_rotate.html#bod_rotate", "bod_rotate", 'routine in <a href="obj/bod/bod_rotate.html">bod_rotate.pro</a>', "bod_rotate.pro", "", "bod_rotate", "	Rotates a body about one its axes.    ", "axisbx 	Any subclass of BODY (nt).   _theta	Angle of rotation (nt).   ", "NV/LIB/BOD", " 	Written by:	Spitale, 2/2014  	Adapted by:	Spitale, 5/2016   	NONE    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_aberration.html", "bod_set_aberration.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_aberration.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_aberration.html#bod_set_aberration", "bod_set_aberration", 'routine in <a href="obj/bod/bod_set_aberration.html">bod_set_aberration.pro</a>', "bod_set_aberration.pro", "", "bod_set_aberration", "	Sets aberration flags for each given body descriptor.    ", "unsetIf set, the named flag is unset.   noeventbdname", "NV/LIB/BOD", " 	Written by:	Spitale, 7/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_avel.html", "bod_set_avel.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_avel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_avel.html#bod_set_avel", "bod_set_avel", 'routine in <a href="obj/bod/bod_set_avel.html">bod_set_avel.pro</a>', "bod_set_avel.pro", "", "bod_set_avel", "	Replaces the angular velocity vector of each given body descriptor.    ", "noeventbdavel Array (ndv,3,nt) of new angular velocity vectors.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_dlibdt.html", "bod_set_dlibdt.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_dlibdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_dlibdt.html#bod_set_dlibdt", "bod_set_dlibdt", 'routine in <a href="obj/bod/bod_set_dlibdt.html">bod_set_dlibdt.pro</a>', "bod_set_dlibdt.pro", "", "bod_set_dlibdt", "       Replaces the frequency of each libration vector for each given        body descriptor.    ", "noeventbddlibdt Array (ndv,nt) of new frequencies.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_ib_data.html", "bod_set_ib_data.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_ib_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_ib_data.html#bod_set_ib_data", "bod_set_ib_data", 'routine in <a href="obj/bod/bod_set_ib_data.html">bod_set_ib_data.pro</a>', "bod_set_ib_data.pro", "", "bod_set_ib_data", "	Replaces the function data for a body descriptor.    ", "noeventbd Body descriptor.   data New function data.   ", "NV/LIB/BOD", " 	Adapted by:	Spitale, 7/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_lib.html", "bod_set_lib.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_lib.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_lib.html#bod_set_lib", "bod_set_lib", 'routine in <a href="obj/bod/bod_set_lib.html">bod_set_lib.pro</a>', "bod_set_lib.pro", "", "bod_set_lib", "       Replaces the phase of the libration vector at body time for        each given body descriptor.    ", "noeventbdlib Array (ndv,nt) of new phases of the libration vectors.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_libv.html", "bod_set_libv.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_libv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_libv.html#bod_set_libv", "bod_set_libv", 'routine in <a href="obj/bod/bod_set_libv.html">bod_set_libv.pro</a>', "bod_set_libv.pro", "", "bod_set_libv", "	Replaces the libration vector of each given body descriptor.    ", "noeventbdlibv Array (ndv,3,nt) of new libration vectors.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_opaque.html", "bod_set_opaque.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_opaque.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_opaque.html#bod_set_opaque", "bod_set_opaque", 'routine in <a href="obj/bod/bod_set_opaque.html">bod_set_opaque.pro</a>', "bod_set_opaque.pro", "", "bod_set_opaque", "	Replaces the opaque flag of each given body descriptor.    ", "noeventbdopaque", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_orient.html", "bod_set_orient.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_orient.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_orient.html#bod_set_orient", "bod_set_orient", 'routine in <a href="obj/bod/bod_set_orient.html">bod_set_orient.pro</a>', "bod_set_orient.pro", "", "bod_set_orient", "	Replaces the orientation matrix of each given body descriptor.    ", "noeventbdorient Array (3,3,nt) of new orientation matrices.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_pos.html", "bod_set_pos.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_pos.html#bod_set_pos", "bod_set_pos", 'routine in <a href="obj/bod/bod_set_pos.html">bod_set_pos.pro</a>', "bod_set_pos.pro", "", "bod_set_pos", "       Replaces the position of body center (in the inertial frame)        of each given body descriptor.    ", "noeventbdpos Array (1,3,nt) of new position vectors.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_time.html", "bod_set_time.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_time.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_time.html#bod_set_time", "bod_set_time", 'routine in <a href="obj/bod/bod_set_time.html">bod_set_time.pro</a>', "bod_set_time.pro", "", "bod_set_time", "	Replaces the time of each given body descriptor.    ", "noeventbdtime New time value.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_set_vel.html", "bod_set_vel.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_set_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_set_vel.html#bod_set_vel", "bod_set_vel", 'routine in <a href="obj/bod/bod_set_vel.html">bod_set_vel.pro</a>', "bod_set_vel.pro", "", "bod_set_vel", "       Replaces the velocity vector (of body center in the inertial        frame) of each given body descriptor.    ", "noeventbdvel Array (ndv,3,nt) of new velocity vectors.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_time.html", "bod_time.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_time.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_time.html#bod_time", "bod_time", 'routine in <a href="obj/bod/bod_time.html">bod_time.pro</a>', "bod_time.pro", "", "bod_time", "	Returns the time for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Time value associated with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/bod/bod_vel.html", "bod_vel.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "bod_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/bod_vel.html#bod_vel", "bod_vel", 'routine in <a href="obj/bod/bod_vel.html">bod_vel.pro</a>', "bod_vel.pro", "", "bod_vel", "       Returns the velocity of body center (in the inertial frame)        for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Velocity of body center (in the inertial frame) associated        with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/body_radius.html", "body_radius.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "body_radius.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/body_radius.html#body_radius", "body_radius", 'routine in <a href="obj/tools/composite/body_radius.html">body_radius.pro</a>', "body_radius.pro", "", "body_radius", "	Returns the sizes of the given bodies.    ", "bx     Globe or Disk descriptor; nt.    ", "NV/LIB/TOOLS/COMPOSITE", "	nt-element array giving the size of each body.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/body_to_image_pos.html", "body_to_image_pos.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "body_to_image_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/body_to_image_pos.html#body_to_image_pos", "body_to_image_pos", 'routine in <a href="obj/tools/composite/body_to_image_pos.html">body_to_image_pos.pro</a>', "body_to_image_pos.pro", "", "body_to_image_pos", "       Transforms vectors in body coordinates to image coordinates    ", "inertial      Array (nv x 3 x nt) of Vectors in inertial coordinates.   validIndices of valid output points.    cd      Array of nt camera or map descriptors.   bx      Array of nt object descriptors, subclass of BODY.   v      Array (nv x 3 x nt) of position vectors.   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale          An array (2 x nv x nt) of points in image coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/body_to_surface.html", "body_to_surface.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "body_to_surface.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/body_to_surface.html#body_to_surface", "body_to_surface", 'routine in <a href="obj/tools/composite/body_to_surface.html">body_to_surface.pro</a>', "body_to_surface.pro", "", "body_to_surface", "       Transforms points in body coordinates to surface coordinates.    ", "bx     Array of nt object descriptors (subclass of BODY).   p", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of surface coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("grim/brim.html", "brim.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "brim.pro", "", "", "	Image browser.    	brim may be run standalone or from within grim.  If no files or data 	descriptors are given, brim first prompts the user to select a list of 	files.  brim then displays thumbnails of all valid files.  Files may be 	selected by clicking with the left mouse button.  By default, the image 	is opened in a new grim window.  Alternate actions may be defined 	through procedures supplied by the caller.    EXAMPLES: 	To load files into brim using a file-selection widget:  	 IDL> brim   	To load all recognizeable images in the current directory into brim:  	 IDL> brim, '*'   	To browse a set of data descriptors:  	 IDL> dd = dat_read('*') 	 IDL> brim, dd    STATUS: 	Complete.    ", "", "          -1", " 	Written by:	Spitale, 10/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/brim.html#brim_display_image", "brim_display_image", 'routine in <a href="grim/brim.html">brim.pro</a>', "brim.pro", "", "brim_display_image", "", "brim_data_iimage", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/brim.html#brim_resolve_ids", "brim_resolve_ids", 'routine in <a href="grim/brim.html">brim.pro</a>', "brim.pro", "", "brim_resolve_ids", "", "brim_dataids", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/brim.html#brim_load", "brim_load", 'routine in <a href="grim/brim.html">brim.pro</a>', "brim.pro", "", "brim_load", "", "displaybrim_datafiles", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/brim.html#brim_configure", "brim_configure", 'routine in <a href="grim/brim.html">brim.pro</a>', "brim.pro", "", "brim_configure", "", "filesbasethumbsizelabelsselect_idsleft_fnright_fnmiddle_fnfn_dataexclusive_selectionpathget_pathmodaltitleidsorderfilterenable_selectionbrim_datan", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/brim.html#brim_select", "brim_select", 'routine in <a href="grim/brim.html">brim.pro</a>', "brim.pro", "", "brim_select", "", "idddbrim_data_i", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/brim.html#brim_fn_grim", "brim_fn_grim", 'routine in <a href="grim/brim.html">brim.pro</a>', "brim.pro", "", "brim_fn_grim", "", "statusbrim_datailabel", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/brim.html#brim_event", "brim_event", 'routine in <a href="grim/brim.html">brim.pro</a>', "brim.pro", "", "brim_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/brim.html#brim_draw_event", "brim_draw_event", 'routine in <a href="grim/brim.html">brim.pro</a>', "brim.pro", "", "brim_draw_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/brim.html#brim", "brim", 'routine in <a href="grim/brim.html">brim.pro</a>', "brim.pro", "", "brim", "", "thumbsizelabelsselect_idsleft_fnright_fnmiddle_fnfn_dataexclusive_selectionpathget_pathmodaltitleidsorderfilterenable_selectionbasefiles", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_assign.html", "cam_assign.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_assign.html#cam_assign", "cam_assign", 'routine in <a href="obj/cam/cam_assign.html">cam_assign.pro</a>', "cam_assign.pro", "", "cam_assign", "	Replaces fields in a CAMERA object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@cam__keywords.include", "NV/OBJ/CAM", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_body_to_focal.html", "cam_body_to_focal.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_body_to_focal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_body_to_focal.html#cam_body_to_focal", "cam_body_to_focal", 'routine in <a href="obj/cam/cam_body_to_focal.html">cam_body_to_focal.pro</a>', "cam_body_to_focal.pro", "", "cam_body_to_focal", "       Transforms the given column vectors from the body coordinate        system to the camera focal plane coordinate system.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the camera focal plane frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_create_descriptors.html", "cam_create_descriptors.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_create_descriptors.html#cam_create_descriptors", "cam_create_descriptors", 'routine in <a href="obj/cam/cam_create_descriptors.html">cam_create_descriptors.pro</a>', "cam_create_descriptors.pro", "", "cam_create_descriptors", "	Init method for the CAMERA class.    ", "crdbdcdnNumber of descriptors to create.   @cam__keywords.include", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created or or freshly initialized camera descriptors, depending 	on the presence of the cd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_evolve.html", "cam_evolve.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_evolve.html#cam_evolve", "cam_evolve", 'routine in <a href="obj/cam/cam_evolve.html">cam_evolve.pro</a>', "cam_evolve.pro", "", "cam_evolve", "       Computes new camera descriptors at the given time offsets from        the given camera descriptors using the taylor series expansion        corresponding to the derivatives contained in the given camera        descriptor.    ", "nodv If set, velocities will not be evolved.   copyIf set, the evolved descriptor is copied into the input 		descriptor and it is freed.  The input descriptor is returned.    cd Array (ncd) of CAMERA descriptors.   dt Array (ndt) of time offsets.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (ncd,ndt) of newly allocated camera descriptors evolved        by time dt, where ncd is the number of cd, and ndt is the        number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_exposure.html", "cam_exposure.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_exposure.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_exposure.html#cam_exposure", "cam_exposure", 'routine in <a href="obj/cam/cam_exposure.html">cam_exposure.pro</a>', "cam_exposure.pro", "", "cam_exposure", "       Returns the exposure duration of each given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Exposure duration associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_fi_data.html", "cam_fi_data.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_fi_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_fi_data.html#cam_fi_data", "cam_fi_data", 'routine in <a href="obj/cam/cam_fi_data.html">cam_fi_data.pro</a>', "cam_fi_data.pro", "", "cam_fi_data", "	Returns the focal/image function data for a camera descriptor.    ", "noeventcd", "NV/LIB/CAM", " 	Adapted by:	Spitale, 7/2016; adapted from cam_fi_data_p   	Function data associated with the given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_filters.html", "cam_filters.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_filters.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_filters.html#cam_filters", "cam_filters", 'routine in <a href="obj/cam/cam_filters.html">cam_filters.pro</a>', "cam_filters.pro", "", "cam_filters", "	Returns the filter name(s) for a given camera descriptor.    ", "noeventcd Camera descriptor.   i", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Names of requested filters.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_fn_focal_to_image.html", "cam_fn_focal_to_image.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_fn_focal_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_fn_focal_to_image.html#cam_fn_focal_to_image", "cam_fn_focal_to_image", 'routine in <a href="obj/cam/cam_fn_focal_to_image.html">cam_fn_focal_to_image.pro</a>', "cam_fn_focal_to_image.pro", "", "cam_fn_focal_to_image", "       Returns the name of the user-defined focal --> image        transformation function for each given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016          Focal --> image transformation function associated with each        given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_fn_image_to_focal.html", "cam_fn_image_to_focal.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_fn_image_to_focal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_fn_image_to_focal.html#cam_fn_image_to_focal", "cam_fn_image_to_focal", 'routine in <a href="obj/cam/cam_fn_image_to_focal.html">cam_fn_image_to_focal.pro</a>', "cam_fn_image_to_focal.pro", "", "cam_fn_image_to_focal", "       Returns the name of the user-defined image --> focal        transformation function for each given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016          Image --> focal transformation function associated with each        given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_fn_psf.html", "cam_fn_psf.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_fn_psf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_fn_psf.html#cam_fn_psf", "cam_fn_psf", 'routine in <a href="obj/cam/cam_fn_psf.html">cam_fn_psf.pro</a>', "cam_fn_psf.pro", "", "cam_fn_psf", "	Returns the user-defined psf function for the given camera descriptor.    ", "noeventcd", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	PSF function associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_focal_to_body.html", "cam_focal_to_body.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_focal_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_focal_to_body.html#cam_focal_to_body", "cam_focal_to_body", 'routine in <a href="obj/cam/cam_focal_to_body.html">cam_focal_to_body.pro</a>', "cam_focal_to_body.pro", "", "cam_focal_to_body", "       Transforms the given array of points from the camera focal        plane coordinate system to the body coordinate system.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_focal_to_image.html", "cam_focal_to_image.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_focal_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_focal_to_image.html#cam_focal_to_image", "cam_focal_to_image", 'routine in <a href="obj/cam/cam_focal_to_image.html">cam_focal_to_image.pro</a>', "cam_focal_to_image.pro", "", "cam_focal_to_image", "	Transforms the given array of points in the focal plane        coordinate system to an array of points in the image        coordinate system using the fn_focal_to_image function of the        camera descriptor.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the image coordinate system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_focal_to_image_linear.html", "cam_focal_to_image_linear.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_focal_to_image_linear.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_focal_to_image_linear.html#cam_focal_to_image_linear", "cam_focal_to_image_linear", 'routine in <a href="obj/cam/cam_focal_to_image_linear.html">cam_focal_to_image_linear.pro</a>', "cam_focal_to_image_linear.pro", "", "cam_focal_to_image_linear", "       Transforms the given array of points in the focal plane        coordinate system to an array of points in the image        coordinate system using a linear model that assumes that        distances in the image are proportional to angles in the focal        plane.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the image coordinate system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_focal_to_image_poly.html", "cam_focal_to_image_poly.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_focal_to_image_poly.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_focal_to_image_poly.html#cam_focal_to_image_poly", "cam_focal_to_image_poly", 'routine in <a href="obj/cam/cam_focal_to_image_poly.html">cam_focal_to_image_poly.pro</a>', "cam_focal_to_image_poly.pro", "", "cam_focal_to_image_poly", "       Transforms the given array of points in the focal plane        coordinate system to an array of points in the image        coordinate system using a polynomial distortion model.   ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the image coordinate system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_focal_to_image_radial.html", "cam_focal_to_image_radial.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_focal_to_image_radial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_focal_to_image_radial.html#cam_focal_to_image_radial", "cam_focal_to_image_radial", 'routine in <a href="obj/cam/cam_focal_to_image_radial.html">cam_focal_to_image_radial.pro</a>', "cam_focal_to_image_radial.pro", "", "cam_focal_to_image_radial", "       Transforms the given array of points in the focal plane        coordinate system to an array of points in the image        coordinate system using a radial distortion model.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the image coordinate system.    STATUS: 	**Incomplete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_get_poly_matrices.html", "cam_get_poly_matrices.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_get_poly_matrices.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_get_poly_matrices.html#cam_get_poly_matrices", "cam_get_poly_matrices", 'routine in <a href="obj/cam/cam_get_poly_matrices.html">cam_get_poly_matrices.pro</a>', "cam_get_poly_matrices.pro", "", "cam_get_poly_matrices", "       Obtains the camera function data for the polynomial distortion model.   ", "cdArray (nt) of and subclass of CAMERA.   XXYYPPQQ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016           XX:     Polynominal distortion coefficients in x.         YY:     Polynominal distortion coefficients in y.         PP:     Inverse polynominal distortion coefficients in x.         QQ:     Inverse polynominal distortion coefficients in y.    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_get_radec_twist.html", "cam_get_radec_twist.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_get_radec_twist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_get_radec_twist.html#cam_get_radec_twist", "cam_get_radec_twist", 'routine in <a href="obj/cam/cam_get_radec_twist.html">cam_get_radec_twist.pro</a>', "cam_get_radec_twist.pro", "", "cam_get_radec_twist", "       Computes camera Euler angles relative to the inertial frame.    ", "radectwistcd        Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	ra:	Array (nt) of RA angles.  	dec:	Array (nt) of DEC angles.  	twist:	Array (nt) of TWIST angles.    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_image_to_focal.html", "cam_image_to_focal.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_image_to_focal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_image_to_focal.html#cam_image_to_focal", "cam_image_to_focal", 'routine in <a href="obj/cam/cam_image_to_focal.html">cam_image_to_focal.pro</a>', "cam_image_to_focal.pro", "", "cam_image_to_focal", "       Transforms the given array of points in the image coordinate        system to an array of points in the camera focal plane        coordinate system using the fn_image_to_focal function of the        camera descriptor.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the camera focal frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_image_to_focal_linear.html", "cam_image_to_focal_linear.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_image_to_focal_linear.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_image_to_focal_linear.html#cam_image_to_focal_linear", "cam_image_to_focal_linear", 'routine in <a href="obj/cam/cam_image_to_focal_linear.html">cam_image_to_focal_linear.pro</a>', "cam_image_to_focal_linear.pro", "", "cam_image_to_focal_linear", "       Transforms the given array of points in the image coordinate        system to an array of points in the camera focal plane        coordinate system using a linear model that assumes that        distances in the image are proportional to angles in the focal        plane.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the camera focal frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_image_to_focal_poly.html", "cam_image_to_focal_poly.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_image_to_focal_poly.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_image_to_focal_poly.html#cam_image_to_focal_poly", "cam_image_to_focal_poly", 'routine in <a href="obj/cam/cam_image_to_focal_poly.html">cam_image_to_focal_poly.pro</a>', "cam_image_to_focal_poly.pro", "", "cam_image_to_focal_poly", "       Transforms the given array of points in the image coordinate        system to an array of points in the camera focal plane        coordinate system using a polynomial distortion model.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the camera focal frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_image_to_focal_radial.html", "cam_image_to_focal_radial.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_image_to_focal_radial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_image_to_focal_radial.html#cam_image_to_focal_radial", "cam_image_to_focal_radial", 'routine in <a href="obj/cam/cam_image_to_focal_radial.html">cam_image_to_focal_radial.pro</a>', "cam_image_to_focal_radial.pro", "", "cam_image_to_focal_radial", "       Transforms the given array of points in the image coordinate        system to an array of points in the camera focal plane        coordinate system using a radial distortion model.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the camera focal frame.    STATUS: 	**Incomplete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_nfilters.html", "cam_nfilters.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_nfilters.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_nfilters.html#cam_nfilters", "cam_nfilters", 'routine in <a href="obj/cam/cam_nfilters.html">cam_nfilters.pro</a>', "cam_nfilters.pro", "", "cam_nfilters", "	Returns an integer indicating the maximum number of filters allowed 	in the 'filters' fields of the camera descriptor.  This number can 	be adjusted using the environment variable 'CAM_NFILTERS'.  The default 	is 4.    Environment variables:   	CAM_NFILTERS:	Sets the maximum number of filters.    ", "", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Current nfilters value.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_oaxis.html", "cam_oaxis.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_oaxis.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_oaxis.html#cam_oaxis", "cam_oaxis", 'routine in <a href="obj/cam/cam_oaxis.html">cam_oaxis.pro</a>', "cam_oaxis.pro", "", "cam_oaxis", "       Returns the 2-element array giving the image coordinates (in        pixels) corresponding to the camera optic axis for each given        camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Oaxis array associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_origin.html", "cam_origin.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_origin.html#cam_origin", "cam_origin", 'routine in <a href="obj/cam/cam_origin.html">cam_origin.pro</a>', "cam_origin.pro", "", "cam_origin", "       Returns the 2-element array giving the image coordinates (in        pixels) corresponding to the camera optic axis for each given        camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	origin array associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_psf.html", "cam_psf.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_psf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_psf.html#cam_psf", "cam_psf", 'routine in <a href="obj/cam/cam_psf.html">cam_psf.pro</a>', "cam_psf.pro", "", "cam_psf", "	Computes a point-spread function.    	The function indicated by the fn_psf field of the camera descriptor 	is called and its return value is passed through to the caller of 	cam_psf.  If x and y widths are given instead of arrays, the PSF 	will be centered, and the grid spacing will be one pixel.    STATUS: 	Complete    ", "noeventcd Camera descriptor.   _x Array of x coordinates relative to the center of the PSF, 		 or a width in the x direction.   _y Array of y coordinates relative to the center of the PSF, 		 or a width in the y direction.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Point-spread function values at each point specified by the x and y 	arguments.    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_psf_attrib.html", "cam_psf_attrib.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_psf_attrib.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_psf_attrib.html#cam_psf_attrib", "cam_psf_attrib", 'routine in <a href="obj/cam/cam_psf_attrib.html">cam_psf_attrib.pro</a>', "cam_psf_attrib.pro", "", "cam_psf_attrib", "	Computes attributes of a point-spread function.    ", "fwhmcd Camera descriptor.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	fwhm:	Full-width at half maximum of the point-spread function.    ");
  
  libdata[libdataItem++] = new Array("obj/cam/cam_psf_attrib.html#__cam_psf_attrib", "__cam_psf_attrib", 'routine in <a href="obj/cam/cam_psf_attrib.html">cam_psf_attrib.pro</a>', "cam_psf_attrib.pro", "", "__cam_psf_attrib", "", "fwhmcd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_query.html", "cam_query.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_query.html#cam_query", "cam_query", 'routine in <a href="obj/cam/cam_query.html">cam_query.pro</a>', "cam_query.pro", "", "cam_query", "	Returns the fields associated with a CAMERA object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@cam__keywords.include", "NV/OBJ/CAM", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_rebin.html", "cam_rebin.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_rebin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_rebin.html#cam_rebin", "cam_rebin", 'routine in <a href="obj/cam/cam_rebin.html">cam_rebin.pro</a>', "cam_rebin.pro", "", "cam_rebin", "       Modifies the camera parameters to reflect a re-binning of the pixels.    ", "noeventcd    Array (nt) of CAMERA descriptors.   bin       Binning factor, can be non-integer.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_reorient.html", "cam_reorient.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_reorient.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_reorient.html#cam_reorient", "cam_reorient", 'routine in <a href="obj/cam/cam_reorient.html">cam_reorient.pro</a>', "cam_reorient.pro", "", "cam_reorient", "       Repoints the camera orientiation matrix based on x,y, and theta 	image offsets.    ", "absoluteIf set, the dxy argument represents and abosolute image 		  position rather than an offset.   nsin_anglecos_anglecd0image_axisArray (2,1,nt) of image points corresponding to the 			rotation axis for each descriptor.   dxyArray (2,1,nt) of image offsets in x and y.   dtheta", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_replicate.html", "cam_replicate.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_replicate.html#cam_replicate", "cam_replicate", 'routine in <a href="obj/cam/cam_replicate.html">cam_replicate.pro</a>', "cam_replicate.pro", "", "cam_replicate", "	Replicates the given camera descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "cd One CAMERA descriptor.   dim Dimensions of the result.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_rescale.html", "cam_rescale.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_rescale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_rescale.html#cam_rescale", "cam_rescale", 'routine in <a href="obj/cam/cam_rescale.html">cam_rescale.pro</a>', "cam_rescale.pro", "", "cam_rescale", "       Produces a new camera descriptor describing an image of the same 	angluar dimensions, but with a new scale, specified by camera scale.    ", "noeventcdArray (nt) of CAMERA descriptors to modify.   scaleArray (2,1,nt) of new camera scales.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_resize.html", "cam_resize.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_resize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_resize.html#cam_resize", "cam_resize", 'routine in <a href="obj/cam/cam_resize.html">cam_resize.pro</a>', "cam_resize.pro", "", "cam_resize", "       Produces a new camera descriptor describing an image of the same 	angluar dimensions, but with a new scale, specified by image size.    ", "noeventcdArray (nt) of CAMERA descriptors to modify.   sizeArray (2,1,nt) of new image sizes.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_scale.html", "cam_scale.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_scale.html#cam_scale", "cam_scale", 'routine in <a href="obj/cam/cam_scale.html">cam_scale.pro</a>', "cam_scale.pro", "", "cam_scale", "       Returns the 2-element array giving the camera scale        (radians/pixel) in each direction for each given camera        descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Scale array associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_exposure.html", "cam_set_exposure.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_exposure.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_exposure.html#cam_set_exposure", "cam_set_exposure", 'routine in <a href="obj/cam/cam_set_exposure.html">cam_set_exposure.pro</a>', "cam_set_exposure.pro", "", "cam_set_exposure", "       Replaces the exposure duration for each given camera descriptor.    ", "noeventcd     Array (nt) of CAMERA descriptors.   exposure   Array (nt) of new exposure values.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_fi_data.html", "cam_set_fi_data.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_fi_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_fi_data.html#cam_set_fi_data", "cam_set_fi_data", 'routine in <a href="obj/cam/cam_set_fi_data.html">cam_set_fi_data.pro</a>', "cam_set_fi_data.pro", "", "cam_set_fi_data", "	Replaces the focal/image function data for a camera descriptor.    ", "noeventcd Camera descriptor.   data New function data.   ", "NV/LIB/CAM", " 	Adapted by:	Spitale, 7/2016; adapted from cam_set_fi_data_p   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_filters.html", "cam_set_filters.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_filters.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_filters.html#cam_set_filters", "cam_set_filters", 'routine in <a href="obj/cam/cam_set_filters.html">cam_set_filters.pro</a>', "cam_set_filters.pro", "", "cam_set_filters", "	Sets the filter name(s) for a given camera descriptor.    ", "noeventcd Camera descriptor.   filteri", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_fn_focal_to_image.html", "cam_set_fn_focal_to_image.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_fn_focal_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_fn_focal_to_image.html#cam_set_fn_focal_to_image", "cam_set_fn_focal_to_image", 'routine in <a href="obj/cam/cam_set_fn_focal_to_image.html">cam_set_fn_focal_to_image.pro</a>', "cam_set_fn_focal_to_image.pro", "", "cam_set_fn_focal_to_image", "       Sets the user-defined focal --> image transformation function        for the given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   fn_focal_to_image", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_fn_image_to_focal.html", "cam_set_fn_image_to_focal.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_fn_image_to_focal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_fn_image_to_focal.html#cam_set_fn_image_to_focal", "cam_set_fn_image_to_focal", 'routine in <a href="obj/cam/cam_set_fn_image_to_focal.html">cam_set_fn_image_to_focal.pro</a>', "cam_set_fn_image_to_focal.pro", "", "cam_set_fn_image_to_focal", "       Sets the user-defined image --> focal transformation function        for the given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   fn_image_to_focal", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_fn_psf.html", "cam_set_fn_psf.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_fn_psf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_fn_psf.html#cam_set_fn_psf", "cam_set_fn_psf", 'routine in <a href="obj/cam/cam_set_fn_psf.html">cam_set_fn_psf.pro</a>', "cam_set_fn_psf.pro", "", "cam_set_fn_psf", "	Sets the user-defined PSF function for the given camera descriptor.    ", "noeventcd Camera descriptor.   psf", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_oaxis.html", "cam_set_oaxis.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_oaxis.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_oaxis.html#cam_set_oaxis", "cam_set_oaxis", 'routine in <a href="obj/cam/cam_set_oaxis.html">cam_set_oaxis.pro</a>', "cam_set_oaxis.pro", "", "cam_set_oaxis", "       Replaces the oaxis array for each given camera descriptor.    ", "noeventcdArray (nt) of CAMERA descriptors.   oaxisArray (2,nt) of new oaxis values.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_origin.html", "cam_set_origin.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_origin.html#cam_set_origin", "cam_set_origin", 'routine in <a href="obj/cam/cam_set_origin.html">cam_set_origin.pro</a>', "cam_set_origin.pro", "", "cam_set_origin", "       Replaces the origin array for each given camera descriptor.    ", "noeventcdArray (nt) of CAMERA descriptors.   originArray (2,nt) of new origin values.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_poly_matrices.html", "cam_set_poly_matrices.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_poly_matrices.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_poly_matrices.html#cam_set_poly_matrices", "cam_set_poly_matrices", 'routine in <a href="obj/cam/cam_set_poly_matrices.html">cam_set_poly_matrices.pro</a>', "cam_set_poly_matrices.pro", "", "cam_set_poly_matrices", "       Sets up the camera function data for the polynomial distortion model.   ", "noeventcdArray (nt) of and subclass of CAMERA.   XX    Polynominal distortion coefficients in x.   YY    Polynominal distortion coefficients in y.   PP    Inverse polynominal distortion coefficients in x.   QQ    Inverse polynominal distortion coefficients in y.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_scale.html", "cam_set_scale.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_scale.html#cam_set_scale", "cam_set_scale", 'routine in <a href="obj/cam/cam_set_scale.html">cam_set_scale.pro</a>', "cam_set_scale.pro", "", "cam_set_scale", "       Replaces the scale array for each given camera descriptor.    ", "noeventcdArray (nt) of CAMERA descriptors.   scaleArray (2,nt) of new scale values.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_set_size.html", "cam_set_size.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_set_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_set_size.html#cam_set_size", "cam_set_size", 'routine in <a href="obj/cam/cam_set_size.html">cam_set_size.pro</a>', "cam_set_size.pro", "", "cam_set_size", "       Replaces the size array for each given camera descriptor.    ", "noeventcd     Array (nt) of CAMERA descriptors.   size       Array (2,nt) of new size values.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_size.html", "cam_size.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_size.html#cam_size", "cam_size", 'routine in <a href="obj/cam/cam_size.html">cam_size.pro</a>', "cam_size.pro", "", "cam_size", "	Returns the image size (in pixels) for each given camera descriptor.    ", "noeventnxnycd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Size array associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cam/cam_subimage.html", "cam_subimage.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "cam_subimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/cam_subimage.html#cam_subimage", "cam_subimage", 'routine in <a href="obj/cam/cam_subimage.html">cam_subimage.pro</a>', "cam_subimage.pro", "", "cam_subimage", "       Produces a new camera descriptor corresponding to dividing the 	associated image as specified.    ", "noeventcdArray (nt) of CAMERA descriptors to modify.   p0Starting corner of subimage.   sizeArray (2,1,nt) of image sizes.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 4/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/cd_to_radec_twist.html", "cd_to_radec_twist.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "cd_to_radec_twist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/cd_to_radec_twist.html#cd_to_radec_twist", "cd_to_radec_twist", 'routine in <a href="obj/tools/cd_to_radec_twist.html">cd_to_radec_twist.pro</a>', "cd_to_radec_twist.pro", "", "cd_to_radec_twist", "       Computes Euler angles representing the orientation of a given 	camera descriptor.    ", "radectwistcd      Array (nv,3,nt) of camera descriptors.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          ra:	Right ascension relative to the inertial frame.  	dec:	Declination relative to the inertial frame.  	twist:	Twist angle relative to the inertial frame.    ");
  
  

libdata[libdataItem++] = new Array("sys/util/clget.html", "clget.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "clget.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/util/clget.html#clget", "clget", 'routine in <a href="sys/util/clget.html">clget.pro</a>', "clget.pro", "", "clget", "", "foundodptag_name", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sys/util/clset.html", "clset.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "clset.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/util/clset.html#clset", "clset", 'routine in <a href="sys/util/clset.html">clset.pro</a>', "clset.pro", "", "clset", "", "foundodptag_namevalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html", "construct_mosaic.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "construct_mosaic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_combine_edge1", "cm_combine_edge1", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_edge1", "", "mapsdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_combine_edge", "cm_combine_edge", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_edge", "", "mapsdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_combine_emm", "cm_combine_emm", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_emm", "", "mapsdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_combine_emm5", "cm_combine_emm5", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_emm5", "", "mapsdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_wt_edge1", "cm_wt_edge1", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_wt_edge1", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_wt_edge", "cm_wt_edge", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_wt_edge", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_combine_median", "cm_combine_median", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_median", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_combine_sum", "cm_combine_sum", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_sum", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_combine_mean", "cm_combine_mean", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_mean", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_combine_overlay", "cm_combine_overlay", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_overlay", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_wt_rescale", "cm_wt_rescale", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_wt_rescale", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#cm_wt_emm", "cm_wt_emm", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_wt_emm", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/construct_mosaic.html#construct_mosaic", "construct_mosaic", 'routine in <a href="obj/tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "construct_mosaic", "", "combine_fnwt_fnsdataauxmaps", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_abbrev.html", "cor_abbrev.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_abbrev.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_abbrev.html#cor_abbrev", "cor_abbrev", 'routine in <a href="obj/cor/cor_abbrev.html">cor_abbrev.pro</a>', "cor_abbrev.pro", "", "cor_abbrev", "	Returns the abbrieviation for the given object class.    ", "noeventcrd", "NV/LIB/COR", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	String giving the standard abbreviation for the given class, 	e.g., 'BOD'.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/cor/cor_abbrev.html#_cor_abbrev", "_cor_abbrev", 'routine in <a href="obj/cor/cor_abbrev.html">cor_abbrev.pro</a>', "cor_abbrev.pro", "", "_cor_abbrev", "", "xd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_add_task.html", "cor_add_task.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_add_task.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_add_task.html#cor_add_task", "cor_add_task", 'routine in <a href="obj/cor/cor_add_task.html">cor_add_task.pro</a>', "cor_add_task.pro", "", "cor_add_task", "	Adds a task to the descriptor task list.    ", "noeventcrdtask String giving the name of a program that modified the 		 descriptor.   ", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_assign.html", "cor_assign.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_assign.html#cor_assign", "cor_assign", 'routine in <a href="obj/cor/cor_assign.html">cor_assign.pro</a>', "cor_assign.pro", "", "cor_assign", "	Replaces fields in a POINT object.  This is a fast way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd	CORE object.   @cor__keywords.include", "NV/OBJ/PNT", " 	Written by:	Spitale		1/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_cat_gd.html", "cor_cat_gd.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_cat_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_cat_gd.html#cor_cat_gd", "cor_cat_gd", 'routine in <a href="obj/cor/cor_cat_gd.html">cor_cat_gd.pro</a>', "cor_cat_gd.pro", "", "cor_cat_gd", "	Produces an array of object descriptors from a generic descriptor.    ", "gdGeneric descriptor.   ", "NV/OBJ/COR", " 	Written by:	Spitale 	Moved to CORE	Spitale		2/2017   	Array of object descriptors taken from the given generic descriptors.     ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_class.html", "cor_class.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_class.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_class.html#cor_class", "cor_class", 'routine in <a href="obj/cor/cor_class.html">cor_class.pro</a>', "cor_class.pro", "", "cor_class", "	Returns the class name for the given object class.    ", "xd Descriptor.   ", "NV/LIB/COR", " 	Written by:	Spitale		4/2016   	String giving the class name for the given class, without the OMINAS_ 	prefix.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_class_info.html", "cor_class_info.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_class_info.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_class_info.html#cor_class_info", "cor_class_info", 'routine in <a href="obj/cor/cor_class_info.html">cor_class_info.pro</a>', "cor_class_info.pro", "", "cor_class_info", "	Returns information about OMINAS object classes.    ", "classesabbrevtags", "NV/OBJ/COR", " 	Written by:	Spitale		2/2017   	classes:	String array giving the names of all OMINAS classes.  	abbrev:		String array giving the abbreviations of OMINAS classes.  	tags:		String array giving the tag names of OMINAS classes.     ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_count_descriptors.html", "cor_count_descriptors.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_count_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_count_descriptors.html#cor_count_descriptors", "cor_count_descriptors", 'routine in <a href="obj/cor/cor_count_descriptors.html">cor_count_descriptors.pro</a>', "cor_count_descriptors.pro", "", "cor_count_descriptors", "	Determines dimensions of an array of input descriptors.    ", "ndntxds	Array (nd,nt) of descriptors.   ", "NV/OBJ/COR", " 	Written by:	Spitale 	Copied to cor/:	Spitale 	2/2017   	nd:	First dimension, number of objects, default is 1.  	nt:	Second dimension, number of 'timesteps', default is 1.    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_create_descriptors.html", "cor_create_descriptors.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_create_descriptors.html#cor_create_descriptors", "cor_create_descriptors", 'routine in <a href="obj/cor/cor_create_descriptors.html">cor_create_descriptors.pro</a>', "cor_create_descriptors.pro", "", "cor_create_descriptors", "	Init method for the CORE class.    ", "crdCore descriptor(s) to initialize, instead of creating a new one.   n Number of descriptors to create.   @cor__keywords.include", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created or or freshly initialized core descriptors depending 	on the presence of the crd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_create_gd.html", "cor_create_gd.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_create_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_create_gd.html#cor_create_gd", "cor_create_gd", 'routine in <a href="obj/cor/cor_create_gd.html">cor_create_gd.pro</a>', "cor_create_gd.pro", "", "cor_create_gd", "	Creates a generic descriptor from a set of given descriptors.    ", "gdGeneric descriptor.  Fields from this descriptor will be 		included in the output.  	<x>d:	Input keyword for each descriptor type to include in 		new generic descriptor.   explicit 		If set, generic descriptors contained in input descriptors 		are not included in the output.   _extra_xdsArray of descriptors.  If given, any generic descriptors 		contained within these descriptors are also included (unless 		/explicit).  A generic descriptor may also be given as the 		argument to this function.   ", "NV/OBJ/COR", " 	Written by:	Spitale 	Moved to CORE	Spitale		2/2017   	Generic descriptor containing all of the input fields, and any 	descripors contained in gd.  Any invalid objects are culled out.     ");
  
  libdata[libdataItem++] = new Array("obj/cor/cor_create_gd.html#___cor_create_gd", "___cor_create_gd", 'routine in <a href="obj/cor/cor_create_gd.html">cor_create_gd.pro</a>', "cor_create_gd.pro", "", "___cor_create_gd", "", "gdexplicit_extra_xds", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_cull.html", "cor_cull.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_cull.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_cull.html#cor_cull", "cor_cull", 'routine in <a href="obj/cor/cor_cull.html">cor_cull.pro</a>', "cor_cull.pro", "", "cor_cull", "	Removes null objects from an array.    ", "crd", "NV/OBJ/COR", "  Spitale, 3/2017   	Array objects, or !null if all were empty.     ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_dereference.html", "cor_dereference.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_dereference.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_dereference.html#cor_dereference", "cor_dereference", 'routine in <a href="obj/cor/cor_dereference.html">cor_dereference.pro</a>', "cor_dereference.pro", "", "cor_dereference", "	Turns an array of objects into an array of structures.    ", "xdArray of objects.  Objects may have different classes, but only 		their common fields are dereferenced.   ", "NV/SYS/COR", " 	Written by:	Spitale, 6/2002  	Adapted by:	Spitale, 5/2016   	Array of structures.    STATUS: 	Complete    SEE ALSO: 	cor_rereference    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_dereference_gd.html", "cor_dereference_gd.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_dereference_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_dereference_gd.html#cor_dereference_gd", "cor_dereference_gd", 'routine in <a href="obj/cor/cor_dereference_gd.html">cor_dereference_gd.pro</a>', "cor_dereference_gd.pro", "", "cor_dereference_gd", "	Dereferences a generic descriptor.    ", "name_ref_extragdGeneric descriptor.   ", "NV/PGS", "	Moved to CORE	Spitale		2/2017   	Array of descriptors or zero if no fields found.     ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_evolve.html", "cor_evolve.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_evolve.html#cor_evolve", "cor_evolve", 'routine in <a href="obj/cor/cor_evolve.html">cor_evolve.pro</a>', "cor_evolve.pro", "", "cor_evolve", "	Calls the 'evolve' method appropriate for the given descriptor.    ", "nodv If set, velocities will not be evolved.   copyIf set, the evolved descriptor is copied into the input 		descriptor and it is freed.  The input descriptor is returned.   xd Any subclass of BODY.   dt Time offset.   ", "NV/SYS/COR", " 	Written by:	Spitale   	Array (nxd,ndt) of newly allocated descriptors, of the same class 	as xd, evolved by time dt, where nxd is the number of xd, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_gd.html", "cor_gd.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_gd.html#cor_gd", "cor_gd", 'routine in <a href="obj/cor/cor_gd.html">cor_gd.pro</a>', "cor_gd.pro", "", "cor_gd", "	Returns the generic descriptor for a CORE object.    ", "namenoevent 		If set, no event is generated.   _ref_extracrd0", "NV/PGS", " 	Written by:	Spitale		2/2017   	Generic descriptor.     ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_init_state.html", "cor_init_state.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_init_state.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_init_state.html#cor_init_state", "cor_init_state", 'routine in <a href="obj/cor/cor_init_state.html">cor_init_state.pro</a>', "cor_init_state.pro", "", "cor_init_state", "	Initializes the CORE state structure.    ", "", "NV/SYS", " 	Written by:	Spitale		5/2016   	New core state structure.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_isa.html", "cor_isa.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_isa.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_isa.html#cor_isa", "cor_isa", 'routine in <a href="obj/cor/cor_isa.html">cor_isa.pro</a>', "cor_isa.pro", "", "cor_isa", "", "odclass", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_match_gd.html", "cor_match_gd.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_match_gd.pro", "", "", "	Compares generic descriptors.    ", "", "          -1", " 	Written by:	Spitale		2/2017   ");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_match_gd.html#cmgd_compare", "cmgd_compare", 'routine in <a href="obj/cor/cor_match_gd.html">cor_match_gd.pro</a>', "cor_match_gd.pro", "", "cmgd_compare", "", "gd1gd2", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/cor/cor_match_gd.html#cor_match_gd", "cor_match_gd", 'routine in <a href="obj/cor/cor_match_gd.html">cor_match_gd.pro</a>', "cor_match_gd.pro", "", "cor_match_gd", "", "_gd1_gd2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_name.html", "cor_name.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_name.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_name.html#cor_name", "cor_name", 'routine in <a href="obj/cor/cor_name.html">cor_name.pro</a>', "cor_name.pro", "", "cor_name", "	Returns the name for each given core descriptor.    ", "noeventcrd", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 4/2016   	Name associated with each given core descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_query.html", "cor_query.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_query.html#cor_query", "cor_query", 'routine in <a href="obj/cor/cor_query.html">cor_query.pro</a>', "cor_query.pro", "", "cor_query", "	Returns fields associated with a CORE object.  This is a 	fast way of retrieving multiple fields in one call, and only a 	single event is generated.    ", "noeventIf set, no event is generated.   xdCORE object.   @cor__keywords.include", "NV/OBJ/COR", " 	Written by:	Spitale, 1/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_replicate.html", "cor_replicate.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_replicate.html#cor_replicate", "cor_replicate", 'routine in <a href="obj/cor/cor_replicate.html">cor_replicate.pro</a>', "cor_replicate.pro", "", "cor_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "crddim Dimensions of the result.   ", "NV/LIB/COR", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_rereference.html", "cor_rereference.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_rereference.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_rereference.html#cor_rereference", "cor_rereference", 'routine in <a href="obj/cor/cor_rereference.html">cor_rereference.pro</a>', "cor_rereference.pro", "", "cor_rereference", "	Copies an array of structures into an array of objects.    ", "newIf set, new pointers will be allocated in xd.   xdArray of objects.   _xdArray of structures.   ", "NV/SYS", " 	Written by:	Spitale, 6/2002  	Adapted by:	Spitale, 5/2016   	NONE    STATUS: 	Complete    SEE ALSO: 	cor_dereference    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_select.html", "cor_select.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_select.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_select.html#cor_select", "cor_select", 'routine in <a href="obj/cor/cor_select.html">cor_select.pro</a>', "cor_select.pro", "", "cor_select", "	Selects descriptors based on given criteria.    ", "indicesrmnoeventnameclasscrx Array of descriptors of any subclass of CORE.   key Array of key to select.   ", "NV/SYS/COR", " 	Written by:	Spitale, 1/1998  	Rewritten by:	Spitale, 4/2016   	All descriptors in crx whose parameters match the given key. 	0 if no matches found.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_set_field.html", "cor_set_field.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_set_field.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_set_field.html#cor_set_field", "cor_set_field", 'routine in <a href="obj/cor/cor_set_field.html">cor_set_field.pro</a>', "cor_set_field.pro", "", "cor_set_field", "", "foundnoeventodptag_namevalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_set_gd.html", "cor_set_gd.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_set_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_set_gd.html#cor_set_gd", "cor_set_gd", 'routine in <a href="obj/cor/cor_set_gd.html">cor_set_gd.pro</a>', "cor_set_gd.pro", "", "cor_set_gd", "	Sets the generic descriptor in a CORE object.    ", "xds	Array of objects to put in generic descriptor.  Generic 			descriptors in these objects are considered as well.   noeventIf set, no event is generated.   direct_ref_extracrd0gd	New gd.   ", "NV/OBJ/COR", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_set_name.html", "cor_set_name.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_set_name.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_set_name.html#cor_set_name", "cor_set_name", 'routine in <a href="obj/cor/cor_set_name.html">cor_set_name.pro</a>', "cor_set_name.pro", "", "cor_set_name", "	Replaces the name for each given core descriptor.    ", "noeventcrdname", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_set_udata.html", "cor_set_udata.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_set_udata.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_set_udata.html#cor_set_udata", "cor_set_udata", 'routine in <a href="obj/cor/cor_set_udata.html">cor_set_udata.pro</a>', "cor_set_udata.pro", "", "cor_set_udata", "	Stores user data in a descriptor and associates it with the 	specified name. If multiple descriptors, then the trailing dimension 	must match the number of descriptors.    ", "noeventcrdnameudata", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_state.html", "cor_state.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_state.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_state.html#cor_state", "cor_state", 'routine in <a href="obj/cor/cor_state.html">cor_state.pro</a>', "cor_state.pro", "", "cor_state", "	Builds a class tree for the given descriptor.    ", "traceNew value for the trace flag.   ", "NV/LIB/COR", " 	Written by:	Spitale		5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_tag.html", "cor_tag.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_tag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_tag.html#cor_tag", "cor_tag", 'routine in <a href="obj/cor/cor_tag.html">cor_tag.pro</a>', "cor_tag.pro", "", "cor_tag", "	Returns the tag name for the given object class.    ", "xIf set, the generic form is returned, e.g, 'CRX'.   noeventcrd", "NV/OBJ/COR", " 	Written by:	Spitale, 2/2017   	String giving the standard tag for the given class, e.g., 'CRD'.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_tasks.html", "cor_tasks.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_tasks.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_tasks.html#cor_tasks", "cor_tasks", 'routine in <a href="obj/cor/cor_tasks.html">cor_tasks.pro</a>', "cor_tasks.pro", "", "cor_tasks", "	Returns the descriptor task list.    ", "noeventcrd", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	String array containing the list of all programs that have modified 	the given descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_test.html", "cor_test.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_test.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_test.html#cor_test", "cor_test", 'routine in <a href="obj/cor/cor_test.html">cor_test.pro</a>', "cor_test.pro", "", "cor_test", "	Tests whether the input is an OMINAS object or object structure.    ", "noeventxd Any subclass of CORE.  Only one descriptor may be provided.   ", "NV/OBJ/COR", " 	Written by:	Spitale, 1/2017   	True if xd is an OMINAS object or object structure, false otherwise.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_test_gd.html", "cor_test_gd.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_test_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_test_gd.html#cor_test_gd", "cor_test_gd", 'routine in <a href="obj/cor/cor_test_gd.html">cor_test_gd.pro</a>', "cor_test_gd.pro", "", "cor_test_gd", "	Tests whether a generic descriptor field exists and contains a 	descriptor.    ", "gd Generic descriptor.   tag Name of field to test.   ", "NV/OBJ/COR", " 	Written by:	Spitale, 2/2017   	True if gd contains the tag and it is a valid descriptor, false otherwise.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_test_udata.html", "cor_test_udata.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_test_udata.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_test_udata.html#cor_test_udata", "cor_test_udata", 'routine in <a href="obj/cor/cor_test_udata.html">cor_test_udata.pro</a>', "cor_test_udata.pro", "", "cor_test_udata", "	Tests the existence of data stored in a descriptor under the 	specified name.    ", "noeventcrdname", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	True if the data is stored under the given name, false otherwise.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_tree.html", "cor_tree.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_tree.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_tree.html#cor_tree", "cor_tree", 'routine in <a href="obj/cor/cor_tree.html">cor_tree.pro</a>', "cor_tree.pro", "", "cor_tree", "	Builds a class tree for the given descriptor.    ", "od Descriptor of any class.   ", "NV/SYS/COR", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	String array giving the names of all classes in od, in descending order.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_udata.html", "cor_udata.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_udata.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_udata.html#cor_udata", "cor_udata", 'routine in <a href="obj/cor/cor_udata.html">cor_udata.pro</a>', "cor_udata.pro", "", "cor_udata", "	Retrieves user data stored in a descriptor under the specified name.    ", "noeventcrdname", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Data associated with the given name.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/cor_user.html", "cor_user.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "cor_user.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/cor_user.html#cor_user", "cor_user", 'routine in <a href="obj/cor/cor_user.html">cor_user.pro</a>', "cor_user.pro", "", "cor_user", "	Returns the username for each given core descriptor.    ", "noeventcrd", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Username associated with each given core descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/cor/core_state_struct__define.html", "core_state_struct__define.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "core_state_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/core_state_struct__define.html#core_state_struct__define", "core_state_struct__define", 'routine in <a href="obj/cor/core_state_struct__define.html">core_state_struct__define.pro</a>', "core_state_struct__define.pro", "", "core_state_struct__define", "	Structure defining the CORE state.    ", "", "NV/LIB/COR", " 	Written by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/corot_to_disk.html", "corot_to_disk.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "corot_to_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/corot_to_disk.html#corot_to_disk", "corot_to_disk", 'routine in <a href="obj/tools/corot_to_disk.html">corot_to_disk.pro</a>', "corot_to_disk.pro", "", "corot_to_disk", "", "cddkxgbxt0dmldttimescorot_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/corot_to_disk_lon.html", "corot_to_disk_lon.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "corot_to_disk_lon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/corot_to_disk_lon.html#corot_to_disk_lon", "corot_to_disk_lon", 'routine in <a href="obj/tools/corot_to_disk_lon.html">corot_to_disk_lon.pro</a>', "corot_to_disk_lon.pro", "", "corot_to_disk_lon", "", "cddkxgbxt0dmldttimescorot_lons", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_add_transient_keyvals.html", "dat_add_transient_keyvals.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_add_transient_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_add_transient_keyvals.html#dat_add_transient_keyvals", "dat_add_transient_keyvals", 'routine in <a href="obj/dat/dat_add_transient_keyvals.html">dat_add_transient_keyvals.pro</a>', "dat_add_transient_keyvals.pro", "", "dat_add_transient_keyvals", "	Records keyword/value pairs from a transient argument string.    ", "_ddData descriptor in which to record transient keyvals.   trsTransient argument string.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_assign.html", "dat_assign.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_assign.html#dat_assign", "dat_assign", 'routine in <a href="obj/dat/dat_assign.html">dat_assign.pro</a>', "dat_assign.pro", "", "dat_assign", "	Replaces fields in a CAMERA object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@dat__keywords.include", "NV/OBJ/CAM", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_cache.html", "dat_cache.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_cache.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_cache.html#dat_cache", "dat_cache", 'routine in <a href="obj/dat/dat_cache.html">dat_cache.pro</a>', "dat_cache.pro", "", "dat_cache", "	Returns a long integer indicating the maximum size of a data array. 	This value may be adjusted using the environment variable 'DAT_CACHE'. 	-1 is returned if it cannot be determined.    Environment variables:   	DAT_CACHE:	Sets the size of the cache.    ", "", "NV/OBJ/DAT", " 	Written by:	Spitale, 8/2016   	Current cache value.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_compress.html", "dat_compress.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_compress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_compress.html#dat_compress", "dat_compress", 'routine in <a href="obj/dat/dat_compress.html">dat_compress.pro</a>', "dat_compress.pro", "", "dat_compress", "	Returns the compression function suffix associated with a data 	descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	String giving the compression suffix.  The full name 	of the compression function is dat_compress_data_<suffix>.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_compress_data_mask.html", "dat_compress_data_mask.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_compress_data_mask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_compress_data_mask.html#dat_compress_data_mask", "dat_compress_data_mask", 'routine in <a href="obj/dat/dat_compress_data_mask.html">dat_compress_data_mask.pro</a>', "dat_compress_data_mask.pro", "", "dat_compress_data_mask", "", "_dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_create_descriptors.html", "dat_create_descriptors.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_create_descriptors.html#dat_create_descriptors", "dat_create_descriptors", 'routine in <a href="obj/dat/dat_create_descriptors.html">dat_create_descriptors.pro</a>', "dat_create_descriptors.pro", "", "dat_create_descriptors", "	Creates and initializes a data descriptor.    ", "crdddn Number of descriptors to create.   @dat__keywords.include", "NV/SYS", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created and initialized data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_data.html", "dat_data.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_data.html#dat_data", "dat_data", 'routine in <a href="obj/dat/dat_data.html">dat_data.pro</a>', "dat_data.pro", "", "dat_data", "	Returns the data array associated with a data descriptor.    ", "samples Output sample indices for /current.    current If set, the current loaded samples are returned.  In this 		  case, the sample indices are returned in the  samples  		  keyword.   slice  Slice coordinates.   nd      If set, the samples input is taken to be an ND coordinate 	          rather than a 1D subscript.  dat_data can normally tell 	          the difference automatically, but there is an ambiguity 	          if a single ND point is requested.  In that case, dat_data 	          interprets that as an array of 1D subscripts, unless /nd 	          is set.   true    If set, the actual data array is returned, even if there is 	          a sampling function.   noeventabscissaThe abscissa is returned in this array.   ddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	The data array associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_data    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_detect_filetype.html", "dat_detect_filetype.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_detect_filetype.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_detect_filetype.html#dat_detect_filetype", "dat_detect_filetype", 'routine in <a href="obj/dat/dat_detect_filetype.html">dat_detect_filetype.pro</a>', "dat_detect_filetype.pro", "", "dat_detect_filetype", "	Attempts to detect the type of the given file by calling the 	detectors in the filetype detectors table.    ", "defaultIf set, the 'default' filetype is returned. 			The default filetype is the first item in the table 			whose action is not 'IGNORE'.   allIf set, all filetypes in the table are returned.   actiondd	Data descriptor containing filename to test.   ", "NV/SYS", " 	Written by:	Spitale   	String giving the filetype, or null string if none detected.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_detect_instrument.html", "dat_detect_instrument.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_detect_instrument.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_detect_instrument.html#dat_detect_instrument", "dat_detect_instrument", 'routine in <a href="obj/dat/dat_detect_instrument.html">dat_detect_instrument.pro</a>', "dat_detect_instrument.pro", "", "dat_detect_instrument", "	Attempts to detect the instrument for a data set by calling the 	detectors in the instrument detectors table.    ", "dd	Data descriptor containing header an filetype.   ", "NV/SYS", " 	Written by:	Spitale   	String giving the instrument, or 'DEFAULT' if none detected.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_dh.html", "dat_dh.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_dh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_dh.html#dat_dh", "dat_dh", 'routine in <a href="obj/dat/dat_dh.html">dat_dh.pro</a>', "dat_dh.pro", "", "dat_dh", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/OBJ/DAT", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_dim.html", "dat_dim.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_dim.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_dim.html#dat_dim", "dat_dim", 'routine in <a href="obj/dat/dat_dim.html">dat_dim.pro</a>', "dat_dim.pro", "", "dat_dim", "	Returns the dimensions of the data array in the given data 	descriptor.    ", "trueIf set, the dimension function is not called and the true 	 	dimensions of the dat are returned.   noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array giving the dimensions of the data in the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_dim_data.html", "dat_dim_data.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_dim_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_dim_data.html#dat_dim_data", "dat_dim_data", 'routine in <a href="obj/dat/dat_dim_data.html">dat_dim_data.pro</a>', "dat_dim_data.pro", "", "dat_dim_data", "	Returns the dimension function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The dim_data associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_dim_data    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_dim_fn.html", "dat_dim_fn.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_dim_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_dim_fn.html#dat_dim_fn", "dat_dim_fn", 'routine in <a href="obj/dat/dat_dim_fn.html">dat_dim_fn.pro</a>', "dat_dim_fn.pro", "", "dat_dim_fn", "	Returns the dimension function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The dim_fn associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_dim_fn    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_filename.html", "dat_filename.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_filename.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_filename.html#dat_filename", "dat_filename", 'routine in <a href="obj/dat/dat_filename.html">dat_filename.pro</a>', "dat_filename.pro", "", "dat_filename", "	Returns the file name associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 12/2016   	String giving the filename.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_filetype.html", "dat_filetype.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_filetype.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_filetype.html#dat_filetype", "dat_filetype", 'routine in <a href="obj/dat/dat_filetype.html">dat_filetype.pro</a>', "dat_filetype.pro", "", "dat_filetype", "	Returns the filetype associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	String giving the filetype.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_gd.html", "dat_gd.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_gd.html#dat_gd", "dat_gd", 'routine in <a href="obj/dat/dat_gd.html">dat_gd.pro</a>', "dat_gd.pro", "", "dat_gd", "	Dereferences a given generic descriptor, or the generic descriptor 	contained in a data descriptor.  Similar to cor_gd, but data 	descriptors are handled specially.    ", "ddData descriptor.  If gd is undefined, the generic descriptor 		contained in this data descriptor is used instead.  If this 		keyword is set (i.e., /dd), then it is treated like the 		other descriptor keywords and a data desctipro is returned 		if one exists in the generic descriptor.  	<x>d:	Standard descriptor keywords.  Setting a keyword causes the 		corresponding field of the generic descriptor to be returned 		in the output array.   _ref_extra_gdGeneric descriptor.   ", "NV/OBJ/DAT", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_get_value.html", "dat_get_value.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_get_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_get_value.html#dat_get_value", "dat_get_value", 'routine in <a href="obj/dat/dat_get_value.html">dat_get_value.pro</a>', "dat_get_value.pro", "", "dat_get_value", "	Calls input translators, supplying the given keyword, and builds 	a list of returned descriptors.    ", "status	0 if at least one translator call was successful, 			-1 otherwise.    trs	Transient argument string.   dd	Data descriptors.  Must all have the same instrument 			string.   keywordKeyword to pass to translators, describing the 			requested quantity.   @nv_trs_keywords_include.pro", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of descriptors returned from all successful translator calls. 	Descriptors are returned in the same order that the corresponding 	translators were called.  Each translator may produce multiple 	descriptors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_gff.html", "dat_gff.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_gff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_gff.html#dat_gff", "dat_gff", 'routine in <a href="obj/dat/dat_gff.html">dat_gff.pro</a>', "dat_gff.pro", "", "dat_gff", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/OBJ/DAT", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_header.html", "dat_header.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_header.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_header.html#dat_header", "dat_header", 'routine in <a href="obj/dat/dat_header.html">dat_header.pro</a>', "dat_header.pro", "", "dat_header", "	Returns the header array associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	The header array associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_header    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_header_value.html", "dat_header_value.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_header_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_header_value.html#dat_header_value", "dat_header_value", 'routine in <a href="obj/dat/dat_header_value.html">dat_header_value.pro</a>', "dat_header_value.pro", "", "dat_header_value", "	Reads and write header keyword values.    ", "getValue of the specified keyword read from the header.     setNew value to write to the specified keyword.    noeventdd	Data descriptor.   keywordString giving the name of the keyword to get or set.   ", "NV/SYS", " 	Written by:	Spitale, 8/2013  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_input_fn.html", "dat_input_fn.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_input_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_input_fn.html#dat_input_fn", "dat_input_fn", 'routine in <a href="obj/dat/dat_input_fn.html">dat_input_fn.pro</a>', "dat_input_fn.pro", "", "dat_input_fn", "	Returns the input_fn value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   	The input_fn value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_input_keyvals.html", "dat_input_keyvals.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_input_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_input_keyvals.html#dat_input_keyvals", "dat_input_keyvals", 'routine in <a href="obj/dat/dat_input_keyvals.html">dat_input_keyvals.pro</a>', "dat_input_keyvals.pro", "", "dat_input_keyvals", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/OBJ/DAT", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_input_transforms.html", "dat_input_transforms.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_input_transforms.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_input_transforms.html#dat_input_transforms", "dat_input_transforms", 'routine in <a href="obj/dat/dat_input_transforms.html">dat_input_transforms.pro</a>', "dat_input_transforms.pro", "", "dat_input_transforms", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/OBJ/DAT", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_input_translators.html", "dat_input_translators.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_input_translators.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_input_translators.html#dat_input_translators", "dat_input_translators", 'routine in <a href="obj/dat/dat_input_translators.html">dat_input_translators.pro</a>', "dat_input_translators.pro", "", "dat_input_translators", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/OBJ/DAT", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_instrument.html", "dat_instrument.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_instrument.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_instrument.html#dat_instrument", "dat_instrument", 'routine in <a href="obj/dat/dat_instrument.html">dat_instrument.pro</a>', "dat_instrument.pro", "", "dat_instrument", "	Returns the instrument string associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/OBJ/COR", " 	Written by:	Spitale, 9/2001  	Adapted by:	Spitale, 5/2016   	The instrument string associated with the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_keyword_fn.html", "dat_keyword_fn.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_keyword_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_keyword_fn.html#dat_keyword_fn", "dat_keyword_fn", 'routine in <a href="obj/dat/dat_keyword_fn.html">dat_keyword_fn.pro</a>', "dat_keyword_fn.pro", "", "dat_keyword_fn", "	Returns the keyword_fn value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   	The keyword_fn value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_load_data.html", "dat_load_data.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_load_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_load_data.html#dat_load_data", "dat_load_data", 'routine in <a href="obj/dat/dat_load_data.html">dat_load_data.pro</a>', "dat_load_data.pro", "", "dat_load_data", "	Loads the data array for a given data descriptor.  Adds to 	NV state maintained list if maintain == 1.    ", "sampledataddData descriptor to test.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Loaded data array.    KNOWN BUGS: 	Subsampling (ie. caching) is unreliable.  Lines or other anomalies 	often appear in subsampled images.  This does not seem to happen 	with integer sampling (e.g. integer zooms in tvim or grim), so it 	may be related to rounding or truncating of indices.  It may also be 	a problem with the set arithmetic.  Caching is currently disabled 	(see (*_dd.dd0p).cache = -1 below) until it can be fixed.    STATUS: 	Some bugs.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_lookup_io.html", "dat_lookup_io.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_lookup_io.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_lookup_io.html#dat_lookup_io", "dat_lookup_io", 'routine in <a href="obj/dat/dat_lookup_io.html">dat_lookup_io.pro</a>', "dat_lookup_io.pro", "", "dat_lookup_io", "	Looks up the names of the data input and output functions in 	the I/O table.    ", "filetypeFiletype string from dat_detect_filetype.   input_fnoutput_fnkeyword_fn", "NV/SYS", " 	Written by:	Spitale   	input_fn:	Name of the input function.  	output_fn:	Name of the output function.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_lookup_transforms.html", "dat_lookup_transforms.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_lookup_transforms.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_lookup_transforms.html#dat_lookup_transforms", "dat_lookup_transforms", 'routine in <a href="obj/dat/dat_lookup_transforms.html">dat_lookup_transforms.pro</a>', "dat_lookup_transforms.pro", "", "dat_lookup_transforms", "	Looks up the names of the data input and output functions in 	the I/O table.    ", "tab_transformsinstrumentInstrument string from dat_detect_instrument.   input_transformsoutput_transforms", "NV/SYS", " 	Written by:	Spitale   	input_transforms:	Array giving the names of the input transform 				functions.  	output_transforms:	Array giving the names of the output transform 				functions.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_lookup_translators.html", "dat_lookup_translators.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_lookup_translators.pro", "", "", "	Looks up the names of the data input and output tranlators in 	the translators table.    ", "", "          -1", " 	Written by:	Spitale   ");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_lookup_translators.html#dltr_extract", "dltr_extract", 'routine in <a href="obj/dat/dat_lookup_translators.html">dat_lookup_translators.pro</a>', "dat_lookup_translators.pro", "", "dltr_extract", "", "tableinstrumentinput_translatorsoutput_translatorsinput_keyvalsoutput_keyvals", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/dat_lookup_translators.html#dat_lookup_translators", "dat_lookup_translators", 'routine in <a href="obj/dat/dat_lookup_translators.html">dat_lookup_translators.pro</a>', "dat_lookup_translators.pro", "", "dat_lookup_translators", "", "tab_translatorsinstrumentinput_translatorsoutput_translatorsinput_keyvalsoutput_keyvals", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_maintain.html", "dat_maintain.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_maintain.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_maintain.html#dat_maintain", "dat_maintain", 'routine in <a href="obj/dat/dat_maintain.html">dat_maintain.pro</a>', "dat_maintain.pro", "", "dat_maintain", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_manage_dd.html", "dat_manage_dd.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_manage_dd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_manage_dd.html#dat_manage_dd", "dat_manage_dd", 'routine in <a href="obj/dat/dat_manage_dd.html">dat_manage_dd.pro</a>', "dat_manage_dd.pro", "", "dat_manage_dd", "	Adds a data descriptor to the NV state maintained list.  If the list 	is full, the oldest descriptor is unloaded and removed.    ", "ddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_max.html", "dat_max.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_max.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_max.html#dat_max", "dat_max", 'routine in <a href="obj/dat/dat_max.html">dat_max.pro</a>', "dat_max.pro", "", "dat_max", "	Returns the max value associated with a data descriptor.    ", "noeventabscissaddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   	The max value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_min.html", "dat_min.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_min.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_min.html#dat_min", "dat_min", 'routine in <a href="obj/dat/dat_min.html">dat_min.pro</a>', "dat_min.pro", "", "dat_min", "	Returns the min value associated with a data descriptor.    ", "noeventabscissaddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   	The min value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_n.html", "dat_n.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_n.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_n.html#dat_n", "dat_n", 'routine in <a href="obj/dat/dat_n.html">dat_n.pro</a>', "dat_n.pro", "", "dat_n", "	Returns the number of elements in the data array in the given data 	descriptor.    ", "trueIf set, the dimension function is not called and the true 	 	length of the data is returned.   noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 6/2017   	Number of elements in the data in the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_ndd.html", "dat_ndd.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_ndd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_ndd.html#dat_ndd", "dat_ndd", 'routine in <a href="obj/dat/dat_ndd.html">dat_ndd.pro</a>', "dat_ndd.pro", "", "dat_ndd", "	Returns the global maintenance ndd value.    ", "ddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The global maintenance ndd value.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_nhist.html", "dat_nhist.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_nhist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_nhist.html#dat_nhist", "dat_nhist", 'routine in <a href="obj/dat/dat_nhist.html">dat_nhist.pro</a>', "dat_nhist.pro", "", "dat_nhist", "	Returns the number of archived data states.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Integer giving the number of past data states archived 	in the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_output_fn.html", "dat_output_fn.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_output_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_output_fn.html#dat_output_fn", "dat_output_fn", 'routine in <a href="obj/dat/dat_output_fn.html">dat_output_fn.pro</a>', "dat_output_fn.pro", "", "dat_output_fn", "	Returns the output_fn value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   	The output_fn value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_output_keyvals.html", "dat_output_keyvals.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_output_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_output_keyvals.html#dat_output_keyvals", "dat_output_keyvals", 'routine in <a href="obj/dat/dat_output_keyvals.html">dat_output_keyvals.pro</a>', "dat_output_keyvals.pro", "", "dat_output_keyvals", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/OBJ/DAT", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_output_transforms.html", "dat_output_transforms.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_output_transforms.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_output_transforms.html#dat_output_transforms", "dat_output_transforms", 'routine in <a href="obj/dat/dat_output_transforms.html">dat_output_transforms.pro</a>', "dat_output_transforms.pro", "", "dat_output_transforms", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/OBJ/DAT", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_output_translators.html", "dat_output_translators.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_output_translators.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_output_translators.html#dat_output_translators", "dat_output_translators", 'routine in <a href="obj/dat/dat_output_translators.html">dat_output_translators.pro</a>', "dat_output_translators.pro", "", "dat_output_translators", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/OBJ/DAT", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_parse_keyval.html", "dat_parse_keyval.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_parse_keyval.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_parse_keyval.html#dat_parse_keyval", "dat_parse_keyval", 'routine in <a href="obj/dat/dat_parse_keyval.html">dat_parse_keyval.pro</a>', "dat_parse_keyval.pro", "", "dat_parse_keyval", "	Parses a string containing a keyword=value pair.    ", "_keyval	String of the form <keyword>=<value>.   keywordvalue", "NV/SYS", " 	Written by:	Spitale   	keyword:	String giving the keyword.  	value:		String giving the value.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_parse_keyvals.html", "dat_parse_keyvals.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_parse_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_parse_keyvals.html#dat_parse_keyvals", "dat_parse_keyvals", 'routine in <a href="obj/dat/dat_parse_keyvals.html">dat_parse_keyvals.pro</a>', "dat_parse_keyvals.pro", "", "dat_parse_keyvals", "	Parses an array strings containing keyword=value pairs.    ", "keywordskeyvalsArray of strings of the form <keyword>=<value>.   ", "NV/SYS", " 	Written by:	Spitale   	Array of type keyval_struct containing the parsed keywords 	and values.  One element per input array element.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_parse_transient_keyvals.html", "dat_parse_transient_keyvals.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_parse_transient_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_parse_transient_keyvals.html#dat_parse_transient_keyvals", "dat_parse_transient_keyvals", 'routine in <a href="obj/dat/dat_parse_transient_keyvals.html">dat_parse_transient_keyvals.pro</a>', "dat_parse_transient_keyvals.pro", "", "dat_parse_transient_keyvals", "	Parses a comma-delimited transient argument string into an of array 	of strings containing keyword=value pairs.    ", "trsTransient argument string.   ", "NV/SYS", " 	Written by:	Spitale   	Array of strings containing keyword=value pairs.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_put_value.html", "dat_put_value.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_put_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_put_value.html#dat_put_value", "dat_put_value", 'routine in <a href="obj/dat/dat_put_value.html">dat_put_value.pro</a>', "dat_put_value.pro", "", "dat_put_value", "	Calls output translators, supplying the given keyword and value.    ", "trs	Transient argument string.   status	0 if at least one translator call was successful, 			-1 otherwise.    dd	Data descriptor.   keywordKeyword to pass to translators, describing the 			requested quantity.   value	Value to write through the translators.   @nv_trs_keywords_include.pro", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_query.html", "dat_query.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_query.html#dat_query", "dat_query", 'routine in <a href="obj/dat/dat_query.html">dat_query.pro</a>', "dat_query.pro", "", "dat_query", "	Returns the fields associated with a CAMERA object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@dat__keywords.include", "NV/OBJ/CAM", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_read.html", "dat_read.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_read.pro", "", "", "	Reads a data file of arbitrary format and produces a data descriptor.    	dat_read expands all file specifications and then attempts to detect 	the filetype for each resulting filename using the filetype detectors 	table.  If a filetype is detected, dat_read looks up the I/O functions 	and calls the input function to read the file.  Finally, it calls 	nv_init_descriptor to obtain a data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_write    ", "", "          -1", " 	Written by:	Spitale, 2/1998   ");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_read.html#drd_read", "drd_read", 'routine in <a href="obj/dat/dat_read.html">dat_read.pro</a>', "dat_read.pro", "", "drd_read", "", "filetypeinput_fnoutput_fnkeyword_fninstrumentinput_translatorsoutput_translatorsinput_transformsoutput_transformstab_translatorsmaintaincompresssamplenodatanamenhistextensions_filenamedataheader", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/dat_read.html#dat_read", "dat_read", 'routine in <a href="obj/dat/dat_read.html">dat_read.pro</a>', "dat_read.pro", "", "dat_read", "", "filetypeinput_fnoutput_fnkeyword_fninstrumentinput_translatorsoutput_translatorsinput_transformsoutput_transformstab_translatorsmaintaincompresssamplenodatanamenhistextensionsfilespecdataheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_read_config.html", "dat_read_config.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_read_config.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_read_config.html#dat_read_config", "dat_read_config", 'routine in <a href="obj/dat/dat_read_config.html">dat_read_config.pro</a>', "dat_read_config.pro", "", "dat_read_config", "	Reads an NV configuration table.    ", "continuestatusenvName of an environment variable giving the names of the 		configuration files to read, delimited by ':'.   table_pfilenames_p", "NV/SYS", " 	Written by:	Spitale   	table_p:	Pointer to the configuration table contructed by 			concatenating the contents of each file.  	filenames_p:	List of configuration filenames that were read.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_redo.html", "dat_redo.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_redo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_redo.html#dat_redo", "dat_redo", 'routine in <a href="obj/dat/dat_redo.html">dat_redo.pro</a>', "dat_redo.pro", "", "dat_redo", "	Decrements the data archive index in the data descriptor.    ", "noeventddData descriptor.   ", "NV/OBJ/DAT", " 	Written by:	Spitale  	Adapted by:	Spitale, 7/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_replicate.html", "dat_replicate.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_replicate.html#dat_replicate", "dat_replicate", 'routine in <a href="obj/dat/dat_replicate.html">dat_replicate.pro</a>', "dat_replicate.pro", "", "dat_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "fnName of the cloning function.  Default is nv_clone.   dd Data deccriptor to replicate.   dim Dimensions of the result.   ", "NV/LIB/BOD", " 	Written by:	Spitale   	Array of the given dimensions containing cloned versions of the input 	data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_sampling_data.html", "dat_sampling_data.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_sampling_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_sampling_data.html#dat_sampling_data", "dat_sampling_data", 'routine in <a href="obj/dat/dat_sampling_data.html">dat_sampling_data.pro</a>', "dat_sampling_data.pro", "", "dat_sampling_data", "	Returns the sampling function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The sampling_data associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_sampling_data    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_sampling_fn.html", "dat_sampling_fn.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_sampling_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_sampling_fn.html#dat_sampling_fn", "dat_sampling_fn", 'routine in <a href="obj/dat/dat_sampling_fn.html">dat_sampling_fn.pro</a>', "dat_sampling_fn.pro", "", "dat_sampling_fn", "	Returns the sampling function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The sampling_fn associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_sampling_fn    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_compress.html", "dat_set_compress.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_compress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_compress.html#dat_set_compress", "dat_set_compress", 'routine in <a href="obj/dat/dat_set_compress.html">dat_set_compress.pro</a>', "dat_set_compress.pro", "", "dat_set_compress", "	Replaces the name of the compression function in a data descriptor.    ", "dd	Data descriptor.   compressString giving the name of a new compression function.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_data.html", "dat_set_data.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_data.html#dat_set_data", "dat_set_data", 'routine in <a href="obj/dat/dat_set_data.html">dat_set_data.pro</a>', "dat_set_data.pro", "", "dat_set_data", "	Replaces the data array associated with a data descriptor.    ", "updateUpdate mode flag.  If not given, it will be taken from dd.   noeventabscissaIf set, the given array is taken as the abscissa.   sampleddData descriptor.   _dataNew data array.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_dh.html", "dat_set_dh.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_dh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_dh.html#dat_set_dh", "dat_set_dh", 'routine in <a href="obj/dat/dat_set_dh.html">dat_set_dh.pro</a>', "dat_set_dh.pro", "", "dat_set_dh", "	Replaces the dh value in a data descriptor.    ", "noeventdd	Data descriptor.   dhNew dh value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_dim.html", "dat_set_dim.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_dim.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_dim.html#dat_set_dim", "dat_set_dim", 'routine in <a href="obj/dat/dat_set_dim.html">dat_set_dim.pro</a>', "dat_set_dim.pro", "", "dat_set_dim", "	Replaces the dimensions in a data descriptor.    ", "noeventddData descriptor.   dimNew dimensions.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_dim_data.html", "dat_set_dim_data.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_dim_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_dim_data.html#dat_set_dim_data", "dat_set_dim_data", 'routine in <a href="obj/dat/dat_set_dim_data.html">dat_set_dim_data.pro</a>', "dat_set_dim_data.pro", "", "dat_set_dim_data", "	Replaces the dimension function data associated with a data descriptor.    ", "noeventdd		Data descriptor.   data", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_dim_fn.html", "dat_set_dim_fn.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_dim_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_dim_fn.html#dat_set_dim_fn", "dat_set_dim_fn", 'routine in <a href="obj/dat/dat_set_dim_fn.html">dat_set_dim_fn.pro</a>', "dat_set_dim_fn.pro", "", "dat_set_dim_fn", "	Replaces the dimension function associated with a data descriptor.    ", "noeventdd	Data descriptor.   dim_fnNew sampling function.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_filename.html", "dat_set_filename.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_filename.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_filename.html#dat_set_filename", "dat_set_filename", 'routine in <a href="obj/dat/dat_set_filename.html">dat_set_filename.pro</a>', "dat_set_filename.pro", "", "dat_set_filename", "	Changes the file name associated with a data descriptor.    ", "noeventdd	Data descriptor.   filenameNew file name.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_filetype.html", "dat_set_filetype.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_filetype.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_filetype.html#dat_set_filetype", "dat_set_filetype", 'routine in <a href="obj/dat/dat_set_filetype.html">dat_set_filetype.pro</a>', "dat_set_filetype.pro", "", "dat_set_filetype", "	Changes the file name associated with a data descriptor.    ", "noeventdd	Data descriptor.   filetypeNew file name.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_gd.html", "dat_set_gd.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_gd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_gd.html#dat_set_gd", "dat_set_gd", 'routine in <a href="obj/dat/dat_set_gd.html">dat_set_gd.pro</a>', "dat_set_gd.pro", "", "dat_set_gd", "	Updates a generic descriptor contained in an object.  Similar to 	cor_set_gd, except descriptor inputs are sorted according to the 	data descriptors contained in their generic descriptors.    ", "_extraxdObjects to modify.  The fields from any existing generic 		descriptors in these objects are retained in the new ones.   gdNew generic descriptor.   ", "NV/PG", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_gff.html", "dat_set_gff.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_gff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_gff.html#dat_set_gff", "dat_set_gff", 'routine in <a href="obj/dat/dat_set_gff.html">dat_set_gff.pro</a>', "dat_set_gff.pro", "", "dat_set_gff", "	Replaces the gff value in a data descriptor.    ", "noeventdd	Data descriptor.   gffNew gff value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_header.html", "dat_set_header.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_header.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_header.html#dat_set_header", "dat_set_header", 'routine in <a href="obj/dat/dat_set_header.html">dat_set_header.pro</a>', "dat_set_header.pro", "", "dat_set_header", "	Replaces the header array associated with a data descriptor.    ", "updateUpdate mode flag.  If not given, it will be taken from dd.   noeventddData descriptor.   headerNew header array.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_input_fn.html", "dat_set_input_fn.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_input_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_input_fn.html#dat_set_input_fn", "dat_set_input_fn", 'routine in <a href="obj/dat/dat_set_input_fn.html">dat_set_input_fn.pro</a>', "dat_set_input_fn.pro", "", "dat_set_input_fn", "	Replaces the input_fn value in a data descriptor.    ", "noeventdd	Data descriptor.   input_fnNew input_fn value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_input_keyvals.html", "dat_set_input_keyvals.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_input_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_input_keyvals.html#dat_set_input_keyvals", "dat_set_input_keyvals", 'routine in <a href="obj/dat/dat_set_input_keyvals.html">dat_set_input_keyvals.pro</a>', "dat_set_input_keyvals.pro", "", "dat_set_input_keyvals", "	Replaces the input_keyvals value in a data descriptor.    ", "noeventdd	Data descriptor.   input_keyvalsNew input_keyvals value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_input_transforms.html", "dat_set_input_transforms.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_input_transforms.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_input_transforms.html#dat_set_input_transforms", "dat_set_input_transforms", 'routine in <a href="obj/dat/dat_set_input_transforms.html">dat_set_input_transforms.pro</a>', "dat_set_input_transforms.pro", "", "dat_set_input_transforms", "	Replaces the input_transforms value in a data descriptor.    ", "noeventdd	Data descriptor.   input_transformsNew input_transforms value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_input_translators.html", "dat_set_input_translators.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_input_translators.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_input_translators.html#dat_set_input_translators", "dat_set_input_translators", 'routine in <a href="obj/dat/dat_set_input_translators.html">dat_set_input_translators.pro</a>', "dat_set_input_translators.pro", "", "dat_set_input_translators", "	Replaces the input_translators value in a data descriptor.    ", "noeventdd	Data descriptor.   input_translatorsNew input_translators value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_instrument.html", "dat_set_instrument.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_instrument.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_instrument.html#dat_set_instrument", "dat_set_instrument", 'routine in <a href="obj/dat/dat_set_instrument.html">dat_set_instrument.pro</a>', "dat_set_instrument.pro", "", "dat_set_instrument", "	Changes the file name associated with a data descriptor.    ", "noeventdd	Data descriptor.   instrumentNew instrument name.   ", "NV/OBJ/COR", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_keyword_fn.html", "dat_set_keyword_fn.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_keyword_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_keyword_fn.html#dat_set_keyword_fn", "dat_set_keyword_fn", 'routine in <a href="obj/dat/dat_set_keyword_fn.html">dat_set_keyword_fn.pro</a>', "dat_set_keyword_fn.pro", "", "dat_set_keyword_fn", "	Replaces the keyword_fn value in a data descriptor.    ", "noeventdd	Data descriptor.   keyword_fnNew keyword_fn value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_maintain.html", "dat_set_maintain.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_maintain.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_maintain.html#dat_set_maintain", "dat_set_maintain", 'routine in <a href="obj/dat/dat_set_maintain.html">dat_set_maintain.pro</a>', "dat_set_maintain.pro", "", "dat_set_maintain", "	Replaces the maintain flag in a data descriptor.    ", "noeventdd	Data descriptor.   maintainNew maintain flag.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_max.html", "dat_set_max.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_max.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_max.html#dat_set_max", "dat_set_max", 'routine in <a href="obj/dat/dat_set_max.html">dat_set_max.pro</a>', "dat_set_max.pro", "", "dat_set_max", "	Replaces the max value in a data descriptor.    ", "noeventabscissadd	Data descriptor.   maxNew max value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_min.html", "dat_set_min.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_min.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_min.html#dat_set_min", "dat_set_min", 'routine in <a href="obj/dat/dat_set_min.html">dat_set_min.pro</a>', "dat_set_min.pro", "", "dat_set_min", "	Replaces the min value in a data descriptor.    ", "noeventabscissadd	Data descriptor.   minNew min value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_ndd.html", "dat_set_ndd.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_ndd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_ndd.html#dat_set_ndd", "dat_set_ndd", 'routine in <a href="obj/dat/dat_set_ndd.html">dat_set_ndd.pro</a>', "dat_set_ndd.pro", "", "dat_set_ndd", "	Sets a new ndd value in the NV state structure.    ", "nddNew ndd value.   ", "NV/SYS", " 	Written by:	Spitale, 1998   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_nhist.html", "dat_set_nhist.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_nhist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_nhist.html#dat_set_nhist", "dat_set_nhist", 'routine in <a href="obj/dat/dat_set_nhist.html">dat_set_nhist.pro</a>', "dat_set_nhist.pro", "", "dat_set_nhist", "	Changes the number of past states archived in a data descriptor.    ", "noeventddData descriptor.   nhistNew nhist value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_output_fn.html", "dat_set_output_fn.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_output_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_output_fn.html#dat_set_output_fn", "dat_set_output_fn", 'routine in <a href="obj/dat/dat_set_output_fn.html">dat_set_output_fn.pro</a>', "dat_set_output_fn.pro", "", "dat_set_output_fn", "	Replaces the output_fn value in a data descriptor.    ", "noeventdd	Data descriptor.   output_fnNew output_fn value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_output_keyvals.html", "dat_set_output_keyvals.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_output_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_output_keyvals.html#dat_set_output_keyvals", "dat_set_output_keyvals", 'routine in <a href="obj/dat/dat_set_output_keyvals.html">dat_set_output_keyvals.pro</a>', "dat_set_output_keyvals.pro", "", "dat_set_output_keyvals", "	Replaces the output_keyvals value in a data descriptor.    ", "noeventdd	Data descriptor.   output_keyvalsNew output_keyvals value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_output_transforms.html", "dat_set_output_transforms.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_output_transforms.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_output_transforms.html#dat_set_output_transforms", "dat_set_output_transforms", 'routine in <a href="obj/dat/dat_set_output_transforms.html">dat_set_output_transforms.pro</a>', "dat_set_output_transforms.pro", "", "dat_set_output_transforms", "	Replaces the output_transforms value in a data descriptor.    ", "noeventdd	Data descriptor.   output_transformsNew output_transforms value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_output_translators.html", "dat_set_output_translators.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_output_translators.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_output_translators.html#dat_set_output_translators", "dat_set_output_translators", 'routine in <a href="obj/dat/dat_set_output_translators.html">dat_set_output_translators.pro</a>', "dat_set_output_translators.pro", "", "dat_set_output_translators", "	Replaces the output_translators value in a data descriptor.    ", "noeventdd	Data descriptor.   output_translatorsNew output_translators value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_sampling_data.html", "dat_set_sampling_data.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_sampling_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_sampling_data.html#dat_set_sampling_data", "dat_set_sampling_data", 'routine in <a href="obj/dat/dat_set_sampling_data.html">dat_set_sampling_data.pro</a>', "dat_set_sampling_data.pro", "", "dat_set_sampling_data", "	Replaces the sampling function data associated with a data descriptor.    ", "noeventdd		Data descriptor.   data", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_sampling_fn.html", "dat_set_sampling_fn.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_sampling_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_sampling_fn.html#dat_set_sampling_fn", "dat_set_sampling_fn", 'routine in <a href="obj/dat/dat_set_sampling_fn.html">dat_set_sampling_fn.pro</a>', "dat_set_sampling_fn.pro", "", "dat_set_sampling_fn", "	Replaces the sampling function associated with a data descriptor.    ", "datanoeventdd	Data descriptor.   sampling_fnNew sampling function.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_sibling.html", "dat_set_sibling.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_sibling.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_sibling.html#dat_set_sibling", "dat_set_sibling", 'routine in <a href="obj/dat/dat_set_sibling.html">dat_set_sibling.pro</a>', "dat_set_sibling.pro", "", "dat_set_sibling", "	Changes the sibling in a data descriptor.    ", "noeventdd	Data descriptor.   dd_siblingData descriptor of new sibling.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_slice.html", "dat_set_slice.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_slice.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_slice.html#dat_set_slice", "dat_set_slice", 'routine in <a href="obj/dat/dat_set_slice.html">dat_set_slice.pro</a>', "dat_set_slice.pro", "", "dat_set_slice", "	Sets slice coordinates in a data descriptor.    ", "newIf set, a new slice pointer is allocated instead of overwriting 		the exiting data.   ddData descriptorin which to set the slice coordinates.   dd0Data descriptorin describing the source data array.   sliceArray giving the slice coordinates.   ", "NV/OBJ/DAT", " 	Written by:	Spitale		6/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_typecode.html", "dat_set_typecode.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_typecode.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_typecode.html#dat_set_typecode", "dat_set_typecode", 'routine in <a href="obj/dat/dat_set_typecode.html">dat_set_typecode.pro</a>', "dat_set_typecode.pro", "", "dat_set_typecode", "	Replaces the typecode value in a data descriptor.    ", "noeventdd	Data descriptor.   typecodeNew typecode value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_set_update.html", "dat_set_update.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_set_update.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_set_update.html#dat_set_update", "dat_set_update", 'routine in <a href="obj/dat/dat_set_update.html">dat_set_update.pro</a>', "dat_set_update.pro", "", "dat_set_update", "	Changes the update flag in a data descriptor.    ", "noeventddData descriptor.   updateNew update flag.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_sibling.html", "dat_sibling.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_sibling.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_sibling.html#dat_sibling", "dat_sibling", 'routine in <a href="obj/dat/dat_sibling.html">dat_sibling.pro</a>', "dat_sibling.pro", "", "dat_sibling", "	Returns the sibling data descriptor associated with a data 	descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Data descriptor of the sibling.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_slice.html", "dat_slice.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_slice.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_slice.html#dat_slice", "dat_slice", 'routine in <a href="obj/dat/dat_slice.html">dat_slice.pro</a>', "dat_slice.pro", "", "dat_slice", "	Returns the slice coordinates for the given data descriptor.    ", "dd0noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 6/2017   	Array giving the slice coordinates for the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_slice__define.html", "dat_slice__define.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_slice__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_slice__define.html#dat_slice__define", "dat_slice__define", 'routine in <a href="obj/dat/dat_slice__define.html">dat_slice__define.pro</a>', "dat_slice__define.pro", "", "dat_slice__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_slice_offset.html", "dat_slice_offset.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_slice_offset.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_slice_offset.html#dat_slice_offset", "dat_slice_offset", 'routine in <a href="obj/dat/dat_slice_offset.html">dat_slice_offset.pro</a>', "dat_slice_offset.pro", "", "dat_slice_offset", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_slices.html", "dat_slices.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_slices.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_slices.html#dat_slices", "dat_slices", 'routine in <a href="obj/dat/dat_slices.html">dat_slices.pro</a>', "dat_slices.pro", "", "dat_slices", "	Creates new data descriptors that point to a subarray slices in a given 	data descriptor.    ", "dd0slicem x n array giving coordinates of n m-dimensional arrays to 		select. If not given, the original data array is sliced into 		arrays of one dimension smaller, i.e., a cube is sliced 		into its constituent images, and an image is sliced into its 		constituent lines etc.   ", "NV/OBJ/DAT", " 	Written by:	Spitale		6/2017   	1) Extract the ith image of a 3-dimensional data cube:  		new_dd = dat_slices(dd, i)  	2) Extract the ith cube of a 4-dimensional data array:  		new_dd = dat_slices(dd, i)  	3) Extract the ith image in the jth cube of a 4-dimensional data array:  		new_dd = dat_slices(dd, [i,j]) 	New data descriptors for the selected data arrays.  Dimensions are N - m. 	Note that new data arrays are not allocated.  Instead, the returned 	descriptors point to the subarray within the data array of the input 	data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_test_dd.html", "dat_test_dd.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_test_dd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_test_dd.html#dat_test_dd", "dat_test_dd", 'routine in <a href="obj/dat/dat_test_dd.html">dat_test_dd.pro</a>', "dat_test_dd.pro", "", "dat_test_dd", "	Determines whether the argument is a valid data descriptor.    ", "noeventddData descriptor to test.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	True if the argument is present, is a valid pointer, and 	points to a data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_transform_input.html", "dat_transform_input.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_transform_input.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_transform_input.html#dat_transform_input", "dat_transform_input", 'routine in <a href="obj/dat/dat_transform_input.html">dat_transform_input.pro</a>', "dat_transform_input.pro", "", "dat_transform_input", "", "_dddataheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_transform_output.html", "dat_transform_output.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_transform_output.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_transform_output.html#dat_transform_output", "dat_transform_output", 'routine in <a href="obj/dat/dat_transform_output.html">dat_transform_output.pro</a>', "dat_transform_output.pro", "", "dat_transform_output", "", "_dddataheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_typecode.html", "dat_typecode.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_typecode.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_typecode.html#dat_typecode", "dat_typecode", 'routine in <a href="obj/dat/dat_typecode.html">dat_typecode.pro</a>', "dat_typecode.pro", "", "dat_typecode", "	Returns the type code associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Integer giving the typecode.    STATUS: Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_uncompress_data_mask.html", "dat_uncompress_data_mask.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_uncompress_data_mask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_uncompress_data_mask.html#dat_uncompress_data_mask", "dat_uncompress_data_mask", 'routine in <a href="obj/dat/dat_uncompress_data_mask.html">dat_uncompress_data_mask.pro</a>', "dat_uncompress_data_mask.pro", "", "dat_uncompress_data_mask", "", "_dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_undo.html", "dat_undo.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_undo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_undo.html#dat_undo", "dat_undo", 'routine in <a href="obj/dat/dat_undo.html">dat_undo.pro</a>', "dat_undo.pro", "", "dat_undo", "	Increments the data archive index in the data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_unload_data.html", "dat_unload_data.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_unload_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_unload_data.html#dat_unload_data", "dat_unload_data", 'routine in <a href="obj/dat/dat_unload_data.html">dat_unload_data.pro</a>', "dat_unload_data.pro", "", "dat_unload_data", "	Unloads the dat descriptor data array and removes dd from the NV 	state maintained list if present.    ", "allIf set, all maintained data descriptors are unloaded.   ddData descriptor to test.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_update.html", "dat_update.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_update.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_update.html#dat_update", "dat_update", 'routine in <a href="obj/dat/dat_update.html">dat_update.pro</a>', "dat_update.pro", "", "dat_update", "	Returns the update flag associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Data descriptor update flag.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_valid_descriptor.html", "dat_valid_descriptor.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_valid_descriptor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_valid_descriptor.html#dat_valid_descriptor", "dat_valid_descriptor", 'routine in <a href="obj/dat/dat_valid_descriptor.html">dat_valid_descriptor.pro</a>', "dat_valid_descriptor.pro", "", "dat_valid_descriptor", "	Determines whether the argument is a valid data descriptor, 	or data descriptor structure.    ", "ddp", "NV/SYS", " 	Written by:	Spitale   	True if the argument is a data descriptor structure or a 	pointer to one.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dat_write.html", "dat_write.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "dat_write.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dat_write.html#dat_write", "dat_write", 'routine in <a href="obj/dat/dat_write.html">dat_write.pro</a>', "dat_write.pro", "", "dat_write", "	Writes a data file of arbitrary format.    	dat_write expands all file specifications and attempts to write a 	file corresponding to each given data descriptor.  An error results 	if the filespec expands to a different number of files than the number 	of given data descriptors.    STATUS: 	Complete    SEE ALSO: 	dat_read    ", "nodatafiletypeOverrides data descriptor filetype (and thus the 			output function).  Data descriptor filetype is 			updated unless /override.   output_fnOverrides data descriptor output function.  Data 			descriptor output_fn is updated unless /override.   overrideIf set, filespec, filetype, and output_fn inputs 			are used for this call, but not updated in the data 			descriptor.    arg1arg2", "NV/SYS", " 	Written by:	Spitale, 7/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/detect_dh.html", "detect_dh.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "detect_dh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/detect_dh.html#detect_dh", "detect_dh", 'routine in <a href="obj/dat/dh/util/detect_dh.html">detect_dh.pro</a>', "detect_dh.pro", "", "detect_dh", "", "ddudata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_create.html", "dh_create.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_create.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_create.html#dh_create", "dh_create", 'routine in <a href="obj/dat/dh/util/dh_create.html">dh_create.pro</a>', "dh_create.pro", "", "dh_create", "	Creates a minimal detached header.    	dh_create creates a detached header containing a history line and 	the '<updates>' separator.    STATUS: 	Complete    ", "", "UTIL/DH", " 	Written by:	Spitale, 7/1998   	String array in which each element is a line of the detached header.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_create_section.html", "dh_create_section.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_create_section.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_create_section.html#dh_create_section", "dh_create_section", 'routine in <a href="obj/dat/dh/util/dh_create_section.html">dh_create_section.pro</a>', "dh_create_section.pro", "", "dh_create_section", "	Creates a minimal detached header section.    ", "sectionName of section to create.   ", "UTIL/DH", " 	Written by:	Spitale, 12/2016   	String array in which each element is a line of the new section.     STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_field_name.html", "dh_field_name.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_field_name.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_field_name.html#dh_field_name", "dh_field_name", 'routine in <a href="obj/dat/dh/util/dh_field_name.html">dh_field_name.pro</a>', "dh_field_name.pro", "", "dh_field_name", "", "fieldprefix", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_fname.html", "dh_fname.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_fname.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_fname.html#dhfn_findfile", "dhfn_findfile", 'routine in <a href="obj/dat/dh/util/dh_fname.html">dh_fname.pro</a>', "dh_fname.pro", "", "dhfn_findfile", "", "dirnameext", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_fname.html#dh_fname", "dh_fname", 'routine in <a href="obj/dat/dh/util/dh_fname.html">dh_fname.pro</a>', "dh_fname.pro", "", "dh_fname", "", "writefilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/dh_format_comment.html", "dh_format_comment.pro", '.pro file in <a href="obj/dat/dh/dir-overview.html">obj/dat/dh/ directory</a>', "dh_format_comment.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/dh_format_comment.html#dh_format_comment", "dh_format_comment", 'routine in <a href="obj/dat/dh/dh_format_comment.html">dh_format_comment.pro</a>', "dh_format_comment.pro", "", "dh_format_comment", "", "formatvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/dh_from_ominas.html", "dh_from_ominas.pro", '.pro file in <a href="obj/dat/dh/dir-overview.html">obj/dat/dh/ directory</a>', "dh_from_ominas.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/dh_from_ominas.html#dh_from_ominas", "dh_from_ominas", 'routine in <a href="obj/dat/dh/dh_from_ominas.html">dh_from_ominas.pro</a>', "dh_from_ominas.pro", "", "dh_from_ominas", "", "formatvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_get_string.html", "dh_get_string.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_get_string.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_get_string.html#dh_get_string", "dh_get_string", 'routine in <a href="obj/dat/dh/util/dh_get_string.html">dh_get_string.pro</a>', "dh_get_string.pro", "", "dh_get_string", "", "history_indexn_objdimstatussectiondhkeyword", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_get_value.html", "dh_get_value.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_get_value.pro", "", "", "	Gets the value of a specified keyword.    ", "", "          -1", " 	Written by:	Spitale, 7/1998 	Added 'section' keyword: Spitale; 11/2001   ");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_get_value.html#dhgv_convert_value", "dhgv_convert_value", 'routine in <a href="obj/dat/dh/util/dh_get_value.html">dh_get_value.pro</a>', "dh_get_value.pro", "", "dhgv_convert_value", "", "val", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_get_value.html#dh_get_value", "dh_get_value", 'routine in <a href="obj/dat/dh/util/dh_get_value.html">dh_get_value.pro</a>', "dh_get_value.pro", "", "dh_get_value", "", "n_matchall_matchall_objectall_historymatch_keyscountmatch_objectsmatch_historiesobject_indexhistory_indexprefixsection_dhkeyword", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_put_value.html", "dh_put_value.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_put_value.pro", "", "", "	Sets the value of a specified keyword.    	See procedure below; 'utime' and 'history' keywords are modified.    	The data is appended to the top of the specified section of the detached 	header using the given object index and a history index that is one 	greater than the current value found in the detached header for this 	keyword.  The value of the 'utime' keyword corresponding to this history 	index is modified to reflect the current time.  If this history index is 	greater than that given by the 'history' keyword, then that value is 	modified as well.  	If 'value' is an array, then each element is written on a different line 	using the keyword with the same object index, history index, and 	comment, but whose element indices reflect the order that the data 	appear in the array.  	If 'value' is of string type, then each entry is enclosed in quotes.    ", "", "          -1", " 	Written by:	Spitale, 7/1998 	Added 'section' keyword: Spitale; 11/2001   	The following commands:  		IDL> val=[7,6,5,4,3] 		IDL> dh_put_value, dh, 'test_key', val  	produce the following detached header:  	 history = -1 / Current history value 	 <updates> 	 utime = 2451022.404086 / Julian day of update - Mon Jul 27 9:41:53 1998 	 test_key(0) = 7 	 test_key(1) = 6 	 test_key(2) = 5 	 test_key(3) = 4 	 test_key(4) = 3     STATUS: 	Complete    SEE ALSO: 	dh_get_value, dh_rm_value ");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_put_value.html#dhpv_put", "dhpv_put", 'routine in <a href="obj/dat/dh/util/dh_put_value.html">dh_put_value.pro</a>', "dh_put_value.pro", "", "dhpv_put", "", "commentarrayformatdhlinekeywordvalueelemobjhist", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_put_value.html#dh_put_value", "dh_put_value", 'routine in <a href="obj/dat/dh/util/dh_put_value.html">dh_put_value.pro</a>', "dh_put_value.pro", "", "dh_put_value", "", "object_indexcommentsectiondhkeywordvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_read.html", "dh_read.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_read.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_read.html#dh_read", "dh_read", 'routine in <a href="obj/dat/dh/util/dh_read.html">dh_read.pro</a>', "dh_read.pro", "", "dh_read", "	Reads a detached header file.    ", "buflen	Number of lines to allocate at a time.  Default is 1000. 			The routine is faster with larger values of buflen, but 			less memory efficient.   filenameName of file to be read.   ", "UTIL/DH", " 	Written by:	Spitale, 7/1998   	String array in which each line is a line of the detached header. 	a blank detached header is created and returned if the file is 	not found.    STATUS: 	Complete    SEE ALSO: 	dh_write    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_rm_value.html", "dh_rm_value.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_rm_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_rm_value.html#dh_rm_value", "dh_rm_value", 'routine in <a href="obj/dat/dh/util/dh_rm_value.html">dh_rm_value.pro</a>', "dh_rm_value.pro", "", "dh_rm_value", "	Deletes a specified keyword/value pair.    ", "n_matchMaximum number of matches to return.  If not given, 			all matches are returned.   all_matchIf set, match all occurrences.   all_objectIf set, match all object indices.  If not set, then 			match only object index 0.   all_historyIf set, match all history indices.  If not set, 			then only the highest history index is matched.   count	Integer giving the numebr of keywords matched.    object_indexIf given, then match only this object index.   history_indexIf given, then match only this history index.   prefix	If set, then match any keyword which begins with the 			given keyword string instead of requiring an exact 			match.   dh	String giving the detached header.   keywordString giving the keyword to be deleted.   ", "UTIL/DH", " 	Written by:	Spitale, 7/1998   	dh:		dh is modified on return.     ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_set.html", "dh_set.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_set.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_set.html#dh_set", "dh_set", 'routine in <a href="obj/dat/dh/util/dh_set.html">dh_set.pro</a>', "dh_set.pro", "", "dh_set", "", "dddh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/dh_std_input.html", "dh_std_input.pro", '.pro file in <a href="obj/dat/dh/dir-overview.html">obj/dat/dh/ directory</a>', "dh_std_input.pro", "", "", "	Input translator for detached header    ", "", "          -1", " 	Written by:	Spitale, 1998   ");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/dh_std_input.html#dhsi_associate_object", "dhsi_associate_object", 'routine in <a href="obj/dat/dh/dh_std_input.html">dh_std_input.pro</a>', "dh_std_input.pro", "", "dhsi_associate_object", "", "nameddall_xds", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/dh/dh_std_input.html#dhsi_get", "dhsi_get", 'routine in <a href="obj/dat/dh/dh_std_input.html">dh_std_input.pro</a>', "dh_std_input.pro", "", "dhsi_get", "", "objhidhprefixddall_xds", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/dh/dh_std_input.html#dh_std_input", "dh_std_input", 'routine in <a href="obj/dat/dh/dh_std_input.html">dh_std_input.pro</a>', "dh_std_input.pro", "", "dh_std_input", "", "valuesstatusddkeyword@nv_trs_keywords_include.pro", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/dh_std_output.html", "dh_std_output.pro", '.pro file in <a href="obj/dat/dh/dir-overview.html">obj/dat/dh/ directory</a>', "dh_std_output.pro", "", "", "	Output translator for detached headers.    	The detached header in the data descriptor is modified.    STATUS: 	Complete    SEE ALSO: 	dh_std_input    ", "", "          -1", " 	Written by:	Spitale, 1998   ");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/dh_std_output.html#dhso_put", "dhso_put", 'routine in <a href="obj/dat/dh/dh_std_output.html">dh_std_output.pro</a>', "dh_std_output.pro", "", "dhso_put", "", "objdddh_odprefix", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/dh/dh_std_output.html#dh_std_output", "dh_std_output", 'routine in <a href="obj/dat/dh/dh_std_output.html">dh_std_output.pro</a>', "dh_std_output.pro", "", "dh_std_output", "", "statusddkeywordvalue@nv_trs_keywords_include.pro", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/dh_to_ominas.html", "dh_to_ominas.pro", '.pro file in <a href="obj/dat/dh/dir-overview.html">obj/dat/dh/ directory</a>', "dh_to_ominas.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/dh_to_ominas.html#dh_to_ominas", "dh_to_ominas", 'routine in <a href="obj/dat/dh/dh_to_ominas.html">dh_to_ominas.pro</a>', "dh_to_ominas.pro", "", "dh_to_ominas", "", "formatvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_write.html", "dh_write.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dh_write.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dh_write.html#dh_write", "dh_write", 'routine in <a href="obj/dat/dh/util/dh_write.html">dh_write.pro</a>', "dh_write.pro", "", "dh_write", "	Writes a detached header file.    ", "filenameName of file to be written.   dh	String array giving the detached header to write.   ", "UTIL/DH", " 	Written by:	Spitale, 7/1998   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_extract.html", "dhh_extract.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dhh_extract.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_extract.html#dhh_extract", "dhh_extract", 'routine in <a href="obj/dat/dh/util/dhh_extract.html">dhh_extract.pro</a>', "dhh_extract.pro", "", "dhh_extract", "", "dh_historydhsection", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_insert.html", "dhh_insert.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dhh_insert.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_insert.html#dhh_insert", "dhh_insert", 'routine in <a href="obj/dat/dh/util/dhh_insert.html">dhh_insert.pro</a>', "dhh_insert.pro", "", "dhh_insert", "", "dh_historydhdh_section", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_parse_keyword.html", "dhh_parse_keyword.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dhh_parse_keyword.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_parse_keyword.html#dhh_parse_keyword", "dhh_parse_keyword", 'routine in <a href="obj/dat/dh/util/dhh_parse_keyword.html">dhh_parse_keyword.pro</a>', "dhh_parse_keyword.pro", "", "dhh_parse_keyword", "", "rkwkwelm_indexobj_indexhist_index", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_parse_line.html", "dhh_parse_line.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dhh_parse_line.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_parse_line.html#dhh_parse_line", "dhh_parse_line", 'routine in <a href="obj/dat/dh/util/dhh_parse_line.html">dhh_parse_line.pro</a>', "dhh_parse_line.pro", "", "dhh_parse_line", "", "linerkwval", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_search.html", "dhh_search.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dhh_search.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_search.html#dhh_search", "dhh_search", 'routine in <a href="obj/dat/dh/util/dhh_search.html">dhh_search.pro</a>', "dhh_search.pro", "", "dhh_search", "", "linesdhkeyword", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_separate.html", "dhh_separate.pro", '.pro file in <a href="obj/dat/dh/util/dir-overview.html">obj/dat/dh/util/ directory</a>', "dhh_separate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/dh/util/dhh_separate.html#dhh_separate", "dhh_separate", 'routine in <a href="obj/dat/dh/util/dhh_separate.html">dhh_separate.pro</a>', "dhh_separate.pro", "", "dhh_separate", "", "dh_sectionsdhdh_history", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/disk_to_corot.html", "disk_to_corot.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "disk_to_corot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/disk_to_corot.html#disk_to_corot", "disk_to_corot", 'routine in <a href="obj/tools/disk_to_corot.html">disk_to_corot.pro</a>', "disk_to_corot.pro", "", "disk_to_corot", "", "cddkxgbxt0dmldttimesdisk_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/disk_to_corot_lon.html", "disk_to_corot_lon.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "disk_to_corot_lon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/disk_to_corot_lon.html#disk_to_corot_lon", "disk_to_corot_lon", 'routine in <a href="obj/tools/disk_to_corot_lon.html">disk_to_corot_lon.pro</a>', "disk_to_corot_lon.pro", "", "disk_to_corot_lon", "", "cddkxgbxt0dmldttimesdisk_lons", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/disk_to_image.html", "disk_to_image.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "disk_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/disk_to_image.html#disk_to_image", "disk_to_image", 'routine in <a href="obj/tools/composite/disk_to_image.html">disk_to_image.pro</a>', "disk_to_image.pro", "", "disk_to_image", "       Transforms points in disk coordinates to image coordinates    ", "body_ptsBody coordinates of output points.    validIndices of valid output points.   cd      Array of nt camera or map descriptors.   dkx     Array of nt object descriptors (subclass of DISK).   p      Array (nv x 3 x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of image coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/disk_to_inertial_pos.html", "disk_to_inertial_pos.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "disk_to_inertial_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/disk_to_inertial_pos.html#disk_to_inertial_pos", "disk_to_inertial_pos", 'routine in <a href="obj/tools/composite/disk_to_inertial_pos.html">disk_to_inertial_pos.pro</a>', "disk_to_inertial_pos.pro", "", "disk_to_inertial_pos", "       Transforms position vectors in disk coordinates to inertial 	coordinates.    ", "rdp", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale          Array (nv x 3 x nt) of inertial points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/disk_to_map.html", "disk_to_map.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "disk_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/disk_to_map.html#disk_to_map", "disk_to_map", 'routine in <a href="obj/tools/composite/disk_to_map.html">disk_to_map.pro</a>', "disk_to_map.pro", "", "disk_to_map", "       Transforms points in disk coordinates to map coordinates.    ", "md     Array of nt map descriptors.   dkddisk_pts      Array (nv x 3 x nt) of disk points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of map coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("grim/dred/dred.html", "dred.pro", '.pro file in <a href="grim/dred/dir-overview.html">grim/dred/ directory</a>', "dred.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/dred/dred.html#dred_update_form", "dred_update_form", 'routine in <a href="grim/dred/dred.html">dred.pro</a>', "dred.pro", "", "dred_update_form", "", "dataclass", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/dred/dred.html#dred_update_form", "dred_update_form", 'routine in <a href="grim/dred/dred.html">dred.pro</a>', "dred.pro", "", "dred_update_form", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/dred/dred.html#dred_configure_xd", "dred_configure_xd", 'routine in <a href="grim/dred/dred.html">dred.pro</a>', "dred.pro", "", "dred_configure_xd", "", "basexd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/dred/dred.html#dred_switch_class", "dred_switch_class", 'routine in <a href="grim/dred/dred.html">dred.pro</a>', "dred.pro", "", "dred_switch_class", "", "dataclass", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/dred/dred.html#dred_switch_xd", "dred_switch_xd", 'routine in <a href="grim/dred/dred.html">dred.pro</a>', "dred.pro", "", "dred_switch_xd", "", "datasii", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/dred/dred.html#dred_resize", "dred_resize", 'routine in <a href="grim/dred/dred.html">dred.pro</a>', "dred.pro", "", "dred_resize", "", "datas", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/dred/dred.html#dred_event", "dred_event", 'routine in <a href="grim/dred/dred.html">dred.pro</a>', "dred.pro", "", "dred_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/dred/dred.html#dred_cleanup", "dred_cleanup", 'routine in <a href="grim/dred/dred.html">dred.pro</a>', "dred.pro", "", "dred_cleanup", "", "base", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/dred/dred.html#dred", "dred", 'routine in <a href="grim/dred/dred.html">dred.pro</a>', "dred.pro", "", "dred", "", "xd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_apply_scale.html", "dsk_apply_scale.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_apply_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_apply_scale.html#dsk_apply_scale", "dsk_apply_scale", 'routine in <a href="obj/dsk/dsk_apply_scale.html">dsk_apply_scale.pro</a>', "dsk_apply_scale.pro", "", "dsk_apply_scale", "	Computes scaled radii.    ", "inverseIf set, the operation is performed in reverse.   noeventdkd A single disk descriptors.   radii Array of radii to convert.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Scaled radii based onthe scale parameters in the disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_assign.html", "dsk_assign.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_assign.html#dsk_assign", "dsk_assign", 'routine in <a href="obj/dsk/dsk_assign.html">dsk_assign.pro</a>', "dsk_assign.pro", "", "dsk_assign", "	Replaces fields in a DISK object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@dsk__keywords.include", "NV/OBJ/DSK", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_body_to_disk.html", "dsk_body_to_disk.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_body_to_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_body_to_disk.html#dsk_body_to_disk", "dsk_body_to_disk", 'routine in <a href="obj/dsk/dsk_body_to_disk.html">dsk_body_to_disk.pro</a>', "dsk_body_to_disk.pro", "", "dsk_body_to_disk", "	Transforms vectors from the body coordinate system to the disk 	coordinate system.    ", "dkd Array (nt) of any subclass of DISK.   v", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 3 x nt) of column vectors in the disk coordinate system.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/dsk_cat.html", "dsk_cat.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "dsk_cat.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/dsk_cat.html#dsk_cat", "dsk_cat", 'routine in <a href="obj/tools/dsk_cat.html">dsk_cat.pro</a>', "dsk_cat.pro", "", "dsk_cat", "	Concatenates the given disk descriptors into one descriptor encompassing 	the entire system.    ", "dkxs", "NV/LIB/TOOLS", "       Written by:     Spitale   	A descriptor of the same class as dkx whose semimajor axes 	encompass the all of the input disks.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/dsk_cat_by_name.html", "dsk_cat_by_name.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "dsk_cat_by_name.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/dsk_cat_by_name.html#dsk_cat_by_name", "dsk_cat_by_name", 'routine in <a href="obj/tools/dsk_cat_by_name.html">dsk_cat_by_name.pro</a>', "dsk_cat_by_name.pro", "", "dsk_cat_by_name", "	Concatenates the given disk descriptors into one descriptor 	encompassing all of the named descriptors.    ", "dkxsnamesArray of names of disks to concatenate.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	A descriptor of the same class as dkx whose semimajor axes 	encompass the all of the named input disks.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_create_descriptors.html", "dsk_create_descriptors.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_create_descriptors.html#dsk_create_descriptors", "dsk_create_descriptors", 'routine in <a href="obj/dsk/dsk_create_descriptors.html">dsk_create_descriptors.pro</a>', "dsk_create_descriptors.pro", "", "dsk_create_descriptors", "	Init method for the DISK class.    ", "crdbdslddkdnNumber of descriptors to create.   @dsk__keywords.include", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created or or freshly initialized disk descriptors, depending 	on the presence of the dkd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_dap.html", "dsk_dap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_dap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_dap.html#dsk_dap", "dsk_dap", 'routine in <a href="obj/dsk/dsk_dap.html">dsk_dap.pro</a>', "dsk_dap.pro", "", "dsk_dap", "	Returns dap for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   	dap value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_disk_to_body.html", "dsk_disk_to_body.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_disk_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_disk_to_body.html#dsk_disk_to_body", "dsk_disk_to_body", 'routine in <a href="obj/dsk/dsk_disk_to_body.html">dsk_disk_to_body.pro</a>', "dsk_disk_to_body.pro", "", "dsk_disk_to_body", "	Transforms vectors from the disk coordinate system to the body 	coordinate system.    ", "dkd Array (nt) of any subclass of DISK.   v", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 3 x nt) of column vectors in the body coordinate system.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_dlibldt.html", "dsk_dlibldt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_dlibldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_dlibldt.html#dsk_dlibldt", "dsk_dlibldt", 'routine in <a href="obj/dsk/dsk_dlibldt.html">dsk_dlibldt.pro</a>', "dsk_dlibldt.pro", "", "dsk_dlibldt", "	Returns dlibldt for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dlibldt value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_dlibmdt.html", "dsk_dlibmdt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_dlibmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_dlibmdt.html#dsk_dlibmdt", "dsk_dlibmdt", 'routine in <a href="obj/dsk/dsk_dlibmdt.html">dsk_dlibmdt.pro</a>', "dsk_dlibmdt.pro", "", "dsk_dlibmdt", "	Returns dlibmdt for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dlibmdt value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_dtaanldt.html", "dsk_dtaanldt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_dtaanldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_dtaanldt.html#dsk_dtaanldt", "dsk_dtaanldt", 'routine in <a href="obj/dsk/dsk_dtaanldt.html">dsk_dtaanldt.pro</a>', "dsk_dtaanldt.pro", "", "dsk_dtaanldt", "	Returns dtaanldt for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   	dtaanldt value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_dtapmdt.html", "dsk_dtapmdt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_dtapmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_dtapmdt.html#dsk_dtapmdt", "dsk_dtapmdt", 'routine in <a href="obj/dsk/dsk_dtapmdt.html">dsk_dtapmdt.pro</a>', "dsk_dtapmdt.pro", "", "dsk_dtapmdt", "	Returns dtapmdt for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   	dtapmdt value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_ecc.html", "dsk_ecc.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_ecc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_ecc.html#dsk_ecc", "dsk_ecc", 'routine in <a href="obj/dsk/dsk_ecc.html">dsk_ecc.pro</a>', "dsk_ecc.pro", "", "dsk_ecc", "	Returns ecc for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	ecc value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_em.html", "dsk_em.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_em.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_em.html#dsk_em", "dsk_em", 'routine in <a href="obj/dsk/dsk_em.html">dsk_em.pro</a>', "dsk_em.pro", "", "dsk_em", "	Returns em for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	em value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_evolve.html", "dsk_evolve.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_evolve.html#dsk_evolve", "dsk_evolve", 'routine in <a href="obj/dsk/dsk_evolve.html">dsk_evolve.pro</a>', "dsk_evolve.pro", "", "dsk_evolve", "	Computes new disk descriptors at the given time offsets from the 	given disk descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given disk 	descriptor.    ", "nodv If set, derivatives will not be evolved.   copyIf set, the evolved descriptor is copied into the input 		descriptor and it is freed.  The input descriptor is returned.    dkd Any subclass of DISK.   dt Time offset.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (ndkd,ndt) of newly allocated descriptors, of class DISK, 	evolved by time dt, where ndkd is the number of dkd, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_ansa.html", "dsk_get_ansa.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_ansa.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_ansa.html#dsk_get_ansa", "dsk_get_ansa", 'routine in <a href="obj/dsk/dsk_get_ansa.html">dsk_get_ansa.pro</a>', "dsk_get_ansa.pro", "", "dsk_get_ansa", "", "ndkdr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_ap.html", "dsk_get_ap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_ap.html#dsk_get_ap", "dsk_get_ap", 'routine in <a href="obj/dsk/dsk_get_ap.html">dsk_get_ap.pro</a>', "dsk_get_ap.pro", "", "dsk_get_ap", "	Determines ap for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	ap value associated with each given disk descriptor.  One for each dkd.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_dapdt.html", "dsk_get_dapdt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_dapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_dapdt.html#dsk_get_dapdt", "dsk_get_dapdt", 'routine in <a href="obj/dsk/dsk_get_dapdt.html">dsk_get_dapdt.pro</a>', "dsk_get_dapdt.pro", "", "dsk_get_dapdt", "	Determines dapdt for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dapdt value associated with each given disk descriptor.  One for each dkd.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_disk_points.html", "dsk_get_disk_points.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_disk_points.pro", "", "", "	Computes points on the inner and outer edges of a disk.    ", "", "          -1", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_disk_points.html#_dsk_get_disk_points", "_dsk_get_disk_points", 'routine in <a href="obj/dsk/dsk_get_disk_points.html">dsk_get_disk_points.pro</a>', "dsk_get_disk_points.pro", "", "_dsk_get_disk_points", "", "dkdn_points", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_disk_points.html#dsk_get_disk_points", "dsk_get_disk_points", 'routine in <a href="obj/dsk/dsk_get_disk_points.html">dsk_get_disk_points.pro</a>', "dsk_get_disk_points.pro", "", "dsk_get_disk_points", "", "dtadkdn_points", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_dlandt.html", "dsk_get_dlandt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_dlandt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_dlandt.html#dsk_get_dlandt", "dsk_get_dlandt", 'routine in <a href="obj/dsk/dsk_get_dlandt.html">dsk_get_dlandt.pro</a>', "dsk_get_dlandt.pro", "", "dsk_get_dlandt", "	Determines dlandt for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dlandt value associated with each given disk descriptor.  One for each dkd.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_dlibdt_ap.html", "dsk_get_dlibdt_ap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_dlibdt_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_dlibdt_ap.html#dsk_get_dlibdt_ap", "dsk_get_dlibdt_ap", 'routine in <a href="obj/dsk/dsk_get_dlibdt_ap.html">dsk_get_dlibdt_ap.pro</a>', "dsk_get_dlibdt_ap.pro", "", "dsk_get_dlibdt_ap", "	Determines dlibdt_ap for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dlibdt_ap value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_dlibdt_lan.html", "dsk_get_dlibdt_lan.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_dlibdt_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_dlibdt_lan.html#dsk_get_dlibdt_lan", "dsk_get_dlibdt_lan", 'routine in <a href="obj/dsk/dsk_get_dlibdt_lan.html">dsk_get_dlibdt_lan.pro</a>', "dsk_get_dlibdt_lan.pro", "", "dsk_get_dlibdt_lan", "	Determines dlibdt_lan for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dlibdt_lan value associated with each given disk descriptor.  One for each dkd.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_edge_elevation.html", "dsk_get_edge_elevation.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_edge_elevation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_edge_elevation.html#dsk_get_edge_elevation", "dsk_get_edge_elevation", 'routine in <a href="obj/dsk/dsk_get_edge_elevation.html">dsk_get_edge_elevation.pro</a>', "dsk_get_edge_elevation.pro", "", "dsk_get_edge_elevation", "	Computes elevations along the edge of a disk.    ", "innerIf set, the inner edge is used.   outerIf set, the outer edge is used.   one_to_onenoeventdkd Array (nt) of any subclass of DISK.   ta Array (nta) of true anomalies at which to compute elevations.    ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nt x nta) of elevations computed at each true anomaly on each 	disk.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_edge_radius.html", "dsk_get_edge_radius.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_edge_radius.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_edge_radius.html#dsk_get_edge_radius", "dsk_get_edge_radius", 'routine in <a href="obj/dsk/dsk_get_edge_radius.html">dsk_get_edge_radius.pro</a>', "dsk_get_edge_radius.pro", "", "dsk_get_edge_radius", "	Computes radii along the edge of a disk.    ", "innerIf set, the inner edge is used.   outerIf set, the outer edge is used.   timenoeventdkd Array (nt) of any subclass of DISK.   ta Array (nv x nt) of true anomalies at which to compute radii.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x nt) of radii computed at each true anomaly on each 	disk.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_inc.html", "dsk_get_inc.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_inc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_inc.html#dsk_get_inc", "dsk_get_inc", 'routine in <a href="obj/dsk/dsk_get_inc.html">dsk_get_inc.pro</a>', "dsk_get_inc.pro", "", "dsk_get_inc", "	Determines inc for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	inc value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_inner_disk_points.html", "dsk_get_inner_disk_points.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_inner_disk_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_inner_disk_points.html#dsk_get_inner_disk_points", "dsk_get_inner_disk_points", 'routine in <a href="obj/dsk/dsk_get_inner_disk_points.html">dsk_get_inner_disk_points.pro</a>', "dsk_get_inner_disk_points.pro", "", "dsk_get_inner_disk_points", "	Computes points on the inner edge of a disk.    ", "taTrue anomalies for the points.  Default is the full circle.   disk_ptsdkd Array (nt) of any subclass of DISK.   n_points", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (np x 3 x nt) of points on the outer edge of each disk, 	in disk body coordinates.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_lan.html", "dsk_get_lan.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_lan.html#dsk_get_lan", "dsk_get_lan", 'routine in <a href="obj/dsk/dsk_get_lan.html">dsk_get_lan.pro</a>', "dsk_get_lan.pro", "", "dsk_get_lan", "	Determines lan for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	lan value associated with each given disk descriptor.  One for each dkd.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_lib_ap.html", "dsk_get_lib_ap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_lib_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_lib_ap.html#dsk_get_lib_ap", "dsk_get_lib_ap", 'routine in <a href="obj/dsk/dsk_get_lib_ap.html">dsk_get_lib_ap.pro</a>', "dsk_get_lib_ap.pro", "", "dsk_get_lib_ap", "	Determines lib_ap for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	lib_ap value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_lib_lan.html", "dsk_get_lib_lan.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_lib_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_lib_lan.html#dsk_get_lib_lan", "dsk_get_lib_lan", 'routine in <a href="obj/dsk/dsk_get_lib_lan.html">dsk_get_lib_lan.pro</a>', "dsk_get_lib_lan.pro", "", "dsk_get_lib_lan", "	Determines lib_lan for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	lib_lan value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_liba_ap.html", "dsk_get_liba_ap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_liba_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_liba_ap.html#dsk_get_liba_ap", "dsk_get_liba_ap", 'routine in <a href="obj/dsk/dsk_get_liba_ap.html">dsk_get_liba_ap.pro</a>', "dsk_get_liba_ap.pro", "", "dsk_get_liba_ap", "	Determines liba_ap for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	liba_ap value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_liba_lan.html", "dsk_get_liba_lan.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_liba_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_liba_lan.html#dsk_get_liba_lan", "dsk_get_liba_lan", 'routine in <a href="obj/dsk/dsk_get_liba_lan.html">dsk_get_liba_lan.pro</a>', "dsk_get_liba_lan.pro", "", "dsk_get_liba_lan", "	Determines liba_lan for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	liba_lan value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_nl.html", "dsk_get_nl.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_nl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_nl.html#dsk_get_nl", "dsk_get_nl", 'routine in <a href="obj/dsk/dsk_get_nl.html">dsk_get_nl.pro</a>', "dsk_get_nl.pro", "", "dsk_get_nl", "	Obtains the nl (number of vertical harmonics) value from the enironment.    Environment variables:   	DSK_NL:		Sets the nl value.    ", "", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Value for nl obtained from the DSK_NL environmet variable.  Default 	is 4.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_nm.html", "dsk_get_nm.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_nm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_nm.html#dsk_get_nm", "dsk_get_nm", 'routine in <a href="obj/dsk/dsk_get_nm.html">dsk_get_nm.pro</a>', "dsk_get_nm.pro", "", "dsk_get_nm", "	Obtains the nm (number of radial harmonics) value from the enironment.    Environment variables:   	DSK_NM:		Sets the nm value.    ", "", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Value for nm obtained from the DSK_NM environmet variable.  Default 	is 4.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_node.html", "dsk_get_node.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_node.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_node.html#dsk_get_node", "dsk_get_node", 'routine in <a href="obj/dsk/dsk_get_node.html">dsk_get_node.pro</a>', "dsk_get_node.pro", "", "dsk_get_node", "	Computes the ascending node of the given disk wrt the given frame 	body descriptor.    ", "dkd Array (nt) of any subclass of DISK.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	One unit vector for each input descriptor pointng along the 	ascending node of each given disk on each given frame 	body descriptor.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_outer_disk_points.html", "dsk_get_outer_disk_points.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_outer_disk_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_outer_disk_points.html#dsk_get_outer_disk_points", "dsk_get_outer_disk_points", 'routine in <a href="obj/dsk/dsk_get_outer_disk_points.html">dsk_get_outer_disk_points.pro</a>', "dsk_get_outer_disk_points.pro", "", "dsk_get_outer_disk_points", "	Computes points on the outer edge of a disk.    ", "taTrue anomalies for the points.  Default is the full circle.   disk_ptsdkd Array (nt) of any subclass of DISK.   n_points", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (np x 3 x nt) of points on the outer edge of each disk, 	in disk body coordinates.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/dsk_get_perp.html", "dsk_get_perp.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "dsk_get_perp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/dsk_get_perp.html#dsk_get_perp", "dsk_get_perp", 'routine in <a href="obj/tools/dsk_get_perp.html">dsk_get_perp.pro</a>', "dsk_get_perp.pro", "", "dsk_get_perp", "	Computes vectors in the direction perpendicular to the azimuthal 	direction at a point on a disk.    ", "uucdCamera descriptor.   dkdpPoint on the disk n inertial coordinates.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nv,3) of inertial direction vectors.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_radius.html", "dsk_get_radius.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_radius.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_radius.html#dsk_get_radius", "dsk_get_radius", 'routine in <a href="obj/dsk/dsk_get_radius.html">dsk_get_radius.pro</a>', "dsk_get_radius.pro", "", "dsk_get_radius", "	Computes radii along the inner and outer edges of a disk.    ", "one_to_onedkd Array (nt) of any subclass of DISK.   ta Array (nv x nt) of true anomalies at which to compute radii.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 2 x nt) of radii computed at each true anomaly on each 	disk.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_get_ranges.html", "dsk_get_ranges.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_get_ranges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_get_ranges.html#dsk_get_ranges", "dsk_get_ranges", 'routine in <a href="obj/dsk/dsk_get_ranges.html">dsk_get_ranges.pro</a>', "dsk_get_ranges.pro", "", "dsk_get_ranges", "	Returns ranges of valid coordinates for the given DISK object.    ", "dkd Any subclass of DISK.  One descriptor only.    ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (2 x 3) giving the ranges in radius, true anomaly and altitude.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_hide_points.html", "dsk_hide_points.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_hide_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_hide_points.html#dsk_hide_points", "dsk_hide_points", 'routine in <a href="obj/dsk/dsk_hide_points.html">dsk_hide_points.pro</a>', "dsk_hide_points.pro", "", "dsk_hide_points", "	Hides points wrt a DISK object.    ", "rmIf set, points are flagged for being in front of or behind 		the disk, rather then just behind it.   epsilon 		Distance in front of the disk for a point to be 		considered  in front of  the disk.  Default is 1.    dkd Array (nt) of any subclass of DISK.   r Column vector giving the position of the viewer in the disk 		 body frame.   points Array (nv x 3 x nt) of points to test, given in the disk 		 body frame   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array Subscripts of all input vectors (points argument) that are hidden 	from the viewer at r by the given disk.    ");
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_hide_points.html#_dsk_hide_points", "_dsk_hide_points", 'routine in <a href="obj/dsk/dsk_hide_points.html">dsk_hide_points.pro</a>', "dsk_hide_points.pro", "", "_dsk_hide_points", "", "epsiloninvertdkdrpoints", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_il.html", "dsk_il.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_il.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_il.html#dsk_il", "dsk_il", 'routine in <a href="obj/dsk/dsk_il.html">dsk_il.pro</a>', "dsk_il.pro", "", "dsk_il", "	Returns il for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	il value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/dsk_image_bounds.html", "dsk_image_bounds.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "dsk_image_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/dsk_image_bounds.html#dsk_image_bounds", "dsk_image_bounds", 'routine in <a href="obj/tools/dsk_image_bounds.html">dsk_image_bounds.pro</a>', "dsk_image_bounds.pro", "", "dsk_image_bounds", "	Determines disk coordinate ranges visible in an image described 	by a given camera descriptor.    ", "slopborder_pts_imradminradmaxlonminlonmaxnpplanestatuscropcdCamera descripor.   dkxAny subclass of DISK.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	radmin:	Minimum disk radius in image.  	radmax:	Maximum disk radius in image.  	lonmin:	Minimum disk longitude in image.  	lonmax:	Maximum disk longitude in image.  	border_pts_im:	Array (2,np) of points along the edge of the image.  	status:	-1 if no disk in the image, 0 otherwise.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_intersect.html", "dsk_intersect.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_intersect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_intersect.html#dsk_intersect", "dsk_intersect", 'routine in <a href="obj/dsk/dsk_intersect.html">dsk_intersect.pro</a>', "dsk_intersect.pro", "", "dsk_intersect", "	Computes ray intersections with a DISK object.    ", "thitnearfaralldkd Array (nt) of any subclass of DISK.   v Array (nv x 3 x nt) of column vectors giving the origins 		 of the rays in the body frame.   r Array (nv x 3 x nt) of column vectors giving the directions 		 of the rays in the body frame.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 3 x nt) of column vectors giving the ray/disk 	intersections in the body frame.    ");
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_intersect.html#_dsk_intersect", "_dsk_intersect", 'routine in <a href="obj/dsk/dsk_intersect.html">dsk_intersect.pro</a>', "dsk_intersect.pro", "", "_dsk_intersect", "", "thitdkdvr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_intersect_inertial.html", "dsk_intersect_inertial.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_intersect_inertial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_intersect_inertial.html#dsk_intersect_inertial", "dsk_intersect_inertial", 'routine in <a href="obj/dsk/dsk_intersect_inertial.html">dsk_intersect_inertial.pro</a>', "dsk_intersect_inertial.pro", "", "dsk_intersect_inertial", "	Computes ray intersections with a DISK object, in inertial coordinates.    ", "thitnoeventdkd Array (nt) of any subclass of DISK.   v Array (nv x 3 x nt) of column vectors giving the origins 		 of the rays in the inertial frame.   r Array (nv x 3 x nt) of column vectors giving the directions 		 of the rays in the inertial frame.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 3 x nt) of column vectors giving the ray/disk 	intersections in the inertial frame.  Note this if inertial 	results are needed, this routine is slightly faster than 	dsk_intersect.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_l.html", "dsk_l.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_l.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_l.html#dsk_l", "dsk_l", 'routine in <a href="obj/dsk/dsk_l.html">dsk_l.pro</a>', "dsk_l.pro", "", "dsk_l", "	Returns l for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	l value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_libal.html", "dsk_libal.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_libal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_libal.html#dsk_libal", "dsk_libal", 'routine in <a href="obj/dsk/dsk_libal.html">dsk_libal.pro</a>', "dsk_libal.pro", "", "dsk_libal", "	Returns libal for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	libal value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_libam.html", "dsk_libam.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_libam.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_libam.html#dsk_libam", "dsk_libam", 'routine in <a href="obj/dsk/dsk_libam.html">dsk_libam.pro</a>', "dsk_libam.pro", "", "dsk_libam", "	Returns libam for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	libam value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_libl.html", "dsk_libl.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_libl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_libl.html#dsk_libl", "dsk_libl", 'routine in <a href="obj/dsk/dsk_libl.html">dsk_libl.pro</a>', "dsk_libl.pro", "", "dsk_libl", "	Returns libl for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	libl value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_libm.html", "dsk_libm.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_libm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_libm.html#dsk_libm", "dsk_libm", 'routine in <a href="obj/dsk/dsk_libm.html">dsk_libm.pro</a>', "dsk_libm.pro", "", "dsk_libm", "	Returns libm for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	libm value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_m.html", "dsk_m.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_m.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_m.html#dsk_m", "dsk_m", 'routine in <a href="obj/dsk/dsk_m.html">dsk_m.pro</a>', "dsk_m.pro", "", "dsk_m", "	Returns m for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	m value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_nl.html", "dsk_nl.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_nl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_nl.html#dsk_nl", "dsk_nl", 'routine in <a href="obj/dsk/dsk_nl.html">dsk_nl.pro</a>', "dsk_nl.pro", "", "dsk_nl", "	Returns nl for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	nl value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_nm.html", "dsk_nm.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_nm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_nm.html#dsk_nm", "dsk_nm", 'routine in <a href="obj/dsk/dsk_nm.html">dsk_nm.pro</a>', "dsk_nm.pro", "", "dsk_nm", "	Returns nm for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	nm value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/dsk_projected_resolution.html", "dsk_projected_resolution.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "dsk_projected_resolution.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/dsk_projected_resolution.html#dsk_projected_resolution", "dsk_projected_resolution", 'routine in <a href="obj/tools/dsk_projected_resolution.html">dsk_projected_resolution.pro</a>', "dsk_projected_resolution.pro", "", "dsk_projected_resolution", "	Computes the resolution (actually scale) components at a point on a 	disk in a given camera.    ", "radlonperprrdkdcdCamera descriptor.   pPoint on the dkx in inertial coordinates.   scale", "NV/LIB/TOOLS", "       Written by:     Spitale, usning an approach suggested by M. Tiscareno   	Radial resolution on dkx at r, computed as the length of a 	segment bisecting the intersection ellipse in the radial direction.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_query.html", "dsk_query.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_query.html#dsk_query", "dsk_query", 'routine in <a href="obj/dsk/dsk_query.html">dsk_query.pro</a>', "dsk_query.pro", "", "dsk_query", "	Returns the fields associated with a DISK object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@dsk__keywords.include", "NV/OBJ/DSK", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/dsk_radial_resolution.html", "dsk_radial_resolution.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "dsk_radial_resolution.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/dsk_radial_resolution.html#dsk_radial_resolution", "dsk_radial_resolution", 'routine in <a href="obj/tools/dsk_radial_resolution.html">dsk_radial_resolution.pro</a>', "dsk_radial_resolution.pro", "", "dsk_radial_resolution", "	Computes the radial resolution at a point on a disk in a 	given camera.    ", "dkdcdCamera descriptor.   rPoint on the dkx in inertial coordinates.   scale", "NV/LIB/TOOLS", "       Written by:     Spitale   	Radial resolution on dkx at r, computed as the length of a 	segment bisecting the intersection ellipse in the radial direction.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_reflect.html", "dsk_reflect.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_reflect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_reflect.html#dsk_reflect", "dsk_reflect", 'routine in <a href="obj/dsk/dsk_reflect.html">dsk_reflect.pro</a>', "dsk_reflect.pro", "", "dsk_reflect", "	Computes ray reflections with a DISK object.    ", "hitdkd Array (nt) of any subclass of DISK.   v Array (nv x 3 x nt) of column vectors giving the observer 		 position in the body frame.   r Array (nv x 3 x nt) of column vectors giving the source 		 position in the body frame.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 3 x nt) of column vectors giving the ray/disk 	reflections in the body frame.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_replicate.html", "dsk_replicate.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_replicate.html#dsk_replicate", "dsk_replicate", 'routine in <a href="obj/dsk/dsk_replicate.html">dsk_replicate.pro</a>', "dsk_replicate.pro", "", "dsk_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "dkd Any superclass of DISK.   dim Dimensions of the result.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_scale.html", "dsk_scale.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_scale.html#dsk_scale", "dsk_scale", 'routine in <a href="obj/dsk/dsk_scale.html">dsk_scale.pro</a>', "dsk_scale.pro", "", "dsk_scale", "	Returns scale for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	scale value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_ap.html", "dsk_set_ap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_ap.html#dsk_set_ap", "dsk_set_ap", 'routine in <a href="obj/dsk/dsk_set_ap.html">dsk_set_ap.pro</a>', "dsk_set_ap.pro", "", "dsk_set_ap", "	Replaces ap in each given disk descriptor.    ", "dkd Array (nt) of any subclass of DISK.   ap New ap value.   frame_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dap.html", "dsk_set_dap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_dap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dap.html#dsk_set_dap", "dsk_set_dap", 'routine in <a href="obj/dsk/dsk_set_dap.html">dsk_set_dap.pro</a>', "dsk_set_dap.pro", "", "dsk_set_dap", "	Replaces the apsidal shift in each given disk descriptor.  Half of the 	shift is applied to each edge, so as to not affect the mean periapse 	direction.    ", "noeventdkd Array (nt) of any subclass of DISK.   dap New dap value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dapdt.html", "dsk_set_dapdt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_dapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dapdt.html#dsk_set_dapdt", "dsk_set_dapdt", 'routine in <a href="obj/dsk/dsk_set_dapdt.html">dsk_set_dapdt.pro</a>', "dsk_set_dapdt.pro", "", "dsk_set_dapdt", "	Replaces dapdt in each given disk descriptor.    ", "dkd Array (nt) of any subclass of DISK.   dapdt New dapdt value.   frame_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlandt.html", "dsk_set_dlandt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_dlandt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlandt.html#dsk_set_dlandt", "dsk_set_dlandt", 'routine in <a href="obj/dsk/dsk_set_dlandt.html">dsk_set_dlandt.pro</a>', "dsk_set_dlandt.pro", "", "dsk_set_dlandt", "	Replaces dlandt in each given disk descriptor.    ", "dkd Array (nt) of any subclass of DISK.   dlandt New dlandt value.   frame_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlibdt_ap.html", "dsk_set_dlibdt_ap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_dlibdt_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlibdt_ap.html#dsk_set_dlibdt_ap", "dsk_set_dlibdt_ap", 'routine in <a href="obj/dsk/dsk_set_dlibdt_ap.html">dsk_set_dlibdt_ap.pro</a>', "dsk_set_dlibdt_ap.pro", "", "dsk_set_dlibdt_ap", "	Sets dlibdt_ap in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   dlibdt_ap New dlibdt_ap value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlibdt_lan.html", "dsk_set_dlibdt_lan.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_dlibdt_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlibdt_lan.html#dsk_set_dlibdt_lan", "dsk_set_dlibdt_lan", 'routine in <a href="obj/dsk/dsk_set_dlibdt_lan.html">dsk_set_dlibdt_lan.pro</a>', "dsk_set_dlibdt_lan.pro", "", "dsk_set_dlibdt_lan", "	Sets dlibdt_lan in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   dlibdt_lan New dlibdt_lan value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlibldt.html", "dsk_set_dlibldt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_dlibldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlibldt.html#dsk_set_dlibldt", "dsk_set_dlibldt", 'routine in <a href="obj/dsk/dsk_set_dlibldt.html">dsk_set_dlibldt.pro</a>', "dsk_set_dlibldt.pro", "", "dsk_set_dlibldt", "	Replaces dlibldt in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   dlibldt New dlibldt value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlibmdt.html", "dsk_set_dlibmdt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_dlibmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlibmdt.html#dsk_set_dlibmdt", "dsk_set_dlibmdt", 'routine in <a href="obj/dsk/dsk_set_dlibmdt.html">dsk_set_dlibmdt.pro</a>', "dsk_set_dlibmdt.pro", "", "dsk_set_dlibmdt", "	Replaces dlibmdt in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   dlibmdt New dlibmdt value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlpmdt.html", "dsk_set_dlpmdt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_dlpmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dlpmdt.html#dsk_set_dlpmdt", "dsk_set_dlpmdt", 'routine in <a href="obj/dsk/dsk_set_dlpmdt.html">dsk_set_dlpmdt.pro</a>', "dsk_set_dlpmdt.pro", "", "dsk_set_dlpmdt", "", "bxdlpmdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dtaanldt.html", "dsk_set_dtaanldt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_dtaanldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dtaanldt.html#dsk_set_dtaanldt", "dsk_set_dtaanldt", 'routine in <a href="obj/dsk/dsk_set_dtaanldt.html">dsk_set_dtaanldt.pro</a>', "dsk_set_dtaanldt.pro", "", "dsk_set_dtaanldt", "	Replaces dtaanldt in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   dtaanldt New dtaanldt value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dtapmdt.html", "dsk_set_dtapmdt.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_dtapmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_dtapmdt.html#dsk_set_dtapmdt", "dsk_set_dtapmdt", 'routine in <a href="obj/dsk/dsk_set_dtapmdt.html">dsk_set_dtapmdt.pro</a>', "dsk_set_dtapmdt.pro", "", "dsk_set_dtapmdt", "	Replaces dtapmdt in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   dtapmdt New dtapmdt value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_ecc.html", "dsk_set_ecc.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_ecc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_ecc.html#dsk_set_ecc", "dsk_set_ecc", 'routine in <a href="obj/dsk/dsk_set_ecc.html">dsk_set_ecc.pro</a>', "dsk_set_ecc.pro", "", "dsk_set_ecc", "	Replaces ecc in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   ecc New ecc value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_em.html", "dsk_set_em.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_em.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_em.html#dsk_set_em", "dsk_set_em", 'routine in <a href="obj/dsk/dsk_set_em.html">dsk_set_em.pro</a>', "dsk_set_em.pro", "", "dsk_set_em", "	Replaces em in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   em New em value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_il.html", "dsk_set_il.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_il.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_il.html#dsk_set_il", "dsk_set_il", 'routine in <a href="obj/dsk/dsk_set_il.html">dsk_set_il.pro</a>', "dsk_set_il.pro", "", "dsk_set_il", "	Replaces il in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   il New il value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_inc.html", "dsk_set_inc.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_inc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_inc.html#dsk_set_inc", "dsk_set_inc", 'routine in <a href="obj/dsk/dsk_set_inc.html">dsk_set_inc.pro</a>', "dsk_set_inc.pro", "", "dsk_set_inc", "	Sets inc in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   inc New inc value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_l.html", "dsk_set_l.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_l.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_l.html#dsk_set_l", "dsk_set_l", 'routine in <a href="obj/dsk/dsk_set_l.html">dsk_set_l.pro</a>', "dsk_set_l.pro", "", "dsk_set_l", "	Replaces l in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   l New l value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_lan.html", "dsk_set_lan.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_lan.html#dsk_set_lan", "dsk_set_lan", 'routine in <a href="obj/dsk/dsk_set_lan.html">dsk_set_lan.pro</a>', "dsk_set_lan.pro", "", "dsk_set_lan", "	Sets lan in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   lan New lan value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_lib_ap.html", "dsk_set_lib_ap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_lib_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_lib_ap.html#dsk_set_lib_ap", "dsk_set_lib_ap", 'routine in <a href="obj/dsk/dsk_set_lib_ap.html">dsk_set_lib_ap.pro</a>', "dsk_set_lib_ap.pro", "", "dsk_set_lib_ap", "	Sets lib_ap in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   lib_ap New lib_ap value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_lib_lan.html", "dsk_set_lib_lan.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_lib_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_lib_lan.html#dsk_set_lib_lan", "dsk_set_lib_lan", 'routine in <a href="obj/dsk/dsk_set_lib_lan.html">dsk_set_lib_lan.pro</a>', "dsk_set_lib_lan.pro", "", "dsk_set_lib_lan", "	Sets lib_lan in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   lib_lan New lib_lan value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_liba_ap.html", "dsk_set_liba_ap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_liba_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_liba_ap.html#dsk_set_liba_ap", "dsk_set_liba_ap", 'routine in <a href="obj/dsk/dsk_set_liba_ap.html">dsk_set_liba_ap.pro</a>', "dsk_set_liba_ap.pro", "", "dsk_set_liba_ap", "	Sets liba_ap in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   liba_ap New liba_ap value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_liba_lan.html", "dsk_set_liba_lan.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_liba_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_liba_lan.html#dsk_set_liba_lan", "dsk_set_liba_lan", 'routine in <a href="obj/dsk/dsk_set_liba_lan.html">dsk_set_liba_lan.pro</a>', "dsk_set_liba_lan.pro", "", "dsk_set_liba_lan", "	Sets liba_lan in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   liba_lan New liba_lan value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_libal.html", "dsk_set_libal.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_libal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_libal.html#dsk_set_libal", "dsk_set_libal", 'routine in <a href="obj/dsk/dsk_set_libal.html">dsk_set_libal.pro</a>', "dsk_set_libal.pro", "", "dsk_set_libal", "	Replaces libal in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   libal New libal value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_libam.html", "dsk_set_libam.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_libam.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_libam.html#dsk_set_libam", "dsk_set_libam", 'routine in <a href="obj/dsk/dsk_set_libam.html">dsk_set_libam.pro</a>', "dsk_set_libam.pro", "", "dsk_set_libam", "	Replaces libam in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   libam New libam value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_libl.html", "dsk_set_libl.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_libl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_libl.html#dsk_set_libl", "dsk_set_libl", 'routine in <a href="obj/dsk/dsk_set_libl.html">dsk_set_libl.pro</a>', "dsk_set_libl.pro", "", "dsk_set_libl", "	Replaces libl in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   libl New libl value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_libm.html", "dsk_set_libm.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_libm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_libm.html#dsk_set_libm", "dsk_set_libm", 'routine in <a href="obj/dsk/dsk_set_libm.html">dsk_set_libm.pro</a>', "dsk_set_libm.pro", "", "dsk_set_libm", "	Replaces libm in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   libm New libm value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_lpm.html", "dsk_set_lpm.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_lpm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_lpm.html#dsk_set_lpm", "dsk_set_lpm", 'routine in <a href="obj/dsk/dsk_set_lpm.html">dsk_set_lpm.pro</a>', "dsk_set_lpm.pro", "", "dsk_set_lpm", "", "bxlpm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_m.html", "dsk_set_m.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_m.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_m.html#dsk_set_m", "dsk_set_m", 'routine in <a href="obj/dsk/dsk_set_m.html">dsk_set_m.pro</a>', "dsk_set_m.pro", "", "dsk_set_m", "	Replaces m in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   m New m value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_nl.html", "dsk_set_nl.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_nl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_nl.html#dsk_set_nl", "dsk_set_nl", 'routine in <a href="obj/dsk/dsk_set_nl.html">dsk_set_nl.pro</a>', "dsk_set_nl.pro", "", "dsk_set_nl", "	Replaces nl in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   nl New nl value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_nm.html", "dsk_set_nm.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_nm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_nm.html#dsk_set_nm", "dsk_set_nm", 'routine in <a href="obj/dsk/dsk_set_nm.html">dsk_set_nm.pro</a>', "dsk_set_nm.pro", "", "dsk_set_nm", "	Replaces nm in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   nm New nm value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_phase_fn.html", "dsk_set_phase_fn.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_phase_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_phase_fn.html#dsk_set_phase_fn", "dsk_set_phase_fn", 'routine in <a href="obj/dsk/dsk_set_phase_fn.html">dsk_set_phase_fn.pro</a>', "dsk_set_phase_fn.pro", "", "dsk_set_phase_fn", "       Replaces the phase function for each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK descriptors.   phase_fnArray (nt) of new phase functions.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_refl_fn.html", "dsk_set_refl_fn.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_refl_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_refl_fn.html#dsk_set_refl_fn", "dsk_set_refl_fn", 'routine in <a href="obj/dsk/dsk_set_refl_fn.html">dsk_set_refl_fn.pro</a>', "dsk_set_refl_fn.pro", "", "dsk_set_refl_fn", "       Replaces the reflection function for each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK descriptors.   refl_fnArray (nt) of new reflection functions.   ", "NV/LIB/dsk", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_scale.html", "dsk_set_scale.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_scale.html#dsk_set_scale", "dsk_set_scale", 'routine in <a href="obj/dsk/dsk_set_scale.html">dsk_set_scale.pro</a>', "dsk_set_scale.pro", "", "dsk_set_scale", "	Replaces the scale in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   scale New scale value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_sma.html", "dsk_set_sma.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_sma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_sma.html#dsk_set_sma", "dsk_set_sma", 'routine in <a href="obj/dsk/dsk_set_sma.html">dsk_set_sma.pro</a>', "dsk_set_sma.pro", "", "dsk_set_sma", "	Replaces the sma in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   sma New sma value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_taanl.html", "dsk_set_taanl.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_taanl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_taanl.html#dsk_set_taanl", "dsk_set_taanl", 'routine in <a href="obj/dsk/dsk_set_taanl.html">dsk_set_taanl.pro</a>', "dsk_set_taanl.pro", "", "dsk_set_taanl", "	Replaces taanl in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   taanl New taanl value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_tanl.html", "dsk_set_tanl.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_tanl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_tanl.html#dsk_set_tanl", "dsk_set_tanl", 'routine in <a href="obj/dsk/dsk_set_tanl.html">dsk_set_tanl.pro</a>', "dsk_set_tanl.pro", "", "dsk_set_tanl", "", "bxtanl", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_set_tapm.html", "dsk_set_tapm.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_set_tapm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_set_tapm.html#dsk_set_tapm", "dsk_set_tapm", 'routine in <a href="obj/dsk/dsk_set_tapm.html">dsk_set_tapm.pro</a>', "dsk_set_tapm.pro", "", "dsk_set_tapm", "	Replaces tapm in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   tapm New tapm value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_shape_radial.html", "dsk_shape_radial.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_shape_radial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_shape_radial.html#dsk_shape_radial", "dsk_shape_radial", 'routine in <a href="obj/dsk/dsk_shape_radial.html">dsk_shape_radial.pro</a>', "dsk_shape_radial.pro", "", "dsk_shape_radial", "	Computes radii along the edge of a disk using disk elements.    ", "mmIf set, only the radius component for this wavenumber 		is returned.   miiIf set, only the radius component with this index 		is returned.   _a Array (nt) of semimajor axis values.   _e Array (nt) of eccentricity values.   _dap Array (nt) of apsidal shift values.   ta Array (nv x nt) of true anomalies at which to compute radii.   _m Array (nt x nm) of radial wavenumbers.   _em Array (nt x nm) of eccentricities for each m.   _tapm Array (nt x nm) of true anomalies of periapse for each m.    ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x nt) of radii computed at each true anomaly on each 	disk.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_shape_vertical.html", "dsk_shape_vertical.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_shape_vertical.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_shape_vertical.html#dsk_shape_vertical", "dsk_shape_vertical", 'routine in <a href="obj/dsk/dsk_shape_vertical.html">dsk_shape_vertical.pro</a>', "dsk_shape_vertical.pro", "", "dsk_shape_vertical", "	Computes elevations along the edge of a disk using disk elements.    ", "dkdllIf set, only the elevation component for this wavenumber 		is returned.   liiIf set, only the elevation component with this index 		is returned.   a Array (nt) of semimajor axis values.   ta Array (nta) of true anomalies at which to compute elevations.   l Array (nt) of vertical wavenumbers.   il Array (nt) of inclinations for each l.   taanl Array (nt) of true anomalies of ascending node for each l.    ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nt x nta) of elevations computed at each true anomaly on each 	disk.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_sma.html", "dsk_sma.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_sma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_sma.html#dsk_sma", "dsk_sma", 'routine in <a href="obj/dsk/dsk_sma.html">dsk_sma.pro</a>', "dsk_sma.pro", "", "dsk_sma", "	Returns sma for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	sma value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_surface_normal.html", "dsk_surface_normal.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_surface_normal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_surface_normal.html#dsk_surface_normal", "dsk_surface_normal", 'routine in <a href="obj/dsk/dsk_surface_normal.html">dsk_surface_normal.pro</a>', "dsk_surface_normal.pro", "", "dsk_surface_normal", "	Computes the surface normal for a DISK object at the given 	body-frame positions.    ", "noeventnorth    If set, the retruned normals will be pointed north. 	           Otherwise, they point toward the observer's hemisphere.    dkdArray (nt) of any subclass of DISK descriptors.   vArray (nv,3) of observer positions in the BODY frame.   rArray (nv,3) of surface positions in the BODY frame.    ", "NV/LIB/DSK", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	Array (nv, 3, nt) of surface unit normals in the BODY frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_swap.html", "dsk_swap.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_swap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_swap.html#dsk_swap", "dsk_swap", 'routine in <a href="obj/dsk/dsk_swap.html">dsk_swap.pro</a>', "dsk_swap.pro", "", "dsk_swap", "", "noeventdkd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_taanl.html", "dsk_taanl.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_taanl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_taanl.html#dsk_taanl", "dsk_taanl", 'routine in <a href="obj/dsk/dsk_taanl.html">dsk_taanl.pro</a>', "dsk_taanl.pro", "", "dsk_taanl", "	Returns taanl for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   	taanl value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_tapm.html", "dsk_tapm.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_tapm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_tapm.html#dsk_tapm", "dsk_tapm", 'routine in <a href="obj/dsk/dsk_tapm.html">dsk_tapm.pro</a>', "dsk_tapm.pro", "", "dsk_tapm", "	Returns tapm for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   	tapm value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_valid_edges.html", "dsk_valid_edges.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_valid_edges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_valid_edges.html#dsk_valid_edges", "dsk_valid_edges", 'routine in <a href="obj/dsk/dsk_valid_edges.html">dsk_valid_edges.pro</a>', "dsk_valid_edges.pro", "", "dsk_valid_edges", "	Determines which edges (i.e., inner/outer) in the input DISK objects 	are valid.    ", "innerIf set, only the inner edges are tested.   outerIf set, only the outer edges are tested.   allIf set, the inner and outer edges are tested, and must 		both be valid to be selected.   noeventdkd Array (nt) of any subclass of DISK.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of subscripts of the descriptors whose edges meet the criteria 	defined by the input keyowrds.    ");
  
  

libdata[libdataItem++] = new Array("obj/dsk/dsk_widen.html", "dsk_widen.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "dsk_widen.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/dsk_widen.html#dsk_widen", "dsk_widen", 'routine in <a href="obj/dsk/dsk_widen.html">dsk_widen.pro</a>', "dsk_widen.pro", "", "dsk_widen", "", "noeventdkdwidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/edge_model_atan.html", "edge_model_atan.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "edge_model_atan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/edge_model_atan.html#edge_model_atan", "edge_model_atan", 'routine in <a href="obj/tools/icv/edge_model_atan.html">edge_model_atan.pro</a>', "edge_model_atan.pro", "", "edge_model_atan", "	Calculates an arctan edge model for use in curve fitting.   ", "zerodeltacdnSize of the model in samples   aScaling factor: larger values give a sharper edge.   ", "NV/LIB/TOOLS/ICV", "       Written by:     Spitale, 6/1998   	An array containing the model.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/edge_model_gauss.html", "edge_model_gauss.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "edge_model_gauss.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/edge_model_gauss.html#edge_model_gauss", "edge_model_gauss", 'routine in <a href="obj/tools/icv/edge_model_gauss.html">edge_model_gauss.pro</a>', "edge_model_gauss.pro", "", "edge_model_gauss", "	Calculates a gaussian edge model for use in curve fitting.   ", "zerodeltacdnSize of the model in samples   wWidth of the gaussian (sigma)   ", "NV/LIB/TOOLS/ICV", "       Written by:     Haemmerle, 6/1998   	An array containing the model.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/edge_model_nav_limb.html", "edge_model_nav_limb.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "edge_model_nav_limb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/edge_model_nav_limb.html#edge_model_nav_limb", "edge_model_nav_limb", 'routine in <a href="obj/tools/icv/edge_model_nav_limb.html">edge_model_nav_limb.pro</a>', "edge_model_nav_limb.pro", "", "edge_model_nav_limb", "	Returns the edge model used by the VICAR program NAV for limb fits.   ", "zerodeltacd", "NV/LIB/TOOLS/ICV", "       Written by:     Spitale, 6/1998   	An array containing the model.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/edge_model_nav_ring.html", "edge_model_nav_ring.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "edge_model_nav_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/edge_model_nav_ring.html#edge_model_nav_ring", "edge_model_nav_ring", 'routine in <a href="obj/tools/icv/edge_model_nav_ring.html">edge_model_nav_ring.pro</a>', "edge_model_nav_ring.pro", "", "edge_model_nav_ring", "	Returns the edge model used by the VICAR program NAV for ring fits.   ", "zerodeltacd", "NV/LIB/TOOLS/ICV", "       Written by:     Spitale, 6/1998   	An array containing the model.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/edge_model_psf_ring.html", "edge_model_psf_ring.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "edge_model_psf_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/edge_model_psf_ring.html#edge_model_psf_ring", "edge_model_psf_ring", 'routine in <a href="obj/tools/icv/edge_model_psf_ring.html">edge_model_psf_ring.pro</a>', "edge_model_psf_ring.pro", "", "edge_model_psf_ring", "	Returns an edge model produced by convolving a sharp edge with 	a point-spread function.   ", "cdzerodelta", "NV/LIB/TOOLS/ICV", "       Written by:     Spitale, 6/1998   	An array containing the model.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/epoch_radec.html", "epoch_radec.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "epoch_radec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/epoch_radec.html#epoch_radec", "epoch_radec", 'routine in <a href="obj/tools/epoch_radec.html">epoch_radec.pro</a>', "epoch_radec.pro", "", "epoch_radec", "", "odbxepoch", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/fill_ring.html", "fill_ring.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "fill_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/fill_ring.html#fill_ring", "fill_ring", 'routine in <a href="obj/tools/fill_ring.html">fill_ring.pro</a>', "fill_ring.pro", "", "fill_ring", "", "cdrdimagesub", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/footprint.html", "footprint.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "footprint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/footprint.html#footprint", "footprint", 'routine in <a href="obj/tools/footprint.html">footprint.pro</a>', "footprint.pro", "", "footprint", "	Computes the footprint of a camera on a given body.    ", "slop	Number of pixels by which to expand the image in each 			direction.   cornersArray(2,2) giving corers of image region to consider.   hit_indicesArray (nhit) of bx indices.   image_ptsFootprint points in the image frame.   body_p	Array (nhit) of pointers to body footprint points for 			each body hit.   sample	Sampling rate; default is 1 pixel.    cd	Camera descripor.  Only one allowed.   bx	Body descriptors.   ", "NV/LIB/TOOLS", "       Written by:     Spitale		5/2014   	Array (nhit) of pointers to inertial footprint points for each body hit. 	Zero is returned if no bodies are hit.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_disk_ref.html", "get_disk_ref.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_disk_ref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_disk_ref.html#get_disk_ref", "get_disk_ref", 'routine in <a href="obj/tools/get_disk_ref.html">get_disk_ref.pro</a>', "get_disk_ref.pro", "", "get_disk_ref", "	Produces inertial unit vectors corresponding to the projection 	of the given body 2-axis direction into the given disk plane.    ", "dkxArray (nt) of any subclass of DISK.   bxArray (nt) of any subclass of BODY.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (1,3,nt) of inertial unit vectors.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_edge_points.html", "get_edge_points.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_edge_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_edge_points.html#get_edge_points", "get_edge_points", 'routine in <a href="obj/tools/get_edge_points.html">get_edge_points.pro</a>', "get_edge_points.pro", "", "get_edge_points", "", "cdbxgbxdkx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_image_border_pts.html", "get_image_border_pts.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_image_border_pts.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_image_border_pts.html#get_image_border_pts", "get_image_border_pts", 'routine in <a href="obj/tools/get_image_border_pts.html">get_image_border_pts.pro</a>', "get_image_border_pts.pro", "", "get_image_border_pts", "	Computes points around the edge of an image.    ", "cornerscentercropsampleaperturecdCamera descripor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2,np) of image points on the image border.  np is computed 	such that points are spaced by one pixel.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_image_profile.html", "get_image_profile.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_image_profile.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_image_profile.html#get_image_profile", "get_image_profile", 'routine in <a href="obj/tools/get_image_profile.html">get_image_profile.pro</a>', "get_image_profile.pro", "", "get_image_profile", "	Extracts a profile from a rectangular, but not necessarily axis-aligned, 	image region using interpolation.    ", "distanceArray (nl) giving the distance along the scan.   interp	Type of interpolation, see image_interp_cam.   arg_interpInterpolation argument, see image_interp_cam.   sigma	Standard deviation across the profile at each sample 			along the profile.    image_ptsArray (2,nl) of image points along the center of 			the scan.   imcdCamera descriptor.   pArray (2,2) of image points giving the start and end points 		for the scan.   nlNumber of samples along the scan.   nwNumber of samples across the scan.    sample", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nl) containing the profile.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_image_profile_outline.html", "get_image_profile_outline.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_image_profile_outline.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_image_profile_outline.html#get_image_profile_outline", "get_image_profile_outline", 'routine in <a href="obj/tools/get_image_profile_outline.html">get_image_profile_outline.pro</a>', "get_image_profile_outline.pro", "", "get_image_profile_outline", "	Generates an outline of an oblique rectangular image region.    ", "nwNumber of samples across the scan.   nlNumber of samples along the scan.   samplepointsArray (2,2) of image points defining corners at opposite ends 		on one side of the sector.   pointImage point defining and third corner.    ", "NV/LIB/TOOLS", "       Written by:     Spitale          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_image_vector.html", "get_image_vector.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_image_vector.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_image_vector.html#get_image_vector", "get_image_vector", 'routine in <a href="obj/tools/get_image_vector.html">get_image_vector.pro</a>', "get_image_vector.pro", "", "get_image_vector", "	Projects inertial vectors into an image.    ", "cdArray (nt) of camera descriptors.   vArray (nv,3,nt) of vectors in the inertial frame.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2,nv,nt) of image vectors.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_limb_profile_outline.html", "get_limb_profile_outline.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_limb_profile_outline.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_limb_profile_outline.html#get_limb_profile_outline", "get_limb_profile_outline", 'routine in <a href="obj/tools/get_limb_profile_outline.html">get_limb_profile_outline.pro</a>', "get_limb_profile_outline.pro", "", "get_limb_profile_outline", "       Generates an outline of a limb sector.   ", "altaznaltnazinertialInertial vectors corresponding to the limb sector 			outline points.   dkdDisk descriptor corresponding to the skyplane.    save_azsscan_altscan_azlimb_pts_bodygraphiccdCamera descriptor.   gbxGlobe descriptor.   pointsArray (2,2) of image points defining opposite corners 		of the sector.   ", "NV/LIB/TOOLS", "       Written by:     Spitale, 8/2006          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_limb_profile_outline_linear.html", "get_limb_profile_outline_linear.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_limb_profile_outline_linear.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_limb_profile_outline_linear.html#get_limb_profile_outline_linear", "get_limb_profile_outline_linear", 'routine in <a href="obj/tools/get_limb_profile_outline_linear.html">get_limb_profile_outline_linear.pro</a>', "get_limb_profile_outline_linear.pro", "", "get_limb_profile_outline_linear", "       Generates an outline of a rectangular limb sector.   ", "altaz0rimpointsnaltnriminertialInertial vectors corresponding to the limb sector 			outline points.    save_rimsscan_altscan_rimlimb_pts_bodygraphiccdCamera descriptor.   gbxGlobe descriptor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale, 1/2009          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_limb_profile_outline_oblique.html", "get_limb_profile_outline_oblique.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_limb_profile_outline_oblique.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_limb_profile_outline_oblique.html#get_limb_profile_outline_oblique", "get_limb_profile_outline_oblique", 'routine in <a href="obj/tools/get_limb_profile_outline_oblique.html">get_limb_profile_outline_oblique.pro</a>', "get_limb_profile_outline_oblique.pro", "", "get_limb_profile_outline_oblique", "       Generates an outline of an oblique limb sector.   ", "naltnazdkdcdCamera descriptor.   gbxGlobe descriptor.   pointsArray (2,2) of image points defining opposite corners 		of the sector.   point   ", "NV/LIB/TOOLS", "       Written by:     Spitale, 1/2009          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_lonperp.html", "get_lonperp.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_lonperp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_lonperp.html#get_lonperp", "get_lonperp", 'routine in <a href="obj/tools/get_lonperp.html">get_lonperp.pro</a>', "get_lonperp.pro", "", "get_lonperp", "", "cdrdp0p1", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_object_by_name.html", "get_object_by_name.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_object_by_name.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_object_by_name.html#get_object_by_name", "get_object_by_name", 'routine in <a href="obj/tools/get_object_by_name.html">get_object_by_name.pro</a>', "get_object_by_name.pro", "", "get_object_by_name", "	Selects from a list of descriptors based on their name.    ", "xdsArray of any subclass of CORE.   name", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array descriptors whose CORE name field matches the given name. 	If no matches are found, 0 is returned.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_primary.html", "get_primary.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_primary.html#get_primary", "get_primary", 'routine in <a href="obj/tools/get_primary.html">get_primary.pro</a>', "get_primary.pro", "", "get_primary", "	Attempts to determine the primary planet from a list of descriptors 	based on their names and proximity to the observer.    ", "planetsrxodgbxArray (nd,nt) of any subclass of GLOBE, specifying a 		system of globe objects.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	GLOBE descriptor for the selected primary.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_radperp.html", "get_radperp.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_radperp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_radperp.html#get_radperp", "get_radperp", 'routine in <a href="obj/tools/get_radperp.html">get_radperp.pro</a>', "get_radperp.pro", "", "get_radperp", "", "cddkxp0p1dsk_pt0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_ring_profile.html", "get_ring_profile.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_ring_profile.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_ring_profile.html#get_ring_profile", "get_ring_profile", 'routine in <a href="obj/tools/get_ring_profile.html">get_ring_profile.pro</a>', "get_ring_profile.pro", "", "get_ring_profile", "       Generates a ring profile in radius or longitude.           The profile is calculated by applying a grid of (radius, longitude)        given by rad and lon on a ring sector, interpolating the dn in        the image, and averaging along a direction to give a radius profile,        or a longitudinal profile.   STATUS:        Completed.    ", "azimuthal     If set, a longitudinal scan is done instead.   interpim_ptsdxdsk_ptssigmawidthnnarg_interpimage     The image to scan   cd     Camera descriptor   dkd     Disk descriptor   lon_ptsrad_pts", "NV/LIB/TOOLS", "       Written by:     Haemmerle, 6/1998          An array of averaged dn values that match the given rad or        match the given lon if /azimuthal selected.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_ring_profile_bin.html", "get_ring_profile_bin.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_ring_profile_bin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_ring_profile_bin.html#get_ring_profile_bin", "get_ring_profile_bin", 'routine in <a href="obj/tools/get_ring_profile_bin.html">get_ring_profile_bin.pro</a>', "get_ring_profile_bin.pro", "", "get_ring_profile_bin", "       Generates a ring profile in radius or longitude using binning.           A ring sector polygon is calculated from the given dlon and rad        arrays.  All the pixels of the image within this polygon are        binned in an equally-spaced histogram in radius or longitude.          The dlon and rad arrays are treated as equally spaced, that is,        the binsize is calculated by dividing the spacing in radius by        number of points minus one.   STATUS:        Completed.    ", "slopeazimuthal     If set, a longitudinal scan is done instead.   image     The image to scan   cd     Camera descriptor   dkd     Disk descriptor   lon_ptsrad_pts", "NV/LIB/TOOLS", "       Written by:     Haemmerle, 6/1998          An array of averaged dn values that match the given rad or        match the given dlon if /azimuthal selected.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_ring_profile_n.html", "get_ring_profile_n.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_ring_profile_n.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_ring_profile_n.html#get_ring_profile_n", "get_ring_profile_n", 'routine in <a href="obj/tools/get_ring_profile_n.html">get_ring_profile_n.pro</a>', "get_ring_profile_n.pro", "", "get_ring_profile_n", "       Calculate the number of points in radius and longitude for        a ring profile.           Routine goes along the radial and longitudinal edges of a ring        profile sector and calculates the minimum spacing between the        points in image space, then derives the n_rad and n_lon points        to make the minimum spacing 1 pixel.  If the oversamp parameter        is given, the numbers are multiplied by this factor.   STATUS:        Completed.    ", "oversamp   Oversample factor compared to regular calculation of                        radius and longitude spacing which would put maximum                        spacing at 1 pixel.   outline_pts   Outline sector image points which are the result                        of calling get_ring_profile_outline()   cd   Camera descriptor   dkd   Disk descriptor   lon   Equally spaced longitude array   rad   Equally spaced radius array   ", "NV/LIB/TOOLS", "       Written by:     Haemmerle, 6/1998          Array containg n_rad and n_lon to be used by get_ring_profile() or        get_ring_profile_bin().    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_ring_profile_outline.html", "get_ring_profile_outline.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_ring_profile_outline.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_ring_profile_outline.html#get_ring_profile_outline", "get_ring_profile_outline", 'routine in <a href="obj/tools/get_ring_profile_outline.html">get_ring_profile_outline.pro</a>', "get_ring_profile_outline.pro", "", "get_ring_profile_outline", "       Generates an outline of a ring sector.   ", "radArray of disk radii for sector   lonArray of disk longitudes for sector   xlondirnradNumber of points in the radial direction.   nlonNumber of points in the longitudinal direction.   slopeinertialInertial vectors corresponding to the ring sector 			outline points.    cdCamera descriptor.   dkdpointsArray (2,2) of image points defining corners of the sector.   ", "NV/LIB/TOOLS", "       Written by:     Vance Haemmerle & Joe Spitale, 6/1998          Output is set of image points (x,y) defining the outline of the        ring sector.   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_ring_profile_outline_oblique.html", "get_ring_profile_outline_oblique.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_ring_profile_outline_oblique.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_ring_profile_outline_oblique.html#get_ring_profile_outline_oblique", "get_ring_profile_outline_oblique", 'routine in <a href="obj/tools/get_ring_profile_outline_oblique.html">get_ring_profile_outline_oblique.pro</a>', "get_ring_profile_outline_oblique.pro", "", "get_ring_profile_outline_oblique", "       Generates an outline of an oblique ring sector.   ", "dirnradNumber of points in the radial direction.   nlonNumber of points in the longitudinal direction.   cdCamera descriptor.   dkxpointsArray (2,2) of image points defining corners at opposite ends 		on one side of the sector.   pointImage point defining and third corner.   ", "NV/LIB/TOOLS", "       Written by:     Spitale, 8/2006          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_ring_profile_outline_perp.html", "get_ring_profile_outline_perp.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_ring_profile_outline_perp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_ring_profile_outline_perp.html#get_ring_profile_outline_perp", "get_ring_profile_outline_perp", 'routine in <a href="obj/tools/get_ring_profile_outline_perp.html">get_ring_profile_outline_perp.pro</a>', "get_ring_profile_outline_perp.pro", "", "get_ring_profile_outline_perp", "       Generates an outline of a ring sector perpendicular to the 	image-projected radial direction.   ", "dirnradNumber of points in the radial direction.   nlonNumber of points in the longitudinal direction.   cdCamera descriptor.   dkxpointsArray (2,2) of image points defining corners of the sector.   ", "NV/LIB/TOOLS", "       Written by:     Spitale, 8/2006          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/get_solar_ref.html", "get_solar_ref.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "get_solar_ref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/get_solar_ref.html#get_solar_ref", "get_solar_ref", 'routine in <a href="obj/tools/get_solar_ref.html">get_solar_ref.pro</a>', "get_solar_ref.pro", "", "get_solar_ref", "	Produces inertial unit vectors corresponding to the projection 	of the sun direction into the given disk plane.    ", "dkxArray (nt) of any subclass of DISK.   sundArray (nt) of any subclass of STAR representing the sun.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (1,3,nt) of inertial vectors.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/get_surface_ranges.html", "get_surface_ranges.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "get_surface_ranges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/get_surface_ranges.html#get_surface_ranges", "get_surface_ranges", 'routine in <a href="obj/tools/composite/get_surface_ranges.html">get_surface_ranges.pro</a>', "get_surface_ranges.pro", "", "get_surface_ranges", "	Determines full ranges of valid surface coordinate system.    ", "odbx     Object descriptor (subclass of BODY)    ", "NV/LIB/TOOLS/COMPOSITE", "	Array of 2 points representng the minimum and maximum values of the 	relevant coordinate system.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_altaz_to_local.html", "glb_altaz_to_local.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_altaz_to_local.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_altaz_to_local.html#glb_altaz_to_local", "glb_altaz_to_local", 'routine in <a href="obj/glb/glb_altaz_to_local.html">glb_altaz_to_local.pro</a>', "glb_altaz_to_local.pro", "", "glb_altaz_to_local", "       Converts the given column vectors from the altaz coordinate        system to the local coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   vr", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the local system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_assign.html", "glb_assign.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_assign.html#glb_assign", "glb_assign", 'routine in <a href="obj/glb/glb_assign.html">glb_assign.pro</a>', "glb_assign.pro", "", "glb_assign", "	Replaces fields in a GLOBE object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@glb__keywords.include", "NV/OBJ/GLB", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_body_to_globe.html", "glb_body_to_globe.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_body_to_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_body_to_globe.html#glb_body_to_globe", "glb_body_to_globe", 'routine in <a href="obj/glb/glb_body_to_globe.html">glb_body_to_globe.pro</a>', "glb_body_to_globe.pro", "", "glb_body_to_globe", "       Transforms the given column vectors from the body coordinate        system to the globe coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the globe frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_body_to_local.html", "glb_body_to_local.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_body_to_local.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_body_to_local.html#glb_body_to_local", "glb_body_to_local", 'routine in <a href="obj/glb/glb_body_to_local.html">glb_body_to_local.pro</a>', "glb_body_to_local.pro", "", "glb_body_to_local", "       Converts the given column vectors from the body coordinate        system to the local coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   vr", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the local system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_create_descriptors.html", "glb_create_descriptors.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_create_descriptors.html#glb_create_descriptors", "glb_create_descriptors", 'routine in <a href="obj/glb/glb_create_descriptors.html">glb_create_descriptors.pro</a>', "glb_create_descriptors.pro", "", "glb_create_descriptors", "	Init method for the GLOBE class.    ", "crdbdsldgbdnNumber of descriptors to create.   @glb__keywords.include", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created or or freshly initialized globe descriptors, depending 	on the presence of the bd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_evolve.html", "glb_evolve.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_evolve.html#glb_evolve", "glb_evolve", 'routine in <a href="obj/glb/glb_evolve.html">glb_evolve.pro</a>', "glb_evolve.pro", "", "glb_evolve", "       Computes new globe descriptors at the given time offsets from        the given globe descriptors using the taylor series expansion        corresponding to the derivatives contained in the given globe        descriptor.    ", "nodv If set, velocities will not be evolved.   copyIf set, the evolved descriptor is copied into the input 		descriptor and it is freed.  The input descriptor is returned.    gbd Array (ngd) of any subclass of GLOBE descriptors.   dt Array (ndt) of time offsets.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (ngd,ndt) of newly allocated globe descriptors evolved        by time dt, where ngd is the number of gbd, and ndt is the        number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_get_cusp_points.html", "glb_get_cusp_points.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_get_cusp_points.pro", "", "", "	Iteratively computes the two points that occupy the limb from two 	different viewpoints for each given globe object.    ", "", "          -1", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_get_cusp_points.html#_glb_get_cusp_points", "_glb_get_cusp_points", 'routine in <a href="obj/glb/glb_get_cusp_points.html">glb_get_cusp_points.pro</a>', "glb_get_cusp_points.pro", "", "_glb_get_cusp_points", "", "gbdr1r2epsilonniter", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/glb/glb_get_cusp_points.html#glb_get_cusp_points", "glb_get_cusp_points", 'routine in <a href="obj/glb/glb_get_cusp_points.html">glb_get_cusp_points.pro</a>', "glb_get_cusp_points.pro", "", "glb_get_cusp_points", "", "gbdr1r2epsilonniter", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_get_grid_points.html", "glb_get_grid_points.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_get_grid_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_get_grid_points.html#glb_get_grid_points", "glb_get_grid_points", 'routine in <a href="obj/glb/glb_get_grid_points.html">glb_get_grid_points.pro</a>', "glb_get_grid_points.pro", "", "glb_get_grid_points", "", "latlonscan_latscan_longbd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_get_limb_points.html", "glb_get_limb_points.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_get_limb_points.pro", "", "", "	Iteratively computes the points on the limb for each given globe 	object.    ", "", "          -1", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_get_limb_points.html#_glb_get_limb_points", "_glb_get_limb_points", 'routine in <a href="obj/glb/glb_get_limb_points.html">glb_get_limb_points.pro</a>', "glb_get_limb_points.pro", "", "_glb_get_limb_points", "", "alphagbdrn_pointsepsilonniter", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/glb/glb_get_limb_points.html#glb_get_limb_points", "glb_get_limb_points", 'routine in <a href="obj/glb/glb_get_limb_points.html">glb_get_limb_points.pro</a>', "glb_get_limb_points.pro", "", "glb_get_limb_points", "", "alphagbdrn_pointsepsilonniter", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_get_radius.html", "glb_get_radius.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_get_radius.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_get_radius.html#glb_get_radius", "glb_get_radius", 'routine in <a href="obj/glb/glb_get_radius.html">glb_get_radius.pro</a>', "glb_get_radius.pro", "", "glb_get_radius", "	Computes the local radius of a GLOBE object at the given lat/lon.    ", "noeventgbdArray (nt) of any subclass of GLOBE descriptors.   latArray (nv) of latitudes.   lonArray (nv) of longitudes.    ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv, nt) of radius values.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_get_ranges.html", "glb_get_ranges.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_get_ranges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_get_ranges.html#glb_get_ranges", "glb_get_ranges", 'routine in <a href="obj/glb/glb_get_ranges.html">glb_get_ranges.pro</a>', "glb_get_ranges.pro", "", "glb_get_ranges", "	Returns ranges of valid coordinates for the given GLOBE object.    ", "gbd", "NV/LIB/GLB", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (2 x 3) giving the ranges in globe coordinates.    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_get_surface_normal.html", "glb_get_surface_normal.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_get_surface_normal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_get_surface_normal.html#glb_get_surface_normal", "glb_get_surface_normal", 'routine in <a href="obj/glb/glb_get_surface_normal.html">glb_get_surface_normal.pro</a>', "glb_get_surface_normal.pro", "", "glb_get_surface_normal", "	Computes the surface normal of a GLOBE object at the given 	globe position.   ", "noeventnonormIf set, the returned vectors are not normalized.   bodyIf set, the inputs given in the BODY system instead of GLOBE.   gbdArray (nt) of any subclass of GLOBE descriptors.   globe_pts", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv, 3, nt) of surface normals in the BODY frame.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/glb/glb_get_surface_normal.html#___glb_get_surface_normal", "___glb_get_surface_normal", 'routine in <a href="obj/glb/glb_get_surface_normal.html">glb_get_surface_normal.pro</a>', "glb_get_surface_normal.pro", "", "___glb_get_surface_normal", "", "noeventgbdlatlon", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_globe_to_body.html", "glb_globe_to_body.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_globe_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_globe_to_body.html#glb_globe_to_body", "glb_globe_to_body", 'routine in <a href="obj/glb/glb_globe_to_body.html">glb_globe_to_body.pro</a>', "glb_globe_to_body.pro", "", "glb_globe_to_body", "       Transforms the given column vectors from the globe coordinate        system to the body coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_globe_to_graphic.html", "glb_globe_to_graphic.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_globe_to_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_globe_to_graphic.html#glb_globe_to_graphic", "glb_globe_to_graphic", 'routine in <a href="obj/glb/glb_globe_to_graphic.html">glb_globe_to_graphic.pro</a>', "glb_globe_to_graphic.pro", "", "glb_globe_to_graphic", "       Converts the given vectors from the globe coordinate        system to the graphic coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the graphic system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_graphic_to_globe.html", "glb_graphic_to_globe.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_graphic_to_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_graphic_to_globe.html#glb_graphic_to_globe", "glb_graphic_to_globe", 'routine in <a href="obj/glb/glb_graphic_to_globe.html">glb_graphic_to_globe.pro</a>', "glb_graphic_to_globe.pro", "", "glb_graphic_to_globe", "       Converts the given vectors from the graphic coordinate        system to the globe coordinate system.    ", "noeventgbd        Array (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the globe system.    STATUS: 	 Not complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_hide_points.html", "glb_hide_points.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_hide_points.pro", "", "", "	Hides points that are obscured by a GLOBE with respect to a given 	viewpoint.    ", "", "          -1", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_hide_points.html#glb_hide_points", "glb_hide_points", 'routine in <a href="obj/glb/glb_hide_points.html">glb_hide_points.pro</a>', "glb_hide_points.pro", "", "glb_hide_points", "", "rmgbdvpoints", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_hide_points_limb.html", "glb_hide_points_limb.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_hide_points_limb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_hide_points_limb.html#glb_hide_points_limb", "glb_hide_points_limb", 'routine in <a href="obj/glb/glb_hide_points_limb.html">glb_hide_points_limb.pro</a>', "glb_hide_points_limb.pro", "", "glb_hide_points_limb", "	Hides points lying on the surface of a GLOBE object that are 	obscured by the limb with respect to a given viewpoint.  This 	procedure is much faster then the more general glb_hide_points.    ", "gbdArray (nt) of any subclass of GLOBE descriptors.   rColumns vector givnng the BODY-frame position of the viewer.   points", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Subscripts of the points in p that are hidden by the object. 	Note that this routine is only valid for points that lie on 	the surface of the globe.  This routine is faster than 	glb_hide_points.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/glb_image_bounds.html", "glb_image_bounds.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "glb_image_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/glb_image_bounds.html#glb_image_bounds", "glb_image_bounds", 'routine in <a href="obj/tools/glb_image_bounds.html">glb_image_bounds.pro</a>', "glb_image_bounds.pro", "", "glb_image_bounds", "	Determines globe coordinate ranges visible in an image described 	by a given camera descriptor.    ", "slopborder_pts_imcornerscenterlatminlatmaxlonminlonmaxstatuscdCamera descripor.   pd", "NV/LIB/TOOLS", "       Written by:     Spitale   	latmin:	Minimum latitude in image.  	latmax:	Maximum latitude in image.  	lonmin:	Minimum longitude in image.  	lonmax:	Maximum longitude in image.  	border_pts_im:	Array (2,np) of points along the edge of the image.  	status:	-1 if no globe in the image, 0 otherwise.    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_intersect.html", "glb_intersect.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_intersect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_intersect.html#glb_intersect", "glb_intersect", 'routine in <a href="obj/glb/glb_intersect.html">glb_intersect.pro</a>', "glb_intersect.pro", "", "glb_intersect", "	Computes the intersection of rays with GLOBE objects.    ", "hitArray giving the indices of rays the hit the object.   nearIf set, only the  near  points are returned.  More specifically, 		these points correspond to the furthest along the ray from the 		observer to the globe.  If the observer is exterior, these are 		the nearest interesections to the observer; if the observer is 		interior, these intersections are behind the observer.   farIf set, only the  far  points are returned.  See above; if the 		observer is exterior, these are the furthest interesections from 		the observer; if the observer is interior, these intersections 		are in front of the observer.   discriminantDiscriminant of the quadriatic equation used to 			determine the intersections.    nosolveIf set, the intersections are not computed, though the 		 discrimiant is.   validArray in which each element indicates whether the object 		was hit.   gbdArray (nt) of any subclass of GLOBE descriptors.   vArray (nv,3,nt) giving ray origins in the BODY frame.   rArray (nv,3,nt) giving ray directions in the BODY frame.    ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2*nv,3,nt) of points in the BODY frame, where 	int_pts[0:nv-1,*,*] correspond to the near-side intersections 	and int_pts[nv:2*nv-1,*,1] correspond to the far side.  Zero 	vector is returned for points with no solution.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_intersect_discriminant.html", "glb_intersect_discriminant.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_intersect_discriminant.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_intersect_discriminant.html#glb_intersect_discriminant", "glb_intersect_discriminant", 'routine in <a href="obj/glb/glb_intersect_discriminant.html">glb_intersect_discriminant.pro</a>', "glb_intersect_discriminant.pro", "", "glb_intersect_discriminant", "", "noeventalphabetagammagbdvr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_intersect_plane.html", "glb_intersect_plane.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_intersect_plane.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_intersect_plane.html#glb_intersect_plane", "glb_intersect_plane", 'routine in <a href="obj/glb/glb_intersect_plane.html">glb_intersect_plane.pro</a>', "glb_intersect_plane.pro", "", "glb_intersect_plane", "	Computesthe intersection of a plane with a GLOBE object.    ", "npgbdArray (nt) of any subclass of GLOBE descriptors.   vArray (1,3,nt) giving plane origins in the BODY frame.   nArray (1,3,nt) giving the plane unit normals in the 		BODY frame.    ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (np,3,nt) of points in the BODY frame, np is the number of 	points on the curve of intersection.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_intersect_points.html", "glb_intersect_points.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_intersect_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_intersect_points.html#glb_intersect_points", "glb_intersect_points", 'routine in <a href="obj/glb/glb_intersect_points.html">glb_intersect_points.pro</a>', "glb_intersect_points.pro", "", "glb_intersect_points", "", "validnosolvenearfargbdvrdiscriminantalphabetagamma", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_j.html", "glb_j.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_j.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_j.html#glb_j", "glb_j", 'routine in <a href="obj/glb/glb_j.html">glb_j.pro</a>', "glb_j.pro", "", "glb_j", "       Returns the zonal harmonics for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nj,nt) of zonal harmonics associated with each given globe 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_local_to_altaz.html", "glb_local_to_altaz.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_local_to_altaz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_local_to_altaz.html#glb_local_to_altaz", "glb_local_to_altaz", 'routine in <a href="obj/glb/glb_local_to_altaz.html">glb_local_to_altaz.pro</a>', "glb_local_to_altaz.pro", "", "glb_local_to_altaz", "       Converts the given column vectors from the local coordinate        system to the altaz coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   v_r", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the altaz system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_local_to_body.html", "glb_local_to_body.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_local_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_local_to_body.html#glb_local_to_body", "glb_local_to_body", 'routine in <a href="obj/glb/glb_local_to_body.html">glb_local_to_body.pro</a>', "glb_local_to_body.pro", "", "glb_local_to_body", "       Converts the given column vectors from the local coordinate        system to the body coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   vr", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_lora.html", "glb_lora.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_lora.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_lora.html#glb_lora", "glb_lora", 'routine in <a href="obj/glb/glb_lora.html">glb_lora.pro</a>', "glb_lora.pro", "", "glb_lora", "	Returns the longitude of the first ellipsoid radius for each 	given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Longitude of the first ellipsoid radius associated with each        given globe descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_lref.html", "glb_lref.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_lref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_lref.html#glb_lref", "glb_lref", 'routine in <a href="obj/glb/glb_lref.html">glb_lref.pro</a>', "glb_lref.pro", "", "glb_lref", "       Returns the longitude system reference for each given globe        descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Longitude system reference associated with each given globe        descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_nj.html", "glb_nj.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_nj.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_nj.html#glb_nj", "glb_nj", 'routine in <a href="obj/glb/glb_nj.html">glb_nj.pro</a>', "glb_nj.pro", "", "glb_nj", "	Returns an integer indicating the maximum number of zonal harmonics 	allowed in the 'j' field of the globe descriptor.  This number 	can be adjusted using the environment variable 'GLB_NJ'.  The default 	is 11.    Environment variables:   	GLB_NJ:		Sets the nj value.    ", "", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Current nj value.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/glb_projected_resolution.html", "glb_projected_resolution.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "glb_projected_resolution.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/glb_projected_resolution.html#glb_projected_resolution", "glb_projected_resolution", 'routine in <a href="obj/tools/glb_projected_resolution.html">glb_projected_resolution.pro</a>', "glb_projected_resolution.pro", "", "glb_projected_resolution", "", "minmaxrrgbdcdpscale", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_query.html", "glb_query.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_query.html#glb_query", "glb_query", 'routine in <a href="obj/glb/glb_query.html">glb_query.pro</a>', "glb_query.pro", "", "glb_query", "	Returns the fields associated with a GLOBE object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@glb__keywords.include", "NV/OBJ/GLB", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_radii.html", "glb_radii.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_radii.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_radii.html#glb_radii", "glb_radii", 'routine in <a href="obj/glb/glb_radii.html">glb_radii.pro</a>', "glb_radii.pro", "", "glb_radii", "       Returns the triaxial radii for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Triaxial radii associated with each given globe descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_reflect.html", "glb_reflect.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_reflect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_reflect.html#glb_reflect", "glb_reflect", 'routine in <a href="obj/glb/glb_reflect.html">glb_reflect.pro</a>', "glb_reflect.pro", "", "glb_reflect", "	Computes the reflection of rays with GLOBE objects.    ", "hitnearIf set, near-side reflections are computed.  This is the default.   far	If set, far-side reflections are computed.   allvalidgbdArray (nt) of any subclass of GLOBE descriptors.   vArray (nv,3,nt) giving observer positions in the BODY frame.   rArray (nv,3,nt) giving point positions in the BODY frame.   epsilonControls the precision of the iteration.  Default 			is 1d-3.   niterMaximum number of iterations, default is 1000    ", "NV/LIB/GLB", " 	Written by:	Spitale, 6/2016   	Array (2*nv,3,nt) of points in the BODY frame, where 	int_pts[0:nv-1,*,*] correspond to the near-side reflections 	and int_pts[nv:2*nv-1,*,1] correspond to the far side.  Zero 	vector is returned for points with no solution.    STATUS: 	Not well tested    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_replicate.html", "glb_replicate.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_replicate.html#glb_replicate", "glb_replicate", 'routine in <a href="obj/glb/glb_replicate.html">glb_replicate.pro</a>', "glb_replicate.pro", "", "glb_replicate", "	Replicates the given globe descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "gbd One descriptor of any subclass of GLOBE descriptor   dim Dimensions of the result.   ", "NV/LIB/GLB", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	globe descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_rref.html", "glb_rref.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_rref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_rref.html#glb_rref", "glb_rref", 'routine in <a href="obj/glb/glb_rref.html">glb_rref.pro</a>', "glb_rref.pro", "", "glb_rref", "       Returns the reference radius for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nt) of reference radii associated with each given globe 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_set_j.html", "glb_set_j.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_set_j.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_set_j.html#glb_set_j", "glb_set_j", 'routine in <a href="obj/glb/glb_set_j.html">glb_set_j.pro</a>', "glb_set_j.pro", "", "glb_set_j", "       Replaces the zonal harmonics for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   J Array (nj,nt) of new zonal harmonics.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_set_lora.html", "glb_set_lora.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_set_lora.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_set_lora.html#glb_set_lora", "glb_set_lora", 'routine in <a href="obj/glb/glb_set_lora.html">glb_set_lora.pro</a>', "glb_set_lora.pro", "", "glb_set_lora", "       Replaces the longitude of the first ellipsoid radius for each        given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   lora Array (nt) of new longitude values of the first ellipsoid radius.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_set_lref.html", "glb_set_lref.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_set_lref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_set_lref.html#glb_set_lref", "glb_set_lref", 'routine in <a href="obj/glb/glb_set_lref.html">glb_set_lref.pro</a>', "glb_set_lref.pro", "", "glb_set_lref", "       Replaces the longitude system reference for each given globe        descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   lref String array (nt) of new longitude system names.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_set_radii.html", "glb_set_radii.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_set_radii.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_set_radii.html#glb_set_radii", "glb_set_radii", 'routine in <a href="obj/glb/glb_set_radii.html">glb_set_radii.pro</a>', "glb_set_radii.pro", "", "glb_set_radii", "       Replaces the triaxial radii for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   radii Array (3,nt) of new triaxial radii.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_set_rref.html", "glb_set_rref.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_set_rref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_set_rref.html#glb_set_rref", "glb_set_rref", 'routine in <a href="obj/glb/glb_set_rref.html">glb_set_rref.pro</a>', "glb_set_rref.pro", "", "glb_set_rref", "       Replaces the reference radius for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   rref String array (nt) of new reference radii.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_set_type.html", "glb_set_type.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_set_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_set_type.html#glb_set_type", "glb_set_type", 'routine in <a href="obj/glb/glb_set_type.html">glb_set_type.pro</a>', "glb_set_type.pro", "", "glb_set_type", "       Replaces the type string for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   type String array (nt) of new type strings.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_sub_point.html", "glb_sub_point.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_sub_point.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_sub_point.html#glb_sub_point", "glb_sub_point", 'routine in <a href="obj/glb/glb_sub_point.html">glb_sub_point.pro</a>', "glb_sub_point.pro", "", "glb_sub_point", "	Computes the planetocentric sub-point in body coordinates.    ", "noeventgbdArray (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) points in the BODY frame that lie on the surface 	of each globe, directly 'beneath' r, i.e., such that each 	planetocentric surface normal points at each r.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_sub_point_graphic.html", "glb_sub_point_graphic.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_sub_point_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_sub_point_graphic.html#glb_sub_point_graphic", "glb_sub_point_graphic", 'routine in <a href="obj/glb/glb_sub_point_graphic.html">glb_sub_point_graphic.pro</a>', "glb_sub_point_graphic.pro", "", "glb_sub_point_graphic", "	Computes the planetographic sub-point in body coordinates.    ", "noeventepsilonConvergence criterion for angular deviation from normal. 			Default is 1d-8.   niter	Maximum number of iterations.  Default is 5000.   gbdArray (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:		Spitale, 1/1998  	Adapted by:		Spitale, 5/2016 	Added iteration count:	Moretto, 8/2016   	Array (nv,3,nt) points in the BODY frame that lie on the surface 	of each globe, directly 'beneath' r, i.e., such that each 	planetographic surface normal points at each r.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/glb/glb_type.html", "glb_type.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "glb_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/glb_type.html#glb_type", "glb_type", 'routine in <a href="obj/glb/glb_type.html">glb_type.pro</a>', "glb_type.pro", "", "glb_type", "       Returns the type string for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nt) of type strings associated with each given globe 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/globe_to_image.html", "globe_to_image.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "globe_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/globe_to_image.html#globe_to_image", "globe_to_image", 'routine in <a href="obj/tools/composite/globe_to_image.html">globe_to_image.pro</a>', "globe_to_image.pro", "", "globe_to_image", "       Transforms points in body globe coordinates to image coordinates.    ", "body_ptsvalidcdArray of nt Camera or map descriptor   gbxArray of nt Object descriptor (of type GLOBE)   pArray (nv x 3 x nt) of globe points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/globe_to_map.html", "globe_to_map.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "globe_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/globe_to_map.html#globe_to_map", "globe_to_map", 'routine in <a href="obj/tools/composite/globe_to_map.html">globe_to_map.pro</a>', "globe_to_map.pro", "", "globe_to_map", "       Transforms points in globe coordinates to map coordinates.    ", "mdArray of nt map descriptor.   gbxArray of nt globe descriptor.   globe_ptsArray (nv x 3 x nt) of globe points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of map coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("grim/interface/gr_draw.html", "gr_draw.pro", '.pro file in <a href="grim/interface/dir-overview.html">grim/interface/ directory</a>', "gr_draw.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/interface/gr_draw.html#gr_draw", "gr_draw", 'routine in <a href="grim/interface/gr_draw.html">gr_draw.pro</a>', "gr_draw.pro", "", "gr_draw", "	xx    Environment variables:   	xx:	xx  	xx:	xx    	xx:	xx  	xx:	xx    	xx    	xx    	xx    ", "gdcdpdrdsdardstdsundodpsymsymsizecolortagpngrnumpp", "NV/GR", " 	Written by:	xx, xx/xx/xxxx   	xx    STATUS: 	xx    SEE ALSO: 	xx, xx, xx 	xx    ");
  
  

libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html", "gr_lsqtool.pro", '.pro file in <a href="grim/tools/dir-overview.html">grim/tools/ directory</a>', "gr_lsqtool.pro", "", "", "", "", "          -1", " 	Written by:	Spitale 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#lsq_descriptor__define", "lsq_descriptor__define", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "lsq_descriptor__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_print", "grlsq_print", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_print", "", "cleardatas", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_descriptor", "grlsq_descriptor", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_descriptor", "", "minmaxwidthedgefixscannedalgorithmmodel_fninvert", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_parse_entry", "grlsq_parse_entry", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_parse_entry", "", "dropidstagstag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_set_entry", "grlsq_set_entry", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_set_entry", "", "dropsensitivebuttonidstagstagvalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_form_to_lsqd", "grlsq_form_to_lsqd", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_form_to_lsqd", "", "objectdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_lsqd_to_form", "grlsq_lsqd_to_form", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_lsqd_to_form", "", "datalsqd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_get_ptdps", "grlsq_get_ptdps", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_get_ptdps", "", "pdsrdssdsgrim_datadatalsqd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_invert_model", "grlsq_invert_model", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_invert_model", "", "modelmzero", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_draw_models", "grlsq_draw_models", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_draw_models", "", "datamodel_pmzerotag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_edge_model_psf_ring", "grlsq_edge_model_psf_ring", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_edge_model_psf_ring", "", "zerogddesc", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_edge_model_nav_ring", "grlsq_edge_model_nav_ring", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_edge_model_nav_ring", "", "zerogddesc", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_edge_model_nav_limb", "grlsq_edge_model_nav_limb", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_edge_model_nav_limb", "", "zerogddesc", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_edge_model_atan", "grlsq_edge_model_atan", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_edge_model_atan", "", "zerogddesc", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_get_model_type", "grlsq_get_model_type", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_get_model_type", "", "_tag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_get_model_fn", "grlsq_get_model_fn", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_get_model_fn", "", "lsqdtag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_get_inner", "grlsq_get_inner", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_get_inner", "", "cdrdtag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_get_model", "grlsq_get_model", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_get_model", "", "cdrdlsqdtaglzero", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_make_tag", "grlsq_make_tag", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_make_tag", "", "ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_scan", "grlsq_scan", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_scan", "", "nocreatestatusnoscanlsqdgrim_datadata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_fit", "grlsq_fit", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_fit", "", "statusgrim_datadatalsqd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#gr_lsqtool_event", "gr_lsqtool_event", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "gr_lsqtool_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_primary_notify", "grlsq_primary_notify", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_primary_notify", "", "init_data_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#grlsq_cleanup", "grlsq_cleanup", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "grlsq_cleanup", "", "base", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_lsqtool.html#gr_lsqtool", "gr_lsqtool", 'routine in <a href="grim/tools/gr_lsqtool.html">gr_lsqtool.pro</a>', "gr_lsqtool.pro", "", "gr_lsqtool", "", "top", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html", "gr_maptool.pro", '.pro file in <a href="grim/tools/dir-overview.html">grim/tools/ directory</a>', "gr_maptool.pro", "", "", "", "", "          -1", " 	Written by:	Spitale 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html#grmt_get_md", "grmt_get_md", 'routine in <a href="grim/tools/gr_maptool.html">gr_maptool.pro</a>', "gr_maptool.pro", "", "grmt_get_md", "", "indexdatatype", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html#grmt_create_map", "grmt_create_map", 'routine in <a href="grim/tools/gr_maptool.html">gr_maptool.pro</a>', "gr_maptool.pro", "", "grmt_create_map", "", "datamd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html#grmt_parse_entry", "grmt_parse_entry", 'routine in <a href="grim/tools/gr_maptool.html">gr_maptool.pro</a>', "gr_maptool.pro", "", "grmt_parse_entry", "", "dropidstagstag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html#grmt_set_entry", "grmt_set_entry", 'routine in <a href="grim/tools/gr_maptool.html">gr_maptool.pro</a>', "gr_maptool.pro", "", "grmt_set_entry", "", "dropidstagstagvalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html#grmt_form_to_md", "grmt_form_to_md", 'routine in <a href="grim/tools/gr_maptool.html">gr_maptool.pro</a>', "gr_maptool.pro", "", "grmt_form_to_md", "", "typedata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html#grmt_md_to_form", "grmt_md_to_form", 'routine in <a href="grim/tools/gr_maptool.html">gr_maptool.pro</a>', "gr_maptool.pro", "", "grmt_md_to_form", "", "datamd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html#grmt_cleanup", "grmt_cleanup", 'routine in <a href="grim/tools/gr_maptool.html">gr_maptool.pro</a>', "gr_maptool.pro", "", "grmt_cleanup", "", "base", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html#grmt_refresh_callback", "grmt_refresh_callback", 'routine in <a href="grim/tools/gr_maptool.html">gr_maptool.pro</a>', "gr_maptool.pro", "", "grmt_refresh_callback", "", "data_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html#gr_maptool_event", "gr_maptool_event", 'routine in <a href="grim/tools/gr_maptool.html">gr_maptool.pro</a>', "gr_maptool.pro", "", "gr_maptool_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_maptool.html#gr_maptool", "gr_maptool", 'routine in <a href="grim/tools/gr_maptool.html">gr_maptool.pro</a>', "gr_maptool.pro", "", "gr_maptool", "", "order", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html", "gr_phttool.pro", '.pro file in <a href="grim/tools/dir-overview.html">grim/tools/ directory</a>', "gr_phttool.pro", "", "", "", "", "          -1", " 	Written by:	Spitale 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#pht_descriptor__define", "pht_descriptor__define", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "pht_descriptor__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_get_prefix", "grpht_get_prefix", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_get_prefix", "", "type", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_descriptor", "grpht_descriptor", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_descriptor", "", "refl_fnphase_fnrefl_parmphase_parmn_refl_parmn_phase_parm", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_get_phtd", "grpht_get_phtd", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_get_phtd", "", "indexdatarefl_fn", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_apply_correction", "grpht_apply_correction", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_apply_correction", "", "dataphtdddcdpdsundoutline_ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_apply_correction_primary", "grpht_apply_correction_primary", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_apply_correction_primary", "", "grim_datadataphtd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_apply_correction_all", "grpht_apply_correction_all", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_apply_correction_all", "", "grim_datadataphtd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_parse_entry", "grpht_parse_entry", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_parse_entry", "", "nulldropidstagstag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_set_entry", "grpht_set_entry", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_set_entry", "", "dropidstagstagvalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_form_to_phtd", "grpht_form_to_phtd", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_form_to_phtd", "", "refl_fndata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_get_functions", "grpht_get_functions", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_get_functions", "", "defaulttype", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_refresh_fn", "grpht_refresh_fn", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_refresh_fn", "", "datatype", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_phtd_to_form", "grpht_phtd_to_form", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_phtd_to_form", "", "dataphtd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#gr_phttool_event", "gr_phttool_event", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "gr_phttool_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_primary_notify", "grpht_primary_notify", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_primary_notify", "", "init_data_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#grpht_cleanup", "grpht_cleanup", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "grpht_cleanup", "", "base", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/tools/gr_phttool.html#gr_phttool", "gr_phttool", 'routine in <a href="grim/tools/gr_phttool.html">gr_phttool.pro</a>', "gr_phttool.pro", "", "gr_phttool", "", "top", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/scripts/gr_png_all.html", "gr_png_all.pro", '.pro file in <a href="grim/scripts/dir-overview.html">grim/scripts/ directory</a>', "gr_png_all.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/scripts/gr_png_all.html#gr_png_all", "gr_png_all", 'routine in <a href="grim/scripts/gr_png_all.html">gr_png_all.pro</a>', "gr_png_all.pro", "", "gr_png_all", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/interface/gr_tp.html", "gr_tp.pro", '.pro file in <a href="grim/interface/dir-overview.html">grim/interface/ directory</a>', "gr_tp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/interface/gr_tp.html#gr_tp", "gr_tp", 'routine in <a href="grim/interface/gr_tp.html">gr_tp.pro</a>', "gr_tp.pro", "", "gr_tp", "", "pngrnumptd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim.html", "grim.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim.pro", "", "", "	General-purpose GRaphical Interface for oMinas.    	Grim operates directly on the memory images of the descriptors that 	it is given.  Therefore, those descriptors are modified during 	a session.  This architecture allows data to be operated on concurrently 	through grim and from the command line; see ingrid.pro for details.    LAYOUT: 	The philosphy that drives GRIM's layout is that the maximum possible 	screen space should be devoted to displaying the data.  This policy 	allows for many GRIM windows to be used simultaneously without being 	obscured by crazy control panels full of buttons, gadgets, widgets, 	doodads, whirly-gigs, and what-nots.  The grim layout consists of the 	following items:  	 Title bar: 		The title bar displays the grim window number (grnum), 		the current plane number (pn), the total number of planes, the 		name field of the data descriptor for the current plane, the 		default title (if given; see the title keyword above), and 		a string indicating which RGB channels are associated with the 		current plane.  	 Menu bar: 		Most of grim's functionality is accessed through the 		system of pulldown menus at the top.  Individual menu 		items are described in their own sections.  	 Shortcut buttons: 		Some commonly used menu options are duplicated as shortcut 		buttons arranged horizontally just beneath the menu bar.  The 		function of each button is displayed in the status bar (see 		below) when the mouse cursor is hovered ove the button.  	 Cursor mode buttons: 		Cursor mode shortcut buttons are arranged vertically along the 		left side of the GRIM window, and as provided as shortcuts 		for the corresponding options in the Mode menu.  The following 		modes are available:  		Activate: 			In activate mode, overlay objects may be activated 			or deactivated by clicking and/or dragging using the 			left or right mouse buttons respectively.  This 			activation mechanism allows the user to select which 			among a certain type of objects should be used in a 			given menu selection.  A left click on an overlay 			activates that overlay and a right click deactivates 			it.  A double click activates or deactivates all 			overlays associated with a given descriptor, or all 			stars.  Active overlays appear in the colors selected 			in the 'Overlay Settings' menu selection.  Inactive 			overlays appear in cyan.  A descriptor is active 			whenever any of its overlays are active.  		Zoom:	The zoom button puts grim in a zoom cursor mode, wherein 			the image zoom and offset are controlled by selecting 			a box in the image.  When the box is created using the 			left mouse button, zoom and offset are changed so that 			the contents of the box best fill the current graphics 			window.  When the right button is used, the contents of 			the current graphics window are shrunken so as to best 			fill the box.  In other words, the left button zooms in 			and the right button zooms out.  		Pan: 	The pan button puts grim in a pan cursor mode, wherein the 			image offset is controlled by selecting an offset vector 			using the left mouse button.  The middle button may be 			used to center the image on a selected point.  		Pixel Readout: 			In pixel readout mode, a text window appears 			and displays data about the pixel selected 			using the left mouse button.  		Tiepoint: 			In tiepoint mode, tiepoints are added using the 			left mouse button and deleted using the right button. 			Tiepoints appear as crosses identified by numbers. 			The use of tiepoints is determined by the particular 			option selected by the user.  		Curve: 			In curve mode, curves are added using the 			left mouse button and deleted using the right button. 			Curves appear as red lines identified by numbers at 			each end.  The use of curves is determined by the 			particular option selected by the user.  		Mask: 			GRIM maintains a mask for each plane whose use is 			appication-dependent.  Mask mode allows pixels in the 			mask to be toggled on and off.  		Magnify: 			In magnify mode, image pixels in the graphics 			window may be magnifed using either the right or left 			mouse buttons.  The left button magnifies the displayed 			pixels, directly from the graphics window.  The right 			button magnifies the data itself, without the overlays.  		XY Zoom: 			Same as 'zoom' above, except the aspect ratio is 			set by the proportions of the selected box.  		Remove overlays: 			Allows the user to remove overlay arrays.  		Trim overlays: 			Allows the user to trim points from overlay arrays.  		Select within overlays: 			Allows the user to select points within overlay arrays.  		Define Region: 			Allows the user to define GRIM's region of interest.  		Smooth: 			Allows the user to select a smoothing box to be applied 			to the data array.  		Select Plane: 			Allows the user to change planes using the pointer. 			This option is only useful in cases where multiple 			planes are displayed.  		Drag Image: 			Allows the user to reposition the current plane by 			clicking and dragging.  		Navigate: 			Allows the user to modify the camera position and 			orientation usng the mouse.   	 Graphics window: 		The graphics window displays the data associated with the 		given data descriptor using the current zoom, offset, and 		display order.  The edges of an image are indicated by a dotted 		line.  The camera optic axis is indicated by a large red cross.  	 Pixel readout: 		The cursor position and corresponding data value are are 		displayed beneath the graphics window, next to the message line.  	 Message line: 		The message line displays short messages pertaining GRIM's 		 current state, or displayng button functions.   CALLBACK PROCEDURES: 	GRIM callback procedures are called with one or two arguments:        the first argument is a pointer to data that was provided 	when the callback was added.  The second argument, if present, depends 	on the applicatation.    RESOURCE NAMES 	The following X-windows resource names apply to grim: 	 grim_base:		top level base 	 grim_mbar:		menu bar 	 grim_shortcuts_base:	base containing shortcut buttons 	 grim_modes_base:	base containing modes buttons 	 grim_draw:		grim draw widget 	 grim_label:		grim bottom label widget  	To turn off the confusing higlight box around the modes buttons, 	put the following line in your ~/.Xdefaults file:  	 Idl*grim_modes_base*highlightThickness:	0    OPERATION: 	GRIM displays 1-, 2-, and 3-dimensional data sets.  1-dimensional 	data arrays are displayed as plots.  In that case, the abscissa is 	the sample number unless the data descriptor contains an abscissa. 	2- and 3-dimensional arrays are displaye as image planes.  The only 	difference between images and cubes in GRIM is that images planes 	each have their own data descriptor, while cubes are represented by 	multiple image planes that share a common data descriptor; each plane 	in a cube corresponds to a unique offset in the data array stored in 	the common data descriptor.  Some functionality is not available when 	working with plots.  In that case, those options do not appear in the 	menus.  	GRIM requests only the data samples needed for the current viewing 	parameters.  Therefore, GRIM can display data sets of arbitrary size 	when used with a file reader that supports subsampling.  However, note 	that specific menu options may request the entire data array, depending 	on the application.  	Each GRIM window may contain any number of planes as well as 	associated geometric data (i.e. object descriptors) and overlay arrays 	for displaying various geometric objects -- limbs, rings, stars, etc. 	An array of user overlay points is maintained to be used for application- 	specific purposes.  Generally, a set of overlay points or a descriptor 	must be activated in order to be used as input to a menu item; see 	activate mode above.  	There are exclusive and non-exclusive mechanisms for selecting grim 	windows.  Grim windows may be non-exclusively selected using the select 	mode button mentioned above (upper-left corner).  The exclusive 	selection mechanism consists of a  primary  GRIM window, indicated by 	a red outline in the graphics window.  The primary selection is 	changed by pressing any mode or shortcut button, or by clicking in 	the graphics area of the desired grim window.  The meaning of the 	various selections depends on the application.  	The functions of the left and right mouse buttons are determined by the 	cursor mode; some cursor modes define modifier keys to broaden the number 	of functions available in that mode.  The middle mouse button toggles 	the activation state of overlay arrays, or pans the image if no overlay 	appears beneath the cursor.  The mouse wheel cycles among cursor modes, 	or zooms about the cursor position if the control key is held down.  	Objects maintained by GRIM are accessible via the INGRID interface, 	for example:  		IDL> ingrid, dd=dd, cd=cd, pd=pd, limb_ptd=limb_ptd  	returns the data desciptor, camera descriptor, planet descriptors, 	and limb points associated with the current plane.  	GRIM registers event handlers for all of its objects, so the window 	is updated any time an object is modifed, whether by GRIM or by some 	other program, or from the command line.    EXAMPLES: 	(1) To create a new grim instance with no data:  		IDL> grim, /new  	(2) To create a new grim instance with data from a file of name 	     filename :  		IDL> dd = dat_read(filename) 		IDL> grim, dd  		   or  		IDL> grim, filename  	(3) To give an existing grim instance a new camera descriptor:  		IDL> grim, cd=cd    KNOWN BUGS: 	Window resizing is not precise.  GRIM tries to resize to the selected 	size, but typically overshoots.  This is probably platform-dependent.  	Objects inherited by rendering planes do not respond to events.  	Image shifting: 	 -  Descriptors not updated if shift performed form another window 	    because the there's no way for the irst window to know to 	    update its descriptors         - fix wrap-around; clip instead  	Plane->Coregister does not update descriptors  	Navigate mode gets weird when you do certain modifer key presses 	   --> maybe a conflict with <ctrl> wheel zoom action  	Crashes occur with File->Close  	/no_erase is not enabled for images, just plots.  Probably should fix 	that.  	Initial visibility setting does not seem to work until applied 	using plane settings window.  	/frame causes a crash if there are no initial overlays.  	It's not clear whether the symsize keyword is actually used.  	pn keyword does not function.  	Crash when tiepoint syncing is on and tiepoint selected with 	multiple planes.  	Title keyword does not properly map multiple elements to multiple 	planes.  	Nsum keyword does not properly map multiple elements to multiple 	planes.  	Plane syncing appears to be incomplete and I don't remember what it 	was supposed to be.  I'm sure it was awesome, though.  	Not sure what slave_overlays keyword does, or was supposed to do.  	Overlays on rendered planes do not respond to events  	Menu toggles don't update propoerly in some circumsumstances.  	grim_message sometimes pops up messages from nv_message, which can 	be pretty obnxious.  This probably has to do with the calls to 	grim_message in grim_compute.include    STATUS: 	Incomplete.    SEE ALSO: 	ingrid, gr_draw    ", "", "          -1", " 	Written by:	Spitale 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_constants", "grim_constants", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_constants", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_resize", "grim_resize", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_resize", "", "initgrim_database_xsizebase_ysize", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_set_tracking", "grim_set_tracking", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_set_tracking", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_test_motion_event", "grim_test_motion_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_test_motion_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_set_ct", "grim_set_ct", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_set_ct", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_set_mode", "grim_set_mode", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_set_mode", "", "newinitdata_pgrim_datamode", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_write_ptd", "grim_write_ptd", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_write_ptd", "", "grim_datafilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_write", "grim_write", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_write", "", "filetypegrim_datafilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_get_save_filename", "grim_get_save_filename", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_get_save_filename", "", "filetypegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_kill_notify", "grim_kill_notify", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_kill_notify", "", "top", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_load_files", "grim_load_files", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_load_files", "", "load_pathgrim_datafilenames", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_deactivate_all", "grim_deactivate_all", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_deactivate_all", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_activate_all", "grim_activate_all", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_activate_all", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_modify_colors", "grim_modify_colors", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_modify_colors", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_edit_header", "grim_edit_header", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_edit_header", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_edit_notes", "grim_edit_notes", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_edit_notes", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_user_ptd_fname", "grim_user_ptd_fname", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_user_ptd_fname", "", "basenamegrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_write_user_points", "grim_write_user_points", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_write_user_points", "", "fnamegrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_mask_fname", "grim_mask_fname", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_mask_fname", "", "basenamegrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_write_mask", "grim_write_mask", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_write_mask", "", "fnamegrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_read_user_points", "grim_read_user_points", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_read_user_points", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_read_mask", "grim_read_mask", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_read_mask", "", "fnamegrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_jumpto", "grim_jumpto", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_jumpto", "", "grim_dataid", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_recenter", "grim_recenter", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_recenter", "", "grim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_zoom", "grim_zoom", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_zoom", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_zoom_to_cursor", "grim_zoom_to_cursor", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_zoom_to_cursor", "", "relativezoomzz", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_modes_list", "grim_modes_list", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_modes_list", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_interrupt_begin", "grim_interrupt_begin", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_interrupt_begin", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_interrupt_end", "grim_interrupt_end", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_interrupt_end", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_toggle_context", "grim_toggle_context", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_toggle_context", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_toggle_axes", "grim_toggle_axes", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_toggle_axes", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_render", "grim_render", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_render", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_erase_guideline", "grim_erase_guideline", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_erase_guideline", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_draw_guideline", "grim_draw_guideline", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_draw_guideline", "", "grim_dataxy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_repeat", "grim_repeat", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_repeat", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_exit", "grim_exit", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_exit", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_undo", "grim_undo", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_undo", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_redo", "grim_redo", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_redo", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_interrupt_callback", "grim_interrupt_callback", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_interrupt_callback", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_sampling_fn", "grim_sampling_fn", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_sampling_fn", "", "ddsource_image_pts_sampledata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_render_dim_fn", "grim_render_dim_fn", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_render_dim_fn", "", "dddim_orig", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_render_sampling_fn", "grim_render_sampling_fn", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_render_sampling_fn", "", "ddsource_image_pts_samplesource_image_pts_grid", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_draw_vectors", "grim_draw_vectors", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_draw_vectors", "", "cdcurves_ptdpoints_ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_increment_mode", "grim_increment_mode", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_increment_mode", "", "grim_datadm", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_event", "grim_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_update_guideline", "grim_update_guideline", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_update_guideline", "", "grim_dataplanexy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_update_xy_label", "grim_update_xy_label", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_update_xy_label", "", "grim_dataplanexy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_scroll", "grim_scroll", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_scroll", "", "grim_dataplaneclicksmodifiers", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_middle", "grim_middle", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_middle", "", "grim_dataplaneidxypressclicksmodifiersoutput_wnum", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_draw_event", "grim_draw_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_draw_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_help_event", "grim_menu_file_load_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_help_event", "	Allows user to load images into new image planes.  The user is 	prompted for filenames and dat_read is used to read each image. 	Multiple images may be selected and a new plane is created for 	each image.  On X-windows systems, multiple files may be selected 	either by dragging across the filenames or by holding down the 	control key to toggle the selected files.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_event", "grim_menu_file_load_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_browse_help_event", "grim_menu_file_browse_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_browse_help_event", "	Allows user to load images into new image planes using the brim 	browser.  Images are selected using the left mouse button and 	each image is loaded on a new plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_browse_file_left_event", "grim_browse_file_left_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_browse_file_left_event", "", "statusbaseiid", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_browse_event", "grim_menu_file_browse_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_browse_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_help_event", "grim_menu_file_save_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_help_event", "	Allows user to save the current image plane and geometry.  If there 	is no current filename for the current plane, then the user is 	prompted for one.  All descriptors are written through the translators 	and then dat_write is used to write the data file.  Specific behavior 	is governed by OMINAS' configuration.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_event", "grim_menu_file_save_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_as_help_event", "grim_menu_file_save_as_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_as_help_event", "	Same as 'Save' above, except always prompts for a filename.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_as_event", "grim_menu_file_save_as_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_as_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_open_as_rgb_help_event", "grim_menu_open_as_rgb_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_open_as_rgb_help_event", "	Opens a new grim window with the current channal configuration 	reduced to a 3-channel RGB cube.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2016   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_open_as_rgb_event", "grim_menu_open_as_rgb_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_open_as_rgb_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_user_ptd_help_event", "grim_menu_file_save_user_ptd_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_user_ptd_help_event", "	Writes user points for the current plane to a file called 	[image name].user_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_user_ptd_event", "grim_menu_file_save_user_ptd_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_user_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_all_user_ptd_help_event", "grim_menu_file_save_all_user_ptd_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_all_user_ptd_help_event", "	Writes user points for all planes to files called 	[image name].user_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_all_user_ptd_event", "grim_menu_file_save_all_user_ptd_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_all_user_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_user_ptd_help_event", "grim_menu_file_load_user_ptd_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_user_ptd_help_event", "	loads user points for the current plane from a file called 	[image name].user_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_user_ptd_event", "grim_menu_file_load_user_ptd_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_user_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_all_user_ptd_help_event", "grim_menu_file_load_all_user_ptd_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_all_user_ptd_help_event", "	Loads user points for all planes from files called 	[image name].user_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_all_user_ptd_event", "grim_menu_file_load_all_user_ptd_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_all_user_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_tie_ptd_help_event", "grim_menu_file_save_tie_ptd_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_tie_ptd_help_event", "	Writes tie points for the current plane to a file called 	[image name].tie_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_tie_ptd_event", "grim_menu_file_save_tie_ptd_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_tie_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_all_tie_ptd_help_event", "grim_menu_file_save_all_tie_ptd_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_all_tie_ptd_help_event", "	Writes tie points for all planes to files called 	[image name].tie_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_all_tie_ptd_event", "grim_menu_file_save_all_tie_ptd_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_all_tie_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_tie_ptd_help_event", "grim_menu_file_load_tie_ptd_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_tie_ptd_help_event", "	loads tie points for the current plane from a file called 	[image name].tie_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_tie_ptd_event", "grim_menu_file_load_tie_ptd_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_tie_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_all_tie_ptd_help_event", "grim_menu_file_load_all_tie_ptd_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_all_tie_ptd_help_event", "	Loads tie points for all planes from files called 	[image name].tie_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_all_tie_ptd_event", "grim_menu_file_load_all_tie_ptd_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_all_tie_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_curves_help_event", "grim_menu_file_save_curves_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_curves_help_event", "	Writes curves for the current plane to a file called 	[image name].curve_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2015   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_curves_event", "grim_menu_file_save_curves_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_all_curves_help_event", "grim_menu_file_save_all_curves_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_all_curves_help_event", "	Writes curves for all planes to files called 	[image name].curve_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2015   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_all_curves_event", "grim_menu_file_save_all_curves_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_all_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_curves_help_event", "grim_menu_file_load_curves_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_curves_help_event", "	loads curves for the current plane from a file called 	[image name].curve_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2015   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_curves_event", "grim_menu_file_load_curves_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_all_curves_help_event", "grim_menu_file_load_all_curves_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_all_curves_help_event", "	Loads curves for all planes from files called 	[image name].curve_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2015   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_all_curves_event", "grim_menu_file_load_all_curves_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_all_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_mask_help_event", "grim_menu_file_save_mask_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_mask_help_event", "	Writes mask points for the current plane to a file called 	[image name].mask    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_mask_event", "grim_menu_file_save_mask_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_mask_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_all_masks_help_event", "grim_menu_file_save_all_masks_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_all_masks_help_event", "	Writes mask points for all planes to files called 	[image name].mask    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_all_masks_event", "grim_menu_file_save_all_masks_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_all_masks_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_mask_help_event", "grim_menu_file_load_mask_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_mask_help_event", "	loads mask points for the current plane from a file called 	[image name].mask    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_mask_event", "grim_menu_file_load_mask_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_mask_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_all_masks_help_event", "grim_menu_file_load_all_masks_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_all_masks_help_event", "	Loads mask points for all planes from files called 	[image name].mask    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_load_all_masks_event", "grim_menu_file_load_all_masks_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_load_all_masks_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_ps_help_event", "grim_menu_file_save_ps_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_ps_help_event", "	Saves the current view as a postscript file.    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_save_ps_event", "grim_menu_file_save_ps_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_save_ps_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_repeat_help_event", "grim_menu_repeat_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_repeat_help_event", "	Repeats the last menu option.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2006   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_repeat_event", "grim_menu_repeat_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_repeat_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_undo_help_event", "grim_menu_undo_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_undo_help_event", "	Undoes the last data modification.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2006   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_undo_event", "grim_menu_undo_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_undo_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_redo_help_event", "grim_menu_redo_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_redo_help_event", "	Redoes the last data modification.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2006   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_redo_event", "grim_menu_redo_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_redo_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_select_help_event", "grim_select_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_select_help_event", "	Selects or unselects a grim window.  This functionality is for use 	with functions that require input from more than one grim instance. 	The selected state is red; unselected is gray.    ", "event", "NV/GR OPERATION:	This option toggles a given grim instance between selected	and unselected states for use with functions that require	input from more than one grim instance When a given instance	is selected this button displays an asterisk", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_select_event", "grim_select_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_select_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_identify_help_event", "grim_identify_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_identify_help_event", "	Causes grim to identify itself on the IDL command line.    ", "event", "NV/GR OPERATION:	This option causes grim to print a message on the IDL command line It is useful in cases where multiple grim instances are running in	multiple IDL sessions", " 	Written by:	Spitale, 3/2009   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_identify_event", "grim_identify_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_identify_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_close_help_event", "grim_menu_file_close_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_close_help_event", "	Closes the current image plane.  All other image plane numbers 	remain the same.  If there is only one image plane, the grim exits.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_file_close_event", "grim_menu_file_close_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_file_close_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_next_help_event", "grim_menu_plane_next_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_next_help_event", "	Changes to the next-numbered image plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_next_event", "grim_menu_plane_next_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_next_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_previous_help_event", "grim_menu_plane_previous_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_previous_help_event", "	Changes to the previous-numbered image plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_previous_event", "grim_menu_plane_previous_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_previous_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_jump_help_event", "grim_menu_plane_jump_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_jump_help_event", "	Prompts the user and jumps to a new plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_jump_event", "grim_menu_plane_jump_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_jump_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_browse_help_event", "grim_menu_plane_browse_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_browse_help_event", "	Opens a brim browser showing all planes.  The left mouse button 	may be used to jump among planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_browse_plane_left_event", "grim_browse_plane_left_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_browse_plane_left_event", "", "statusbaseiid", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_browse_refresh_event", "grim_browse_refresh_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_browse_refresh_event", "", "data_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_browse_event", "grim_menu_plane_browse_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_browse_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_open_help_event", "grim_menu_plane_open_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_open_help_event", "	Opens the image of the current plane in a new grim window.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_open_event", "grim_menu_plane_open_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_open_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_evolve_help_event", "grim_menu_plane_evolve_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_evolve_help_event", "	Evolves the selected objects onto all other planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_evolve_event", "grim_menu_plane_evolve_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_evolve_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_crop_help_event", "grim_menu_plane_crop_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_crop_help_event", "	Crops the data to the current viewing parameters.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_crop_event", "grim_menu_plane_crop_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_crop_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_reorder_time_help_event", "grim_menu_plane_reorder_time_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_reorder_time_help_event", "	Rearranges all planes in time order.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_reorder_time_event", "grim_menu_plane_reorder_time_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_reorder_time_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_sequence_help_event", "grim_menu_plane_sequence_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_sequence_help_event", "	Displays all planes in sequence using xinteranimate.  This option is 	useful or blinking as well.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_sequence_event", "grim_menu_plane_sequence_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_sequence_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_dump_help_event", "grim_menu_plane_dump_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_dump_help_event", "	Dumps all planes to png files entitled [filename].png.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_dump_event", "grim_menu_plane_dump_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_dump_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_coregister_help_event", "grim_menu_plane_coregister_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_coregister_help_event", "	Shifts the images on each plane so as to center the active object 	at the same pixel on each plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_coregister_event", "grim_menu_plane_coregister_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_coregister_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_coadd_help_event", "grim_menu_plane_coadd_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_coadd_help_event", "	Averages all planes.  Not implemented.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_coadd_event", "grim_menu_plane_coadd_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_coadd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_toggle_plane_syncing_help_event", "grim_menu_plane_toggle_plane_syncing_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_toggle_plane_syncing_help_event", "	Toggles plane syncing on/off.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2016   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_toggle_plane_syncing_event", "grim_menu_plane_toggle_plane_syncing_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_toggle_plane_syncing_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_highlight_help_event", "grim_menu_plane_highlight_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_highlight_help_event", "	Toggles highlighting of the current plane image.  Useful when 	multiple planes are visible simultaneously.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_highlight_event", "grim_menu_plane_highlight_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_highlight_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_copy_tiepoints_help_event", "grim_menu_plane_copy_tiepoints_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_copy_tiepoints_help_event", "	Copies all tieppoints from the current plane to all other planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_copy_tiepoints_event", "grim_menu_plane_copy_tiepoints_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_copy_tiepoints_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_propagate_tiepoints_help_event", "grim_menu_plane_propagate_tiepoints_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_propagate_tiepoints_help_event", "	Copies all tieppoints from the current plane to all other planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_propagate_tiepoints_event", "grim_menu_plane_propagate_tiepoints_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_propagate_tiepoints_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_toggle_tiepoint_syncing_help_event", "grim_menu_plane_toggle_tiepoint_syncing_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_toggle_tiepoint_syncing_help_event", "	Toggles tiepoint syncing on/off.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_toggle_tiepoint_syncing_event", "grim_menu_plane_toggle_tiepoint_syncing_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_toggle_tiepoint_syncing_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_clear_tiepoints_help_event", "grim_menu_plane_clear_tiepoints_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_clear_tiepoints_help_event", "	Clears all tiepoints from the current plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_clear_tiepoints_event", "grim_menu_plane_clear_tiepoints_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_clear_tiepoints_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_copy_curves_help_event", "grim_menu_plane_copy_curves_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_copy_curves_help_event", "	Copies all curves from the current plane to all other planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_copy_curves_event", "grim_menu_plane_copy_curves_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_copy_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_toggle_curve_syncing_help_event", "grim_menu_plane_toggle_curve_syncing_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_toggle_curve_syncing_help_event", "	Toggles curve syncing on/off.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_toggle_curve_syncing_event", "grim_menu_plane_toggle_curve_syncing_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_toggle_curve_syncing_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_clear_curves_help_event", "grim_menu_plane_clear_curves_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_clear_curves_help_event", "	Clears all curves from the current plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_clear_curves_event", "grim_menu_plane_clear_curves_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_clear_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_copy_mask_help_event", "grim_menu_plane_copy_mask_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_copy_mask_help_event", "	Copies mask from the current plane to all other planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_copy_mask_event", "grim_menu_plane_copy_mask_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_copy_mask_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_clear_mask_help_event", "grim_menu_plane_clear_mask_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_clear_mask_help_event", "	Clears the mask from the current plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_clear_mask_event", "grim_menu_plane_clear_mask_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_clear_mask_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_settings_help_event", "grim_menu_plane_settings_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_settings_help_event", "	Allows the user modify settings for the loaded image planes. 	Each plane may displayed in any combination of the three color 	channels.  Also, a plane may be made visible even when it is not 	the current plane, instead of the default behavior, which is to 	display the plane only whenit is current.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_plane_settings_event", "grim_menu_plane_settings_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_plane_settings_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_data_adjust_help_event", "grim_menu_data_adjust_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_data_adjust_help_event", "	This option allows the user to adjust data values.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2014   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_data_adjust_event", "grim_menu_data_adjust_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_data_adjust_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_refresh_help_event", "grim_menu_view_refresh_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_refresh_help_event", "	Redraws the overlays on the graphics display.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_refresh_event", "grim_menu_view_refresh_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_refresh_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_help_event", "grim_menu_view_zoom_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_help_event", "	Prompts the user for a new zoom factor.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_event", "grim_menu_view_zoom_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_double_help_event", "grim_menu_view_zoom_double_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_double_help_event", "	Doubles the current zoom, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_double_event", "grim_menu_view_zoom_double_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_double_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_half_help_event", "grim_menu_view_zoom_half_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_half_help_event", "	Halves the current zoom, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_half_event", "grim_menu_view_zoom_half_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_half_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_help_event", "grim_menu_view_zoom_1_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_help_event", "	Sets the current zoom to 1, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_event", "grim_menu_view_zoom_1_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_2_help_event", "grim_menu_view_zoom_2_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_2_help_event", "	Sets the current zoom to 2, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_2_event", "grim_menu_view_zoom_2_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_2_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_3_help_event", "grim_menu_view_zoom_3_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_3_help_event", "	Sets the current zoom to 3, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_3_event", "grim_menu_view_zoom_3_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_3_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_4_help_event", "grim_menu_view_zoom_4_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_4_help_event", "	Sets the current zoom to 4, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_4_event", "grim_menu_view_zoom_4_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_4_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_5_help_event", "grim_menu_view_zoom_5_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_5_help_event", "	Sets the current zoom to 5, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_5_event", "grim_menu_view_zoom_5_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_5_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_6_help_event", "grim_menu_view_zoom_6_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_6_help_event", "	Sets the current zoom to 6, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_6_event", "grim_menu_view_zoom_6_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_6_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_7_help_event", "grim_menu_view_zoom_7_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_7_help_event", "	Sets the current zoom to 7, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_7_event", "grim_menu_view_zoom_7_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_7_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_8_help_event", "grim_menu_view_zoom_8_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_8_help_event", "	Sets the current zoom to 8, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_8_event", "grim_menu_view_zoom_8_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_8_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_9_help_event", "grim_menu_view_zoom_9_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_9_help_event", "	Sets the current zoom to 9, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_9_event", "grim_menu_view_zoom_9_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_9_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_10_help_event", "grim_menu_view_zoom_10_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_10_help_event", "	Sets the current zoom to 10, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_10_event", "grim_menu_view_zoom_10_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_10_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_2_help_event", "grim_menu_view_zoom_1_2_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_2_help_event", "	Sets the current zoom to 1/2, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_2_event", "grim_menu_view_zoom_1_2_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_2_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_3_help_event", "grim_menu_view_zoom_1_3_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_3_help_event", "	Sets the current zoom to 1/3, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_3_event", "grim_menu_view_zoom_1_3_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_3_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_4_help_event", "grim_menu_view_zoom_1_4_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_4_help_event", "	Sets the current zoom to 1/4, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_4_event", "grim_menu_view_zoom_1_4_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_4_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_5_help_event", "grim_menu_view_zoom_1_5_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_5_help_event", "	Sets the current zoom to 1/5, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_5_event", "grim_menu_view_zoom_1_5_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_5_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_5_help_event", "grim_menu_view_zoom_1_5_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_5_help_event", "	Sets the current zoom to 1/5, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_5_event", "grim_menu_view_zoom_1_5_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_5_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_6_help_event", "grim_menu_view_zoom_1_6_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_6_help_event", "	Sets the current zoom to 1/6, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_6_event", "grim_menu_view_zoom_1_6_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_6_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_7_help_event", "grim_menu_view_zoom_1_7_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_7_help_event", "	Sets the current zoom to 1/7, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_7_event", "grim_menu_view_zoom_1_7_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_7_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_8_help_event", "grim_menu_view_zoom_1_8_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_8_help_event", "	Sets the current zoom to 1/8, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_8_event", "grim_menu_view_zoom_1_8_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_8_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_9_help_event", "grim_menu_view_zoom_1_9_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_9_help_event", "	Sets the current zoom to 1/9, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_9_event", "grim_menu_view_zoom_1_9_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_9_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_10_help_event", "grim_menu_view_zoom_1_10_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_10_help_event", "	Sets the current zoom to 1/10, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_zoom_1_10_event", "grim_menu_view_zoom_1_10_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_zoom_1_10_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_0_help_event", "grim_menu_view_rotate_0_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_0_help_event", "	Sets the current rotate to 0, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_0_event", "grim_menu_view_rotate_0_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_0_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_1_help_event", "grim_menu_view_rotate_1_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_1_help_event", "	Sets the current rotate to 1, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_1_event", "grim_menu_view_rotate_1_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_1_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_2_help_event", "grim_menu_view_rotate_2_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_2_help_event", "	Sets the current rotate to 2, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_2_event", "grim_menu_view_rotate_2_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_2_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_3_help_event", "grim_menu_view_rotate_3_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_3_help_event", "	Sets the current rotate to 3, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_3_event", "grim_menu_view_rotate_3_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_3_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_4_help_event", "grim_menu_view_rotate_4_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_4_help_event", "	Sets the current rotate to 4, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_4_event", "grim_menu_view_rotate_4_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_4_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_5_help_event", "grim_menu_view_rotate_5_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_5_help_event", "	Sets the current rotate to 5, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_5_event", "grim_menu_view_rotate_5_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_5_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_6_help_event", "grim_menu_view_rotate_6_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_6_help_event", "	Sets the current rotate to 6, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_6_event", "grim_menu_view_rotate_6_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_6_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_7_help_event", "grim_menu_view_rotate_7_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_7_help_event", "	Sets the current rotate to 7, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_rotate_7_event", "grim_menu_view_rotate_7_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_rotate_7_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_recenter_help_event", "grim_menu_view_recenter_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_recenter_help_event", "	Recenters the view at the cursor position.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_recenter_event", "grim_menu_view_recenter_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_recenter_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_apply_help_event", "grim_menu_view_apply_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_apply_help_event", "	Applys the current view to all planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2016   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_apply_event", "grim_menu_view_apply_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_apply_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_home_help_event", "grim_menu_view_home_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_home_help_event", "	Sets the tvim home view settings.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_home_event", "grim_menu_view_home_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_home_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_save_help_event", "grim_menu_view_save_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_save_help_event", "	Saves the current view settings.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_save_event", "grim_menu_view_save_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_save_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_restore_help_event", "grim_menu_view_restore_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_restore_help_event", "	Restores the last-saved view settings.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_restore_event", "grim_menu_view_restore_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_restore_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_previous_help_event", "grim_menu_view_previous_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_previous_help_event", "	Restores the previous view settings.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_previous_event", "grim_menu_view_previous_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_previous_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_entire_help_event", "grim_menu_view_entire_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_entire_help_event", "	Applies the 'entire' display parameters, as given in tvim.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_entire_event", "grim_menu_view_entire_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_entire_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_initial_help_event", "grim_menu_view_initial_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_initial_help_event", "	Reverts to the initial view parameters for this grim widget.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2007   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_initial_event", "grim_menu_view_initial_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_initial_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_flip_help_event", "grim_menu_view_flip_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_flip_help_event", "	Reverses the curent display order.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_flip_event", "grim_menu_view_flip_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_flip_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_frame_help_event", "grim_menu_view_frame_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_frame_help_event", "	Modifies view settings so as to display the either all overlays 	or those that are active.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2007   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_frame_event", "grim_menu_view_frame_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_frame_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_header_help_event", "grim_menu_view_header_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_header_help_event", "	Opens a text window showing the image header.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_header_event", "grim_menu_view_header_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_header_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_notes_help_event", "grim_menu_notes_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_notes_help_event", "	Opens a text window allowing the user to enter notes for each plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_notes_event", "grim_menu_notes_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_notes_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_image_help_event", "grim_menu_image_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_image_help_event", "	Toggles the image On/Off.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_toggle_image_event", "grim_menu_toggle_image_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_toggle_image_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_image_overlays_help_event", "grim_menu_image_overlays_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_image_overlays_help_event", "	Toggles the image and overlays On/Off.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_toggle_image_overlays_event", "grim_menu_toggle_image_overlays_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_toggle_image_overlays_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_context_help_event", "grim_menu_context_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_context_help_event", "	Toggles the context window On/Off.   ", "event", "NV/GR", " 	Written by:	Spitale, 9/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_context_event", "grim_menu_context_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_context_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_axes_help_event", "grim_menu_axes_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_axes_help_event", "	Toggles the axes window On/Off.  The colors are as follows:  	 Blue	- Inertial axes. 	 Red	- Camera axes. 	 Green	- Direction to primary planet, not foreshortened. 	 Yellow	- Direction to Sun, not foreshortened.  	Vectors pointing away from the camera are dotted.  The vectors are 	rooted at a point 1d5 distance units in front of the camera . 	In the direction corresponding to the image position of the drawn 	axes.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_axes_event", "grim_menu_axes_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_axes_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_render_help_event", "grim_menu_render_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_render_help_event", "	Renders the visible scene and places it in a new plane unless 	the current plane is already rendering.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2015   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_render_event", "grim_menu_render_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_render_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_colors_help_event", "grim_menu_view_colors_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_colors_help_event", "	Opens grim_colortool.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_view_colors_event", "grim_menu_view_colors_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_view_colors_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_planet_centers_help_event", "grim_menu_points_planet_centers_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_planet_centers_help_event", "	Obtains the necessary descriptors through the translators and computes 	planet center positions using pg_center for all active objects.  If no 	active objects, then all centers are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_planet_centers_event", "grim_menu_points_planet_centers_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_planet_centers_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_limbs_help_event", "grim_menu_points_limbs_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_limbs_help_event", "	Obtains the necessary descriptors through the translators and computes 	limbs using pg_limbs for all active objects.  If no active objects, 	then all limbs are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_limbs_event", "grim_menu_points_limbs_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_limbs_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_terminators_help_event", "grim_menu_points_terminators_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_terminators_help_event", "	Obtains the necessary descriptors through the translators and computes 	terminators using pg_limb with the sun as the observer for all active 	objects.  If no active objects, then all terminators are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_terminators_event", "grim_menu_points_terminators_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_terminators_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_planet_grids_help_event", "grim_menu_points_planet_grids_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_planet_grids_help_event", "	Obtains the necessary descriptors through the translators and computes 	planet grids using pg_grid for all active objects.  If no active 	objects, then all grids are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_planet_grids_event", "grim_menu_points_planet_grids_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_planet_grids_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_rings_help_event", "grim_menu_points_rings_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_rings_help_event", "	Obtains the necessary descriptors through the translators and computes 	ring outlines using pg_disk.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_rings_event", "grim_menu_points_rings_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_rings_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_ring_grids_help_event", "grim_menu_points_ring_grids_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_ring_grids_help_event", "	Obtains the necessary descriptors through the translators and computes 	ring grids using pg_grid for all active objects.  If no active 	objects, then all grids are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_ring_grids_event", "grim_menu_points_ring_grids_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_ring_grids_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_stations_help_event", "grim_menu_points_stations_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_stations_help_event", "	Obtains the necessary descriptors through the translators and computes 	planet stations for all active objects.  If no active objects, then 	all stations are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2009   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_stations_event", "grim_menu_points_stations_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_stations_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_arrays_help_event", "grim_menu_points_arrays_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_arrays_help_event", "	Obtains the necessary descriptors through the translators and computes 	arrays for all active objects.  If no active objects, then 	all arrays are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_arrays_event", "grim_menu_points_arrays_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_arrays_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_stars_help_event", "grim_menu_points_stars_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_stars_help_event", "	Obtains the necessary descriptors through the translators and computes 	star positions using pg_center.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_stars_event", "grim_menu_points_stars_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_stars_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_shadows_help_event", "grim_menu_points_shadows_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_shadows_help_event", "	Obtains the necessary descriptors through the translators and computes 	shadows of the currently active overlay points on all other objects. 	Note that you may have to disable overlay hiding in order to compute 	and activate all of the appropriate source points for the shadows 	since many point that are not visible to the observer may still have 	a line of sight to the sun.    ", "event", "NV/GR", " 	Written by:	Spitale, 1/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_shadows_event", "grim_menu_points_shadows_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_shadows_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_reflections_help_event", "grim_menu_points_reflections_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_reflections_help_event", "	Obtains the necessary descriptors through the translators and computes 	reflections of the currently active overlay points on all other objects. 	Note that you may have to disable overlay hiding in order to compute 	and activate all of the appropriate source points for the reflections 	since many point that are not visible to the observer may still have 	a line of sight to the sun.    ", "event", "NV/GR", " 	Written by:	Spitale, 1/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_reflections_event", "grim_menu_points_reflections_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_reflections_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_hide_all_help_event", "grim_menu_hide_all_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_hide_all_help_event", "	 Hides/unhides all overlay objects.    ", "event", "NV/GR", " 	Written by:	Spitale, 1/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_hide_all_event", "grim_menu_hide_all_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_hide_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_clear_all_help_event", "grim_menu_clear_all_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_clear_all_help_event", "	 Clears all objects.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_clear_all_event", "grim_menu_clear_all_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_clear_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_clear_active_help_event", "grim_menu_clear_active_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_clear_active_help_event", "	 Clears all active objects.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_clear_active_event", "grim_menu_clear_active_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_clear_active_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_activate_all_help_event", "grim_menu_activate_all_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_activate_all_help_event", "	 Activates all objects.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_activate_all_event", "grim_menu_activate_all_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_activate_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_deactivate_all_help_event", "grim_menu_deactivate_all_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_deactivate_all_help_event", "	 Deactivates all objects.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_deactivate_all_event", "grim_menu_deactivate_all_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_deactivate_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_invert_all_help_event", "grim_menu_invert_all_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_invert_all_help_event", "	 Inverts current overlay activations.  Desccriptor activations are 	 determined by the resulting overlay activations.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_invert_event", "grim_menu_invert_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_invert_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_settings_help_event", "grim_menu_points_settings_help_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_settings_help_event", "	Allows the user modify settings relevant to the overlay points.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_points_settings_event", "grim_menu_points_settings_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_points_settings_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_previous_event", "grim_previous_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_previous_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_jumpto_event", "grim_jumpto_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_jumpto_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_next_event", "grim_next_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_next_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_crop_event", "grim_crop_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_crop_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_refresh_event", "grim_refresh_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_refresh_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_entire_event", "grim_entire_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_entire_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_view_previous_event", "grim_view_previous_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_view_previous_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_colors_event", "grim_colors_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_colors_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_settings_event", "grim_settings_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_settings_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_header_event", "grim_header_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_header_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_notes_event", "grim_notes_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_notes_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_undo_event", "grim_undo_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_undo_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_redo_event", "grim_redo_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_redo_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_toggle_image_event", "grim_toggle_image_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_toggle_image_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_toggle_image_overlays_event", "grim_toggle_image_overlays_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_toggle_image_overlays_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_hide_event", "grim_hide_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_hide_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_tracking_event", "grim_tracking_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_tracking_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_grid_event", "grim_grid_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_grid_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_pixel_grid_event", "grim_pixel_grid_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_pixel_grid_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_guideline_event", "grim_guideline_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_guideline_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_context_event", "grim_context_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_context_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_axes_event", "grim_axes_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_axes_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_render_event", "grim_render_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_render_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_activate_all_event", "grim_activate_all_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_activate_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_deactivate_all_event", "grim_deactivate_all_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_deactivate_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_repeat_event", "grim_repeat_event", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_repeat_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_help", "grim_help", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_help", "", "grim_datatext", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_create_help_menu", "grim_create_help_menu", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_create_help_menu", "", "_menu_desc", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_cull_menu_desc", "grim_cull_menu_desc", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_cull_menu_desc", "", "map_itemsmap_indicesod_map_itemsod_map_indicesplot_itemsplot_indicesplot_only_itemsplot_only_indicesbeta_only_indices_menu_descplotmapbeta", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_parse_menu_desc", "grim_parse_menu_desc", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_parse_menu_desc", "", "map_itemsmap_indicesod_map_itemsod_map_indicesplot_itemsplot_indicesplot_only_itemsplot_only_indicesbeta_only_indices_menu_desc", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_desc", "grim_menu_desc", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_desc", "", "cursor_modes", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_get_window_size", "grim_get_window_size", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_get_window_size", "", "xsizeysizegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_menu_capture", "grim_menu_capture", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_menu_capture", "", "fnevent", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_widgets", "grim_widgets", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_widgets", "", "xsizeysizecursor_modesmenu_fnamemenu_extensionsgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_get_default_zoom", "grim_get_default_zoom", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_get_default_zoom", "", "dd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_save_initial_view", "grim_save_initial_view", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_save_initial_view", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_initial_framing", "grim_initial_framing", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_initial_framing", "", "delay_overlaysgrim_dataframe", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_initial_overlays", "grim_initial_overlays", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_initial_overlays", "", "planeexcludeonlytempptdgrim_data_overlays", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_rgb_dim_fn", "grim_rgb_dim_fn", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_rgb_dim_fn", "", "dddat", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_get_arg", "grim_get_arg", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_get_arg", "", "ddgrnumextensionsarg", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_get_args", "grim_get_args", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_get_args", "", "ddgrnumtypexzeronhistmaintaincompressextensionsrgbarg1arg2", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim_create_cursor_mode", "grim_create_cursor_mode", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim_create_cursor_mode", "", "no_prefixnamemode_argscursor_modes", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim.html#grim", "grim", 'routine in <a href="grim/grim.html">grim.pro</a>', "grim.pro", "", "grim", "", "gd_extracdpdrdsdstdardsundodnewxsizeysizedefaultpreviousrestoreactivatedoffsetno_erasefilterrgbvisibilitychannelexitzoomrotateorderoffsetretainmaintainmode_initmodalxzeroframerefresh_callbacksrefresh_callback_data_psplane_callbacksplane_callback_data_psnhistcompresspathsymsizeuser_psymworkdirmode_argssave_pathload_pathoverlayspnmenu_fnamecursor_swapfovcliphidemenu_extensionsbutton_extensionsarg_extensionsloadctmaxgrnumextensionsbetarenderingnpointscam_trsplt_trsrng_trsstr_trssun_trsstn_trsarr_trsassoc_ddplane_syncingtiepoint_syncingcurve_syncingrender_samplerender_pht_minslave_overlayspositiondelay_overlaysauto_stretchcolorxrangeyrangethicknsumnddxtitleytitlepsymtitlearg1arg2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim2.html", "grim2.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim2.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim2.html#grim2", "grim2", 'routine in <a href="grim/grim2.html">grim2.pro</a>', "grim2.pro", "", "grim2", "", "gd_extracdpdrdsdstdardsundodnewxsizeysizedefaultpreviousrestoreactivatedoffsetno_erasefilterrgbvisibilitychannelexitzoomrotateorderoffsetretainmaintainmode_initmodalxzeroframerefresh_callbacksrefresh_callback_data_psplane_callbacksplane_callback_data_psnhistcompresspathsymsizeuser_psymworkdirmode_argssave_pathload_pathoverlayspnmenu_fnamecursor_swapfovcliphidemenu_extensionsbutton_extensionsarg_extensionsloadctmaxgrnumextensionsbetarenderingnpointscam_trsplt_trsrng_trsstr_trssun_trsstn_trsarr_trsassoc_ddplane_syncingtiepoint_syncingcurve_syncingrender_samplerender_pht_minslave_overlayspositiondelay_overlayscolorxrangeyrangethicknsumnddxtitleytitlepsymtitlearg1arg2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html", "grim_bitmaps_include.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_bitmaps_include.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_identify_bitmap", "grim_identify_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_identify_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_rotate_bitmap", "grim_rotate_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_rotate_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_reorient_bitmap", "grim_reorient_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_reorient_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_mp40_bitmap", "grim_mp40_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_mp40_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_dagger_bitmap", "grim_dagger_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_dagger_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_crop_bitmap", "grim_crop_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_crop_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_redo_bitmap", "grim_redo_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_redo_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_undo_bitmap", "grim_undo_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_undo_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_notes_bitmap", "grim_notes_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_notes_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_remove1_bitmap", "grim_remove1_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_remove1_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_remove2_bitmap", "grim_remove2_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_remove2_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_repeat_bitmap", "grim_repeat_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_repeat_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_unselect_bitmap", "grim_unselect_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_unselect_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_select_bitmap", "grim_select_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_select_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_context_bitmap", "grim_context_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_context_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_previous_bitmap", "grim_previous_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_previous_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_next_bitmap", "grim_next_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_next_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_mag_bitmap", "grim_mag_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_mag_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_refresh_bitmap", "grim_refresh_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_refresh_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_entire_bitmap", "grim_entire_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_entire_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_view_previous_bitmap", "grim_view_previous_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_view_previous_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_hide_bitmap", "grim_hide_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_hide_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_unhide_bitmap", "grim_unhide_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_unhide_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_colors_bitmap", "grim_colors_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_colors_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_tracking_bitmap", "grim_tracking_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_tracking_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_activate_all_bitmap", "grim_activate_all_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_activate_all_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_deactivate_all_bitmap", "grim_deactivate_all_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_deactivate_all_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_grid_bitmap", "grim_grid_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_grid_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_header_bitmap", "grim_header_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_header_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_axes_bitmap", "grim_axes_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_axes_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_unhide_image_bitmap", "grim_unhide_image_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_unhide_image_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_hide_image_bitmap", "grim_hide_image_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_hide_image_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_unrender_bitmap", "grim_unrender_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_unrender_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_render_bitmap", "grim_render_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_render_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_settings_bitmap", "grim_settings_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_settings_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_pixel_grid_bitmap", "grim_pixel_grid_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_pixel_grid_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_guideline_bitmap", "grim_guideline_bitmap", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_guideline_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_bitmaps_include.html#grim_bitmaps_include", "grim_bitmaps_include", 'routine in <a href="grim/grim_bitmaps_include.html">grim_bitmaps_include.pro</a>', "grim_bitmaps_include.pro", "", "grim_bitmaps_include", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_colortool.html", "grim_colortool.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_colortool.pro", "", "", "	Tool for adjusting colors in GRIM.    ", "", "          -1", " 	Written by:	Spitale   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grct_slider_to_gamma", "grct_slider_to_gamma", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grct_slider_to_gamma", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grct_gamma_to_slider", "grct_gamma_to_slider", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grct_gamma_to_slider", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grct_print_gamma", "grct_print_gamma", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grct_print_gamma", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grct_widget_to_descriptor", "grct_widget_to_descriptor", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grct_widget_to_descriptor", "", "datacmd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grct_descriptor_to_widget", "grct_descriptor_to_widget", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grct_descriptor_to_widget", "", "noslidedatacmd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grct_plot", "grct_plot", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grct_plot", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grct_cleanup", "grct_cleanup", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grct_cleanup", "", "base", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grct_update", "grct_update", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grct_update", "", "allautocmd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grim_colortool_event", "grim_colortool_event", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grim_colortool_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grim_colortool_change", "grim_colortool_change", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grim_colortool_change", "", "base", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grct_primary_notify", "grct_primary_notify", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grct_primary_notify", "", "data_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_colortool.html#grim_colortool", "grim_colortool", 'routine in <a href="grim/grim_colortool.html">grim_colortool.pro</a>', "grim_colortool.pro", "", "grim_colortool", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_compile.html", "grim_compile.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_compile.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_compile.html#grim_compile", "grim_compile", 'routine in <a href="grim/grim_compile.html">grim_compile.pro</a>', "grim_compile.pro", "", "grim_compile", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_compute_include.html", "grim_compute_include.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_compute_include.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_planet_center", "grim_compute_planet_center", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_planet_center", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_planet_center", "grim_symsize_planet_center", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_planet_center", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_planet_center", "grim_shade_planet_center", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_planet_center", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_limb", "grim_compute_limb", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_limb", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_limb", "grim_symsize_limb", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_limb", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_limb", "grim_shade_limb", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_limb", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_terminator", "grim_compute_terminator", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_terminator", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_terminator", "grim_symsize_terminator", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_terminator", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_terminator", "grim_shade_terminator", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_terminator", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_planet_grid", "grim_compute_planet_grid", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_planet_grid", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_planet_grid", "grim_symsize_planet_grid", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_planet_grid", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_planet_grid", "grim_shade_planet_grid", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_planet_grid", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_station", "grim_compute_station", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_station", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_station", "grim_symsize_station", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_station", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_station", "grim_shade_station", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_station", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_array", "grim_compute_array", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_array", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_array", "grim_symsize_array", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_array", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_array", "grim_shade_array", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_array", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_star", "grim_compute_star", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_star", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_star", "grim_symsize_star", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_star", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_star", "grim_shade_star", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_star", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_shadow", "grim_compute_shadow", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_shadow", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_shadow", "grim_symsize_shadow", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_shadow", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_shadow", "grim_shade_shadow", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_shadow", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_reflection", "grim_compute_reflection", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_reflection", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_reflection", "grim_symsize_reflection", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_reflection", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_reflection", "grim_shade_reflection", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_reflection", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_ring", "grim_compute_ring", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_ring", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_ring", "grim_symsize_ring", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_ring", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_ring", "grim_shade_ring", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_ring", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_ring_grid", "grim_compute_ring_grid", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_ring_grid", "", "mapcliphidegdactive_xdsactive_ptddatanpoints", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_symsize_ring_grid", "grim_symsize_ring_grid", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_symsize_ring_grid", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_shade_ring_grid", "grim_shade_ring_grid", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_shade_ring_grid", "", "dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_compute_include.html#grim_compute_include", "grim_compute_include", 'routine in <a href="grim/grim_compute_include.html">grim_compute_include.pro</a>', "grim_compute_include.pro", "", "grim_compute_include", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_data_include.html", "grim_data_include.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_data_include.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_blank", "grim_blank", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_blank", "", "xsizeysize", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_init", "grim_init", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_init", "", "dd0zoomwnumgrnumfilterretainuser_callbacksuser_psymuser_graphics_fnuser_thickuser_linecursor_swapcmdpathsave_pathload_pathfovclipcam_trsplt_trsrng_trsstr_trsstn_trsarr_trssun_trshidetypecam_selectplt_selectrng_selectsun_selectstr_selectstn_selectarr_selectcolorxrangeyrangepositionnpointsthicknsumxtitleytitlepsymcursor_modessymsizenhistmaintainworkdircompressextensionsmaxbetavisibilitychanneltitleslave_overlaysrender_samplerender_pht_minoverlaysactivatedd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_exists", "grim_exists", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_exists", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_grnum_to_top", "grim_grnum_to_top", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_grnum_to_top", "", "grnum", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_get_data", "grim_get_data", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_get_data", "", "grnumplanedeadprimaryno_wsettop", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_set_data", "grim_set_data", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_set_data", "", "primarygrim_datatop", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_set_primary", "grim_set_primary", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_set_primary", "", "top", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_set_mode_data", "grim_set_mode_data", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_set_mode_data", "", "grim_datadata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_add_primary_callback", "grim_add_primary_callback", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_add_primary_callback", "", "callbacksdata_ps", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_rm_primary_callback", "grim_rm_primary_callback", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_rm_primary_callback", "", "data_ps", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_call_primary_callbacks", "grim_call_primary_callbacks", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_call_primary_callbacks", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_add_plane_callback", "grim_add_plane_callback", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_add_plane_callback", "", "topno_wsetcallbacksdata_ps", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_rm_plane_callback", "grim_rm_plane_callback", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_rm_plane_callback", "", "topdata_ps", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_call_plane_callbacks", "grim_call_plane_callbacks", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_call_plane_callbacks", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_get_selected", "grim_get_selected", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_get_selected", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_select", "grim_select", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_select", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_identify", "grim_identify", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_identify", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_grnum_create", "grim_grnum_create", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_grnum_create", "", "top", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_grnum_destroy", "grim_grnum_destroy", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_grnum_destroy", "", "grnum", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_top_to_grnum", "grim_top_to_grnum", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_top_to_grnum", "", "newtop", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_jump_to_plane", "grim_jump_to_plane", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_jump_to_plane", "", "validnosyncgrim_datapn", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_sync_planes", "grim_sync_planes", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_sync_planes", "", "norefreshgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_data_include.html#grim_data_include", "grim_data_include", 'routine in <a href="grim/grim_data_include.html">grim_data_include.pro</a>', "grim_data_include.pro", "", "grim_data_include", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_default_menus.html", "grim_default_menus.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_default_menus.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_core_help_event", "grim_menu_core_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_core_help_event", "	This option allows you extract a brightness profile at the selected 	location for each plane in the image.  The left button selects a single 	point, and the right button selects a region to average over.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2016   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_core_event", "grim_menu_core_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_core_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_image_profile_help_event", "grim_menu_image_profile_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_image_profile_help_event", "	This option allows you extract a brightness profile in an arbitrary 	direction in the image.  The left button selects the region's length 	and then width; the right button selects a region with a width of 	one-pixel.    ", "event", "NV/GR", " 	Written by:	Spitale, 6/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_image_profile_event", "grim_menu_image_profile_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_image_profile_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_ring_box_profile_radial_help_event", "grim_menu_ring_box_profile_radial_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_ring_box_profile_radial_help_event", "  This option allows you create a radial brightness profile from a   rectangular image region.     1) Activate the ring from which you wish to extract the profile.     2) Select this option and use the mouse to outline a ring sector:    ", "event", "NV/GR", " 	Written by:	Spitale, 6/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_ring_box_profile_radial_event", "grim_menu_ring_box_profile_radial_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_ring_box_profile_radial_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_ring_box_profile_longitudinal_help_event", "grim_menu_ring_box_profile_longitudinal_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_ring_box_profile_longitudinal_help_event", "  This option allows you create a longitudinal brightness profile from a   rectangular image region.      1) Activate the ring from which you wish to extract the profile.      2) Select this option and use the mouse to outline a ring sector.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_ring_box_profile_longitudinal_event", "grim_menu_ring_box_profile_longitudinal_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_ring_box_profile_longitudinal_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_ring_profile_radial_help_event", "grim_menu_ring_profile_radial_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_ring_profile_radial_help_event", "  This option allows you create a radial brightness profile.     1) Activate the ring from which you wish to extract the profile.     2) Select this option and use the mouse to outline a ring sector:        Left Button:   the sector is bounded by lines of constant                      longitude.', $       Middle Button: the sector is selected in an arbitrary direction.       Left Button:   the sector is bounded by lines perpendicular to                      the projected longitudinal direction.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_ring_profile_radial_event", "grim_menu_ring_profile_radial_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_ring_profile_radial_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_ring_profile_longitudinal_help_event", "grim_menu_ring_profile_longitudinal_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_ring_profile_longitudinal_help_event", "  This option allows you create a longitudinal brightness profile.      1) Activate the ring from which you wish to extract the profile.      2) Select this option and use the mouse to outline a ring sector.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_ring_profile_longitudinal_event", "grim_menu_ring_profile_longitudinal_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_ring_profile_longitudinal_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_limb_profile_azimuthal_help_event", "grim_menu_limb_profile_azimuthal_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_limb_profile_azimuthal_help_event", "  This option allows you create an azimutal brightness profile about a limb.      1) Activate the planet from which you wish to extract the profile.      2) Select this option and use the mouse to outline a sector.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2006   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_limb_profile_azimuthal_event", "grim_menu_limb_profile_azimuthal_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_limb_profile_azimuthal_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_limb_profile_radial_help_event", "grim_menu_limb_profile_radial_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_limb_profile_radial_help_event", "  This option allows you create radial brightness profile across a limb.      1) Activate the planet from which you wish to extract the profile.      2) Select this option and use the mouse to outline a sector.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2006   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_limb_profile_radial_event", "grim_menu_limb_profile_radial_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_limb_profile_radial_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_pointing_manual_help_event", "grim_menu_pointing_manual_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_pointing_manual_help_event", "   This option allows you to change the pointing manually using pg_drag.      1) Activate the points that you wish to drag.      2) Select this option and use the left button to translate your        points, the middle button to rotate them, and the right button        to accept the change and correct the pointing.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_pointing_manual_event", "grim_menu_pointing_manual_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_pointing_manual_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_pointing_farfit_help_event", "grim_menu_pointing_farfit_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_pointing_farfit_help_event", "   This option produces a rough pointing correction by comparing the    active points with edges detected in the image using pg_edges and    pg_farfit.      1) Activate the edges that you wish to correlate.      2) Select this option.     Only active limbs, terminators, and ring edges are used.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_pointing_farfit_event", "grim_menu_pointing_farfit_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_pointing_farfit_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_pointing_renderfit_help_event", "grim_menu_pointing_renderfit_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_pointing_renderfit_help_event", "   This option uses pg_renderfit to produce a pointing correction by comparing    the image with a simulated image.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2017   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_pointing_renderfit_event", "grim_menu_pointing_renderfit_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_pointing_renderfit_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_pointing_lsq_help_event", "grim_menu_pointing_lsq_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_pointing_lsq_help_event", "	Opens a gr_lsqtool widget.  Using the current data, camera, active 	planet, and active ring descriptors.  See gr_lsqtool.pro for details.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_pointing_lsq_event", "grim_menu_pointing_lsq_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_pointing_lsq_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_get_shift_step", "grim_get_shift_step", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_get_shift_step", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_reposition", "grim_reposition", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_reposition", "", "cdgrim_dataplaneshift", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_toggle_reorigin_event_help_event", "grim_menu_toggle_reorigin_event_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_toggle_reorigin_event_help_event", "   This option allows the user to set whether geometry descriptors are    updated whenever the data array is shifted.    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2016   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_toggle_reorigin_event", "grim_menu_toggle_reorigin_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_toggle_reorigin_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_enter_step_event_help_event", "grim_menu_shift_enter_step_event_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_enter_step_event_help_event", "   This option prompts the user to enter the step size for the image-shift    menu options.    ", "event", "NV/GR", " 	Written by:	Spitale, 1/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_enter_step_event", "grim_menu_shift_enter_step_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_enter_step_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_enter_offset_event_help_event", "grim_menu_shift_enter_offset_event_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_enter_offset_event_help_event", "   This option prompts the user to shift an image by entering an offset.    ", "event", "NV/GR", " 	Written by:	Spitale, 1/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_enter_offset_event", "grim_menu_shift_enter_offset_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_enter_offset_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_left_help_event", "grim_menu_shift_left_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_left_help_event", "   This option shifts the image left and corrects the camera pointing    accordingly.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_left_event", "grim_menu_shift_left_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_left_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_right_help_event", "grim_menu_shift_right_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_right_help_event", "   This option shifts the image right and corrects the camera pointing    accordingly.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_right_event", "grim_menu_shift_right_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_right_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_up_help_event", "grim_menu_shift_up_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_up_help_event", "   This option shifts the image up and corrects the camera pointing    accordingly.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_up_event", "grim_menu_shift_up_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_up_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_down_help_event", "grim_menu_shift_down_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_down_help_event", "   This option shifts the image down and corrects the camera pointing    accordingly.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_shift_down_event", "grim_menu_shift_down_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_shift_down_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_corrections_photometry_help_event", "grim_menu_corrections_photometry_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_corrections_photometry_help_event", "	Opens a gr_phttool widget.  Using the primary data, camera, planet, and 	ring descriptors.  See gr_phttool.pro for details.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_corrections_photometry_event", "grim_menu_corrections_photometry_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_corrections_photometry_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_project_map_help_event", "grim_menu_project_map_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_project_map_help_event", "	Opens a gr_maptool widget.  Using the primary data, camera, planet, and 	ring descriptors.  See gr_maptool.pro for details.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_project_map_event", "grim_menu_project_map_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_project_map_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_mosaic_help_event", "grim_menu_mosaic_help_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_mosaic_help_event", "	Uses pg_mosaic to combine all visible image planes into a mosaic. 	The new mosiac is opened in a new grim instance.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_mosaic_event", "grim_menu_mosaic_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_mosaic_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_menu_read_mind_event", "grim_menu_read_mind_event", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_menu_read_mind_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_default_menus_init", "grim_default_menus_init", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_default_menus_init", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_default_menus.html#grim_default_menus", "grim_default_menus", 'routine in <a href="grim/grim_default_menus.html">grim_default_menus.pro</a>', "grim_default_menus.pro", "", "grim_default_menus", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_deps.html", "grim_deps.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_deps.pro", "", "", "	General-purpose GRaphical Interface for oMinas.    	Grim operates directly on the memory images of the descriptors that 	it is given.  Therefore, those descriptors are modified during 	a session.  This architecture allows data to be operated on concurrently 	through grim and from the command line; see ingrid.pro for details.    LAYOUT: 	The philosphy that drives GRIM's layout is that the maximum possible 	screen space should be devoted to displaying the data.  This policy 	allows for many GRIM windows to be used simultaneously without being 	obscured by crazy control panels full of buttons, gadgets, widgets, 	doodads, whirly-gigs, and what-nots.  The grim layout consists of the 	following items:  	 Title bar: 		The title bar displays the grim window number (grnum), 		the current plane number (pn), the total number of planes, the 		name field of the data descriptor for the current plane, the 		default title (if given; see the title keyword above), and 		a string indicating which RGB channels are associated with the 		current plane.  	 Menu bar: 		Most of grim's functionality is accessed through the 		system of pulldown menus at the top.  Individual menu 		items are described in their own sections.  	 Shortcut buttons: 		Some commonly used menu options are duplicated as shortcut 		buttons arranged horizontally just beneath the menu bar.  The 		function of each button is displayed in the status bar (see 		below) when the mouse cursor is hovered ove the button.  	 Cursor mode buttons: 		Cursor mode shortcut buttons are arranged vertically along the 		left side of the GRIM window, and as provided as shortcuts 		for the corresponding options in the Mode menu.  The following 		modes are available:  		Activate: 			In activate mode, overlay objects may be activated 			or deactivated by clicking and/or dragging using the 			left or right mouse buttons respectively.  This 			activation mechanism allows the user to select which 			among a certain type of objects should be used in a 			given menu selection.  A left click on an overlay 			activates that overlay and a right click deactivates 			it.  A double click activates or deactivates all 			overlays associated with a given descriptor, or all 			stars.  Active overlays appear in the colors selected 			in the 'Overlay Settings' menu selection.  Inactive 			overlays appear in cyan.  A descriptor is active 			whenever any of its overlays are active.  		Zoom:	The zoom button puts grim in a zoom cursor mode, wherein 			the image zoom and offset are controlled by selecting 			a box in the image.  When the box is created using the 			left mouse button, zoom and offset are changed so that 			the contents of the box best fill the current graphics 			window.  When the right button is used, the contents of 			the current graphics window are shrunken so as to best 			fill the box.  In other words, the left button zooms in 			and the right button zooms out.  		Pan: 	The pan button puts grim in a pan cursor mode, wherein the 			image offset is controlled by selecting an offset vector 			using the left mouse button.  The middle button may be 			used to center the image on a selected point.  		Pixel Readout: 			In pixel readout mode, a text window appears 			and displays data about the pixel selected 			using the left mouse button.  		Tiepoint: 			In tiepoint mode, tiepoints are added using the 			left mouse button and deleted using the right button. 			Tiepoints appear as crosses identified by numbers. 			The use of tiepoints is determined by the particular 			option selected by the user.  		Curve: 			In curve mode, curves are added using the 			left mouse button and deleted using the right button. 			Curves appear as red lines identified by numbers at 			each end.  The use of curves is determined by the 			particular option selected by the user.  		Mask: 			GRIM maintains a mask for each plane whose use is 			appication-dependent.  Mask mode allows pixels in the 			mask to be toggled on and off.  		Magnify: 			In magnify mode, image pixels in the graphics 			window may be magnifed using either the right or left 			mouse buttons.  The left button magnifies the displayed 			pixels, directly from the graphics window.  The right 			button magnifies the data itself, without the overlays.  		XY Zoom: 			Same as 'zoom' above, except the aspect ratio is 			set by the proportions of the selected box.  		Remove overlays: 			Allows the user to remove overlay arrays.  		Trim overlays: 			Allows the user to trim points from overlay arrays.  		Select within overlays: 			Allows the user to select points within overlay arrays.  		Define Region: 			Allows the user to define GRIM's region of interest.  		Smooth: 			Allows the user to select a smoothing box to be applied 			to the data array.  		Select Plane: 			Allows the user to change planes using the pointer. 			This option is only useful in cases where multiple 			planes are displayed.  		Drag Image: 			Allows the user to reposition the current plane by 			clicking and dragging.  		Navigate: 			Allows the user to modify the camera position and 			orientation usng the mouse.   	 Graphics window: 		The graphics window displays the data associated with the 		given data descriptor using the current zoom, offset, and 		display order.  The edges of an image are indicated by a dotted 		line.  The camera optic axis is indicated by a large red cross.  	 Pixel readout: 		The cursor position and corresponding data value are are 		displayed beneath the graphics window, next to the message line.  	 Message line: 		The message line displays short messages pertaining GRIM's 		 current state, or displayng button functions.   CALLBACK PROCEDURES: 	GRIM callback procedures are called with one or two arguments:        the first argument is a pointer to data that was provided 	when the callback was added.  The second argument, if present, depends 	on the applicatation.    RESOURCE NAMES 	The following X-windows resource names apply to grim: 	 grim_base:		top level base 	 grim_mbar:		menu bar 	 grim_shortcuts_base:	base containing shortcut buttons 	 grim_modes_base:	base containing modes buttons 	 grim_draw:		grim draw widget 	 grim_label:		grim bottom label widget  	To turn off the confusing higlight box around the modes buttons, 	put the following line in your ~/.Xdefaults file:  	 Idl*grim_modes_base*highlightThickness:	0    OPERATION: 	GRIM displays 1-, 2-, and 3-dimensional data sets.  1-dimensional 	data arrays are displayed as plots.  In that case, the abscissa is 	the sample number unless the data descriptor contains an abscissa. 	2- and 3-dimensional arrays are displaye as image planes.  The only 	difference between images and cubes in GRIM is that images planes 	each have their own data descriptor, while cubes are represented by 	multiple image planes that share a common data descriptor; each plane 	in a cube corresponds to a unique offset in the data array stored in 	the common data descriptor.  Some functionality is not available when 	working with plots.  In that case, those options do not appear in the 	menus.  	GRIM requests only the data samples needed for the current viewing 	parameters.  Therefore, GRIM can display data sets of arbitrary size 	when used with a file reader that supports subsampling.  However, note 	that specific menu options may request the entire data array, depending 	on the application.  	Each GRIM window may contain any number of planes as well as 	associated geometric data (i.e. object descriptors) and overlay arrays 	for displaying various geometric objects -- limbs, rings, stars, etc. 	An array of user overlay points is maintained to be used for application- 	specific purposes.  Generally, a set of overlay points or a descriptor 	must be activated in order to be used as input to a menu item; see 	activate mode above.  	There are exclusive and non-exclusive mechanisms for selecting grim 	windows.  Grim windows may be non-exclusively selected using the select 	mode button mentioned above (upper-left corner).  The exclusive 	selection mechanism consists of a  primary  GRIM window, indicated by 	a red outline in the graphics window.  The primary selection is 	changed by pressing any mode or shortcut button, or by clicking in 	the graphics area of the desired grim window.  The meaning of the 	various selections depends on the application.  	The functions of the left and right mouse buttons are determined by the 	cursor mode; some cursor modes define modifier keys to broaden the number 	of functions available in that mode.  The middle mouse button toggles 	the activation state of overlay arrays, or pans the image if no overlay 	appears beneath the cursor.  The mouse wheel cycles among cursor modes, 	or zooms about the cursor position if the control key is held down.  	Objects maintained by GRIM are accessible via the INGRID interface, 	for example:  		IDL> ingrid, dd=dd, cd=cd, pd=pd, limb_ptd=limb_ptd  	returns the data desciptor, camera descriptor, planet descriptors, 	and limb points associated with the current plane.  	GRIM registers event handlers for all of its objects, so the window 	is updated any time an object is modifed, whether by GRIM or by some 	other program, or from the command line.    EXAMPLES: 	(1) To create a new grim instance with no data:  		IDL> grim, /new  	(2) To create a new grim instance with data from a file of name 	     filename :  		IDL> dd = dat_read(filename) 		IDL> grim, dd  		   or  		IDL> grim, filename  	(3) To give an existing grim instance a new camera descriptor:  		IDL> grim, cd=cd    KNOWN BUGS: 	Window resizing is not precise.  GRIM tries to resize to the selected 	size, but typically overshoots.  This is probably platform-dependent.  	Objects inherited by rendering planes do not respond to events.  	Image shifting: 	 -  Descriptors not updated if shift performed form another window 	    because the there's no way for the irst window to know to 	    update its descriptors         - fix wrap-around; clip instead  	Plane->Coregister does not update descriptors  	Navigate mode gets weird when you do certain modifer key presses 	   --> maybe a conflict with <ctrl> wheel zoom action  	Crashes occur with File->Close  	/no_erase is not enabled for images, just plots.  Probably should fix 	that.  	Initial visibility setting does not seem to work until applied 	using plane settings window.  	/frame causes a crash if there are no initial overlays.  	It's not clear whether the symsize keyword is actually used.  	pn keyword does not function.  	Crash when tiepoint syncing is on and tiepoint selected with 	multiple planes.  	Title keyword does not properly map multiple elements to multiple 	planes.  	Nsum keyword does not properly map multiple elements to multiple 	planes.  	Plane syncing appears to be incomplete and I don't remember what it 	was supposed to be.  I'm sure it was awesome, though.  	Not sure what slave_overlays keyword does, or was supposed to do.  	Overlays on rendered planes do not respond to events  	Menu toggles don't update propoerly in some circumsumstances.  	grim_message sometimes pops up messages from nv_message, which can 	be pretty obnxious.  This probably has to do with the calls to 	grim_message in grim_compute.include    STATUS: 	Incomplete.    SEE ALSO: 	ingrid, gr_draw    ", "", "          -1", " 	Written by:	Spitale 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_constants", "grim_constants", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_constants", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_resize", "grim_resize", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_resize", "", "initgrim_database_xsizebase_ysize", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_set_tracking", "grim_set_tracking", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_set_tracking", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_test_motion_event", "grim_test_motion_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_test_motion_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_get_cmds", "grim_get_cmds", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_get_cmds", "", "allgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_set_ct", "grim_set_ct", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_set_ct", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_set_mode", "grim_set_mode", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_set_mode", "", "newinitdata_pgrim_datamode", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_write_ptd", "grim_write_ptd", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_write_ptd", "", "grim_datafilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_write", "grim_write", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_write", "", "filetypegrim_datafilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_get_save_filename", "grim_get_save_filename", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_get_save_filename", "", "filetypegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_kill_notify", "grim_kill_notify", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_kill_notify", "", "top", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_load_files", "grim_load_files", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_load_files", "", "load_pathgrim_datafilenames", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_deactivate_all", "grim_deactivate_all", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_deactivate_all", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_activate_all", "grim_activate_all", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_activate_all", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_modify_colors_callback", "grim_modify_colors_callback", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_modify_colors_callback", "", "allcmdcb_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_modify_colors", "grim_modify_colors", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_modify_colors", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_edit_header", "grim_edit_header", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_edit_header", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_edit_notes", "grim_edit_notes", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_edit_notes", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_user_ptd_fname", "grim_user_ptd_fname", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_user_ptd_fname", "", "basenamegrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_write_user_points", "grim_write_user_points", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_write_user_points", "", "fnamegrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_mask_fname", "grim_mask_fname", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_mask_fname", "", "basenamegrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_write_mask", "grim_write_mask", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_write_mask", "", "fnamegrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_read_user_points", "grim_read_user_points", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_read_user_points", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_read_mask", "grim_read_mask", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_read_mask", "", "fnamegrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_jumpto", "grim_jumpto", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_jumpto", "", "grim_dataid", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_recenter", "grim_recenter", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_recenter", "", "grim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_zoom", "grim_zoom", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_zoom", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_zoom_to_cursor", "grim_zoom_to_cursor", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_zoom_to_cursor", "", "relativezoomzz", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_modes_list", "grim_modes_list", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_modes_list", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_interrupt_begin", "grim_interrupt_begin", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_interrupt_begin", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_interrupt_end", "grim_interrupt_end", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_interrupt_end", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_toggle_context", "grim_toggle_context", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_toggle_context", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_toggle_axes", "grim_toggle_axes", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_toggle_axes", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_render", "grim_render", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_render", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_erase_guideline", "grim_erase_guideline", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_erase_guideline", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_draw_guideline", "grim_draw_guideline", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_draw_guideline", "", "grim_dataxy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_repeat", "grim_repeat", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_repeat", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_exit", "grim_exit", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_exit", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_undo", "grim_undo", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_undo", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_redo", "grim_redo", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_redo", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_interrupt_callback", "grim_interrupt_callback", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_interrupt_callback", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_sampling_fn", "grim_sampling_fn", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_sampling_fn", "", "ddsource_image_pts_sampledata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_render_dim_fn", "grim_render_dim_fn", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_render_dim_fn", "", "dddim_orig", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_render_sampling_fn", "grim_render_sampling_fn", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_render_sampling_fn", "", "ddsource_image_pts_samplesource_image_pts_grid", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_draw_vectors", "grim_draw_vectors", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_draw_vectors", "", "cdcurves_ptdpoints_ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_increment_mode", "grim_increment_mode", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_increment_mode", "", "grim_datadm", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_event", "grim_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_update_guideline", "grim_update_guideline", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_update_guideline", "", "grim_dataplanexy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_update_xy_label", "grim_update_xy_label", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_update_xy_label", "", "grim_dataplanexy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_scroll", "grim_scroll", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_scroll", "", "grim_dataplaneclicksmodifiers", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_middle", "grim_middle", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_middle", "", "grim_dataplaneidxypressclicksmodifiersoutput_wnum", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_draw_event", "grim_draw_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_draw_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_help_event", "grim_menu_file_load_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_help_event", "	Allows user to load images into new image planes.  The user is 	prompted for filenames and dat_read is used to read each image. 	Multiple images may be selected and a new plane is created for 	each image.  On X-windows systems, multiple files may be selected 	either by dragging across the filenames or by holding down the 	control key to toggle the selected files.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_event", "grim_menu_file_load_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_browse_help_event", "grim_menu_file_browse_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_browse_help_event", "	Allows user to load images into new image planes using the brim 	browser.  Images are selected using the left mouse button and 	each image is loaded on a new plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_browse_file_left_event", "grim_browse_file_left_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_browse_file_left_event", "", "statusbaseiid", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_browse_event", "grim_menu_file_browse_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_browse_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_help_event", "grim_menu_file_save_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_help_event", "	Allows user to save the current image plane and geometry.  If there 	is no current filename for the current plane, then the user is 	prompted for one.  All descriptors are written through the translators 	and then dat_write is used to write the data file.  Specific behavior 	is governed by OMINAS' configuration.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_event", "grim_menu_file_save_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_as_help_event", "grim_menu_file_save_as_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_as_help_event", "	Same as 'Save' above, except always prompts for a filename.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_as_event", "grim_menu_file_save_as_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_as_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_open_as_rgb_help_event", "grim_menu_open_as_rgb_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_open_as_rgb_help_event", "	Opens a new grim window with the current channal configuration 	reduced to a 3-channel RGB cube.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2016   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_open_as_rgb_event", "grim_menu_open_as_rgb_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_open_as_rgb_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_user_ptd_help_event", "grim_menu_file_save_user_ptd_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_user_ptd_help_event", "	Writes user points for the current plane to a file called 	[image name].user_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_user_ptd_event", "grim_menu_file_save_user_ptd_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_user_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_all_user_ptd_help_event", "grim_menu_file_save_all_user_ptd_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_all_user_ptd_help_event", "	Writes user points for all planes to files called 	[image name].user_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_all_user_ptd_event", "grim_menu_file_save_all_user_ptd_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_all_user_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_user_ptd_help_event", "grim_menu_file_load_user_ptd_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_user_ptd_help_event", "	loads user points for the current plane from a file called 	[image name].user_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_user_ptd_event", "grim_menu_file_load_user_ptd_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_user_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_all_user_ptd_help_event", "grim_menu_file_load_all_user_ptd_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_all_user_ptd_help_event", "	Loads user points for all planes from files called 	[image name].user_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_all_user_ptd_event", "grim_menu_file_load_all_user_ptd_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_all_user_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_tie_ptd_help_event", "grim_menu_file_save_tie_ptd_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_tie_ptd_help_event", "	Writes tie points for the current plane to a file called 	[image name].tie_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_tie_ptd_event", "grim_menu_file_save_tie_ptd_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_tie_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_all_tie_ptd_help_event", "grim_menu_file_save_all_tie_ptd_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_all_tie_ptd_help_event", "	Writes tie points for all planes to files called 	[image name].tie_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_all_tie_ptd_event", "grim_menu_file_save_all_tie_ptd_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_all_tie_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_tie_ptd_help_event", "grim_menu_file_load_tie_ptd_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_tie_ptd_help_event", "	loads tie points for the current plane from a file called 	[image name].tie_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_tie_ptd_event", "grim_menu_file_load_tie_ptd_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_tie_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_all_tie_ptd_help_event", "grim_menu_file_load_all_tie_ptd_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_all_tie_ptd_help_event", "	Loads tie points for all planes from files called 	[image name].tie_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_all_tie_ptd_event", "grim_menu_file_load_all_tie_ptd_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_all_tie_ptd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_curves_help_event", "grim_menu_file_save_curves_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_curves_help_event", "	Writes curves for the current plane to a file called 	[image name].curve_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2015   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_curves_event", "grim_menu_file_save_curves_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_all_curves_help_event", "grim_menu_file_save_all_curves_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_all_curves_help_event", "	Writes curves for all planes to files called 	[image name].curve_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2015   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_all_curves_event", "grim_menu_file_save_all_curves_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_all_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_curves_help_event", "grim_menu_file_load_curves_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_curves_help_event", "	loads curves for the current plane from a file called 	[image name].curve_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2015   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_curves_event", "grim_menu_file_load_curves_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_all_curves_help_event", "grim_menu_file_load_all_curves_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_all_curves_help_event", "	Loads curves for all planes from files called 	[image name].curve_ptd    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2015   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_all_curves_event", "grim_menu_file_load_all_curves_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_all_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_mask_help_event", "grim_menu_file_save_mask_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_mask_help_event", "	Writes mask points for the current plane to a file called 	[image name].mask    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_mask_event", "grim_menu_file_save_mask_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_mask_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_all_masks_help_event", "grim_menu_file_save_all_masks_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_all_masks_help_event", "	Writes mask points for all planes to files called 	[image name].mask    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_all_masks_event", "grim_menu_file_save_all_masks_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_all_masks_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_mask_help_event", "grim_menu_file_load_mask_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_mask_help_event", "	loads mask points for the current plane from a file called 	[image name].mask    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_mask_event", "grim_menu_file_load_mask_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_mask_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_all_masks_help_event", "grim_menu_file_load_all_masks_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_all_masks_help_event", "	Loads mask points for all planes from files called 	[image name].mask    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_load_all_masks_event", "grim_menu_file_load_all_masks_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_load_all_masks_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_ps_help_event", "grim_menu_file_save_ps_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_ps_help_event", "	Saves the current view as a postscript file.    ", "event", "NV/GR", " 	Written by:	Spitale, 12/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_save_ps_event", "grim_menu_file_save_ps_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_save_ps_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_repeat_help_event", "grim_menu_repeat_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_repeat_help_event", "	Repeats the last menu option.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2006   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_repeat_event", "grim_menu_repeat_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_repeat_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_undo_help_event", "grim_menu_undo_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_undo_help_event", "	Undoes the last data modification.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2006   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_undo_event", "grim_menu_undo_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_undo_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_redo_help_event", "grim_menu_redo_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_redo_help_event", "	Redoes the last data modification.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2006   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_redo_event", "grim_menu_redo_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_redo_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_select_help_event", "grim_select_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_select_help_event", "	Selects or unselects a grim window.  This functionality is for use 	with functions that require input from more than one grim instance. 	The selected state is red; unselected is gray.    ", "event", "NV/GR OPERATION:	This option toggles a given grim instance between selected	and unselected states for use with functions that require	input from more than one grim instance When a given instance	is selected this button displays an asterisk", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_select_event", "grim_select_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_select_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_identify_help_event", "grim_identify_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_identify_help_event", "	Causes grim to identify itself on the IDL command line.    ", "event", "NV/GR OPERATION:	This option causes grim to print a message on the IDL command line It is useful in cases where multiple grim instances are running in	multiple IDL sessions", " 	Written by:	Spitale, 3/2009   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_identify_event", "grim_identify_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_identify_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_close_help_event", "grim_menu_file_close_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_close_help_event", "	Closes the current image plane.  All other image plane numbers 	remain the same.  If there is only one image plane, the grim exits.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_file_close_event", "grim_menu_file_close_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_file_close_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_next_help_event", "grim_menu_plane_next_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_next_help_event", "	Changes to the next-numbered image plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_next_event", "grim_menu_plane_next_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_next_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_previous_help_event", "grim_menu_plane_previous_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_previous_help_event", "	Changes to the previous-numbered image plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_previous_event", "grim_menu_plane_previous_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_previous_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_jump_help_event", "grim_menu_plane_jump_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_jump_help_event", "	Prompts the user and jumps to a new plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_jump_event", "grim_menu_plane_jump_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_jump_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_browse_help_event", "grim_menu_plane_browse_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_browse_help_event", "	Opens a brim browser showing all planes.  The left mouse button 	may be used to jump among planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_browse_plane_left_event", "grim_browse_plane_left_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_browse_plane_left_event", "", "statusbaseiid", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_browse_refresh_event", "grim_browse_refresh_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_browse_refresh_event", "", "data_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_browse_event", "grim_menu_plane_browse_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_browse_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_open_help_event", "grim_menu_plane_open_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_open_help_event", "	Opens the image of the current plane in a new grim window.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_open_event", "grim_menu_plane_open_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_open_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_evolve_help_event", "grim_menu_plane_evolve_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_evolve_help_event", "	Evolves the selected objects onto all other planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_evolve_event", "grim_menu_plane_evolve_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_evolve_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_crop_help_event", "grim_menu_plane_crop_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_crop_help_event", "	Crops the data to the current viewing parameters.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_crop_event", "grim_menu_plane_crop_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_crop_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_reorder_time_help_event", "grim_menu_plane_reorder_time_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_reorder_time_help_event", "	Rearranges all planes in time order.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_reorder_time_event", "grim_menu_plane_reorder_time_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_reorder_time_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_sequence_help_event", "grim_menu_plane_sequence_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_sequence_help_event", "	Displays all planes in sequence using xinteranimate.  This option is 	useful or blinking as well.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_sequence_event", "grim_menu_plane_sequence_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_sequence_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_dump_help_event", "grim_menu_plane_dump_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_dump_help_event", "	Dumps all planes to png files entitled [filename].png.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_dump_event", "grim_menu_plane_dump_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_dump_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_coregister_help_event", "grim_menu_plane_coregister_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_coregister_help_event", "	Shifts the images on each plane so as to center the active object 	at the same pixel on each plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_coregister_event", "grim_menu_plane_coregister_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_coregister_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_coadd_help_event", "grim_menu_plane_coadd_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_coadd_help_event", "	Averages all planes.  Not implemented.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_coadd_event", "grim_menu_plane_coadd_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_coadd_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_toggle_plane_syncing_help_event", "grim_menu_plane_toggle_plane_syncing_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_toggle_plane_syncing_help_event", "	Toggles plane syncing on/off.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2016   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_toggle_plane_syncing_event", "grim_menu_plane_toggle_plane_syncing_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_toggle_plane_syncing_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_highlight_help_event", "grim_menu_plane_highlight_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_highlight_help_event", "	Toggles highlighting of the current plane image.  Useful when 	multiple planes are visible simultaneously.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_highlight_event", "grim_menu_plane_highlight_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_highlight_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_copy_tiepoints_help_event", "grim_menu_plane_copy_tiepoints_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_copy_tiepoints_help_event", "	Copies all tieppoints from the current plane to all other planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_copy_tiepoints_event", "grim_menu_plane_copy_tiepoints_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_copy_tiepoints_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_propagate_tiepoints_help_event", "grim_menu_plane_propagate_tiepoints_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_propagate_tiepoints_help_event", "	Copies all tieppoints from the current plane to all other planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_propagate_tiepoints_event", "grim_menu_plane_propagate_tiepoints_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_propagate_tiepoints_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_toggle_tiepoint_syncing_help_event", "grim_menu_plane_toggle_tiepoint_syncing_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_toggle_tiepoint_syncing_help_event", "	Toggles tiepoint syncing on/off.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_toggle_tiepoint_syncing_event", "grim_menu_plane_toggle_tiepoint_syncing_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_toggle_tiepoint_syncing_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_clear_tiepoints_help_event", "grim_menu_plane_clear_tiepoints_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_clear_tiepoints_help_event", "	Clears all tiepoints from the current plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_clear_tiepoints_event", "grim_menu_plane_clear_tiepoints_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_clear_tiepoints_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_copy_curves_help_event", "grim_menu_plane_copy_curves_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_copy_curves_help_event", "	Copies all curves from the current plane to all other planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_copy_curves_event", "grim_menu_plane_copy_curves_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_copy_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_toggle_curve_syncing_help_event", "grim_menu_plane_toggle_curve_syncing_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_toggle_curve_syncing_help_event", "	Toggles curve syncing on/off.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_toggle_curve_syncing_event", "grim_menu_plane_toggle_curve_syncing_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_toggle_curve_syncing_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_clear_curves_help_event", "grim_menu_plane_clear_curves_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_clear_curves_help_event", "	Clears all curves from the current plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_clear_curves_event", "grim_menu_plane_clear_curves_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_clear_curves_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_copy_mask_help_event", "grim_menu_plane_copy_mask_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_copy_mask_help_event", "	Copies mask from the current plane to all other planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_copy_mask_event", "grim_menu_plane_copy_mask_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_copy_mask_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_clear_mask_help_event", "grim_menu_plane_clear_mask_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_clear_mask_help_event", "	Clears the mask from the current plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_clear_mask_event", "grim_menu_plane_clear_mask_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_clear_mask_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_settings_help_event", "grim_menu_plane_settings_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_settings_help_event", "	Allows the user modify settings for the loaded image planes. 	Each plane may displayed in any combination of the three color 	channels.  Also, a plane may be made visible even when it is not 	the current plane, instead of the default behavior, which is to 	display the plane only whenit is current.    ", "event", "NV/GR", " 	Written by:	Spitale, 8/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_plane_settings_event", "grim_menu_plane_settings_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_plane_settings_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_data_adjust_help_event", "grim_menu_data_adjust_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_data_adjust_help_event", "	This option allows the user to adjust data values.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2014   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_data_adjust_event", "grim_menu_data_adjust_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_data_adjust_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_refresh_help_event", "grim_menu_view_refresh_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_refresh_help_event", "	Redraws the overlays on the graphics display.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_refresh_event", "grim_menu_view_refresh_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_refresh_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_help_event", "grim_menu_view_zoom_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_help_event", "	Prompts the user for a new zoom factor.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_event", "grim_menu_view_zoom_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_double_help_event", "grim_menu_view_zoom_double_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_double_help_event", "	Doubles the current zoom, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_double_event", "grim_menu_view_zoom_double_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_double_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_half_help_event", "grim_menu_view_zoom_half_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_half_help_event", "	Halves the current zoom, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_half_event", "grim_menu_view_zoom_half_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_half_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_help_event", "grim_menu_view_zoom_1_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_help_event", "	Sets the current zoom to 1, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_event", "grim_menu_view_zoom_1_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_2_help_event", "grim_menu_view_zoom_2_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_2_help_event", "	Sets the current zoom to 2, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_2_event", "grim_menu_view_zoom_2_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_2_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_3_help_event", "grim_menu_view_zoom_3_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_3_help_event", "	Sets the current zoom to 3, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_3_event", "grim_menu_view_zoom_3_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_3_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_4_help_event", "grim_menu_view_zoom_4_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_4_help_event", "	Sets the current zoom to 4, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_4_event", "grim_menu_view_zoom_4_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_4_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_5_help_event", "grim_menu_view_zoom_5_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_5_help_event", "	Sets the current zoom to 5, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_5_event", "grim_menu_view_zoom_5_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_5_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_6_help_event", "grim_menu_view_zoom_6_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_6_help_event", "	Sets the current zoom to 6, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_6_event", "grim_menu_view_zoom_6_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_6_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_7_help_event", "grim_menu_view_zoom_7_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_7_help_event", "	Sets the current zoom to 7, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_7_event", "grim_menu_view_zoom_7_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_7_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_8_help_event", "grim_menu_view_zoom_8_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_8_help_event", "	Sets the current zoom to 8, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_8_event", "grim_menu_view_zoom_8_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_8_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_9_help_event", "grim_menu_view_zoom_9_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_9_help_event", "	Sets the current zoom to 9, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_9_event", "grim_menu_view_zoom_9_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_9_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_10_help_event", "grim_menu_view_zoom_10_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_10_help_event", "	Sets the current zoom to 10, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_10_event", "grim_menu_view_zoom_10_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_10_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_2_help_event", "grim_menu_view_zoom_1_2_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_2_help_event", "	Sets the current zoom to 1/2, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_2_event", "grim_menu_view_zoom_1_2_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_2_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_3_help_event", "grim_menu_view_zoom_1_3_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_3_help_event", "	Sets the current zoom to 1/3, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_3_event", "grim_menu_view_zoom_1_3_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_3_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_4_help_event", "grim_menu_view_zoom_1_4_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_4_help_event", "	Sets the current zoom to 1/4, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_4_event", "grim_menu_view_zoom_1_4_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_4_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_5_help_event", "grim_menu_view_zoom_1_5_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_5_help_event", "	Sets the current zoom to 1/5, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_5_event", "grim_menu_view_zoom_1_5_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_5_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_5_help_event", "grim_menu_view_zoom_1_5_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_5_help_event", "	Sets the current zoom to 1/5, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_5_event", "grim_menu_view_zoom_1_5_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_5_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_6_help_event", "grim_menu_view_zoom_1_6_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_6_help_event", "	Sets the current zoom to 1/6, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_6_event", "grim_menu_view_zoom_1_6_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_6_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_7_help_event", "grim_menu_view_zoom_1_7_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_7_help_event", "	Sets the current zoom to 1/7, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_7_event", "grim_menu_view_zoom_1_7_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_7_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_8_help_event", "grim_menu_view_zoom_1_8_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_8_help_event", "	Sets the current zoom to 1/8, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_8_event", "grim_menu_view_zoom_1_8_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_8_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_9_help_event", "grim_menu_view_zoom_1_9_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_9_help_event", "	Sets the current zoom to 1/9, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_9_event", "grim_menu_view_zoom_1_9_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_9_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_10_help_event", "grim_menu_view_zoom_1_10_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_10_help_event", "	Sets the current zoom to 1/10, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_zoom_1_10_event", "grim_menu_view_zoom_1_10_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_zoom_1_10_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_0_help_event", "grim_menu_view_rotate_0_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_0_help_event", "	Sets the current rotate to 0, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_0_event", "grim_menu_view_rotate_0_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_0_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_1_help_event", "grim_menu_view_rotate_1_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_1_help_event", "	Sets the current rotate to 1, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_1_event", "grim_menu_view_rotate_1_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_1_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_2_help_event", "grim_menu_view_rotate_2_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_2_help_event", "	Sets the current rotate to 2, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_2_event", "grim_menu_view_rotate_2_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_2_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_3_help_event", "grim_menu_view_rotate_3_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_3_help_event", "	Sets the current rotate to 3, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_3_event", "grim_menu_view_rotate_3_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_3_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_4_help_event", "grim_menu_view_rotate_4_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_4_help_event", "	Sets the current rotate to 4, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_4_event", "grim_menu_view_rotate_4_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_4_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_5_help_event", "grim_menu_view_rotate_5_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_5_help_event", "	Sets the current rotate to 5, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_5_event", "grim_menu_view_rotate_5_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_5_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_6_help_event", "grim_menu_view_rotate_6_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_6_help_event", "	Sets the current rotate to 6, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_6_event", "grim_menu_view_rotate_6_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_6_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_7_help_event", "grim_menu_view_rotate_7_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_7_help_event", "	Sets the current rotate to 7, centered at the mouse cursor.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2013   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_rotate_7_event", "grim_menu_view_rotate_7_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_rotate_7_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_recenter_help_event", "grim_menu_view_recenter_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_recenter_help_event", "	Recenters the view at the cursor position.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2008   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_recenter_event", "grim_menu_view_recenter_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_recenter_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_apply_help_event", "grim_menu_view_apply_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_apply_help_event", "	Applys the current view to all planes.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2016   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_apply_event", "grim_menu_view_apply_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_apply_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_home_help_event", "grim_menu_view_home_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_home_help_event", "	Sets the tvim home view settings.    ", "event", "NV/GR", " 	Written by:	Spitale, 5/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_home_event", "grim_menu_view_home_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_home_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_save_help_event", "grim_menu_view_save_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_save_help_event", "	Saves the current view settings.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_save_event", "grim_menu_view_save_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_save_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_restore_help_event", "grim_menu_view_restore_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_restore_help_event", "	Restores the last-saved view settings.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_restore_event", "grim_menu_view_restore_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_restore_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_previous_help_event", "grim_menu_view_previous_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_previous_help_event", "	Restores the previous view settings.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_previous_event", "grim_menu_view_previous_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_previous_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_entire_help_event", "grim_menu_view_entire_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_entire_help_event", "	Applies the 'entire' display parameters, as given in tvim.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_entire_event", "grim_menu_view_entire_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_entire_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_initial_help_event", "grim_menu_view_initial_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_initial_help_event", "	Reverts to the initial view parameters for this grim widget.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2007   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_initial_event", "grim_menu_view_initial_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_initial_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_flip_help_event", "grim_menu_view_flip_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_flip_help_event", "	Reverses the curent display order.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_flip_event", "grim_menu_view_flip_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_flip_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_frame_help_event", "grim_menu_view_frame_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_frame_help_event", "	Modifies view settings so as to display the either all overlays 	or those that are active.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2007   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_frame_event", "grim_menu_view_frame_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_frame_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_header_help_event", "grim_menu_view_header_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_header_help_event", "	Opens a text window showing the image header.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_header_event", "grim_menu_view_header_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_header_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_notes_help_event", "grim_menu_notes_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_notes_help_event", "	Opens a text window allowing the user to enter notes for each plane.    ", "event", "NV/GR", " 	Written by:	Spitale, 10/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_notes_event", "grim_menu_notes_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_notes_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_image_help_event", "grim_menu_image_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_image_help_event", "	Toggles the image On/Off.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_toggle_image_event", "grim_menu_toggle_image_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_toggle_image_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_image_overlays_help_event", "grim_menu_image_overlays_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_image_overlays_help_event", "	Toggles the image and overlays On/Off.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_toggle_image_overlays_event", "grim_menu_toggle_image_overlays_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_toggle_image_overlays_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_context_help_event", "grim_menu_context_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_context_help_event", "	Toggles the context window On/Off.   ", "event", "NV/GR", " 	Written by:	Spitale, 9/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_context_event", "grim_menu_context_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_context_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_axes_help_event", "grim_menu_axes_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_axes_help_event", "	Toggles the axes window On/Off.  The colors are as follows:  	 Blue	- Inertial axes. 	 Red	- Camera axes. 	 Green	- Direction to primary planet, not foreshortened. 	 Yellow	- Direction to Sun, not foreshortened.  	Vectors pointing away from the camera are dotted.  The vectors are 	rooted at a point 1d5 distance units in front of the camera . 	In the direction corresponding to the image position of the drawn 	axes.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2005   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_axes_event", "grim_menu_axes_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_axes_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_render_help_event", "grim_menu_render_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_render_help_event", "	Renders the visible scene and places it in a new plane unless 	the current plane is already rendering.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2015   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_render_event", "grim_menu_render_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_render_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_colors_help_event", "grim_menu_view_colors_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_colors_help_event", "	Reverses the current display order.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_view_colors_event", "grim_menu_view_colors_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_view_colors_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_planet_centers_help_event", "grim_menu_points_planet_centers_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_planet_centers_help_event", "	Obtains the necessary descriptors through the translators and computes 	planet center positions using pg_center for all active objects.  If no 	active objects, then all centers are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_planet_centers_event", "grim_menu_points_planet_centers_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_planet_centers_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_limbs_help_event", "grim_menu_points_limbs_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_limbs_help_event", "	Obtains the necessary descriptors through the translators and computes 	limbs using pg_limbs for all active objects.  If no active objects, 	then all limbs are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_limbs_event", "grim_menu_points_limbs_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_limbs_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_terminators_help_event", "grim_menu_points_terminators_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_terminators_help_event", "	Obtains the necessary descriptors through the translators and computes 	terminators using pg_limb with the sun as the observer for all active 	objects.  If no active objects, then all terminators are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_terminators_event", "grim_menu_points_terminators_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_terminators_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_planet_grids_help_event", "grim_menu_points_planet_grids_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_planet_grids_help_event", "	Obtains the necessary descriptors through the translators and computes 	planet grids using pg_grid for all active objects.  If no active 	objects, then all grids are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_planet_grids_event", "grim_menu_points_planet_grids_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_planet_grids_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_rings_help_event", "grim_menu_points_rings_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_rings_help_event", "	Obtains the necessary descriptors through the translators and computes 	ring outlines using pg_disk.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_rings_event", "grim_menu_points_rings_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_rings_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_ring_grids_help_event", "grim_menu_points_ring_grids_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_ring_grids_help_event", "	Obtains the necessary descriptors through the translators and computes 	ring grids using pg_grid for all active objects.  If no active 	objects, then all grids are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2004   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_ring_grids_event", "grim_menu_points_ring_grids_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_ring_grids_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_stations_help_event", "grim_menu_points_stations_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_stations_help_event", "	Obtains the necessary descriptors through the translators and computes 	planet stations for all active objects.  If no active objects, then 	all stations are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 2/2009   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_stations_event", "grim_menu_points_stations_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_stations_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_arrays_help_event", "grim_menu_points_arrays_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_arrays_help_event", "	Obtains the necessary descriptors through the translators and computes 	arrays for all active objects.  If no active objects, then 	all arrays are computed.    ", "event", "NV/GR", " 	Written by:	Spitale, 3/2012   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_arrays_event", "grim_menu_points_arrays_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_arrays_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_stars_help_event", "grim_menu_points_stars_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_stars_help_event", "	Obtains the necessary descriptors through the translators and computes 	star positions using pg_center.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_stars_event", "grim_menu_points_stars_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_stars_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_shadows_help_event", "grim_menu_points_shadows_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_shadows_help_event", "	Obtains the necessary descriptors through the translators and computes 	shadows of the currently active overlay points on all other objects. 	Note that you may have to disable overlay hiding in order to compute 	and activate all of the appropriate source points for the shadows 	since many point that are not visible to the observer may still have 	a line of sight to the sun.    ", "event", "NV/GR", " 	Written by:	Spitale, 1/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_shadows_event", "grim_menu_points_shadows_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_shadows_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_reflections_help_event", "grim_menu_points_reflections_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_reflections_help_event", "	Obtains the necessary descriptors through the translators and computes 	reflections of the currently active overlay points on all other objects. 	Note that you may have to disable overlay hiding in order to compute 	and activate all of the appropriate source points for the reflections 	since many point that are not visible to the observer may still have 	a line of sight to the sun.    ", "event", "NV/GR", " 	Written by:	Spitale, 1/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_reflections_event", "grim_menu_points_reflections_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_reflections_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_hide_all_help_event", "grim_menu_hide_all_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_hide_all_help_event", "	 Hides/unhides all overlay objects.    ", "event", "NV/GR", " 	Written by:	Spitale, 1/2003   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_hide_all_event", "grim_menu_hide_all_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_hide_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_clear_all_help_event", "grim_menu_clear_all_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_clear_all_help_event", "	 Clears all objects.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_clear_all_event", "grim_menu_clear_all_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_clear_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_clear_active_help_event", "grim_menu_clear_active_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_clear_active_help_event", "	 Clears all active objects.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_clear_active_event", "grim_menu_clear_active_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_clear_active_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_activate_all_help_event", "grim_menu_activate_all_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_activate_all_help_event", "	 Activates all objects.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_activate_all_event", "grim_menu_activate_all_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_activate_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_deactivate_all_help_event", "grim_menu_deactivate_all_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_deactivate_all_help_event", "	 Deactivates all objects.    ", "event", "NV/GR", " 	Written by:	Spitale, 9/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_deactivate_all_event", "grim_menu_deactivate_all_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_deactivate_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_invert_all_help_event", "grim_menu_invert_all_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_invert_all_help_event", "	 Inverts current overlay activations.  Desccriptor activations are 	 determined by the resulting overlay activations.    ", "event", "NV/GR", " 	Written by:	Spitale, 11/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_invert_event", "grim_menu_invert_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_invert_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_settings_help_event", "grim_menu_points_settings_help_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_settings_help_event", "	Allows the user modify settings relevant to the overlay points.    ", "event", "NV/GR", " 	Written by:	Spitale, 7/2002   ");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_points_settings_event", "grim_menu_points_settings_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_points_settings_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_previous_event", "grim_previous_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_previous_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_jumpto_event", "grim_jumpto_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_jumpto_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_next_event", "grim_next_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_next_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_crop_event", "grim_crop_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_crop_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_refresh_event", "grim_refresh_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_refresh_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_entire_event", "grim_entire_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_entire_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_view_previous_event", "grim_view_previous_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_view_previous_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_colors_event", "grim_colors_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_colors_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_settings_event", "grim_settings_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_settings_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_header_event", "grim_header_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_header_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_notes_event", "grim_notes_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_notes_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_undo_event", "grim_undo_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_undo_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_redo_event", "grim_redo_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_redo_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_toggle_image_event", "grim_toggle_image_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_toggle_image_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_toggle_image_overlays_event", "grim_toggle_image_overlays_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_toggle_image_overlays_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_hide_event", "grim_hide_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_hide_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_tracking_event", "grim_tracking_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_tracking_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_grid_event", "grim_grid_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_grid_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_pixel_grid_event", "grim_pixel_grid_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_pixel_grid_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_guideline_event", "grim_guideline_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_guideline_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_context_event", "grim_context_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_context_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_axes_event", "grim_axes_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_axes_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_render_event", "grim_render_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_render_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_activate_all_event", "grim_activate_all_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_activate_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_deactivate_all_event", "grim_deactivate_all_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_deactivate_all_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_repeat_event", "grim_repeat_event", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_repeat_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_help", "grim_help", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_help", "", "grim_datatext", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_create_help_menu", "grim_create_help_menu", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_create_help_menu", "", "_menu_desc", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_cull_menu_desc", "grim_cull_menu_desc", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_cull_menu_desc", "", "map_itemsmap_indicesod_map_itemsod_map_indicesplot_itemsplot_indicesplot_only_itemsplot_only_indicesbeta_only_indices_menu_descplotmapbeta", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_parse_menu_desc", "grim_parse_menu_desc", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_parse_menu_desc", "", "map_itemsmap_indicesod_map_itemsod_map_indicesplot_itemsplot_indicesplot_only_itemsplot_only_indicesbeta_only_indices_menu_desc", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_desc", "grim_menu_desc", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_desc", "", "cursor_modes", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_get_window_size", "grim_get_window_size", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_get_window_size", "", "xsizeysizegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_menu_capture", "grim_menu_capture", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_menu_capture", "", "fnevent", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_widgets", "grim_widgets", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_widgets", "", "xsizeysizecursor_modesmenu_fnamemenu_extensionsgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_get_default_zoom", "grim_get_default_zoom", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_get_default_zoom", "", "dd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_save_initial_view", "grim_save_initial_view", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_save_initial_view", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_initial_framing", "grim_initial_framing", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_initial_framing", "", "delay_overlaysgrim_dataframe", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_initial_overlays", "grim_initial_overlays", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_initial_overlays", "", "planeexcludeonlytempptdgrim_data_overlays", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_cube_dim_fn", "grim_cube_dim_fn", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_cube_dim_fn", "", "dddat", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_get_arg", "grim_get_arg", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_get_arg", "", "ddgrnumextensionsarg", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_get_args", "grim_get_args", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_get_args", "", "ddgrnumtypexzeronhistmaintaincompressextensionsrgboffsetsarg1arg2", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_create_cursor_mode", "grim_create_cursor_mode", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_create_cursor_mode", "", "no_prefixnamemode_argscursor_modes", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_deps.html#grim_deps", "grim_deps", 'routine in <a href="grim/grim_deps.html">grim_deps.pro</a>', "grim_deps.pro", "", "grim_deps", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html", "grim_descriptors_include.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_descriptors_include.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_compute_fov", "grim_compute_fov", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_compute_fov", "", "covgrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_descriptor_notify_handle", "grim_descriptor_notify_handle", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_descriptor_notify_handle", "", "refreshnewgrim_dataxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_suspend_events", "grim_suspend_events", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_suspend_events", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_resume_events", "grim_resume_events", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_resume_events", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_descriptor_notify", "grim_descriptor_notify", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_descriptor_notify", "", "refreshnewevents", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_rm_descriptor", "grim_rm_descriptor", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_rm_descriptor", "", "planegrim_dataxdpxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_mark_descriptor", "grim_mark_descriptor", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_mark_descriptor", "", "xdval", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_demark_descriptor", "grim_demark_descriptor", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_demark_descriptor", "", "xd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_mark_descriptors", "grim_mark_descriptors", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_mark_descriptors", "", "allcdpdrdsdstdardsundplanesgrim_dataval", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_add_descriptor", "grim_add_descriptor", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_add_descriptor", "", "onenoregisterassoc_ddgrim_dataxdp_xd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_get_cameras", "grim_get_cameras", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_get_cameras", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_get_planets", "grim_get_planets", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_get_planets", "", "planenamesgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_get_sun", "grim_get_sun", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_get_sun", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_get_stars", "grim_get_stars", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_get_stars", "", "planenamesgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_get_rings", "grim_get_rings", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_get_rings", "", "planenamesgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_get_stations", "grim_get_stations", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_get_stations", "", "planenamesgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_get_arrays", "grim_get_arrays", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_get_arrays", "", "planenamesgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_clear_descriptors", "grim_clear_descriptors", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_clear_descriptors", "", "planesgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_load_descriptors", "grim_load_descriptors", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_load_descriptors", "", "planeclasscdpdrdsundsdardstdodobj_namegdgrim_dataname", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_descriptors_include.html#grim_descriptors_include", "grim_descriptors_include", 'routine in <a href="grim/grim_descriptors_include.html">grim_descriptors_include.pro</a>', "grim_descriptors_include.pro", "", "grim_descriptors_include", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_footprint_cursor.html", "grim_footprint_cursor.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_footprint_cursor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_footprint_cursor.html#grim_footprint_cursor", "grim_footprint_cursor", 'routine in <a href="grim/grim_footprint_cursor.html">grim_footprint_cursor.pro</a>', "grim_footprint_cursor.pro", "", "grim_footprint_cursor", "", "swap", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_image_include.html", "grim_image_include.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_image_include.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_get_n_colors", "grim_get_n_colors", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_get_n_colors", "", "planetypegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_visible_planes", "grim_visible_planes", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_visible_planes", "", "planecurrentgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_get_plane_by_xy", "grim_get_plane_by_xy", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_get_plane_by_xy", "", "grim_dataxy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_get_plane_by_overlay", "grim_get_plane_by_overlay", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_get_plane_by_overlay", "", "grim_dataxy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_test_single_channel", "grim_test_single_channel", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_test_single_channel", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_toggle_image", "grim_toggle_image", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_toggle_image", "", "no_refreshbmgrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_toggle_image_overlays", "grim_toggle_image_overlays", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_toggle_image_overlays", "", "no_refreshgrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_render_image", "grim_render_image", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_render_image", "", "planeimage_ptsgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_image", "grim_image", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_image", "", "planepncolormapchannelcurrentxrangeyrangegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_scale_image", "grim_scale_image", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_scale_image", "", "currentplaneno_scaletopxrangeyrangegrim_datargb", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_display_image", "grim_display_image", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_display_image", "", "planeentirewnumdoffsetzoomrotateorderdefaultpreviousfliprestorexsizeysizeoffsettopnoplotno_scaleno_wsetno_coordtvimagehomedraw_pixmapcurrentno_copygrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_display_plot", "grim_display_plot", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_display_plot", "", "planedoffsetwnumxrangeyrangeno_wsetdefaultpreviousfliprestorexsizeysizepositiondxdyentireeraseno_coordcolornodrawcurrentgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_display", "grim_display", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_display", "", "planewnumhomeno_imageno_axesdoffsetno_erasezoomrotateorderxsizeysizeoffsetdefaultpreviousfliprestoreuse_pixmappixmap_box_centerno_copypixmap_box_sideno_backentireno_wsetno_coordtvimageno_plotnodrawxrangeyrangedxdycurrentpixmap_to_usegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_show_context_image", "grim_show_context_image", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_show_context_image", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_show_axes", "grim_show_axes", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_show_axes", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_add_refresh_callback", "grim_add_refresh_callback", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_add_refresh_callback", "", "topno_wsetcallbacksdata_ps", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_rm_refresh_callback", "grim_rm_refresh_callback", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_rm_refresh_callback", "", "topdata_ps", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_call_refresh_callbacks", "grim_call_refresh_callbacks", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_call_refresh_callbacks", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_title", "grim_title", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_title", "", "primaryplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_channel_string", "grim_channel_string", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_channel_string", "", "plane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_refresh", "grim_refresh", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_refresh", "", "wnumplaneno_imageno_objectsno_axesno_titlehomexrangeyrangedoffsetno_erasezoomrotateorderdefaultpreviousfliprestorexsizeysizeoffsetuse_pixmappixmap_box_centerpixmap_box_sidecontextentirenoglassno_wsetno_contextno_callbackno_backno_coordtvimageno_plotjust_imagedxdyupdatecurrentno_copyno_mainno_usergrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_image_include.html#grim_image_include", "grim_image_include", 'routine in <a href="grim/grim_image_include.html">grim_image_include.pro</a>', "grim_image_include.pro", "", "grim_image_include", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_message.html", "grim_message.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_message.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_message.html#grim_message", "grim_message", 'routine in <a href="grim/grim_message.html">grim_message.pro</a>', "grim_message.pro", "", "grim_message", "", "clearsuspendrestorequestionresultmessage", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_activate.html", "grim_mode_activate.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_activate.pro", "", "", "	Selects the activate cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_activate.html#grim_mode_activate_bitmap", "grim_mode_activate_bitmap", 'routine in <a href="grim/grim_mode_activate.html">grim_mode_activate.pro</a>', "grim_mode_activate.pro", "", "grim_mode_activate_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_activate.html#grim_mode_activate_mouse_event", "grim_mode_activate_mouse_event", 'routine in <a href="grim/grim_mode_activate.html">grim_mode_activate.pro</a>', "grim_mode_activate.pro", "", "grim_mode_activate_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_activate.html#grim_mode_activate_mode", "grim_mode_activate_mode", 'routine in <a href="grim/grim_mode_activate.html">grim_mode_activate.pro</a>', "grim_mode_activate.pro", "", "grim_mode_activate_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_activate.html#grim_mode_activate_button_event", "grim_mode_activate_button_event", 'routine in <a href="grim/grim_mode_activate.html">grim_mode_activate.pro</a>', "grim_mode_activate.pro", "", "grim_mode_activate_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_activate.html#grim_mode_activate_init", "grim_mode_activate_init", 'routine in <a href="grim/grim_mode_activate.html">grim_mode_activate.pro</a>', "grim_mode_activate.pro", "", "grim_mode_activate_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_activate.html#grim_mode_activate", "grim_mode_activate", 'routine in <a href="grim/grim_mode_activate.html">grim_mode_activate.pro</a>', "grim_mode_activate.pro", "", "grim_mode_activate", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_curves.html", "grim_mode_curves.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_curves.pro", "", "", "	Selects the curves cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 10/2012   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_curves.html#grim_mode_curves_bitmap", "grim_mode_curves_bitmap", 'routine in <a href="grim/grim_mode_curves.html">grim_mode_curves.pro</a>', "grim_mode_curves.pro", "", "grim_mode_curves_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_curves.html#grim_mode_curves_mouse_event", "grim_mode_curves_mouse_event", 'routine in <a href="grim/grim_mode_curves.html">grim_mode_curves.pro</a>', "grim_mode_curves.pro", "", "grim_mode_curves_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_curves.html#grim_mode_curves_cursor", "grim_mode_curves_cursor", 'routine in <a href="grim/grim_mode_curves.html">grim_mode_curves.pro</a>', "grim_mode_curves.pro", "", "grim_mode_curves_cursor", "", "swap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_curves.html#grim_mode_curves_mode", "grim_mode_curves_mode", 'routine in <a href="grim/grim_mode_curves.html">grim_mode_curves.pro</a>', "grim_mode_curves.pro", "", "grim_mode_curves_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_curves.html#grim_mode_curves_button_event", "grim_mode_curves_button_event", 'routine in <a href="grim/grim_mode_curves.html">grim_mode_curves.pro</a>', "grim_mode_curves.pro", "", "grim_mode_curves_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_curves.html#grim_mode_curves_init", "grim_mode_curves_init", 'routine in <a href="grim/grim_mode_curves.html">grim_mode_curves.pro</a>', "grim_mode_curves.pro", "", "grim_mode_curves_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_curves.html#grim_mode_curves", "grim_mode_curves", 'routine in <a href="grim/grim_mode_curves.html">grim_mode_curves.pro</a>', "grim_mode_curves.pro", "", "grim_mode_curves", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_drag.html", "grim_mode_drag.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_drag.pro", "", "", "	Selects the drag cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 2/2009   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_drag.html#grim_mode_drag_bitmap", "grim_mode_drag_bitmap", 'routine in <a href="grim/grim_mode_drag.html">grim_mode_drag.pro</a>', "grim_mode_drag.pro", "", "grim_mode_drag_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_drag.html#grim_mode_drag_translate", "grim_mode_drag_translate", 'routine in <a href="grim/grim_mode_drag.html">grim_mode_drag.pro</a>', "grim_mode_drag.pro", "", "grim_mode_drag_translate", "", "dataxarryarrpixmapwin_num", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_drag.html#grim_mode_drag_mouse_event", "grim_mode_drag_mouse_event", 'routine in <a href="grim/grim_mode_drag.html">grim_mode_drag.pro</a>', "grim_mode_drag.pro", "", "grim_mode_drag_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_drag.html#grim_mode_drag_mode", "grim_mode_drag_mode", 'routine in <a href="grim/grim_mode_drag.html">grim_mode_drag.pro</a>', "grim_mode_drag.pro", "", "grim_mode_drag_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_drag.html#grim_mode_drag_button_event", "grim_mode_drag_button_event", 'routine in <a href="grim/grim_mode_drag.html">grim_mode_drag.pro</a>', "grim_mode_drag.pro", "", "grim_mode_drag_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_drag.html#grim_mode_drag_init", "grim_mode_drag_init", 'routine in <a href="grim/grim_mode_drag.html">grim_mode_drag.pro</a>', "grim_mode_drag.pro", "", "grim_mode_drag_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_drag.html#grim_mode_drag", "grim_mode_drag", 'routine in <a href="grim/grim_mode_drag.html">grim_mode_drag.pro</a>', "grim_mode_drag.pro", "", "grim_mode_drag", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html", "grim_mode_magnify.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_magnify.pro", "", "", "	Selects the magnify cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html#grim_mode_magnify_bitmap", "grim_mode_magnify_bitmap", 'routine in <a href="grim/grim_mode_magnify.html">grim_mode_magnify.pro</a>', "grim_mode_magnify.pro", "", "grim_mode_magnify_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html#grim_mode_magnify_cursor", "grim_mode_magnify_cursor", 'routine in <a href="grim/grim_mode_magnify.html">grim_mode_magnify.pro</a>', "grim_mode_magnify.pro", "", "grim_mode_magnify_cursor", "", "swap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html#grim_mag_erase", "grim_mag_erase", 'routine in <a href="grim/grim_mode_magnify.html">grim_mode_magnify.pro</a>', "grim_mode_magnify.pro", "", "grim_mag_erase", "", "grim_datawnum", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html#grim_mag_frame", "grim_mag_frame", 'routine in <a href="grim/grim_mode_magnify.html">grim_mode_magnify.pro</a>', "grim_mode_magnify.pro", "", "grim_mag_frame", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html#grim_magnify", "grim_magnify", 'routine in <a href="grim/grim_mode_magnify.html">grim_mode_magnify.pro</a>', "grim_mode_magnify.pro", "", "grim_magnify", "", "datagrim_dataplanep_device", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html#grim_mode_magnify_mouse_event", "grim_mode_magnify_mouse_event", 'routine in <a href="grim/grim_mode_magnify.html">grim_mode_magnify.pro</a>', "grim_mode_magnify.pro", "", "grim_mode_magnify_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html#grim_mode_magnify_mode", "grim_mode_magnify_mode", 'routine in <a href="grim/grim_mode_magnify.html">grim_mode_magnify.pro</a>', "grim_mode_magnify.pro", "", "grim_mode_magnify_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html#grim_mode_magnify_button_event", "grim_mode_magnify_button_event", 'routine in <a href="grim/grim_mode_magnify.html">grim_mode_magnify.pro</a>', "grim_mode_magnify.pro", "", "grim_mode_magnify_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html#grim_mode_magnify_init", "grim_mode_magnify_init", 'routine in <a href="grim/grim_mode_magnify.html">grim_mode_magnify.pro</a>', "grim_mode_magnify.pro", "", "grim_mode_magnify_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_magnify.html#grim_mode_magnify", "grim_mode_magnify", 'routine in <a href="grim/grim_mode_magnify.html">grim_mode_magnify.pro</a>', "grim_mode_magnify.pro", "", "grim_mode_magnify", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_mask.html", "grim_mode_mask.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_mask.pro", "", "", "	Selects the mask cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 8/2013   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_mask.html#grim_mode_mask_bitmap", "grim_mode_mask_bitmap", 'routine in <a href="grim/grim_mode_mask.html">grim_mode_mask.pro</a>', "grim_mode_mask.pro", "", "grim_mode_mask_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_mask.html#grim_mode_mask_mouse_event", "grim_mode_mask_mouse_event", 'routine in <a href="grim/grim_mode_mask.html">grim_mode_mask.pro</a>', "grim_mode_mask.pro", "", "grim_mode_mask_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_mask.html#grim_mode_mask_mode", "grim_mode_mask_mode", 'routine in <a href="grim/grim_mode_mask.html">grim_mode_mask.pro</a>', "grim_mode_mask.pro", "", "grim_mode_mask_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_mask.html#grim_mode_mask_button_event", "grim_mode_mask_button_event", 'routine in <a href="grim/grim_mode_mask.html">grim_mode_mask.pro</a>', "grim_mode_mask.pro", "", "grim_mode_mask_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_mask.html#grim_mode_mask_init", "grim_mode_mask_init", 'routine in <a href="grim/grim_mode_mask.html">grim_mode_mask.pro</a>', "grim_mode_mask.pro", "", "grim_mode_mask_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_mask.html#grim_mode_mask", "grim_mode_mask", 'routine in <a href="grim/grim_mode_mask.html">grim_mode_mask.pro</a>', "grim_mode_mask.pro", "", "grim_mode_mask", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html", "grim_mode_navigate.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_navigate.pro", "", "", "	Selects the navigate cursor mode.  	 Camera orientation: 	   Left button:		Allows the optic axis to be repointed.  	   Right button:	Allows the camera to twist about an axis 				corresponding to the selected pixel location.  	 Camera position: 	   <Shift> Left:	Allows the camera to be repositioned in the 				X-Z plane (image plane).  Speeds depend on 				the object under the cursor.  	   <Shift> Right:	Allows the camera to be repositioned and 				reoriented simultaneosly by tracking the 				object under the cursor.  	   <Shift> Wheel:	Allows the camera to be repositioned in the 				Y (optic axis) direction.  Speeds depend on 				the object under the cursor.    ", "", "          -1", " 	Written by:	Spitale, 2/2009   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_bitmap", "grim_mode_navigate_bitmap", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_get_points", "grim_mode_navigate_get_points", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_get_points", "", "planegrim_datapoints_ptdcurves_ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_reposition", "grim_mode_navigate_reposition", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_reposition", "", "axescdcd0curves_ptdpoints_ptdtrackingxarryarr", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_reposition_xy", "grim_mode_navigate_reposition_xy", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_reposition_xy", "", "dataxarryarrpixmapwin_num", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_reposition_xz", "grim_mode_navigate_reposition_xz", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_reposition_xz", "", "dataxarryarrpixmapwin_num", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_reposition_track", "grim_mode_navigate_reposition_track", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_reposition_track", "", "dataxarryarrpixmapwin_num", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_draw", "grim_mode_navigate_draw", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_draw", "", "wnumpixmaperase_pixmapcdcurves_ptdpoints_ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_reposition_y_event", "grim_mode_navigate_reposition_y_event", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_reposition_y_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_reposition_y", "grim_mode_navigate_reposition_y", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_reposition_y", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_reorient_nod", "grim_mode_navigate_reorient_nod", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_reorient_nod", "", "dataxarryarrpixmapwin_num", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_reorient_twist", "grim_mode_navigate_reorient_twist", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_reorient_twist", "", "dataxarryarrpixmapwin_num", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_mouse_event", "grim_mode_navigate_mouse_event", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_mode", "grim_mode_navigate_mode", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_button_event", "grim_mode_navigate_button_event", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate_init", "grim_mode_navigate_init", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_navigate.html#grim_mode_navigate", "grim_mode_navigate", 'routine in <a href="grim/grim_mode_navigate.html">grim_mode_navigate.pro</a>', "grim_mode_navigate.pro", "", "grim_mode_navigate", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_pan.html", "grim_mode_pan.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_pan.pro", "", "", "	Selects the pan cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan.html#grim_mode_pan_bitmap", "grim_mode_pan_bitmap", 'routine in <a href="grim/grim_mode_pan.html">grim_mode_pan.pro</a>', "grim_mode_pan.pro", "", "grim_mode_pan_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan.html#grim_mode_pan_mouse_event", "grim_mode_pan_mouse_event", 'routine in <a href="grim/grim_mode_pan.html">grim_mode_pan.pro</a>', "grim_mode_pan.pro", "", "grim_mode_pan_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan.html#grim_mode_pan_mode", "grim_mode_pan_mode", 'routine in <a href="grim/grim_mode_pan.html">grim_mode_pan.pro</a>', "grim_mode_pan.pro", "", "grim_mode_pan_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan.html#grim_mode_pan_button_event", "grim_mode_pan_button_event", 'routine in <a href="grim/grim_mode_pan.html">grim_mode_pan.pro</a>', "grim_mode_pan.pro", "", "grim_mode_pan_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan.html#grim_mode_pan_init", "grim_mode_pan_init", 'routine in <a href="grim/grim_mode_pan.html">grim_mode_pan.pro</a>', "grim_mode_pan.pro", "", "grim_mode_pan_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan.html#grim_mode_pan", "grim_mode_pan", 'routine in <a href="grim/grim_mode_pan.html">grim_mode_pan.pro</a>', "grim_mode_pan.pro", "", "grim_mode_pan", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_pan_plot.html", "grim_mode_pan_plot.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_pan_plot.pro", "", "", "	Selects the pan cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan_plot.html#grim_mode_pan_plot_bitmap", "grim_mode_pan_plot_bitmap", 'routine in <a href="grim/grim_mode_pan_plot.html">grim_mode_pan_plot.pro</a>', "grim_mode_pan_plot.pro", "", "grim_mode_pan_plot_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan_plot.html#grim_mode_pan_plot_mouse_event", "grim_mode_pan_plot_mouse_event", 'routine in <a href="grim/grim_mode_pan_plot.html">grim_mode_pan_plot.pro</a>', "grim_mode_pan_plot.pro", "", "grim_mode_pan_plot_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan_plot.html#grim_mode_pan_plot_mode", "grim_mode_pan_plot_mode", 'routine in <a href="grim/grim_mode_pan_plot.html">grim_mode_pan_plot.pro</a>', "grim_mode_pan_plot.pro", "", "grim_mode_pan_plot_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan_plot.html#grim_mode_pan_plot_button_event", "grim_mode_pan_plot_button_event", 'routine in <a href="grim/grim_mode_pan_plot.html">grim_mode_pan_plot.pro</a>', "grim_mode_pan_plot.pro", "", "grim_mode_pan_plot_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan_plot.html#grim_mode_pan_plot_init", "grim_mode_pan_plot_init", 'routine in <a href="grim/grim_mode_pan_plot.html">grim_mode_pan_plot.pro</a>', "grim_mode_pan_plot.pro", "", "grim_mode_pan_plot_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_pan_plot.html#grim_mode_pan_plot", "grim_mode_pan_plot", 'routine in <a href="grim/grim_mode_pan_plot.html">grim_mode_pan_plot.pro</a>', "grim_mode_pan_plot.pro", "", "grim_mode_pan_plot", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_plane.html", "grim_mode_plane.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_plane.pro", "", "", "	Selects the plane cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 8/2008   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_plane.html#grim_mode_plane_bitmap", "grim_mode_plane_bitmap", 'routine in <a href="grim/grim_mode_plane.html">grim_mode_plane.pro</a>', "grim_mode_plane.pro", "", "grim_mode_plane_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_plane.html#grim_mode_plane_mouse_event", "grim_mode_plane_mouse_event", 'routine in <a href="grim/grim_mode_plane.html">grim_mode_plane.pro</a>', "grim_mode_plane.pro", "", "grim_mode_plane_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_plane.html#grim_mode_plane_mode", "grim_mode_plane_mode", 'routine in <a href="grim/grim_mode_plane.html">grim_mode_plane.pro</a>', "grim_mode_plane.pro", "", "grim_mode_plane_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_plane.html#grim_mode_plane_button_event", "grim_mode_plane_button_event", 'routine in <a href="grim/grim_mode_plane.html">grim_mode_plane.pro</a>', "grim_mode_plane.pro", "", "grim_mode_plane_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_plane.html#grim_mode_plane_init", "grim_mode_plane_init", 'routine in <a href="grim/grim_mode_plane.html">grim_mode_plane.pro</a>', "grim_mode_plane.pro", "", "grim_mode_plane_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_plane.html#grim_mode_plane", "grim_mode_plane", 'routine in <a href="grim/grim_mode_plane.html">grim_mode_plane.pro</a>', "grim_mode_plane.pro", "", "grim_mode_plane", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_readout.html", "grim_mode_readout.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_readout.pro", "", "", "	Selects the readout cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_readout.html#grim_mode_readout_bitmap", "grim_mode_readout_bitmap", 'routine in <a href="grim/grim_mode_readout.html">grim_mode_readout.pro</a>', "grim_mode_readout.pro", "", "grim_mode_readout_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_readout.html#grim_mode_readout_cursor", "grim_mode_readout_cursor", 'routine in <a href="grim/grim_mode_readout.html">grim_mode_readout.pro</a>', "grim_mode_readout.pro", "", "grim_mode_readout_cursor", "", "swap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_readout.html#grim_pixel_readout_event", "grim_pixel_readout_event", 'routine in <a href="grim/grim_mode_readout.html">grim_mode_readout.pro</a>', "grim_mode_readout.pro", "", "grim_pixel_readout_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_readout.html#grpr_hide_button_event", "grpr_hide_button_event", 'routine in <a href="grim/grim_mode_readout.html">grim_mode_readout.pro</a>', "grim_mode_readout.pro", "", "grpr_hide_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_readout.html#grim_pixel_readout", "grim_pixel_readout", 'routine in <a href="grim/grim_mode_readout.html">grim_mode_readout.pro</a>', "grim_mode_readout.pro", "", "grim_pixel_readout", "", "textgrnumbase", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_readout.html#grim_mode_readout_mouse_event", "grim_mode_readout_mouse_event", 'routine in <a href="grim/grim_mode_readout.html">grim_mode_readout.pro</a>', "grim_mode_readout.pro", "", "grim_mode_readout_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_readout.html#grim_mode_readout_mode", "grim_mode_readout_mode", 'routine in <a href="grim/grim_mode_readout.html">grim_mode_readout.pro</a>', "grim_mode_readout.pro", "", "grim_mode_readout_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_readout.html#grim_mode_readout_button_event", "grim_mode_readout_button_event", 'routine in <a href="grim/grim_mode_readout.html">grim_mode_readout.pro</a>', "grim_mode_readout.pro", "", "grim_mode_readout_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_readout.html#grim_mode_readout_init", "grim_mode_readout_init", 'routine in <a href="grim/grim_mode_readout.html">grim_mode_readout.pro</a>', "grim_mode_readout.pro", "", "grim_mode_readout_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_readout.html#grim_mode_readout", "grim_mode_readout", 'routine in <a href="grim/grim_mode_readout.html">grim_mode_readout.pro</a>', "grim_mode_readout.pro", "", "grim_mode_readout", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_region.html", "grim_mode_region.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_region.pro", "", "", "	Selects the 'region' cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 2/2014   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_region.html#grim_mode_region_bitmap", "grim_mode_region_bitmap", 'routine in <a href="grim/grim_mode_region.html">grim_mode_region.pro</a>', "grim_mode_region.pro", "", "grim_mode_region_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_region.html#grim_mode_region_mouse_event", "grim_mode_region_mouse_event", 'routine in <a href="grim/grim_mode_region.html">grim_mode_region.pro</a>', "grim_mode_region.pro", "", "grim_mode_region_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_region.html#grim_mode_region_mode", "grim_mode_region_mode", 'routine in <a href="grim/grim_mode_region.html">grim_mode_region.pro</a>', "grim_mode_region.pro", "", "grim_mode_region_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_region.html#grim_mode_region_button_event", "grim_mode_region_button_event", 'routine in <a href="grim/grim_mode_region.html">grim_mode_region.pro</a>', "grim_mode_region.pro", "", "grim_mode_region_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_region.html#grim_mode_region_init", "grim_mode_region_init", 'routine in <a href="grim/grim_mode_region.html">grim_mode_region.pro</a>', "grim_mode_region.pro", "", "grim_mode_region_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_region.html#grim_mode_region", "grim_mode_region", 'routine in <a href="grim/grim_mode_region.html">grim_mode_region.pro</a>', "grim_mode_region.pro", "", "grim_mode_region", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_remove.html", "grim_mode_remove.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_remove.pro", "", "", "	Selects the remove cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 8/2006   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_remove.html#grim_mode_remove_bitmap", "grim_mode_remove_bitmap", 'routine in <a href="grim/grim_mode_remove.html">grim_mode_remove.pro</a>', "grim_mode_remove.pro", "", "grim_mode_remove_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_remove.html#grim_mode_remove_flash", "grim_mode_remove_flash", 'routine in <a href="grim/grim_mode_remove.html">grim_mode_remove.pro</a>', "grim_mode_remove.pro", "", "grim_mode_remove_flash", "", "p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_remove.html#grim_mode_remove_mouse_event", "grim_mode_remove_mouse_event", 'routine in <a href="grim/grim_mode_remove.html">grim_mode_remove.pro</a>', "grim_mode_remove.pro", "", "grim_mode_remove_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_remove.html#grim_mode_remove_cursor", "grim_mode_remove_cursor", 'routine in <a href="grim/grim_mode_remove.html">grim_mode_remove.pro</a>', "grim_mode_remove.pro", "", "grim_mode_remove_cursor", "", "swap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_remove.html#grim_mode_remove_mode", "grim_mode_remove_mode", 'routine in <a href="grim/grim_mode_remove.html">grim_mode_remove.pro</a>', "grim_mode_remove.pro", "", "grim_mode_remove_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_remove.html#grim_mode_remove_button_event", "grim_mode_remove_button_event", 'routine in <a href="grim/grim_mode_remove.html">grim_mode_remove.pro</a>', "grim_mode_remove.pro", "", "grim_mode_remove_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_remove.html#grim_mode_remove_init", "grim_mode_remove_init", 'routine in <a href="grim/grim_mode_remove.html">grim_mode_remove.pro</a>', "grim_mode_remove.pro", "", "grim_mode_remove_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_remove.html#grim_mode_remove", "grim_mode_remove", 'routine in <a href="grim/grim_mode_remove.html">grim_mode_remove.pro</a>', "grim_mode_remove.pro", "", "grim_mode_remove", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_select.html", "grim_mode_select.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_select.pro", "", "", "	Selects the 'select' cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 2/2014   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_select.html#grim_mode_select_bitmap", "grim_mode_select_bitmap", 'routine in <a href="grim/grim_mode_select.html">grim_mode_select.pro</a>', "grim_mode_select.pro", "", "grim_mode_select_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_select.html#grim_mode_select_mouse_event", "grim_mode_select_mouse_event", 'routine in <a href="grim/grim_mode_select.html">grim_mode_select.pro</a>', "grim_mode_select.pro", "", "grim_mode_select_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_select.html#grim_mode_select_cursor", "grim_mode_select_cursor", 'routine in <a href="grim/grim_mode_select.html">grim_mode_select.pro</a>', "grim_mode_select.pro", "", "grim_mode_select_cursor", "", "swap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_select.html#grim_mode_select_mode", "grim_mode_select_mode", 'routine in <a href="grim/grim_mode_select.html">grim_mode_select.pro</a>', "grim_mode_select.pro", "", "grim_mode_select_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_select.html#grim_mode_select_button_event", "grim_mode_select_button_event", 'routine in <a href="grim/grim_mode_select.html">grim_mode_select.pro</a>', "grim_mode_select.pro", "", "grim_mode_select_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_select.html#grim_mode_select_init", "grim_mode_select_init", 'routine in <a href="grim/grim_mode_select.html">grim_mode_select.pro</a>', "grim_mode_select.pro", "", "grim_mode_select_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_select.html#grim_mode_select", "grim_mode_select", 'routine in <a href="grim/grim_mode_select.html">grim_mode_select.pro</a>', "grim_mode_select.pro", "", "grim_mode_select", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_smooth.html", "grim_mode_smooth.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_smooth.pro", "", "", "	Selects the smooth cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 10/2006   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_smooth.html#grim_mode_smooth_bitmap", "grim_mode_smooth_bitmap", 'routine in <a href="grim/grim_mode_smooth.html">grim_mode_smooth.pro</a>', "grim_mode_smooth.pro", "", "grim_mode_smooth_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_smooth.html#grim_smooth", "grim_smooth", 'routine in <a href="grim/grim_mode_smooth.html">grim_mode_smooth.pro</a>', "grim_mode_smooth.pro", "", "grim_smooth", "", "planegrim_databox", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_smooth.html#grim_mode_smooth_mouse_event", "grim_mode_smooth_mouse_event", 'routine in <a href="grim/grim_mode_smooth.html">grim_mode_smooth.pro</a>', "grim_mode_smooth.pro", "", "grim_mode_smooth_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_smooth.html#grim_mode_smooth_mode", "grim_mode_smooth_mode", 'routine in <a href="grim/grim_mode_smooth.html">grim_mode_smooth.pro</a>', "grim_mode_smooth.pro", "", "grim_mode_smooth_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_smooth.html#grim_mode_smooth_button_event", "grim_mode_smooth_button_event", 'routine in <a href="grim/grim_mode_smooth.html">grim_mode_smooth.pro</a>', "grim_mode_smooth.pro", "", "grim_mode_smooth_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_smooth.html#grim_mode_smooth_init", "grim_mode_smooth_init", 'routine in <a href="grim/grim_mode_smooth.html">grim_mode_smooth.pro</a>', "grim_mode_smooth.pro", "", "grim_mode_smooth_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_smooth.html#grim_mode_smooth", "grim_mode_smooth", 'routine in <a href="grim/grim_mode_smooth.html">grim_mode_smooth.pro</a>', "grim_mode_smooth.pro", "", "grim_mode_smooth", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_tiepoints.html", "grim_mode_tiepoints.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_tiepoints.pro", "", "", "	Selects the tiepoints cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_tiepoints.html#grim_mode_tiepoints_bitmap", "grim_mode_tiepoints_bitmap", 'routine in <a href="grim/grim_mode_tiepoints.html">grim_mode_tiepoints.pro</a>', "grim_mode_tiepoints.pro", "", "grim_mode_tiepoints_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_tiepoints.html#grim_mode_tiepoints_mouse_event", "grim_mode_tiepoints_mouse_event", 'routine in <a href="grim/grim_mode_tiepoints.html">grim_mode_tiepoints.pro</a>', "grim_mode_tiepoints.pro", "", "grim_mode_tiepoints_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_tiepoints.html#grim_mode_tiepoints_cursor", "grim_mode_tiepoints_cursor", 'routine in <a href="grim/grim_mode_tiepoints.html">grim_mode_tiepoints.pro</a>', "grim_mode_tiepoints.pro", "", "grim_mode_tiepoints_cursor", "", "swap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_tiepoints.html#grim_mode_tiepoints_mode", "grim_mode_tiepoints_mode", 'routine in <a href="grim/grim_mode_tiepoints.html">grim_mode_tiepoints.pro</a>', "grim_mode_tiepoints.pro", "", "grim_mode_tiepoints_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_tiepoints.html#grim_mode_tiepoints_button_event", "grim_mode_tiepoints_button_event", 'routine in <a href="grim/grim_mode_tiepoints.html">grim_mode_tiepoints.pro</a>', "grim_mode_tiepoints.pro", "", "grim_mode_tiepoints_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_tiepoints.html#grim_mode_tiepoints_init", "grim_mode_tiepoints_init", 'routine in <a href="grim/grim_mode_tiepoints.html">grim_mode_tiepoints.pro</a>', "grim_mode_tiepoints.pro", "", "grim_mode_tiepoints_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_tiepoints.html#grim_mode_tiepoints", "grim_mode_tiepoints", 'routine in <a href="grim/grim_mode_tiepoints.html">grim_mode_tiepoints.pro</a>', "grim_mode_tiepoints.pro", "", "grim_mode_tiepoints", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_trim.html", "grim_mode_trim.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_trim.pro", "", "", "	Selects the trim cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 8/2006   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_trim.html#grim_mode_trim_bitmap", "grim_mode_trim_bitmap", 'routine in <a href="grim/grim_mode_trim.html">grim_mode_trim.pro</a>', "grim_mode_trim.pro", "", "grim_mode_trim_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_trim.html#grim_mode_trim_mouse_event", "grim_mode_trim_mouse_event", 'routine in <a href="grim/grim_mode_trim.html">grim_mode_trim.pro</a>', "grim_mode_trim.pro", "", "grim_mode_trim_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_trim.html#grim_mode_trim_cursor", "grim_mode_trim_cursor", 'routine in <a href="grim/grim_mode_trim.html">grim_mode_trim.pro</a>', "grim_mode_trim.pro", "", "grim_mode_trim_cursor", "", "swap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_trim.html#grim_mode_trim_mode", "grim_mode_trim_mode", 'routine in <a href="grim/grim_mode_trim.html">grim_mode_trim.pro</a>', "grim_mode_trim.pro", "", "grim_mode_trim_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_trim.html#grim_mode_trim_button_event", "grim_mode_trim_button_event", 'routine in <a href="grim/grim_mode_trim.html">grim_mode_trim.pro</a>', "grim_mode_trim.pro", "", "grim_mode_trim_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_trim.html#grim_mode_trim_init", "grim_mode_trim_init", 'routine in <a href="grim/grim_mode_trim.html">grim_mode_trim.pro</a>', "grim_mode_trim.pro", "", "grim_mode_trim_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_trim.html#grim_mode_trim", "grim_mode_trim", 'routine in <a href="grim/grim_mode_trim.html">grim_mode_trim.pro</a>', "grim_mode_trim.pro", "", "grim_mode_trim", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_xyzoom.html", "grim_mode_xyzoom.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_xyzoom.pro", "", "", "	Selects the xy-zoom cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 5/2005   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_xyzoom.html#grim_mode_xyzoom_bitmap", "grim_mode_xyzoom_bitmap", 'routine in <a href="grim/grim_mode_xyzoom.html">grim_mode_xyzoom.pro</a>', "grim_mode_xyzoom.pro", "", "grim_mode_xyzoom_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_xyzoom.html#grim_mode_xyzoom_mouse_event", "grim_mode_xyzoom_mouse_event", 'routine in <a href="grim/grim_mode_xyzoom.html">grim_mode_xyzoom.pro</a>', "grim_mode_xyzoom.pro", "", "grim_mode_xyzoom_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_xyzoom.html#grim_mode_xyzoom_cursor", "grim_mode_xyzoom_cursor", 'routine in <a href="grim/grim_mode_xyzoom.html">grim_mode_xyzoom.pro</a>', "grim_mode_xyzoom.pro", "", "grim_mode_xyzoom_cursor", "", "swap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_xyzoom.html#grim_mode_xyzoom_mode", "grim_mode_xyzoom_mode", 'routine in <a href="grim/grim_mode_xyzoom.html">grim_mode_xyzoom.pro</a>', "grim_mode_xyzoom.pro", "", "grim_mode_xyzoom_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_xyzoom.html#grim_mode_xyzoom_button_event", "grim_mode_xyzoom_button_event", 'routine in <a href="grim/grim_mode_xyzoom.html">grim_mode_xyzoom.pro</a>', "grim_mode_xyzoom.pro", "", "grim_mode_xyzoom_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_xyzoom.html#grim_mode_xyzoom_init", "grim_mode_xyzoom_init", 'routine in <a href="grim/grim_mode_xyzoom.html">grim_mode_xyzoom.pro</a>', "grim_mode_xyzoom.pro", "", "grim_mode_xyzoom_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_xyzoom.html#grim_mode_xyzoom", "grim_mode_xyzoom", 'routine in <a href="grim/grim_mode_xyzoom.html">grim_mode_xyzoom.pro</a>', "grim_mode_xyzoom.pro", "", "grim_mode_xyzoom", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_zoom.html", "grim_mode_zoom.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_zoom.pro", "", "", "	Selects the zoom cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom.html#grim_mode_zoom_bitmap", "grim_mode_zoom_bitmap", 'routine in <a href="grim/grim_mode_zoom.html">grim_mode_zoom.pro</a>', "grim_mode_zoom.pro", "", "grim_mode_zoom_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom.html#grim_mode_zoom_mouse_event", "grim_mode_zoom_mouse_event", 'routine in <a href="grim/grim_mode_zoom.html">grim_mode_zoom.pro</a>', "grim_mode_zoom.pro", "", "grim_mode_zoom_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom.html#grim_mode_zoom_mode", "grim_mode_zoom_mode", 'routine in <a href="grim/grim_mode_zoom.html">grim_mode_zoom.pro</a>', "grim_mode_zoom.pro", "", "grim_mode_zoom_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom.html#grim_mode_zoom_button_event", "grim_mode_zoom_button_event", 'routine in <a href="grim/grim_mode_zoom.html">grim_mode_zoom.pro</a>', "grim_mode_zoom.pro", "", "grim_mode_zoom_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom.html#grim_mode_zoom_init", "grim_mode_zoom_init", 'routine in <a href="grim/grim_mode_zoom.html">grim_mode_zoom.pro</a>', "grim_mode_zoom.pro", "", "grim_mode_zoom_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom.html#grim_mode_zoom", "grim_mode_zoom", 'routine in <a href="grim/grim_mode_zoom.html">grim_mode_zoom.pro</a>', "grim_mode_zoom.pro", "", "grim_mode_zoom", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_mode_zoom_plot.html", "grim_mode_zoom_plot.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_mode_zoom_plot.pro", "", "", "	Selects the zoom cursor mode.    ", "", "          -1", " 	Written by:	Spitale, 7/2002   ");
  
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom_plot.html#grim_mode_zoom_plot_bitmap", "grim_mode_zoom_plot_bitmap", 'routine in <a href="grim/grim_mode_zoom_plot.html">grim_mode_zoom_plot.pro</a>', "grim_mode_zoom_plot.pro", "", "grim_mode_zoom_plot_bitmap", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom_plot.html#grim_mode_zoom_plot_mouse_event", "grim_mode_zoom_plot_mouse_event", 'routine in <a href="grim/grim_mode_zoom_plot.html">grim_mode_zoom_plot.pro</a>', "grim_mode_zoom_plot.pro", "", "grim_mode_zoom_plot_mouse_event", "", "eventdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom_plot.html#grim_mode_zoom_plot_mode", "grim_mode_zoom_plot_mode", 'routine in <a href="grim/grim_mode_zoom_plot.html">grim_mode_zoom_plot.pro</a>', "grim_mode_zoom_plot.pro", "", "grim_mode_zoom_plot_mode", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom_plot.html#grim_mode_zoom_plot_button_event", "grim_mode_zoom_plot_button_event", 'routine in <a href="grim/grim_mode_zoom_plot.html">grim_mode_zoom_plot.pro</a>', "grim_mode_zoom_plot.pro", "", "grim_mode_zoom_plot_button_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom_plot.html#grim_mode_zoom_plot_init", "grim_mode_zoom_plot_init", 'routine in <a href="grim/grim_mode_zoom_plot.html">grim_mode_zoom_plot.pro</a>', "grim_mode_zoom_plot.pro", "", "grim_mode_zoom_plot_init", "", "grim_datadata_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_mode_zoom_plot.html#grim_mode_zoom_plot", "grim_mode_zoom_plot", 'routine in <a href="grim/grim_mode_zoom_plot.html">grim_mode_zoom_plot.pro</a>', "grim_mode_zoom_plot.pro", "", "grim_mode_zoom_plot", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_no_cursor.html", "grim_no_cursor.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_no_cursor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_no_cursor.html#grim_no_cursor", "grim_no_cursor", 'routine in <a href="grim/grim_no_cursor.html">grim_no_cursor.pro</a>', "grim_no_cursor.pro", "", "grim_no_cursor", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_overlay_settings.html", "grim_overlay_settings.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_overlay_settings.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_overlay_settings.html#gros_user_tag", "gros_user_tag", 'routine in <a href="grim/grim_overlay_settings.html">grim_overlay_settings.pro</a>', "grim_overlay_settings.pro", "", "gros_user_tag", "", "iname", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlay_settings.html#gros_overlay_tag", "gros_overlay_tag", 'routine in <a href="grim/grim_overlay_settings.html">grim_overlay_settings.pro</a>', "grim_overlay_settings.pro", "", "gros_overlay_tag", "", "iname", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlay_settings.html#gros_update_form", "gros_update_form", 'routine in <a href="grim/grim_overlay_settings.html">grim_overlay_settings.pro</a>', "grim_overlay_settings.pro", "", "gros_update_form", "", "grim_dataplanebase", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlay_settings.html#gros_cleanup", "gros_cleanup", 'routine in <a href="grim/grim_overlay_settings.html">grim_overlay_settings.pro</a>', "grim_overlay_settings.pro", "", "gros_cleanup", "", "base", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlay_settings.html#gros_apply_settings", "gros_apply_settings", 'routine in <a href="grim/grim_overlay_settings.html">grim_overlay_settings.pro</a>', "grim_overlay_settings.pro", "", "gros_apply_settings", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlay_settings.html#gros_ok", "gros_ok", 'routine in <a href="grim/grim_overlay_settings.html">grim_overlay_settings.pro</a>', "grim_overlay_settings.pro", "", "gros_ok", "", "database", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlay_settings.html#grim_overlay_settings_event", "grim_overlay_settings_event", 'routine in <a href="grim/grim_overlay_settings.html">grim_overlay_settings.pro</a>', "grim_overlay_settings.pro", "", "grim_overlay_settings_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlay_settings.html#grim_overlay_settings", "grim_overlay_settings", 'routine in <a href="grim/grim_overlay_settings.html">grim_overlay_settings.pro</a>', "grim_overlay_settings.pro", "", "grim_overlay_settings", "", "grim_dataplane", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_overlays_include.html", "grim_overlays_include.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_overlays_include.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_set_overlay_update_flag", "grim_set_overlay_update_flag", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_set_overlay_update_flag", "", "ptdvalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_overlay_update_flag", "grim_get_overlay_update_flag", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_overlay_update_flag", "", "ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_updated_ptd", "grim_get_updated_ptd", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_updated_ptd", "", "iiclear_ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_xd", "grim_get_xd", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_xd", "", "planegrim_dataclass", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_overlay_ptdp", "grim_get_overlay_ptdp", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_overlay_ptdp", "", "planedataclassdeplabelsiicolorpsymtlabtshadesymsizeshadetfillgenrefastgrim_dataname", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_active_overlays", "grim_get_active_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_active_overlays", "", "planeactive_indicesinactive_indicesgrim_datatype", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_all_active_overlays", "grim_get_all_active_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_all_active_overlays", "", "planenamesgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_all_overlays", "grim_get_all_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_all_overlays", "", "planenamesgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_active_xds", "grim_get_active_xds", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_active_xds", "", "active_indicesinactive_indicesplaneclass", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_update_activated", "grim_update_activated", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_update_activated", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_add_activation_callback", "grim_add_activation_callback", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_add_activation_callback", "", "topno_wsetcallbacksdata_ps", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_rm_activation_callback", "grim_rm_activation_callback", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_rm_activation_callback", "", "topdata_ps", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_call_activation_callbacks", "grim_call_activation_callbacks", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_call_activation_callbacks", "", "planeptdarg", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_fill", "grim_fill", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_fill", "", "ptdnamecolor", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_standard_points", "grim_draw_standard_points", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_standard_points", "", "psympsizeplabelslabel_shadegrim_dataplane_ptdnamedatacolortshadeshade", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_standard_overlays", "grim_draw_standard_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_standard_overlays", "", "updatemlabgrim_dataplaneinactive_color", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_user_points", "grim_draw_user_points", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_user_points", "", "xmapgrim_dataplanetags", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_user_overlays", "grim_draw_user_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_user_overlays", "", "grim_dataplaneinactive_color", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_roi", "grim_draw_roi", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_roi", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_indexed_arrays", "grim_draw_indexed_arrays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_indexed_arrays", "", "psymptdp", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_curves", "grim_draw_curves", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_curves", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_tiepoints", "grim_draw_tiepoints", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_tiepoints", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_mask", "grim_draw_mask", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_mask", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw", "grim_draw", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw", "", "planesallwnumusertiepointsmaskcurveslabelreadoutmeasureupdatenopointsroino_usergrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_grids", "grim_draw_grids", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_grids", "", "planeno_wsetgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_draw_axes", "grim_draw_axes", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_draw_axes", "", "planeno_contextno_wsetgrim_datadata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_cat_points", "grim_cat_points", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_cat_points", "", "allactiveplanegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_rm_points", "grim_rm_points", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_rm_points", "", "planeptdpii", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_match_overlays", "grim_match_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_match_overlays", "", "ptdptd0", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_add_new_points", "grim_add_new_points", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_add_new_points", "", "planegrim_dataptdpptdnamecd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_rm_matched_points", "grim_rm_matched_points", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_rm_matched_points", "", "planegrim_dataptdpptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_update_points", "grim_update_points", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_update_points", "", "planegrim_dataptd0ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_add_points", "grim_add_points", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_add_points", "", "planenamecddatagrim_dataptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_default_activations", "grim_default_activations", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_default_activations", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_clear_overlay_points", "grim_clear_overlay_points", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_clear_overlay_points", "", "ptdpactive_ptdp", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_clear_active_overlays", "grim_clear_active_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_clear_active_overlays", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_frame_overlays", "grim_frame_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_frame_overlays", "", "slopxygrim_dataplaneptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_hide_overlays", "grim_hide_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_hide_overlays", "", "no_refreshbmgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_clear_objects", "grim_clear_objects", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_clear_objects", "", "allcdpdrdsdstdsundplanesgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_place_readout_mark", "grim_place_readout_mark", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_place_readout_mark", "", "grim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_place_measure_mark", "grim_place_measure_mark", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_place_measure_mark", "", "grim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_indexed_array", "grim_get_indexed_array", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_indexed_array", "", "planename", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_indexed_array_fname", "grim_indexed_array_fname", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_indexed_array_fname", "", "basenamegrim_dataplanename", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_write_indexed_arrays", "grim_write_indexed_arrays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_write_indexed_arrays", "", "fnamegrim_dataplanename", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_read_indexed_arrays", "grim_read_indexed_arrays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_read_indexed_arrays", "", "fnamegrim_dataplanename", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_unique_array_label", "grim_unique_array_label", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_unique_array_label", "", "ptdp", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_add_indexed_array", "grim_add_indexed_array", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_add_indexed_array", "", "ptdnointerpspacingflagslabelptdpp", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_select_array_by_box", "grim_select_array_by_box", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_select_array_by_box", "", "planegrim_dataptdcxcy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_select_array_by_point", "grim_select_array_by_point", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_select_array_by_point", "", "allplanegrim_dataptdp", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_select_array", "grim_select_array", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_select_array", "", "planegrim_dataptdp", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_rm_indexed_array", "grim_rm_indexed_array", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_rm_indexed_array", "", "planeallgrim_datanamep", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_add_tiepoint", "grim_add_tiepoint", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_add_tiepoint", "", "planenointerpspacingno_syncflagsgrim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_add_curve", "grim_add_curve", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_add_curve", "", "planenointerpspacingno_syncflagsgrim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_rm_tiepoint", "grim_rm_tiepoint", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_rm_tiepoint", "", "allplanenosyncgrim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_rm_curve", "grim_rm_curve", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_rm_curve", "", "allplanenosyncgrim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_set_roi", "grim_set_roi", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_set_roi", "", "planegrim_dataroip", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_add_mask", "grim_add_mask", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_add_mask", "", "planereplacesubscriptgrim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_copy_mask", "grim_copy_mask", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_copy_mask", "", "grim_dataplaneplanes", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_copy_indexed_array", "grim_copy_indexed_array", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_copy_indexed_array", "", "grim_dataplaneplanesname", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_copy_tiepoint", "grim_copy_tiepoint", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_copy_tiepoint", "", "grim_dataplaneplanes", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_copy_curve", "grim_copy_curve", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_copy_curve", "", "grim_dataplaneplanes", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_tiepoint_indices", "grim_get_tiepoint_indices", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_tiepoint_indices", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_replace_tiepoints", "grim_replace_tiepoints", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_replace_tiepoints", "", "planegrim_dataiip", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_image_to_surface", "grim_image_to_surface", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_image_to_surface", "", "body_ptsfar_ptsnamesbxgrim_dataplaneimage_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_surface_to_image", "grim_surface_to_image", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_surface_to_image", "", "validgrim_dataplanesurf_ptsnames", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_sync_indexed_array", "grim_sync_indexed_array", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_sync_indexed_array", "", "grim_dataplaneptd_grim_data_plane_ptdp", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_push_indexed_array", "grim_push_indexed_array", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_push_indexed_array", "", "rmgrim_dataptdname", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_rm_mask_by_point", "grim_rm_mask_by_point", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_rm_mask_by_point", "", "planeppgrim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_rm_mask_by_box", "grim_rm_mask_by_box", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_rm_mask_by_box", "", "planeppgrim_datacxcy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_rm_mask", "grim_rm_mask", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_rm_mask", "", "allplaneppgrim_datap", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_get_object_overlays", "grim_get_object_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_get_object_overlays", "", "grim_dataplanexd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_deactivate_xd", "grim_deactivate_xd", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_deactivate_xd", "", "planexds", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_deactivate_overlay", "grim_deactivate_overlay", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_deactivate_overlay", "", "xdsassoc_xdspptdno_callbackgrim_dataplaneptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_activate_xd", "grim_activate_xd", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_activate_xd", "", "planexds", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_deactivate_all_xds", "grim_deactivate_all_xds", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_deactivate_all_xds", "", "plane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_activate_all_xds", "grim_activate_all_xds", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_activate_all_xds", "", "plane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_activate_overlay", "grim_activate_overlay", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_activate_overlay", "", "xdspptdno_callbackgrim_dataplaneptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_activate_all_overlays", "grim_activate_all_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_activate_all_overlays", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_deactivate_all_overlays", "grim_deactivate_all_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_deactivate_all_overlays", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_invert_active_overlays", "grim_invert_active_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_invert_active_overlays", "", "xdsgrim_dataplaneptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_invert_all_overlays", "grim_invert_all_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_invert_all_overlays", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_nearest_overlay", "grim_nearest_overlay", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_nearest_overlay", "", "mmplanepobject_ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_enclosed_overlays", "grim_enclosed_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_enclosed_overlays", "", "mmcornersobject_ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_remove_by_point", "grim_remove_by_point", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_remove_by_point", "", "clicksuserplanep0", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_activate_by_point", "grim_activate_by_point", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_activate_by_point", "", "deactivateclicksinvertgrim_dataplanep0", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_trim_overlays", "grim_trim_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_trim_overlays", "", "planegrim_dataregion", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_select_overlay_points", "grim_select_overlay_points", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_select_overlay_points", "", "planedeselectgrim_dataregion", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_remove_by_box", "grim_remove_by_box", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_remove_by_box", "", "statuserplanecxcy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_activate_by_box", "grim_activate_by_box", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_activate_by_box", "", "deactivategrim_dataplanecxcy", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_activate_select", "grim_activate_select", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_activate_select", "", "deactivateclicksptdgrim_dataplanep0", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_remove_overlays", "grim_remove_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_remove_overlays", "", "clicksstatuserplanep0", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_create_overlay", "grim_create_overlay", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_create_overlay", "", "classdep_classescolorpsymsymsizeshadetlabtshadetfillgenregrim_dataplanenamedep_overlays", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_create_overlays", "grim_create_overlays", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_create_overlays", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_hide", "grim_hide", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_hide", "", "gdgrim_dataplaneptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_overlay", "grim_overlay", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_overlay", "", "planedepptdsource_ptdobj_nametempgrim_dataname", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_overlays_include.html#grim_overlays_include", "grim_overlays_include", 'routine in <a href="grim/grim_overlays_include.html">grim_overlays_include.pro</a>', "grim_overlays_include.pro", "", "grim_overlays_include", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_plane_settings.html", "grim_plane_settings.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_plane_settings.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_plane_settings.html#grps_overlay_tag", "grps_overlay_tag", 'routine in <a href="grim/grim_plane_settings.html">grim_plane_settings.pro</a>', "grim_plane_settings.pro", "", "grps_overlay_tag", "", "iname", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_plane_settings.html#grps_update_form", "grps_update_form", 'routine in <a href="grim/grim_plane_settings.html">grim_plane_settings.pro</a>', "grim_plane_settings.pro", "", "grps_update_form", "", "grim_dataplanebase", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_plane_settings.html#grps_invert", "grps_invert", 'routine in <a href="grim/grim_plane_settings.html">grim_plane_settings.pro</a>', "grim_plane_settings.pro", "", "grps_invert", "", "databases", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_plane_settings.html#grps_cleanup", "grps_cleanup", 'routine in <a href="grim/grim_plane_settings.html">grim_plane_settings.pro</a>', "grim_plane_settings.pro", "", "grps_cleanup", "", "base", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_plane_settings.html#grps_apply_settings", "grps_apply_settings", 'routine in <a href="grim/grim_plane_settings.html">grim_plane_settings.pro</a>', "grim_plane_settings.pro", "", "grps_apply_settings", "", "data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_plane_settings.html#grps_ok", "grps_ok", 'routine in <a href="grim/grim_plane_settings.html">grim_plane_settings.pro</a>', "grim_plane_settings.pro", "", "grps_ok", "", "database", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_plane_settings.html#grim_plane_settings_event", "grim_plane_settings_event", 'routine in <a href="grim/grim_plane_settings.html">grim_plane_settings.pro</a>', "grim_plane_settings.pro", "", "grim_plane_settings_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_plane_settings.html#grim_plane_settings", "grim_plane_settings", 'routine in <a href="grim/grim_plane_settings.html">grim_plane_settings.pro</a>', "grim_plane_settings.pro", "", "grim_plane_settings", "", "grim_data", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_planes_include.html", "grim_planes_include.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_planes_include.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_next_plane", "grim_next_plane", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_next_plane", "", "norefreshgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_previous_plane", "grim_previous_plane", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_previous_plane", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_get_plane", "grim_get_plane", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_get_plane", "", "allpnvisiblegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_test_map", "grim_test_map", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_test_map", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_test_rgb", "grim_test_rgb", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_test_rgb", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_get_image", "grim_get_image", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_get_image", "", "planeabscissacurrentsamplechannelndgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_stretch_plane", "grim_stretch_plane", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_stretch_plane", "", "grim_dataplanes", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_plane_set_visible", "grim_plane_set_visible", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_plane_set_visible", "", "togglegrim_dataplanesval", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_get_visible_planes", "grim_get_visible_planes", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_get_visible_planes", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_set_plane", "grim_set_plane", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_set_plane", "", "pngrim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_rm_plane", "grim_rm_plane", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_rm_plane", "", "grim_datapn", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_crop_plane", "grim_crop_plane", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_crop_plane", "", "grim_dataplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_init_parms", "grim_init_parms", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_init_parms", "", "colorthicknsumpsymsymsizen", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_clone_plane", "grim_clone_plane", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_clone_plane", "", "planespawngrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_channel_to_rgb", "grim_channel_to_rgb", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_channel_to_rgb", "", "channel", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_add_planes", "grim_add_planes", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_add_planes", "", "pnsfilterfovcliphidepathsave_pathload_pathcam_trsplt_trsrng_trsstr_trsstn_trsarr_trssun_trscolorpositionxrangeyrangethicknsumxtitleytitlepsymsymsizemaxvisibilitychannelrender_samplerender_pht_minoverlayscmdgrim_datadd", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_planes_include.html#grim_planes_include", "grim_planes_include", 'routine in <a href="grim/grim_planes_include.html">grim_planes_include.pro</a>', "grim_planes_include.pro", "", "grim_planes_include", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_print.html", "grim_print.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_print.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_print.html#grim_print", "grim_print", 'routine in <a href="grim/grim_print.html">grim_print.pro</a>', "grim_print.pro", "", "grim_print", "", "appendarg1arg2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_rc_settings.html", "grim_rc_settings.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_rc_settings.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_rc_settings.html#grim_rc_value", "grim_rc_value", 'routine in <a href="grim/grim_rc_settings.html">grim_rc_settings.pro</a>', "grim_rc_settings.pro", "", "grim_rc_value", "", "keywordsvalue_pskeyword", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_rc_settings.html#grim_rc_add_values", "grim_rc_add_values", 'routine in <a href="grim/grim_rc_settings.html">grim_rc_settings.pro</a>', "grim_rc_settings.pro", "", "grim_rc_add_values", "", "selectkeywordsvalue_psprefix", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_rc_settings.html#grim_rc_selections", "grim_rc_selections", 'routine in <a href="grim/grim_rc_settings.html">grim_rc_settings.pro</a>', "grim_rc_settings.pro", "", "grim_rc_selections", "", "cam_selectplt_selectrng_selectstr_selectstn_selectarr_selectsun_selectkeywordsvalue_pskeyvals", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_rc_settings.html#grim_rc_settings", "grim_rc_settings", 'routine in <a href="grim/grim_rc_settings.html">grim_rc_settings.pro</a>', "grim_rc_settings.pro", "", "grim_rc_settings", "", "rcfilekeyvalscam_selectplt_selectrng_selectstr_selectstn_selectarr_selectsun_selectcmdnewxsizeysizemode_initnpointszoomrotateorderoffsetfilterretainpathsave_pathload_pathsymsizeoverlaysmenu_fnamecursor_swapfovclipmenu_extensionsbutton_extensionscam_trsplt_trsrng_trsstr_trsstn_trsarr_trssun_trsfiletypehidemode_argsxzerorgbpsymnhistmaintainnddworkdiractivateframecompressloadctmaxarg_extensionsextensionsbetarenderingplane_syncingtiepoint_syncingcurve_syncingvisibilitychannelrender_samplerender_pht_minslave_overlaysdelay_overlaysauto_stretch", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_user_include.html", "grim_user_include.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_user_include.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_user_ptd_struct__define", "grim_user_ptd_struct__define", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_user_ptd_struct__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_add_user_points", "grim_add_user_points", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_add_user_points", "", "grnumupdatecolorshade_fnpsymthicklinesymsizeshade_thresholdgraphics_fnxgraphicsnodrawinactiveno_refreshplaneuser_ptdtag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_user_notify", "grim_user_notify", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_user_notify", "", "planegrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_update_user_points", "grim_update_user_points", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_update_user_points", "", "planegrnumcolorshade_fnpsymthicklinesymsizeshade_thresholdgraphics_fnxgraphicsnodrawno_refreshuser_ptdtag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_rm_user_points", "grim_rm_user_points", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_rm_user_points", "", "planegrnumgrim_datatag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_test_active_user_ptd", "grim_test_active_user_ptd", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_test_active_user_ptd", "", "prefixplanetag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_get_user_ptd", "grim_get_user_ptd", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_get_user_ptd", "", "grnumprefixplanecolorshade_fnxgraphicsgraphics_fnshade_thresholdpsymthicklinesymsizetagsactivetag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_get_active_user_overlays", "grim_get_active_user_overlays", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_get_active_user_overlays", "", "active_tagsinactive_tagsplane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_trim_user_overlays", "grim_trim_user_overlays", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_trim_user_overlays", "", "planegrim_dataregion", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_activate_user_overlay", "grim_activate_user_overlay", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_activate_user_overlay", "", "planeindices", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_deactivate_user_overlay", "grim_deactivate_user_overlay", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_deactivate_user_overlay", "", "planeindices", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_clear_user_overlays", "grim_clear_user_overlays", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_clear_user_overlays", "", "planetags", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_clear_active_user_overlays", "grim_clear_active_user_overlays", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_clear_active_user_overlays", "", "plane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_invert_active_user_overlays", "grim_invert_active_user_overlays", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_invert_active_user_overlays", "", "plane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_user_include.html#grim_user_include", "grim_user_include", 'routine in <a href="grim/grim_user_include.html">grim_user_include.pro</a>', "grim_user_include.pro", "", "grim_user_include", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_user_mode_struct__define.html", "grim_user_mode_struct__define.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_user_mode_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_user_mode_struct__define.html#grim_user_mode_struct__define", "grim_user_mode_struct__define", 'routine in <a href="grim/grim_user_mode_struct__define.html">grim_user_mode_struct__define.pro</a>', "grim_user_mode_struct__define.pro", "", "grim_user_mode_struct__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("grim/grim_util_include.html", "grim_util_include.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "grim_util_include.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_set_user_data", "grim_set_user_data", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_set_user_data", "", "grim_datatagdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_get_user_data", "grim_get_user_data", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_get_user_data", "", "grim_datatag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_n_colors", "grim_n_colors", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_n_colors", "", "type", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_get_body_by_name_single", "grim_get_body_by_name_single", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_get_body_by_name_single", "", "xd_pname", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_get_body_by_name", "grim_get_body_by_name", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_get_body_by_name", "", "planename", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_shade_threshold", "grim_shade_threshold", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_shade_threshold", "", "ptdshadethreshold", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_parse_overlay", "grim_parse_overlay", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_parse_overlay", "", "overlaynames", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_cat_bodies", "grim_cat_bodies", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_cat_bodies", "", "plane", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_get_cursor_swap", "grim_get_cursor_swap", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_get_cursor_swap", "", "grim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_wset", "grim_wset", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_wset", "", "get_infosavenoplotgrim_datawnum", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_logging_callback", "grim_logging_callback", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_logging_callback", "", "data_pmessage", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_logging", "grim_logging", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_logging", "", "startstopgrim_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_menu_delim_event", "grim_menu_delim_event", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_menu_delim_event", "", "event", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_parse_form_entry", "grim_parse_form_entry", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_parse_form_entry", "", "nulldropnumericstringidstagstag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_set_form_entry", "grim_set_form_entry", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_set_form_entry", "", "dropcwbuttonsensitiveidstagstagvalue", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_add_callback", "grim_add_callback", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_add_callback", "", "callbacksdata_pscallbacks_listdata_ps_list", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_rm_callback", "grim_rm_callback", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_rm_callback", "", "data_pscallbacks_listdata_ps_list", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_call_callbacks", "grim_call_callbacks", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_call_callbacks", "", "_callbacks_list_data_ps_listevent", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_get_menu_id", "grim_get_menu_id", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_get_menu_id", "", "grim_datadesc", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_update_menu_toggle", "grim_update_menu_toggle", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_update_menu_toggle", "", "grim_datanameflag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_get_toggle_flag", "grim_get_toggle_flag", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_get_toggle_flag", "", "grim_dataname", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_set_toggle_flag", "grim_set_toggle_flag", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_set_toggle_flag", "", "grim_datanameflag", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_compare", "grim_compare", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_compare", "", "x1x2", "          -1", "");
  
  libdata[libdataItem++] = new Array("grim/grim_util_include.html#grim_util_include", "grim_util_include", 'routine in <a href="grim/grim_util_include.html">grim_util_include.pro</a>', "grim_util_include.pro", "", "grim_util_include", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/hide_points.html", "hide_points.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "hide_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/hide_points.html#hide_points", "hide_points", 'routine in <a href="obj/tools/composite/hide_points.html">hide_points.pro</a>', "hide_points.pro", "", "hide_points", "	Hides points with respect to given object and observer.   ", "rmIf set, points are flagged for being in front of or behind 		the globe, rather then just behind it.   bxArray (nt) of any subclass of BODY.   rColumns vector giving the BODY-frame position of the viewer.   pArray (nv) of BODY-frame vectors giving the points to hide.   ", "NV/LIB/TOOLS/COMPOSITE", "	Subscripts of the points in p that are hidden by the object.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_chisq.html", "icv_chisq.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_chisq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_chisq.html#icv_chisq", "icv_chisq", 'routine in <a href="obj/tools/icv/icv_chisq.html">icv_chisq.pro</a>', "icv_chisq.pro", "", "icv_chisq", "	Computes chi-squared value for given curve fit parameters.    ", "norm	If set, the returned value is normalized by dividing 			it by the number of degrees of freedom.   dxy	Array (2) giving x- and y-offset solution.   dtheta	Scalar giving theta-offset solution.   fix	Array specifying which parameters to fix as 			[dx,dy,dtheta].   cos_alphaArray (n_points) of direction cosines computed by 			icv_compute_directions.   sin_alphaArray (n_points) of direction sines computed by 			icv_compute_directions.   scan_offsetsArray (n_points) containing offset of best correlation 			at each point on the curve.  Produced by icv_scan_strip.   scan_ptsArray (2, n_points) of image coordinates corresponding 			to each scan offset.   axis	Array (2) giving image coordinates of rotation axis 			in the case of a 3-parameter fit.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 6/1998   	The chi-squared value is returned.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_coeff.html", "icv_coeff.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_coeff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_coeff.html#icv_coeff", "icv_coeff", 'routine in <a href="obj/tools/icv/icv_coeff.html">icv_coeff.pro</a>', "icv_coeff.pro", "", "icv_coeff", "	Computes coefficients for the 2- or 3-parameter linear least-square fit.    	Since the fit has been linearized, it can be written as a matrix 	equation:  				Mx = b,  	where x is the 3-element column vector [dx, dy, dtheta] of the 	independent variables. 	This routine computes the matrix M and the 	vector b.  Once these are known, mbfit can be used to solve the 	linear system.  Moreover, since the fit is linear, a simultaneous 	fit can be performed by simply adding together any number of 	coefficient matrices and vectors, which can also be done using 	mbfit.    	The fit associated with these coefficients has been linearized 	and is only valid for small corrections.  For larger corrections, 	this procedure can be iterated.    STATUS: 	Complete.    ", "sigmaUncertainty in each scan_offset.  Defaults to 1.   M3x3 matrix of coefficients for the linear fit.   b3-element column vector rhs of the linear fit.    _cos_alphaArray (n_points) of direction cosines computed by 			icv_compute_directions.   _sin_alphaArray (n_points) of direction sines computed by 			icv_compute_directions.   scan_offsetsArray (n_points) containing offset of best correlation 			at each point on the curve.  Produced by icv_scan_strip.   scan_ptsArray (2, n_points) of image coordinates corresponding 			to each scan offset.   axis	Array (2) giving image coordinates of rotation axis 			in the case of a 3-parameter fit.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_compute_directions.html", "icv_compute_directions.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_compute_directions.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_compute_directions.html#icv_compute_directions", "icv_compute_directions", 'routine in <a href="obj/tools/icv/icv_compute_directions.html">icv_compute_directions.pro</a>', "icv_compute_directions.pro", "", "icv_compute_directions", "	Computes the normal to a specified curve at every point.    	It is assumed that the curve is closed; if this is not the case, then 	the results will not be meaningful at the endpoints of the curve.    	At each point on the specified curve, the two nearest neighbors are 	used to compute the components of the normal.    STATUS: 	Complete    ", "centercos_alphasin_alphacurve_ptsArray (2, n_points) of image points making up the curve.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_convert_scan_offsets.html", "icv_convert_scan_offsets.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_convert_scan_offsets.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_convert_scan_offsets.html#icv_convert_scan_offsets", "icv_convert_scan_offsets", 'routine in <a href="obj/tools/icv/icv_convert_scan_offsets.html">icv_convert_scan_offsets.pro</a>', "icv_convert_scan_offsets.pro", "", "icv_convert_scan_offsets", "	Converts offsets produced by icv_scan_strip to image coordinates.    ", "curve_ptsArray (2, n_points) of image points making up the curve.   scan_offsetsArray (n_points) containing offset of best correlation 			at each point on the curve.  Produced by icv_scan_strip.   cos_alphaArray (n_points) of direction cosines computed by 			icv_compute_directions.   sin_alphaArray (n_points) of direction sines computed by 			icv_compute_directions.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	Array (2, n_points) of image coordinates corresponding to each scan 	offset.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_invert_scan_offsets.html", "icv_invert_scan_offsets.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_invert_scan_offsets.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_invert_scan_offsets.html#icv_invert_scan_offsets", "icv_invert_scan_offsets", 'routine in <a href="obj/tools/icv/icv_invert_scan_offsets.html">icv_invert_scan_offsets.pro</a>', "icv_invert_scan_offsets.pro", "", "icv_invert_scan_offsets", "	Uses scan image coordinates to produce scan offsets and angles.  This 	routine is the reverse of icv_convert_scan_offsets.    ", "curve_ptsArray (2, n_points) of image points making up the curve.   scan_ptsArray (2, n_points) of image coordinates corresponding to each scan 			offset.   cos_alphaArray (n_points) of direction cosines.   sin_alphaArray (n_points) of direction sines.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	Array (2, n_points) of image coordinates corresponding to each scan 	offset.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_reset_scan_precision.html", "icv_reset_scan_precision.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_reset_scan_precision.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_reset_scan_precision.html#icv_reset_scan_precision", "icv_reset_scan_precision", 'routine in <a href="obj/tools/icv/icv_reset_scan_precision.html">icv_reset_scan_precision.pro</a>', "icv_reset_scan_precision.pro", "", "icv_reset_scan_precision", "	Modifies the scan precision by rebinning the given image strip.    	The strip and model are rebinned by the specified precision factor 	using cubic interpolation.    STATUS: 	Complete    ", "strip	Image strip to modify.   model	Corresponding edge models.   szero	Zero-offset position in the strip.   mzero	Zero-offset position in the model.   precisionNew precision in inverse pixels.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip.html", "icv_scan_strip.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_scan_strip.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip.html#icv_scan_strip", "icv_scan_strip", 'routine in <a href="obj/tools/icv/icv_scan_strip.html">icv_scan_strip.pro</a>', "icv_scan_strip.pro", "", "icv_scan_strip", "	At each point along an image strip, determines the point at which 	some criterion is optimized, depending on an externally-supplied 	function.    	This program is a wrapper for a number of functions that use various 	algorithms determined by the 'algorithm' keyword.    STATUS: 	Complete.    ", "ccsigmaalgorithmargstripImage strip (n_points,ns) to be scanned.  Output from 		icv_strip_curve ns must be even.   modelModel (n_points,nm) to correlate with strip at each point 		on the curve.  Must have nm < ns.   szeroZero-offset position in the strip.   mzeroZero-offset position in the model.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	Offset of best correlation at each point on the curve.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip_grad.html", "icv_scan_strip_grad.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_scan_strip_grad.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip_grad.html#icv_scan_strip_grad", "icv_scan_strip_grad", 'routine in <a href="obj/tools/icv/icv_scan_strip_grad.html">icv_scan_strip_grad.pro</a>', "icv_scan_strip_grad.pro", "", "icv_scan_strip_grad", "	At each point along an image strip, finds a sharp edge using the 	maximum-gradient method.    ", "argccNot used, hardwired to 0.9999999d.   sigmaOffset uncertainty for each point on the curve, computed as 		one half of the half-width of the gradient peak.    normIf set, only the absolute value of the gradient is evaluated.   stripImage strip (n_points,ns) to be scanned.  Output from 		icv_strip_curve ns must be even.   modelNot used.   szeroZero-offset position in the strip.   mzeroNot used.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale   	Offset of maximum gradient points at each point on the curve.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip_grad_norm.html", "icv_scan_strip_grad_norm.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_scan_strip_grad_norm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip_grad_norm.html#icv_scan_strip_grad_norm", "icv_scan_strip_grad_norm", 'routine in <a href="obj/tools/icv/icv_scan_strip_grad_norm.html">icv_scan_strip_grad_norm.pro</a>', "icv_scan_strip_grad_norm.pro", "", "icv_scan_strip_grad_norm", "	Calls icv_scan_strip_grad with /norm set.    ", "argccsigmastripImage strip (n_points,ns) to be scanned.  Output from 		icv_strip_curve ns must be even.   modelNot used.   szeroZero-offset position in the strip.   mzeroNot used.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale   	Offset of maximum gradient points at each point on the curve.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip_half.html", "icv_scan_strip_half.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_scan_strip_half.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip_half.html#icv_scan_strip_half", "icv_scan_strip_half", 'routine in <a href="obj/tools/icv/icv_scan_strip_half.html">icv_scan_strip_half.pro</a>', "icv_scan_strip_half.pro", "", "icv_scan_strip_half", "	At each point along an image strip, finds a sharp edge using the 	half-power method.    ", "argccsigmacenterstripImage strip (n_points,ns) to be scanned.  Output from 		icv_strip_curve ns must be even.   modelNot used.   szeroZero-offset position in the strip.   mzeroNot used.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale   	Offset of half-power points at each point on the curve.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip_inflection.html", "icv_scan_strip_inflection.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_scan_strip_inflection.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip_inflection.html#icv_scan_strip_inflection", "icv_scan_strip_inflection", 'routine in <a href="obj/tools/icv/icv_scan_strip_inflection.html">icv_scan_strip_inflection.pro</a>', "icv_scan_strip_inflection.pro", "", "icv_scan_strip_inflection", "", "argccsigmanormstripmodelszeromzero", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip_model.html", "icv_scan_strip_model.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_scan_strip_model.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_scan_strip_model.html#icv_scan_strip_model", "icv_scan_strip_model", 'routine in <a href="obj/tools/icv/icv_scan_strip_model.html">icv_scan_strip_model.pro</a>', "icv_scan_strip_model.pro", "", "icv_scan_strip_model", "	At each point along an image strip, determines the subpixel offset at 	which the correlation coefficient between a specified model and the 	image is maximum.    	At every point on the curve, a correlation coefficient is computed 	for every offset at which the model completely overlays the strip. 	In other words, the model is swept across the strip.  	At each point, Lagrange interpolation is used on the three correlations 	surrounding the correlation peak to find the subpixel offset of maximum 	correlation.    STATUS: 	Complete.    ", "argccsigmacenterstripImage strip (n_points,ns) to be scanned.  Output from 		icv_strip_curve ns must be even.   modelModel (n_points,nm) to correlate with strip at each point 		on the curve.  Must have nm < ns.   szeroZero-offset position in the strip.   mzeroZero-offset position in the model.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	Offset of best correlation at each point on the curve.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/icv/icv_strip_curve.html", "icv_strip_curve.pro", '.pro file in <a href="obj/tools/icv/dir-overview.html">obj/tools/icv/ directory</a>', "icv_strip_curve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/icv/icv_strip_curve.html#icv_strip_curve", "icv_strip_curve", 'routine in <a href="obj/tools/icv/icv_strip_curve.html">icv_strip_curve.pro</a>', "icv_strip_curve.pro", "", "icv_strip_curve", "	Using Lagrange interpolation, extracts an image strip of a specified 	width centered on the specified curve.    ", "zerogrid_xgrid_ycd	Camera descriptor.   image	Image from which to extract the strip.   curve_ptsArray (2, n_points) of image points making up the curve.   width	Width of the strip in pixels.   nD	Number of samples across the width of the strip.   cos_alphaArray (n_points) of direction cosines computed by 			icv_compute_directions.   sin_alphaArray (n_points) of direction sines computed by 			icv_compute_directions.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	Image strip (n_points, nD).    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/illumination_fraction.html", "illumination_fraction.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "illumination_fraction.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/illumination_fraction.html#illumination_fraction", "illumination_fraction", 'routine in <a href="obj/tools/illumination_fraction.html">illumination_fraction.pro</a>', "illumination_fraction.pro", "", "illumination_fraction", "	Assuming the body gbx is a sphere, this routine computes the fraction of 	its disk that appears illuminated by the source sund, as seen from the 	inertial position vectors v.    ", "gbxAny subclass of GLOBE.   sundAny subclass of STAR representing the sun.   vArray (nv,3) Inertial positions of viewer.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nv) giving the illumination fraction for each gbx.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_ansa.html", "image_ansa.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_ansa.pro", "", "", "	Computes ring ansa true anomalies.    ", "", "          -1", "       Written by:     Spitale   ");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_ansa.html#ia_compute", "ia_compute", 'routine in <a href="obj/tools/image_ansa.html">image_ansa.pro</a>', "image_ansa.pro", "", "ia_compute", "", "image_ptcdrdradiusta0", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/image_ansa.html#image_ansa", "image_ansa", 'routine in <a href="obj/tools/image_ansa.html">image_ansa.pro</a>', "image_ansa.pro", "", "image_ansa", "", "image_ptscdrdradius", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_ansa_far.html", "image_ansa_far.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_ansa_far.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_ansa_far.html#image_ansa_far", "image_ansa_far", 'routine in <a href="obj/tools/image_ansa_far.html">image_ansa_far.pro</a>', "image_ansa_far.pro", "", "image_ansa_far", "	Computes ring ansa longitudes assuming observer is very far from the 	rings.    ", "cdCamera descriptor.   rd", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2) of longitudes    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_azimuth.html", "image_azimuth.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_azimuth.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_azimuth.html#image_azimuth", "image_azimuth", 'routine in <a href="obj/tools/image_azimuth.html">image_azimuth.pro</a>', "image_azimuth.pro", "", "image_azimuth", "	Computes azimuth angle of projection of inertial vector v 	into the image plane.    ", "cdAny subclass of GLOBE.   vInertial vector.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Image azimuth.  When the image is displayed with (0,0) at 	the top-left, the azimuth angle is measured counterclockwise from 	 up .    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_azimuth_pos.html", "image_azimuth_pos.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_azimuth_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_azimuth_pos.html#image_azimuth_pos", "image_azimuth_pos", 'routine in <a href="obj/tools/image_azimuth_pos.html">image_azimuth_pos.pro</a>', "image_azimuth_pos.pro", "", "image_azimuth_pos", "	Computes azimuth angle of projection of inertial position vector v 	into the image plane.    ", "cdAny subclass of GLOBE.   vInertial position vector.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Image azimuth.  When the image is displayed with (0,0) at 	the top-left, the azimuth angle is measured counterclockwise from 	 up .    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_celestial_northangle.html", "image_celestial_northangle.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_celestial_northangle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_celestial_northangle.html#image_celestial_northangle", "image_celestial_northangle", 'routine in <a href="obj/tools/image_celestial_northangle.html">image_celestial_northangle.pro</a>', "image_celestial_northangle.pro", "", "image_celestial_northangle", "	Computes the image azimuth (see image_azimuth.pro) of celestial north.    ", "orientcdCamera descriptor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Angle in radians.     ");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_interp_cam.html", "image_interp_cam.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_interp_cam.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_interp_cam.html#image_interp_cam", "image_interp_cam", 'routine in <a href="obj/tools/image_interp_cam.html">image_interp_cam.pro</a>', "image_interp_cam.pro", "", "image_interp_cam", "       Extracts a region from an image using the desired interpolation, 	accouting for the camera point-spread function is applicable.    ", "cdvalidkinterpkmaxmaskzmaskimageAn array of image point arrays.   grid_xThe grid of x positions for interpolation   grid_yThe grid of y positions for interpolation   argsArguments to pass to the interpolation function.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Array of interpolated points at the (grid_x, grid_y) points.     ");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_northangle.html", "image_northangle.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_northangle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_northangle.html#image_northangle", "image_northangle", 'routine in <a href="obj/tools/image_northangle.html">image_northangle.pro</a>', "image_northangle.pro", "", "image_northangle", "	Computes the image azimuth (see image_azimuth.pro) of the north 	direction on the surface of the given body at the specified pixel 	location p.    ", "validcdCamera descriptor.   gbxAny subclass of GLOBE.   pArray (2) giving the image point.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Angle in radians.     ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/image_origin.html", "image_origin.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "image_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/image_origin.html#image_origin", "image_origin", 'routine in <a href="obj/tools/composite/image_origin.html">image_origin.pro</a>', "image_origin.pro", "", "image_origin", "	Returns the origin of a map or camera image.    ", "cd", "NV/LIB/TOOLS/COMPOSITE", "	2-element array giving the origin in the x and y directions.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_predict.html", "image_predict.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_predict.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_predict.html#image_predict", "image_predict", 'routine in <a href="obj/tools/image_predict.html">image_predict.pro</a>', "image_predict.pro", "", "image_predict", "", "cGGposcdrxgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_predict_orbit.html", "image_predict_orbit.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_predict_orbit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_predict_orbit.html#image_predict_orbit", "image_predict_orbit", 'routine in <a href="obj/tools/image_predict_orbit.html">image_predict_orbit.pro</a>', "image_predict_orbit.pro", "", "image_predict_orbit", "", "cGGposppradecnotestsloprxtcdgbxrx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_predict_orbit_error.html", "image_predict_orbit_error.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_predict_orbit_error.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_predict_orbit_error.html#image_predict_orbit_error", "image_predict_orbit_error", 'routine in <a href="obj/tools/image_predict_orbit_error.html">image_predict_orbit_error.pro</a>', "image_predict_orbit_error.pro", "", "image_predict_orbit_error", "", "cGGnsamplesimplecdgbxrxsig_rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_predict_ring.html", "image_predict_ring.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_predict_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_predict_ring.html#image_predict_ring", "image_predict_ring", 'routine in <a href="obj/tools/image_predict_ring.html">image_predict_ring.pro</a>', "image_predict_ring.pro", "", "image_predict_ring", "", "sundrxtcdgbxrx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_predict_wind.html", "image_predict_wind.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_predict_wind.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_predict_wind.html#image_predict_wind", "image_predict_wind", 'routine in <a href="obj/tools/image_predict_wind.html">image_predict_wind.pro</a>', "image_predict_wind.pro", "", "image_predict_wind", "", "posvdegcdgbxt0surf_ptvel", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/image_shift.html", "image_shift.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "image_shift.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/image_shift.html#image_shift", "image_shift", 'routine in <a href="obj/tools/image_shift.html">image_shift.pro</a>', "image_shift.pro", "", "image_shift", "	Shifts an image by a specified (non-integer) amount using 	interpolation.  If applicable, the camera pont-spread function 	is accounted for in the interpolation.    ", "cdimage2-D array giving the image.   dxOffset in the x direction.   dyOffset in the y direction.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Shifted image.     ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/image_size.html", "image_size.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "image_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/image_size.html#image_size", "image_size", 'routine in <a href="obj/tools/composite/image_size.html">image_size.pro</a>', "image_size.pro", "", "image_size", "	Returns the size of a map or camera image.    ", "cd", "NV/LIB/TOOLS/COMPOSITE", "	2-element array giving the size in the x and y directions.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/image_to_body.html", "image_to_body.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "image_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/image_to_body.html#image_to_body", "image_to_body", 'routine in <a href="obj/tools/composite/image_to_body.html">image_to_body.pro</a>', "image_to_body.pro", "", "image_to_body", "       Transforms points in image coordinates to body coordinates on the 	object.    ", "hitbackallcd      Array of nt camera or map descriptor.   bx      Array of nt body descriptor (subclass of GLOBE or DISK).   p      Array (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of body-frame vectors.  Zero vectors are returned if a 	body point cannot be computed (e.g., the ray misses the planet).   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/image_to_disk.html", "image_to_disk.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "image_to_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/image_to_disk.html#image_to_disk", "image_to_disk", 'routine in <a href="obj/tools/composite/image_to_disk.html">image_to_disk.pro</a>', "image_to_disk.pro", "", "image_to_disk", "       Transforms points in image coordinates to disk coordinates    ", "hitvalidbody_ptscdArray of nt camera or map descriptors.   dkxArray of nt object descriptors (subclass of DISK).   pArray (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of disk positions.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/image_to_globe.html", "image_to_globe.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "image_to_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/image_to_globe.html#image_to_globe", "image_to_globe", 'routine in <a href="obj/tools/composite/image_to_globe.html">image_to_globe.pro</a>', "image_to_globe.pro", "", "image_to_globe", "       Transforms points in image coordinates to body globe coordinates    ", "body_ptsdiscriminantvalidcd      Array of nt camera or map descriptors.   od      Array of nt object descriptors (of type GLOBE).   p      Array (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of globe positions.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/image_to_inertial.html", "image_to_inertial.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "image_to_inertial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/image_to_inertial.html#image_to_inertial", "image_to_inertial", 'routine in <a href="obj/tools/composite/image_to_inertial.html">image_to_inertial.pro</a>', "image_to_inertial.pro", "", "image_to_inertial", "       Transforms points in image coordinates to unit vectors with 	inertial coordinates.    ", "cdArray of nt camera descriptors.   pArray (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of of inertial unit vectors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/image_to_map.html", "image_to_map.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "image_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/image_to_map.html#image_to_map", "image_to_map", 'routine in <a href="obj/tools/composite/image_to_map.html">image_to_map.pro</a>', "image_to_map.pro", "", "image_to_map", "       Transforms points in image coordinates to map coordinates.    ", "bxIf md is not a map descriptor, bx gives a subclass of BODY 		needed for transforming surface to map coordinates.   validIndices of valid output points.   body_ptsBody coordinates of output points.    mdArray of nt map or camera descriptors.   pArray (2 x nv x nt) of image points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of map points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/image_to_orbit.html", "image_to_orbit.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "image_to_orbit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/image_to_orbit.html#image_to_orbit", "image_to_orbit", 'routine in <a href="obj/tools/composite/image_to_orbit.html">image_to_orbit.pro</a>', "image_to_orbit.pro", "", "image_to_orbit", "	Computes orbital elements corresponding to image points, assuming 	a circular orbit.    ", "GG_cdArray of nt camera or map descriptors.   _gbxArray of nt globe descriptor describing the primary body.   dkx0image_ptsArray (1,3,nt) of image points.    ", "NV/LIB/TOOLS/COMPOSITE", "	Array of nt disk descriptors reresenting the computed orbits.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/image_to_radec.html", "image_to_radec.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "image_to_radec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/image_to_radec.html#image_to_radec", "image_to_radec", 'routine in <a href="obj/tools/composite/image_to_radec.html">image_to_radec.pro</a>', "image_to_radec.pro", "", "image_to_radec", "       Transforms points in image coordinates to polar ra/dec coords 	w.r.t the inertial frame.    ", "body_ptscdArray of nt camera descriptors.   pArray (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of radec vectors in the cd BODY frame.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/image_to_surface.html", "image_to_surface.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "image_to_surface.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/image_to_surface.html#image_to_surface", "image_to_surface", 'routine in <a href="obj/tools/composite/image_to_surface.html">image_to_surface.pro</a>', "image_to_surface.pro", "", "image_to_surface", "       Transforms points in image coordinates to surface coordinates.    ", "body_ptsdiscriminanthitvalidcd     Array of nt camera or map descriptor   bx     Array of nt object descriptors (subclass of BODY).   p      Array (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of surface points.  In the case of a camera descriptor, ray 	tracing is used.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/impact_param.html", "impact_param.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "impact_param.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/impact_param.html#impact_param", "impact_param", 'routine in <a href="obj/tools/impact_param.html">impact_param.pro</a>', "impact_param.pro", "", "impact_param", "	Computes the impact parameter of a vector originating at the 	given camera, relative to the given planet object.    ", "pcdCamera descriptor.   pdPlanet descriptor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Shifted image.     ");
  
  

libdata[libdataItem++] = new Array("obj/tools/in_image.html", "in_image.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "in_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/in_image.html#in_image", "in_image", 'routine in <a href="obj/tools/in_image.html">in_image.pro</a>', "in_image.pro", "", "in_image", "	Determines which input points lie within an image described by the 	given camera descriptor.    ", "xminxmaxyminymaxslopcornerscdCamera descriptor.   _image_pts", "NV/LIB/TOOLS", "       Written by:     Spitale          Subscripts of points that lie in the image.  -1 if there are none.     ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_disk.html", "inertial_to_disk.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "inertial_to_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_disk.html#inertial_to_disk", "inertial_to_disk", 'routine in <a href="obj/tools/composite/inertial_to_disk.html">inertial_to_disk.pro</a>', "inertial_to_disk.pro", "", "inertial_to_disk", "       Transforms vectors in inertial coordinates to disk coordinates.    ", "dkxArray of nt descriptors, subclass of DISK.   vArray (nv x 3 x nt) of inertial vectors.   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale, 2/2004          Array (nv x 3 x nt) of disk points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_disk_pos.html", "inertial_to_disk_pos.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "inertial_to_disk_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_disk_pos.html#inertial_to_disk_pos", "inertial_to_disk_pos", 'routine in <a href="obj/tools/composite/inertial_to_disk_pos.html">inertial_to_disk_pos.pro</a>', "inertial_to_disk_pos.pro", "", "inertial_to_disk_pos", "       Transforms position vectors in inertial coordinates to disk 	coordinates.    ", "dkxArray of nt descritors, subclass of DISK.   vArray (nv x 3 x nt) of inertial vectors   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale, 3/2004          Array (nv x 3 x nt) of disk points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_globe.html", "inertial_to_globe.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "inertial_to_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_globe.html#inertial_to_globe", "inertial_to_globe", 'routine in <a href="obj/tools/composite/inertial_to_globe.html">inertial_to_globe.pro</a>', "inertial_to_globe.pro", "", "inertial_to_globe", "       Transforms vectors in inertial coordinates to globe coordinates.    ", "gbxArray of nt descriptors, subclass of globe.   vArray (nv x 3 x nt) of inertial vectors.   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale, 9/2012          Array (nv x 3 x nt) of globe points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_globe_pos.html", "inertial_to_globe_pos.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "inertial_to_globe_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_globe_pos.html#inertial_to_globe_pos", "inertial_to_globe_pos", 'routine in <a href="obj/tools/composite/inertial_to_globe_pos.html">inertial_to_globe_pos.pro</a>', "inertial_to_globe_pos.pro", "", "inertial_to_globe_pos", "       Transforms position vectors in inertial coordinates to globe 	coordinates.    ", "gbxArray of nt descritors, subclass of globe.   vArray (nv x 3 x nt) of inertial vectors   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale, 9/2012          Array (nv x 3 x nt) of globe points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_image.html", "inertial_to_image.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "inertial_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_image.html#inertial_to_image", "inertial_to_image", 'routine in <a href="obj/tools/composite/inertial_to_image.html">inertial_to_image.pro</a>', "inertial_to_image.pro", "", "inertial_to_image", "       Transforms vectors in inertial coordinates to image coordinates    ", "cdArray of nt camera descriptors.   vArray (nv x 3 x nt) of inertial vectors   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale          Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_image_pos.html", "inertial_to_image_pos.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "inertial_to_image_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/inertial_to_image_pos.html#inertial_to_image_pos", "inertial_to_image_pos", 'routine in <a href="obj/tools/composite/inertial_to_image_pos.html">inertial_to_image_pos.pro</a>', "inertial_to_image_pos.pro", "", "inertial_to_image_pos", "       Transforms vectors in inertial coordinates to image coordinates    ", "cdArray of nt camera descriptors.   vArray (nv x 3 x nt) of inertial vectors   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale          Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("grim/interface/ingrid.html", "ingrid.pro", '.pro file in <a href="grim/interface/dir-overview.html">grim/interface/ directory</a>', "ingrid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("grim/interface/ingrid.html#ingrid", "ingrid", 'routine in <a href="grim/interface/ingrid.html">ingrid.pro</a>', "ingrid.pro", "", "ingrid", "	INterface to GRIm Data -- command-line access to GRIM data. 	The returned descriptors allow direct access to the memory images of 	GRIM's descriptor set.  Therefore changes made from the command line 	affect the descriptors that GRIM is using.  GRIM monitors those 	descriptors and updates itself whenever a change occurs.    ", "planeGrim plane structure(s) instead of giving pn.  Note all planes 		must belong to the same grim instance.   gdGeneric descriptor containing all of the above descriptors.   ddGRIM's data descriptor.   cdGRIM's camera descriptor.   pdGRIM's planet descriptors.   rdGRIM's ring descriptors.   sdGRIM's star descriptors.   stdGRIM's station descriptors.   ardGRIM's array descriptors.   sundGRIM's sun descriptor.   odGRIM's observer descriptor.   limb_ptd 		POINT object giving the limb points.   ring_ptd 		POINT object giving the ring points.   star_ptd 		POINT object giving the star points.   station_ptd 		POINT object giving the station points.   array_ptd 		POINT object giving the array points.   term_ptd 		POINT object giving the terminator points.   plgrid_ptd 		POINT object giving the planet grid points.   center_ptd 		POINT object giving the planet centers.   object_ptd 		POINT object giving all overlay points.   tie_ptd 		POINT object giving the tie points.   curve_ptd 		POINT object giving the curve points.  	active_*_ptd: 		Returns same as above ptd outputs, except ony active arrays 		are returned.    shadow_ptd 		POINT object giving the shadow points.   reflection_ptdpnPlane numer(s) to access.  If not given, then current plane 		is used.   allIf set, all planes are used.   grnumactive_pdactive_rdactive_sdactive_stdactive_ardactive_xdactive_limb_ptdactive_ring_ptdactive_star_ptdactive_term_ptdactive_plgrid_ptdactive_center_ptdactive_shadow_ptdactive_reflection_ptdactive_station_ptdactive_array_ptdargGRIM window number or GRIM data struture.  If not given, the 		most recently accessed grim instance is used.   ", "NV/GR", " 	Written by:	Spitale, 7/2002   	(1) Open a GRIM window, load an image, and compute limb points.  	(2) At the command line, type:  		IDL> ingrid, cd=cd 		IDL> pg_repoint, [50,50], 0d, cd=cd  	GRIM should detect the change to the camera descriptor and update 	itself by recomputing the limb points and refreshing the display.    KNOWN ISSUES: 	This procedure has unresolved issues, is unreliable, behaves 	irrationally, is overly complicated, and has periodic breakdowns for 	no externally apparent reason.    STATUS: 	Has unresolved issues that need to be confronted and addressed.    SEE ALSO: 	grim, gr_draw ");
  
  

libdata[libdataItem++] = new Array("obj/tools/ipt/ipt_chisq.html", "ipt_chisq.pro", '.pro file in <a href="obj/tools/ipt/dir-overview.html">obj/tools/ipt/ directory</a>', "ipt_chisq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/ipt/ipt_chisq.html#ipt_chisq", "ipt_chisq", 'routine in <a href="obj/tools/ipt/ipt_chisq.html">ipt_chisq.pro</a>', "ipt_chisq.pro", "", "ipt_chisq", "	Computes chi-squared value for given point fit parameters.    ", "norm	If set, the returned value is normalized by dividing 			it by the number of degrees of freedom.   dxy	Array (2) giving x- and y-offset solution.   dtheta	Scalar giving theta-offset solution.   fix	Array specifying which parameters to fix as 			[dx,dy,dtheta].   pts_dx        Array (n_points) containing offset of actual                        point from predicted point in x.   pts_dy        Array (n_points) containing offset of actual                        point from predicted point in y.   pts           Array (2,n_points) of image coordinates corresponding                        to actual point.   axis	Array (2) giving image coordinates of rotation axis 			in the case of a 3-parameter fit.   ", "UTIL/NV/LIB/TOOLS/IPT", " 	Written by:	Haemmerle, 12/1998   	The chi-squared value is returned.    STATUS: 	Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/ipt/ipt_coeff.html", "ipt_coeff.pro", '.pro file in <a href="obj/tools/ipt/dir-overview.html">obj/tools/ipt/ directory</a>', "ipt_coeff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/ipt/ipt_coeff.html#ipt_coeff", "ipt_coeff", 'routine in <a href="obj/tools/ipt/ipt_coeff.html">ipt_coeff.pro</a>', "ipt_coeff.pro", "", "ipt_coeff", "	Computes coefficients for the 2- or 3-parameter linear least-square fit.    	Since the fit has been linearized, it can be written as a matrix 	equation:  				Mx = b,  	where x is the 3-element column vector [dx, dy, dtheta] of the 	independent variables. 	This routine computes the matrix M and the 	vector b.  Once these are known, mbfit can be used to solve the 	linear system.  Furthermore, since the fit is linear, a simultaneous 	fit can be performed by simply adding together any number of 	coefficient matrices and vectors, which can also be done using 	mbfit.    	The fit associated with these coefficients has been linearized 	and is only valid for small corrections.  For larger corrections, 	this procedure can be iterated.    STATUS: 	Complete.    ", "M3x3 matrix of coefficients for the linear fit.   b3-element column vector rhs of the linear fit.    sigmaUncertainty in each point position.   pts_x        Value containing offset of actual 			point from predicted point in x.   pts_y         Value containing offset of actual                        point from predicted point in y.   pts        Array (2) of image coordinates corresponding 			to actual point.   axis	Array (2) giving image coordinates of rotation axis 			in the case of a 3-parameter fit.   ", "UTIL/NV/LIB/TOOLS/IPT", " 	Written by:	Haemmerle, 5/1998   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/keyval_struct__define.html", "keyval_struct__define.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "keyval_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dat/keyval_struct__define.html#keyval_struct__define", "keyval_struct__define", 'routine in <a href="obj/dat/keyval_struct__define.html">keyval_struct__define.pro</a>', "keyval_struct__define.pro", "", "keyval_struct__define", "	Structure defining a keyword/value pair.    ", "", "NV/SYS", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/ltcorr.html", "ltcorr.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "ltcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/ltcorr.html#ltcorr", "ltcorr", 'routine in <a href="obj/tools/ltcorr.html">ltcorr.pro</a>', "ltcorr.pro", "", "ltcorr", "	Performs a light-travel-time correction on objects for which the 	correction has not already been performed.    ", "cepsiloniterateinvertobs_bx Any subclass of BODY describing the observer.   _targ_bxArray(nt) of any subclass of BODY describing the targets.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_assign.html", "map_assign.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_assign.html#map_assign", "map_assign", 'routine in <a href="obj/map/map_assign.html">map_assign.pro</a>', "map_assign.pro", "", "map_assign", "	Replaces fields in a MAP object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@map__keywords.include", "NV/OBJ/MAP", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_center.html", "map_center.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_center.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_center.html#map_center", "map_center", 'routine in <a href="obj/map/map_center.html">map_center.pro</a>', "map_center.pro", "", "map_center", "	Returns the center for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nt) of centers associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_centric_to_graphic.html", "map_centric_to_graphic.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_centric_to_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_centric_to_graphic.html#map_centric_to_graphic", "map_centric_to_graphic", 'routine in <a href="obj/map/map_centric_to_graphic.html">map_centric_to_graphic.pro</a>', "map_centric_to_graphic.pro", "", "map_centric_to_graphic", "	Converts latitudes from the planetocentric to the planetographic 	convention.    ", "mdArray (nt) of map descriptors.   map_pts0", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map points in which the latitudes are 	planetographic.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_condense.html", "map_condense.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_condense.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_condense.html#map_condense", "map_condense", 'routine in <a href="obj/map/map_condense.html">map_condense.pro</a>', "map_condense.pro", "", "map_condense", "", "mdbounds", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_create_descriptors.html", "map_create_descriptors.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_create_descriptors.html#map_create_descriptors", "map_create_descriptors", 'routine in <a href="obj/map/map_create_descriptors.html">map_create_descriptors.pro</a>', "map_create_descriptors.pro", "", "map_create_descriptors", "	Init method for the MAP class.    ", "crdmdnNumber of descriptors to create.   @map__keywords.include", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998   	Newly created or or freshly initialized disk descriptors, depending 	on the presence of the dkd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_fn_data.html", "map_fn_data.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_fn_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_fn_data.html#map_fn_data", "map_fn_data", 'routine in <a href="obj/map/map_fn_data.html">map_fn_data.pro</a>', "map_fn_data.pro", "", "map_fn_data", "	Returns the function data for a map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Adapted by:	Spitale, 7/2016; adapted from map_fn_data_p   	Function data associated with the given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_fn_image_to_map.html", "map_fn_image_to_map.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_fn_image_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_fn_image_to_map.html#map_fn_image_to_map", "map_fn_image_to_map", 'routine in <a href="obj/map/map_fn_image_to_map.html">map_fn_image_to_map.pro</a>', "map_fn_image_to_map.pro", "", "map_fn_image_to_map", "	Returns the name of the image->map function for each given map 	descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of image->map function names associated with each given 	map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_fn_map_to_image.html", "map_fn_map_to_image.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_fn_map_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_fn_map_to_image.html#map_fn_map_to_image", "map_fn_map_to_image", 'routine in <a href="obj/map/map_fn_map_to_image.html">map_fn_map_to_image.pro</a>', "map_fn_map_to_image.pro", "", "map_fn_map_to_image", "	Returns the name of the map->image function for each given map 	descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of map->image function names associated with each given 	map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_fn_valid.html", "map_fn_valid.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_fn_valid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_fn_valid.html#map_fn_valid", "map_fn_valid", 'routine in <a href="obj/map/map_fn_valid.html">map_fn_valid.pro</a>', "map_fn_valid.pro", "", "map_fn_valid", "	Returns the name of the map->image validation function for each given 	map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 8/2012  	Adapted by:	Spitale, 5/2016   	Array (nt) of map->image validation function names associated with each given 	map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_get_grid_points.html", "map_get_grid_points.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_get_grid_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_get_grid_points.html#map_get_grid_points", "map_get_grid_points", 'routine in <a href="obj/map/map_get_grid_points.html">map_get_grid_points.pro</a>', "map_get_grid_points.pro", "", "map_get_grid_points", "	Generates a lat/lon grid of points.    ", "latArray giving the latitudes for each constant latitude line.   lonArray giving the longitudes for each constant longitude line.   ntNumber of grids to produce.   scan_latLatitudes to scan for each constant longitude line.   scan_lonLongitudes to scan for each constant latitude line.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,np,nt) of map coordinate points where np is the number of 	scan_lats times the number of scan_lons.    STATUS: 	Complete  	Adapted by:	Spitale, 5/2016    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_get_ranges.html", "map_get_ranges.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_get_ranges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_get_ranges.html#map_get_ranges", "map_get_ranges", 'routine in <a href="obj/map/map_get_ranges.html">map_get_ranges.pro</a>', "map_get_ranges.pro", "", "map_get_ranges", "	Returns ranges of valid coordinates for the given MAP object.    ", "md MAP descriptor.    ", "NV/LIB/MAP", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (2 x 2) giving the ranges in latitude, longitude.    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_graphic.html", "map_graphic.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_graphic.html#map_graphic", "map_graphic", 'routine in <a href="obj/map/map_graphic.html">map_graphic.pro</a>', "map_graphic.pro", "", "map_graphic", "	Returns the graphic flag for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of graphic flags associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_graphic_to_centric.html", "map_graphic_to_centric.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_graphic_to_centric.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_graphic_to_centric.html#map_graphic_to_centric", "map_graphic_to_centric", 'routine in <a href="obj/map/map_graphic_to_centric.html">map_graphic_to_centric.pro</a>', "map_graphic_to_centric.pro", "", "map_graphic_to_centric", "	Converts latitudes from the planetographic to the planetocentric 	convention.    ", "mdArray (nt) of map descriptors.   map_pts0", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map points in which the latitudes are 	planetocentric.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map.html", "map_image_to_map.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map.html#map_image_to_map", "map_image_to_map", 'routine in <a href="obj/map/map_image_to_map.html">map_image_to_map.pro</a>', "map_image_to_map.pro", "", "map_image_to_map", "	Transforms the given image points to map coordinate points.    ", "validmd_image_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map_equatorial_ring.html", "map_image_to_map_equatorial_ring.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map_equatorial_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_equatorial_ring.html#map_image_to_map_equatorial_ring", "map_image_to_map_equatorial_ring", 'routine in <a href="obj/map/map_image_to_map_equatorial_ring.html">map_image_to_map_equatorial_ring.pro</a>', "map_image_to_map_equatorial_ring.pro", "", "map_image_to_map_equatorial_ring", "	Transforms the given image points to map coordinate points 	using a rectangular projection.    ", "validmdimage_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		lat = (y - origin[1])/a[0] + center[0]  		lon = (x - origin[0])/a[1] + center[1]  	where the latitude equation is solved iteratively.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_equatorial_ring.html#_map_image_to_map_rectangular", "_map_image_to_map_rectangular", 'routine in <a href="obj/map/map_image_to_map_equatorial_ring.html">map_image_to_map_equatorial_ring.pro</a>', "map_image_to_map_equatorial_ring.pro", "", "_map_image_to_map_rectangular", "", "validmdimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map_mercator.html", "map_image_to_map_mercator.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map_mercator.pro", "", "", "	Transforms the given image points to map coordinate points 	using a mercator projection.    ", "", "          -1", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_mercator.html#immc_fn", "immc_fn", 'routine in <a href="obj/map/map_image_to_map_mercator.html">map_image_to_map_mercator.pro</a>', "map_image_to_map_mercator.pro", "", "immc_fn", "", "xdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_mercator.html#map_image_to_map_mercator", "map_image_to_map_mercator", 'routine in <a href="obj/map/map_image_to_map_mercator.html">map_image_to_map_mercator.pro</a>', "map_image_to_map_mercator.pro", "", "map_image_to_map_mercator", "", "validmd_image_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_mercator.html#_map_image_to_map_mercator", "_map_image_to_map_mercator", 'routine in <a href="obj/map/map_image_to_map_mercator.html">map_image_to_map_mercator.pro</a>', "map_image_to_map_mercator.pro", "", "_map_image_to_map_mercator", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map_mollweide.html", "map_image_to_map_mollweide.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map_mollweide.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_mollweide.html#map_image_to_map_mollweide", "map_image_to_map_mollweide", 'routine in <a href="obj/map/map_image_to_map_mollweide.html">map_image_to_map_mollweide.pro</a>', "map_image_to_map_mollweide.pro", "", "map_image_to_map_mollweide", "", "validmd_image_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_mollweide.html#_map_image_to_map_mollweide", "_map_image_to_map_mollweide", 'routine in <a href="obj/map/map_image_to_map_mollweide.html">map_image_to_map_mollweide.pro</a>', "map_image_to_map_mollweide.pro", "", "_map_image_to_map_mollweide", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map_orthographic.html", "map_image_to_map_orthographic.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map_orthographic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_orthographic.html#map_image_to_map_orthographic", "map_image_to_map_orthographic", 'routine in <a href="obj/map/map_image_to_map_orthographic.html">map_image_to_map_orthographic.pro</a>', "map_image_to_map_orthographic.pro", "", "map_image_to_map_orthographic", "	Transforms the given image points to map coordinate points 	using an orthographic projection.    ", "validmd_image_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points in an orthographic 	projection.  This projection portrays a planet as seen from a 	great distance.  Scale is true only at the map center.  Areas 	are distorted, especially away from the map center.  	With:  	  R = min(size[0],size[1])/2 * scale,  	and:  	  rho = sqrt(x^2 + y^2),  	and:  	  c = asin(rho/R),  	the transformation is:  	  lat = asin( cos(c)*sin(center[0]) + 	                    y*sin(c)*cos(center[0])/rho ) / units[0]  	  lon = center[1] + 	          atan( x*sin(c)/(rho*cos(center[0])*cos(c) - 	                        y*sin(center[0])*sin(c)) ) + units[1]   	See [1], p. 150 for the mathematical derivation.  	[1] Snyder (1987) 	    Map projections -- A working manual 	    USGS professional paper 1395     STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_orthographic.html#_map_image_to_map_orthographic", "_map_image_to_map_orthographic", 'routine in <a href="obj/map/map_image_to_map_orthographic.html">map_image_to_map_orthographic.pro</a>', "map_image_to_map_orthographic.pro", "", "_map_image_to_map_orthographic", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map_orthographic_disk.html", "map_image_to_map_orthographic_disk.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map_orthographic_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_orthographic_disk.html#map_image_to_map_orthographic_disk", "map_image_to_map_orthographic_disk", 'routine in <a href="obj/map/map_image_to_map_orthographic_disk.html">map_image_to_map_orthographic_disk.pro</a>', "map_image_to_map_orthographic_disk.pro", "", "map_image_to_map_orthographic_disk", "	Transforms the given image points to map coordinate points 	using an orthographic projection for a disk.    ", "validmd_image_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points in an orthographic disk 	projection.  This projection portrays a disk as seen from a 	great distance.  Scale is uniform, but it is only true if the 	projection is polar.  Likewise, areas are distorted for non-polar 	projections.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_orthographic_disk.html#_map_image_to_map_orthographic_disk", "_map_image_to_map_orthographic_disk", 'routine in <a href="obj/map/map_image_to_map_orthographic_disk.html">map_image_to_map_orthographic_disk.pro</a>', "map_image_to_map_orthographic_disk.pro", "", "_map_image_to_map_orthographic_disk", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map_rectangular.html", "map_image_to_map_rectangular.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map_rectangular.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_rectangular.html#map_image_to_map_rectangular", "map_image_to_map_rectangular", 'routine in <a href="obj/map/map_image_to_map_rectangular.html">map_image_to_map_rectangular.pro</a>', "map_image_to_map_rectangular.pro", "", "map_image_to_map_rectangular", "	Transforms the given image points to map coordinate points 	using a rectangular projection.    ", "validmdimage_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		lat = (y - origin[1])/a[0] + center[0]  		lon = (x - origin[0])/a[1] + center[1]  	where the latitude equation is solved iteratively.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_rectangular.html#_map_image_to_map_rectangular", "_map_image_to_map_rectangular", 'routine in <a href="obj/map/map_image_to_map_rectangular.html">map_image_to_map_rectangular.pro</a>', "map_image_to_map_rectangular.pro", "", "_map_image_to_map_rectangular", "", "validmdimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map_rectangular_disk.html", "map_image_to_map_rectangular_disk.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map_rectangular_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_rectangular_disk.html#map_image_to_map_rectangular_disk", "map_image_to_map_rectangular_disk", 'routine in <a href="obj/map/map_image_to_map_rectangular_disk.html">map_image_to_map_rectangular_disk.pro</a>', "map_image_to_map_rectangular_disk.pro", "", "map_image_to_map_rectangular_disk", "	Transforms the given image points to map coordinate points 	using a rectangular projection on a disk.    ", "validmdimage_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 6/2016   	Array (2,nv,nt) of map coordinate points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		lat = (y - origin[1])/a[0] + center[0]  		lon = (x - origin[0])/a[1] + center[1]  	where the latitude equation is solved iteratively.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map_ring.html", "map_image_to_map_ring.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_ring.html#map_image_to_map_ring", "map_image_to_map_ring", 'routine in <a href="obj/map/map_image_to_map_ring.html">map_image_to_map_ring.pro</a>', "map_image_to_map_ring.pro", "", "map_image_to_map_ring", "	Transforms the given image points to map coordinate points 	using a rectangular projection.    ", "validmdimage_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		lat = (y - origin[1])/a[0] + center[0]  		lon = (x - origin[0])/a[1] + center[1]  	where the latitude equation is solved iteratively.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_ring.html#_map_image_to_map_rectangular", "_map_image_to_map_rectangular", 'routine in <a href="obj/map/map_image_to_map_ring.html">map_image_to_map_ring.pro</a>', "map_image_to_map_ring.pro", "", "_map_image_to_map_rectangular", "", "validmdimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map_sinusoidal.html", "map_image_to_map_sinusoidal.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map_sinusoidal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_sinusoidal.html#map_image_to_map_sinusoidal", "map_image_to_map_sinusoidal", 'routine in <a href="obj/map/map_image_to_map_sinusoidal.html">map_image_to_map_sinusoidal.pro</a>', "map_image_to_map_sinusoidal.pro", "", "map_image_to_map_sinusoidal", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_image_to_map_stereographic.html", "map_image_to_map_stereographic.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_image_to_map_stereographic.pro", "", "", "	Transforms the given image points to map coordinate points 	using an stereographic projection.    ", "", "          -1", " 	Written by:	Spitale, 1/1998   ");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_stereographic.html#imst_fn", "imst_fn", 'routine in <a href="obj/map/map_image_to_map_stereographic.html">map_image_to_map_stereographic.pro</a>', "map_image_to_map_stereographic.pro", "", "imst_fn", "", "xdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/map/map_image_to_map_stereographic.html#map_image_to_map_stereographic", "map_image_to_map_stereographic", 'routine in <a href="obj/map/map_image_to_map_stereographic.html">map_image_to_map_stereographic.pro</a>', "map_image_to_map_stereographic.pro", "", "map_image_to_map_stereographic", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_lookup_defaults.html", "map_lookup_defaults.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_lookup_defaults.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_lookup_defaults.html#map_lookup_defaults", "map_lookup_defaults", 'routine in <a href="obj/map/map_lookup_defaults.html">map_lookup_defaults.pro</a>', "map_lookup_defaults.pro", "", "map_lookup_defaults", "", "md0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image.html", "map_map_to_image.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image.html#map_map_to_image", "map_map_to_image", 'routine in <a href="obj/map/map_map_to_image.html">map_map_to_image.pro</a>', "map_map_to_image.pro", "", "map_map_to_image", "	Transforms the given map points to map image points.    ", "validIndices of all input points that correspond to valid 		output image points.  If not se then all points are 		valid.    nowrapIf set, then points that lie outide the map will not be 		around to the other side.   allmd_map_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,nv,nt) of map image points.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image_equatorial_ring.html", "map_map_to_image_equatorial_ring.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image_equatorial_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_equatorial_ring.html#map_map_to_image_equatorial_ring", "map_map_to_image_equatorial_ring", 'routine in <a href="obj/map/map_map_to_image_equatorial_ring.html">map_map_to_image_equatorial_ring.pro</a>', "map_map_to_image_equatorial_ring.pro", "", "map_map_to_image_equatorial_ring", "	Transforms the given map points to map image points using a 	rectangular projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map image points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		x = a[1] * (lon - center[1]) + origin[0]  		y = a[0] * (lat - center[0]) + origin[1]    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_equatorial_ring.html#_map_map_to_image_rectangular", "_map_map_to_image_rectangular", 'routine in <a href="obj/map/map_map_to_image_equatorial_ring.html">map_map_to_image_equatorial_ring.pro</a>', "map_map_to_image_equatorial_ring.pro", "", "_map_map_to_image_rectangular", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image_mercator.html", "map_map_to_image_mercator.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image_mercator.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_mercator.html#map_map_to_image_mercator", "map_map_to_image_mercator", 'routine in <a href="obj/map/map_map_to_image_mercator.html">map_map_to_image_mercator.pro</a>', "map_map_to_image_mercator.pro", "", "map_map_to_image_mercator", "	Transforms the given map points to map image points using the 	mercator projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,nv,nt) of map coordinate points in a mercator projection. 	This projection results from projecting a sphere onto a cylinder 	that is tangent at the equator.  The scale is true along the equator 	only.  Areas are distorted, especially near the poles.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	and:  		e = sqrt(1 - (A/(B+C)/2)^2),  	where A, B, and C are the triaxial ellipsoid radii, the 	transformation is:  		x = a[1] * (lon - center[1]) + origin[0]  		y = a[0] * log( tan(pi/4 + lat/2) * 		  ( (1 - e*sin(lat))/(1 + e*sin(lat)) )^(e/2) ) + origin[1]   	See [1], p. 44 for the mathematical derivation.  	[1] Snyder (1987) 	    Map projections -- A working manual 	    USGS professional paper 1395    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_mercator.html#_map_map_to_image_mercator", "_map_map_to_image_mercator", 'routine in <a href="obj/map/map_map_to_image_mercator.html">map_map_to_image_mercator.pro</a>', "map_map_to_image_mercator.pro", "", "_map_map_to_image_mercator", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image_mollweide.html", "map_map_to_image_mollweide.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image_mollweide.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_mollweide.html#mimw_fn", "mimw_fn", 'routine in <a href="obj/map/map_map_to_image_mollweide.html">map_map_to_image_mollweide.pro</a>', "map_map_to_image_mollweide.pro", "", "mimw_fn", "", "xdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_mollweide.html#map_map_to_image_mollweide", "map_map_to_image_mollweide", 'routine in <a href="obj/map/map_map_to_image_mollweide.html">map_map_to_image_mollweide.pro</a>', "map_map_to_image_mollweide.pro", "", "map_map_to_image_mollweide", "", "mdmap_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_mollweide.html#_map_map_to_image_mollweide", "_map_map_to_image_mollweide", 'routine in <a href="obj/map/map_map_to_image_mollweide.html">map_map_to_image_mollweide.pro</a>', "map_map_to_image_mollweide.pro", "", "_map_map_to_image_mollweide", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image_orthographic.html", "map_map_to_image_orthographic.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image_orthographic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_orthographic.html#map_map_to_image_orthographic", "map_map_to_image_orthographic", 'routine in <a href="obj/map/map_map_to_image_orthographic.html">map_map_to_image_orthographic.pro</a>', "map_map_to_image_orthographic.pro", "", "map_map_to_image_orthographic", "	Transforms the given map points to map image points using the 	orthographic projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,nv,nt) of map image points in an orthographic 	projection.  This projection portrays a planet as seen from a 	great distance.  Scale is true only at the map center.  Areas 	are distorted, especially away from the map center.  	With:  	  R = min(size[0],size[1])/2 * scale  	the transformation is:  	  x = R * cos(lat/units[0]) * sin(lon/units[1] 0 center[1]) + origin[0]  	  y = R * 	     ( cos(center[0])*sin(lat/units[0]) - 	        sin(center[0])*cos(lat/units[0])*cos(lon - center[1]) ) + 	                                                            origin[1]  	See [1], p. 149 for the mathematical derivation.  	[1] Snyder (1987) 	    Map projections -- A working manual 	    USGS professional paper 1395    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image_orthographic_disk.html", "map_map_to_image_orthographic_disk.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image_orthographic_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_orthographic_disk.html#map_map_to_image_orthographic_disk", "map_map_to_image_orthographic_disk", 'routine in <a href="obj/map/map_map_to_image_orthographic_disk.html">map_map_to_image_orthographic_disk.pro</a>', "map_map_to_image_orthographic_disk.pro", "", "map_map_to_image_orthographic_disk", "	Transforms the given map points to map image points using the 	orthographic projection on a disk.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,nv,nt) of map image points in an orthographic disk 	projection.  This projection portrays a disk as seen from a 	great distance.  Scale is uniform, but it is only true if the 	projection is polar.  Likewise, areas are distorted for non-polar 	projections.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_orthographic_disk.html#_map_map_to_image_orthographic_disk", "_map_map_to_image_orthographic_disk", 'routine in <a href="obj/map/map_map_to_image_orthographic_disk.html">map_map_to_image_orthographic_disk.pro</a>', "map_map_to_image_orthographic_disk.pro", "", "_map_map_to_image_orthographic_disk", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image_rectangular.html", "map_map_to_image_rectangular.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image_rectangular.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_rectangular.html#map_map_to_image_rectangular", "map_map_to_image_rectangular", 'routine in <a href="obj/map/map_map_to_image_rectangular.html">map_map_to_image_rectangular.pro</a>', "map_map_to_image_rectangular.pro", "", "map_map_to_image_rectangular", "	Transforms the given map points to map image points using a 	rectangular projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map image points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		x = a[1] * (lon - center[1]) + origin[0]  		y = a[0] * (lat - center[0]) + origin[1]    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_rectangular.html#_map_map_to_image_rectangular", "_map_map_to_image_rectangular", 'routine in <a href="obj/map/map_map_to_image_rectangular.html">map_map_to_image_rectangular.pro</a>', "map_map_to_image_rectangular.pro", "", "_map_map_to_image_rectangular", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image_rectangular_disk.html", "map_map_to_image_rectangular_disk.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image_rectangular_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_rectangular_disk.html#map_map_to_image_rectangular_disk", "map_map_to_image_rectangular_disk", 'routine in <a href="obj/map/map_map_to_image_rectangular_disk.html">map_map_to_image_rectangular_disk.pro</a>', "map_map_to_image_rectangular_disk.pro", "", "map_map_to_image_rectangular_disk", "	Transforms the given map points to map image points using a 	rectangular projection on a disk.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 6/2016   	Array (2,nv,nt) of map image points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		x = a[1] * (lon - center[1]) + origin[0]  		y = a[0] * (lat - center[0]) + origin[1]    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image_ring.html", "map_map_to_image_ring.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_ring.html#map_map_to_image_ring", "map_map_to_image_ring", 'routine in <a href="obj/map/map_map_to_image_ring.html">map_map_to_image_ring.pro</a>', "map_map_to_image_ring.pro", "", "map_map_to_image_ring", "	Transforms the given map points to map image points using a 	rectangular projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map image points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		x = a[1] * (lon - center[1]) + origin[0]  		y = a[0] * (lat - center[0]) + origin[1]    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_ring.html#_map_map_to_image_rectangular", "_map_map_to_image_rectangular", 'routine in <a href="obj/map/map_map_to_image_ring.html">map_map_to_image_ring.pro</a>', "map_map_to_image_ring.pro", "", "_map_map_to_image_rectangular", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image_sinusoidal.html", "map_map_to_image_sinusoidal.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image_sinusoidal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_sinusoidal.html#map_map_to_image_sinusoidal", "map_map_to_image_sinusoidal", 'routine in <a href="obj/map/map_map_to_image_sinusoidal.html">map_map_to_image_sinusoidal.pro</a>', "map_map_to_image_sinusoidal.pro", "", "map_map_to_image_sinusoidal", "", "mdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_map_to_image_stereographic.html", "map_map_to_image_stereographic.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_map_to_image_stereographic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_map_to_image_stereographic.html#map_map_to_image_stereographic", "map_map_to_image_stereographic", 'routine in <a href="obj/map/map_map_to_image_stereographic.html">map_map_to_image_stereographic.pro</a>', "map_map_to_image_stereographic.pro", "", "map_map_to_image_stereographic", "	Transforms the given map points to map image points using the 	stereographic projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map image points in an stereographic 	projection.  This projection results from the projection through 	a sphere onto a plane, from a point on the surface of the sphere. 	Scale is true only at the map center.  Areas are distorted, 	especially away from the map center.  	With:  	  a = [size[0],size[1]]/4 * scale,  	and:  	  e = sqrt(1 - (A/(B+C)/2)^2),  	where A, B, and C are the triaxial ellipsoid radii, and:  	  lat0 = lat / units[0]  	  lon0 = lon / units[1]  	  m1 = cos(center[0]]) / sqrt(1 - e^2*sin(center[0])^2)  	  X = 2*atan(tan(pi/4 + lat/2) * $ 	       ((1 - e*sin(lat0))/(1 + e*sin(lat0)))^(e/2)) - pi/2  	  X1 = 2*atan(tan(pi/4 + center[0]/2) * 	       ((1 - e*sin(center[0]))/(1 + e*sin(center[0])))^(e/2)) - pi/2d  	  A = 2*a*scale*m1 / 	   ( cos(X1)*(1 + sin(X1)*sin(X) + cos(X1)*cos(X)*cos(lon0 - center[1])) )  	the transformation is:  	  x = A * cos(X)*sin(lon0 - center[1]) + origin[0]  	  y = A * ( cos(X1)*sin(X) - sin(X1)*cos(X)*sin(lon0 - center[1]) ) + 	                                                              origin[1]  	See [1], p. 160 for the mathematical derivation.  	[1] Snyder (1987) 	    Map projections -- A working manual 	    USGS professional paper 1395    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_match_type.html", "map_match_type.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_match_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_match_type.html#map_match_type", "map_match_type", 'routine in <a href="obj/map/map_match_type.html">map_match_type.pro</a>', "map_match_type.pro", "", "map_match_type", "", "_type", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_optimize.html", "map_optimize.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_optimize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_optimize.html#map_optimize", "map_optimize", 'routine in <a href="obj/map/map_optimize.html">map_optimize.pro</a>', "map_optimize.pro", "", "map_optimize", "", "mdtypesizeoriginlatminlonminradmin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_origin.html", "map_origin.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_origin.html#map_origin", "map_origin", 'routine in <a href="obj/map/map_origin.html">map_origin.pro</a>', "map_origin.pro", "", "map_origin", "	Returns the origin for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nt) of origins associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_pole.html", "map_pole.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_pole.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_pole.html#map_pole", "map_pole", 'routine in <a href="obj/map/map_pole.html">map_pole.pro</a>', "map_pole.pro", "", "map_pole", "	Returns the pole for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 8/2016   	Array (nt) of ominas_map_pole structs associated with each given map 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_query.html", "map_query.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_query.html#map_query", "map_query", 'routine in <a href="obj/map/map_query.html">map_query.pro</a>', "map_query.pro", "", "map_query", "	Returns the fields associated with a MAP object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@map__keywords.include", "NV/OBJ/MAP", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_radii.html", "map_radii.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_radii.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_radii.html#map_radii", "map_radii", 'routine in <a href="obj/map/map_radii.html">map_radii.pro</a>', "map_radii.pro", "", "map_radii", "	Returns the rference radii for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (3,nt) of refernce radii associated with each given map 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_radii_to_ecc.html", "map_radii_to_ecc.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_radii_to_ecc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_radii_to_ecc.html#map_radii_to_ecc", "map_radii_to_ecc", 'routine in <a href="obj/map/map_radii_to_ecc.html">map_radii_to_ecc.pro</a>', "map_radii_to_ecc.pro", "", "map_radii_to_ecc", "", "radradii", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/map/map_radii_to_ecc.html#___map_radii_to_ecc", "___map_radii_to_ecc", 'routine in <a href="obj/map/map_radii_to_ecc.html">map_radii_to_ecc.pro</a>', "map_radii_to_ecc.pro", "", "___map_radii_to_ecc", "", "radii", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_range.html", "map_range.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_range.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_range.html#map_range", "map_range", 'routine in <a href="obj/map/map_range.html">map_range.pro</a>', "map_range.pro", "", "map_range", "	Returns the range for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 7/2016   	Array (2,2,nt) of ranges associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_replicate.html", "map_replicate.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_replicate.html#map_replicate", "map_replicate", 'routine in <a href="obj/map/map_replicate.html">map_replicate.pro</a>', "map_replicate.pro", "", "map_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "md MAP descriptor.   dim Dimensions of the result.   ", "NV/LIB/MAP", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_rotate.html", "map_rotate.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_rotate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_rotate.html#map_rotate", "map_rotate", 'routine in <a href="obj/map/map_rotate.html">map_rotate.pro</a>', "map_rotate.pro", "", "map_rotate", "	Returns the rotate value for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of rotate values associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_scale.html", "map_scale.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_scale.html#map_scale", "map_scale", 'routine in <a href="obj/map/map_scale.html">map_scale.pro</a>', "map_scale.pro", "", "map_scale", "	Returns the scale factor for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of scale factors associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/map_set_bounds.html", "map_set_bounds.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "map_set_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/map_set_bounds.html#map_set_bounds", "map_set_bounds", 'routine in <a href="obj/tools/map_set_bounds.html">map_set_bounds.pro</a>', "map_set_bounds.pro", "", "map_set_bounds", "", "mdbounds", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_center.html", "map_set_center.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_center.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_center.html#map_set_center", "map_set_center", 'routine in <a href="obj/map/map_set_center.html">map_set_center.pro</a>', "map_set_center.pro", "", "map_set_center", "	Replaces the center for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   center Array (2,nt) of new map centers.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_fn_data.html", "map_set_fn_data.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_fn_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_fn_data.html#map_set_fn_data", "map_set_fn_data", 'routine in <a href="obj/map/map_set_fn_data.html">map_set_fn_data.pro</a>', "map_set_fn_data.pro", "", "map_set_fn_data", "	Replaces the function data for a map descriptor.    ", "noeventmd Map descriptor.   data New function data.   ", "NV/LIB/MAP", " 	Adapted by:	Spitale, 7/2016; adapted from map_set_fn_data_p   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_fn_image_to_map.html", "map_set_fn_image_to_map.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_fn_image_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_fn_image_to_map.html#map_set_fn_image_to_map", "map_set_fn_image_to_map", 'routine in <a href="obj/map/map_set_fn_image_to_map.html">map_set_fn_image_to_map.pro</a>', "map_set_fn_image_to_map.pro", "", "map_set_fn_image_to_map", "	Replaces the name of the image->map function for each given map 	descriptor.    ", "noeventmdfn", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_fn_map_to_image.html", "map_set_fn_map_to_image.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_fn_map_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_fn_map_to_image.html#map_set_fn_map_to_image", "map_set_fn_map_to_image", 'routine in <a href="obj/map/map_set_fn_map_to_image.html">map_set_fn_map_to_image.pro</a>', "map_set_fn_map_to_image.pro", "", "map_set_fn_map_to_image", "	Replaces the name of the map->image function for each given map 	descriptor.    ", "noeventmdfn", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_graphic.html", "map_set_graphic.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_graphic.html#map_set_graphic", "map_set_graphic", 'routine in <a href="obj/map/map_set_graphic.html">map_set_graphic.pro</a>', "map_set_graphic.pro", "", "map_set_graphic", "	Replaces the graphic flag for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   graphic Array (nt) of new graphic flags.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_origin.html", "map_set_origin.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_origin.html#map_set_origin", "map_set_origin", 'routine in <a href="obj/map/map_set_origin.html">map_set_origin.pro</a>', "map_set_origin.pro", "", "map_set_origin", "	Replaces the origin for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   origin Array (2,nt) of new map origins.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_pole.html", "map_set_pole.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_pole.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_pole.html#map_set_pole", "map_set_pole", 'routine in <a href="obj/map/map_set_pole.html">map_set_pole.pro</a>', "map_set_pole.pro", "", "map_set_pole", "	Replaces the pole for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   pole Array (nt) of new ominas_map_pole structs.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 8/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_radii.html", "map_set_radii.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_radii.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_radii.html#map_set_radii", "map_set_radii", 'routine in <a href="obj/map/map_set_radii.html">map_set_radii.pro</a>', "map_set_radii.pro", "", "map_set_radii", "	Replaces the reference radii for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   radii Array (3,nt) of new reference radii.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_range.html", "map_set_range.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_range.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_range.html#map_set_range", "map_set_range", 'routine in <a href="obj/map/map_set_range.html">map_set_range.pro</a>', "map_set_range.pro", "", "map_set_range", "	Replaces the range for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   range Array (2,2,nt) of new map ranges.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 7/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_rotate.html", "map_set_rotate.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_rotate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_rotate.html#map_set_rotate", "map_set_rotate", 'routine in <a href="obj/map/map_set_rotate.html">map_set_rotate.pro</a>', "map_set_rotate.pro", "", "map_set_rotate", "	Replaces the rotate value for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   rotate Array (nt) of new rotate values.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_scale.html", "map_set_scale.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_scale.html#map_set_scale", "map_set_scale", 'routine in <a href="obj/map/map_set_scale.html">map_set_scale.pro</a>', "map_set_scale.pro", "", "map_set_scale", "	Replaces the scale factor for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   scale Array (2,nt) of new scale factors.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_size.html", "map_set_size.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_size.html#map_set_size", "map_set_size", 'routine in <a href="obj/map/map_set_size.html">map_set_size.pro</a>', "map_set_size.pro", "", "map_set_size", "	Replaces the size for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   size Array (2,nt) of new map sizes.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_type.html", "map_set_type.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_type.html#map_set_type", "map_set_type", 'routine in <a href="obj/map/map_set_type.html">map_set_type.pro</a>', "map_set_type.pro", "", "map_set_type", "	Replaces the type name for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   type Array (nt) of new type names.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_set_units.html", "map_set_units.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_set_units.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_set_units.html#map_set_units", "map_set_units", 'routine in <a href="obj/map/map_set_units.html">map_set_units.pro</a>', "map_set_units.pro", "", "map_set_units", "	Replaces the units for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   units Array (2,nt) of new map units.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_size.html", "map_size.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_size.html#map_size", "map_size", 'routine in <a href="obj/map/map_size.html">map_size.pro</a>', "map_size.pro", "", "map_size", "	Returns the size for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nt) of sizes associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/map_to_disk.html", "map_to_disk.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "map_to_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/map_to_disk.html#map_to_disk", "map_to_disk", 'routine in <a href="obj/tools/composite/map_to_disk.html">map_to_disk.pro</a>', "map_to_disk.pro", "", "map_to_disk", "       Transforms points in map coordinates to disk coordinates.    ", "mdArray of nt map descriptors.   dkdmap_pts      Array (2 x nv x nt) of map points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of disk coordinates, with the altitude coordinate set to 	zero.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/map_to_globe.html", "map_to_globe.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "map_to_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/map_to_globe.html#map_to_globe", "map_to_globe", 'routine in <a href="obj/tools/composite/map_to_globe.html">map_to_globe.pro</a>', "map_to_globe.pro", "", "map_to_globe", "       Transforms points in map coordinates to surface coordinates.    ", "mdArray of nt map descriptors.   gbxArray of nt globe descriptors.   map_ptsArray (2 x nv x nt) of map points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of globe coordinates, with the altitude coordinate set to 	zero.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/map_to_image.html", "map_to_image.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "map_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/map_to_image.html#map_to_image", "map_to_image", 'routine in <a href="obj/tools/composite/map_to_image.html">map_to_image.pro</a>', "map_to_image.pro", "", "map_to_image", "       Transforms points from map coordinates to image coordinates.    ", "body_ptsBody coordinates of output points.    validIndices of valid output points.   mdArray of nt map descriptors describing the initial coordinate system. 		If bx is given, then this descriptor is not needed, though 		it may still be used to select between graphic/centric 		latitudes.   cdArray of nt camera or map descriptor describing the final 		coordinate system.   bxArray of nt Object descriptors (subclass of BODY).   map_pts      Array (2 x nv x nt) of map points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/map_to_surface.html", "map_to_surface.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "map_to_surface.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/map_to_surface.html#map_to_surface", "map_to_surface", 'routine in <a href="obj/tools/composite/map_to_surface.html">map_to_surface.pro</a>', "map_to_surface.pro", "", "map_to_surface", "       Transforms points in map coordinates to surface coordinates.    ", "mdArray of nt map descriptors.   bxArray of nt object descriptors (subclass of BODY.   map_ptsArray (2 x nv x nt) of map points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of surface coordinates, with the altitude coordinate 	set to zero.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_type.html", "map_type.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_type.html#map_type", "map_type", 'routine in <a href="obj/map/map_type.html">map_type.pro</a>', "map_type.pro", "", "map_type", "	Returns the type name for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of type names associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/map_unfold.html", "map_unfold.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "map_unfold.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/map_unfold.html#map_unfold", "map_unfold", 'routine in <a href="obj/tools/map_unfold.html">map_unfold.pro</a>', "map_unfold.pro", "", "map_unfold", "", "mdmd0map0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_units.html", "map_units.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_units.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_units.html#map_units", "map_units", 'routine in <a href="obj/map/map_units.html">map_units.pro</a>', "map_units.pro", "", "map_units", "	Returns the units for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nt) of units associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/map_units_disk.html", "map_units_disk.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "map_units_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/map_units_disk.html#map_units_disk", "map_units_disk", 'routine in <a href="obj/tools/map_units_disk.html">map_units_disk.pro</a>', "map_units_disk.pro", "", "map_units_disk", "	Computes units for a map descriptor given pixel scales for 	the map center.    ", "resradScale (length/pixel) in radial direction.   reslonScale (radians/pixel) in longitude direction.   mdMap descriptor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2) giving the map units.    ");
  
  

libdata[libdataItem++] = new Array("obj/map/map_valid_points_equatorial_ring.html", "map_valid_points_equatorial_ring.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_valid_points_equatorial_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_valid_points_equatorial_ring.html#map_valid_points_equatorial_ring", "map_valid_points_equatorial_ring", 'routine in <a href="obj/map/map_valid_points_equatorial_ring.html">map_valid_points_equatorial_ring.pro</a>', "map_valid_points_equatorial_ring.pro", "", "map_valid_points_equatorial_ring", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/map/map_valid_points_ring.html", "map_valid_points_ring.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "map_valid_points_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/map_valid_points_ring.html#map_valid_points_ring", "map_valid_points_ring", 'routine in <a href="obj/map/map_valid_points_ring.html">map_valid_points_ring.pro</a>', "map_valid_points_ring.pro", "", "map_valid_points_ring", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/mask_globe.html", "mask_globe.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "mask_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/mask_globe.html#mask_globe", "mask_globe", 'routine in <a href="obj/tools/mask_globe.html">mask_globe.pro</a>', "mask_globe.pro", "", "mask_globe", "	Computes an image mask for a globe.    ", "oversampleslopsubcdCamera descriptor.   _gbxAny subclass of GLOBE.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Angle in radians.     ");
  
  

libdata[libdataItem++] = new Array("obj/tools/minmax_latlon.html", "minmax_latlon.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "minmax_latlon.pro", "", "", "	Computes latitide/longitude ranges visible in a given camera.    ", "", "          -1", "       Written by:     Spitale   ");
  
  
  libdata[libdataItem++] = new Array("obj/tools/minmax_latlon.html#minmax_latlon", "minmax_latlon", 'routine in <a href="obj/tools/minmax_latlon.html">minmax_latlon.pro</a>', "minmax_latlon.pro", "", "minmax_latlon", "", "sloplatminlatmaxlonminlonmaxstatuscdpdrd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/mosaic.html", "mosaic.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "mosaic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/mosaic.html#mosaic", "mosaic", 'routine in <a href="obj/tools/mosaic.html">mosaic.pro</a>', "mosaic.pro", "", "mosaic", "", "combine_fnwt_fnsdatamosaicweightmaps", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/move_points.html", "move_points.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "move_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/move_points.html#move_points", "move_points", 'routine in <a href="obj/tools/move_points.html">move_points.pro</a>', "move_points.pro", "", "move_points", "", "axispointsdxydtheta", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sys/util/nv_clone.html", "nv_clone.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "nv_clone.pro", "", "", "       Allocates a new object as a copy of the given (existing) 	object.  All pointers in the new object are newly allocated.    ", "", "          -1", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("sys/util/nv_clone.html#nv_clone_match", "nv_clone_match", 'routine in <a href="sys/util/nv_clone.html">nv_clone.pro</a>', "nv_clone.pro", "", "nv_clone_match", "", "protecttag", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_clone.html#nv_clone_recurse", "nv_clone_recurse", 'routine in <a href="sys/util/nv_clone.html">nv_clone.pro</a>', "nv_clone.pro", "", "nv_clone_recurse", "", "protectxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_clone.html#nv_clone", "nv_clone", 'routine in <a href="sys/util/nv_clone.html">nv_clone.pro</a>', "nv_clone.pro", "", "nv_clone", "", "noeventprotectxd0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sys/event/nv_compress_events.html", "nv_compress_events.pro", '.pro file in <a href="sys/event/dir-overview.html">sys/event/ directory</a>', "nv_compress_events.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/event/nv_compress_events.html#nv_compress_events", "nv_compress_events", 'routine in <a href="sys/event/nv_compress_events.html">nv_compress_events.pro</a>', "nv_compress_events.pro", "", "nv_compress_events", "	Returns only unique events from the given buffer.    ", "bufArray of nv_event_struct.   ", "NV/SYS", " 	Written by:	Spitale   	All events in buf that are unique.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sys/util/nv_copy.html", "nv_copy.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "nv_copy.pro", "", "", "	Copies all fields from one descriptor to another.  New pointers 	are allocated only when the destination field is null.    ", "", "          -1", " 	Written by:	Spitale		3/2016   ");
  
  
  libdata[libdataItem++] = new Array("sys/util/nv_copy.html#nv_copy_is_scalar", "nv_copy_is_scalar", 'routine in <a href="sys/util/nv_copy.html">nv_copy.pro</a>', "nv_copy.pro", "", "nv_copy_is_scalar", "", "x", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_copy.html#nv_copy_recurse", "nv_copy_recurse", 'routine in <a href="sys/util/nv_copy.html">nv_copy.pro</a>', "nv_copy.pro", "", "nv_copy_recurse", "", "allocdst_xdsrc_xd", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_copy.html#nv_copy", "nv_copy", 'routine in <a href="sys/util/nv_copy.html">nv_copy.pro</a>', "nv_copy.pro", "", "nv_copy", "", "noeventdst_xdsrc_xd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sys/util/nv_debug.html", "nv_debug.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "nv_debug.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/util/nv_debug.html#nv_debug", "nv_debug", 'routine in <a href="sys/util/nv_debug.html">nv_debug.pro</a>', "nv_debug.pro", "", "nv_debug", "", "ptr_trackingptr_listptr_callsptr_call_level", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sys/util/nv_directive_stop__define.html", "nv_directive_stop__define.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "nv_directive_stop__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/util/nv_directive_stop__define.html#nv_directive_stop__define", "nv_directive_stop__define", 'routine in <a href="sys/util/nv_directive_stop__define.html">nv_directive_stop__define.pro</a>', "nv_directive_stop__define.pro", "", "nv_directive_stop__define", "	Structure defining the NV_STOP directive.    ", "", "NV/SYS", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("sys/event/nv_event_struct__define.html", "nv_event_struct__define.pro", '.pro file in <a href="sys/event/dir-overview.html">sys/event/ directory</a>', "nv_event_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/event/nv_event_struct__define.html#nv_event_struct__define", "nv_event_struct__define", 'routine in <a href="sys/event/nv_event_struct__define.html">nv_event_struct__define.pro</a>', "nv_event_struct__define.pro", "", "nv_event_struct__define", "	Structure defining the NV data event.    ", "", "NV/SYS", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("sys/event/nv_flush.html", "nv_flush.pro", '.pro file in <a href="sys/event/dir-overview.html">sys/event/ directory</a>', "nv_flush.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/event/nv_flush.html#nv_flush", "nv_flush", 'routine in <a href="sys/event/nv_flush.html">nv_flush.pro</a>', "nv_flush.pro", "", "nv_flush", "	Flushes the nv event buffer.    	Events are compressed so that duplicate events are not reported.  Each 	unique handler is called once with all of the relevant events given.    	nv_notify_block    STATUS: 	Complete    SEE ALSO: 	nv_notify    ", "cleareventsIf specified, these events are processed instead of those in 		the event buffer.    ", "NV/SYS", " 	Written by:	Spitale, 11/2002   	NONE    ");
  
  

libdata[libdataItem++] = new Array("sys/util/nv_free.html", "nv_free.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "nv_free.pro", "", "", "	Recursively frees a descriptor.  Pointers and structures are 	dereferenced and descended, freeing any pointers encountered.    ", "", "          -1", " 	Written by:	Spitale   ");
  
  
  libdata[libdataItem++] = new Array("sys/util/nv_free.html#nvf_recurse", "nvf_recurse", 'routine in <a href="sys/util/nv_free.html">nv_free.pro</a>', "nv_free.pro", "", "nvf_recurse", "", "p", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_free.html#nv_free", "nv_free", 'routine in <a href="sys/util/nv_free.html">nv_free.pro</a>', "nv_free.pro", "", "nv_free", "", "dp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sys/util/nv_help.html", "nv_help.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "nv_help.pro", "", "", "	Prints information about various OMINAS objects.    ", "", "          -1", " 	Written by:	Spitale, 2/1998   ");
  
  
  libdata[libdataItem++] = new Array("sys/util/nv_help.html#nv_help_print", "nv_help_print", 'routine in <a href="sys/util/nv_help.html">nv_help.pro</a>', "nv_help.pro", "", "nv_help_print", "", "captures", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_help.html#nv_help_sep", "nv_help_sep", 'routine in <a href="sys/util/nv_help.html">nv_help.pro</a>', "nv_help.pro", "", "nv_help_sep", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_help.html#nv_help_state", "nv_help_state", 'routine in <a href="sys/util/nv_help.html">nv_help.pro</a>', "nv_help.pro", "", "nv_help_state", "", "capture", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_help.html#nv_help_descend", "nv_help_descend", 'routine in <a href="sys/util/nv_help.html">nv_help.pro</a>', "nv_help.pro", "", "nv_help_descend", "", "capturedp0indentstringindex", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_help.html#nv_help_dump_events", "nv_help_dump_events", 'routine in <a href="sys/util/nv_help.html">nv_help.pro</a>', "nv_help.pro", "", "nv_help_dump_events", "", "captureitems", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_help.html#nv_help_event", "nv_help_event", 'routine in <a href="sys/util/nv_help.html">nv_help.pro</a>', "nv_help.pro", "", "nv_help_event", "", "capture", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_help.html#nv_help_doc", "nv_help_doc", 'routine in <a href="sys/util/nv_help.html">nv_help.pro</a>', "nv_help.pro", "", "nv_help_doc", "", "capturename", "          -1", "");
  
  libdata[libdataItem++] = new Array("sys/util/nv_help.html#nv_help", "nv_help", 'routine in <a href="sys/util/nv_help.html">nv_help.pro</a>', "nv_help.pro", "", "nv_help", "", "captureeventdp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sys/state/nv_init_state.html", "nv_init_state.pro", '.pro file in <a href="sys/state/dir-overview.html">sys/state/ directory</a>', "nv_init_state.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/state/nv_init_state.html#nv_init_state", "nv_init_state", 'routine in <a href="sys/state/nv_init_state.html">nv_init_state.pro</a>', "nv_init_state.pro", "", "nv_init_state", "	Initializes the NV state structure.    ", "", "NV/SYS", " 	Written by:	Spitale   	New nv_state structure.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sys/util/nv_message.html", "nv_message.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "nv_message.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/util/nv_message.html#nv_message", "nv_message", 'routine in <a href="sys/util/nv_message.html">nv_message.pro</a>', "nv_message.pro", "", "nv_message", "	Prints an error message and halts execution.    Environment variables:   	NV_VERBOSITY:	Initial verbosity setting.    ", "nameanonymouscontinueclearget_messageformatmessageexplanationcallbackcb_data_pdisconnectcb_tagverbosesilentstopstringMessage to print.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998   	message:	If /get_message, this keyword will return the last 			message sent through nv_message.    ");
  
  

libdata[libdataItem++] = new Array("sys/event/nv_notify.html", "nv_notify.pro", '.pro file in <a href="sys/event/dir-overview.html">sys/event/ directory</a>', "nv_notify.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/event/nv_notify.html#nv_notify", "nv_notify", 'routine in <a href="sys/event/nv_notify.html">nv_notify.pro</a>', "nv_notify.pro", "", "nv_notify", "	Notify nv system of an event on some set of descriptors.    	By default, write events are buffered.  Handlers for write events are 	only called when /flush is specified.  For read events, all event 	handlers of the specified type are called as procedures with an  	nv_event_struct as the argument.    	nv_notify_block    STATUS: 	Complete    SEE ALSO: 	nv_notify_register, nv_notify_unregister    ", "typeType of event: 		 0 - set value 		 1 - get value 		This input can have only one element.  If not given, the 		event type is assumed to be 0.   descflushFlush the write event buffer -- call the handlers for each 		unique event only once and clear the buffer.   noeventIf set, nothing is done.   xdDescriptor for which an event has occurred.   ", "NV/SYS", " 	Written by:	Spitale, 6/2002   	NONE    ");
  
  

libdata[libdataItem++] = new Array("sys/event/nv_notify_list_struct__define.html", "nv_notify_list_struct__define.pro", '.pro file in <a href="sys/event/dir-overview.html">sys/event/ directory</a>', "nv_notify_list_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/event/nv_notify_list_struct__define.html#nv_notify_list_struct__define", "nv_notify_list_struct__define", 'routine in <a href="sys/event/nv_notify_list_struct__define.html">nv_notify_list_struct__define.pro</a>', "nv_notify_list_struct__define.pro", "", "nv_notify_list_struct__define", "	Structure defining an entry in the NV event registry.    ", "", "NV/SYS", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("sys/event/nv_notify_register.html", "nv_notify_register.pro", '.pro file in <a href="sys/event/dir-overview.html">sys/event/ directory</a>', "nv_notify_register.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/event/nv_notify_register.html#nv_notify_register", "nv_notify_register", 'routine in <a href="sys/event/nv_notify_register.html">nv_notify_register.pro</a>', "nv_notify_register.pro", "", "nv_notify_register", "	Register descriptor event handlers.    	nv_notify_block    STATUS: 	Complete    SEE ALSO: 	nv_notify_unregister    ", "data	Arbitrary user data to associate with events on these 			descriptors.  A pointer to this data is allocated and 			returned in the 'data_p' field of the event structure. 			Note that only one descriptor xd may be specified 			per call when using this argument.   scalar_dataScalar user data to associate with events on these 			descriptors.  This data is returned in the 'data' 			field of the event structure.   compressEvent compression flag.   _xd	Array of descriptors.   handlerName of event handler functions.  If only one element, 			then this function will be registered for every given 			descriptor.  Otherwise must have the same number of 			elements as xd.   type	Type of data event to respond to: 			 0 - set value 			 1 - get value 			0 is default.  If only one element, then this type 			will be registered for every given descriptor. 			Otherwise must have the same number of elements as xd.   ", "NV/SYS", " 	Written by:	Spitale, 6/2002   	NONE    ");
  
  

libdata[libdataItem++] = new Array("sys/event/nv_notify_unregister.html", "nv_notify_unregister.pro", '.pro file in <a href="sys/event/dir-overview.html">sys/event/ directory</a>', "nv_notify_unregister.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/event/nv_notify_unregister.html#nv_notify_unregister", "nv_notify_unregister", 'routine in <a href="sys/event/nv_notify_unregister.html">nv_notify_unregister.pro</a>', "nv_notify_unregister.pro", "", "nv_notify_unregister", "	Unregister a descriptor event handler.    	nv_notify_block    STATUS: 	Complete    SEE ALSO: 	nv_notify_register    ", "all	If set, all handlers are unregistered.   xd	Descriptors for which to discontinue notification.   handlerIf given, names of event handler functions to remove 			for each given descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 6/2002   	NONE    ");
  
  

libdata[libdataItem++] = new Array("sys/event/nv_ping.html", "nv_ping.pro", '.pro file in <a href="sys/event/dir-overview.html">sys/event/ directory</a>', "nv_ping.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/event/nv_ping.html#nv_ping", "nv_ping", 'routine in <a href="sys/event/nv_ping.html">nv_ping.pro</a>', "nv_ping.pro", "", "nv_ping", "	Generates a write event on a set of descriptors.    ", "noeventxdp", "NV/SYS", " 	Written by:	Spitale, 5/2014   ");
  
  

libdata[libdataItem++] = new Array("sys/util/nv_protected.html", "nv_protected.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "nv_protected.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/util/nv_protected.html#nv_protected", "nv_protected", 'routine in <a href="sys/util/nv_protected.html">nv_protected.pro</a>', "nv_protected.pro", "", "nv_protected", "	Tests whether a structure or field is protected.  Protected fields 	are not freed by nv_free, nor are they descended by nv_free 	or nv_clone.    ", "arg", "NV/SYS", " 	Written by:	Spitale, 7/2016   	1 if protected, 0 if not.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("sys/util/nv_ptr_free.html", "nv_ptr_free.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "nv_ptr_free.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/util/nv_ptr_free.html#nv_ptr_free", "nv_ptr_free", 'routine in <a href="sys/util/nv_ptr_free.html">nv_ptr_free.pro</a>', "nv_ptr_free.pro", "", "nv_ptr_free", "	Wrapper to the IDL routine ptr_free.  In conjunction with nv_ptr_new, 	pointer allocations are tracked for debugging purposes.    ", "pPointer to free.   ", "NV/SYS", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("sys/util/nv_ptr_new.html", "nv_ptr_new.pro", '.pro file in <a href="sys/util/dir-overview.html">sys/util/ directory</a>', "nv_ptr_new.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/util/nv_ptr_new.html#nv_ptr_new", "nv_ptr_new", 'routine in <a href="sys/util/nv_ptr_new.html">nv_ptr_new.pro</a>', "nv_ptr_new.pro", "", "nv_ptr_new", "	Wrapper for te IDL function ptr_new.  In conjunction with nv_ptr_free, 	pointer allocations are tracked for debugging purposes.    ", "allocate_heapno_copyxData to point to.   ", "NV/SYS", " 	Written by:	Spitale   	Newly allocated pointer    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sys/state/nv_reset.html", "nv_reset.pro", '.pro file in <a href="sys/state/dir-overview.html">sys/state/ directory</a>', "nv_reset.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/state/nv_reset.html#nv_reset", "nv_reset", 'routine in <a href="sys/state/nv_reset.html">nv_reset.pro</a>', "nv_reset.pro", "", "nv_reset", "	Resets the NV state.    ", "", "NV/LIB/BOD", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("sys/event/nv_resume_events.html", "nv_resume_events.pro", '.pro file in <a href="sys/event/dir-overview.html">sys/event/ directory</a>', "nv_resume_events.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/event/nv_resume_events.html#nv_resume_events", "nv_resume_events", 'routine in <a href="sys/event/nv_resume_events.html">nv_resume_events.pro</a>', "nv_resume_events.pro", "", "nv_resume_events", "	Resumes data event tracking.    ", "", "NV/LIB/BOD", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("sys/state/nv_state_struct__define.html", "nv_state_struct__define.pro", '.pro file in <a href="sys/state/dir-overview.html">sys/state/ directory</a>', "nv_state_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/state/nv_state_struct__define.html#nv_state_struct__define", "nv_state_struct__define", 'routine in <a href="sys/state/nv_state_struct__define.html">nv_state_struct__define.pro</a>', "nv_state_struct__define.pro", "", "nv_state_struct__define", "	Structure defining the NV state.    ", "", "NV/SYS", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("sys/event/nv_suspend_events.html", "nv_suspend_events.pro", '.pro file in <a href="sys/event/dir-overview.html">sys/event/ directory</a>', "nv_suspend_events.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sys/event/nv_suspend_events.html#nv_suspend_events", "nv_suspend_events", 'routine in <a href="sys/event/nv_suspend_events.html">nv_suspend_events.pro</a>', "nv_suspend_events.pro", "", "nv_suspend_events", "	Suspends data event tracking.    ", "", "NV/LIB/BOD", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("obj/arr/ominas_array__define.html", "ominas_array__define.pro", '.pro file in <a href="obj/arr/dir-overview.html">obj/arr/ directory</a>', "ominas_array__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/arr/ominas_array__define.html#ominas_array::init", "ominas_array::init", 'routine in <a href="obj/arr/ominas_array__define.html">ominas_array__define.pro</a>', "ominas_array__define.pro", "", "ominas_array::init", "", "crdardii@arr__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/arr/ominas_array__define.html#ominas_array__define", "ominas_array__define", 'routine in <a href="obj/arr/ominas_array__define.html">ominas_array__define.pro</a>', "ominas_array__define.pro", "", "ominas_array__define", "	Class structure for the ARRAY class.    ", "", "NV/LIB/arr", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016  ");
  
  

libdata[libdataItem++] = new Array("obj/bod/ominas_body__define.html", "ominas_body__define.pro", '.pro file in <a href="obj/bod/dir-overview.html">obj/bod/ directory</a>', "ominas_body__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/bod/ominas_body__define.html#ominas_body::init", "ominas_body::init", 'routine in <a href="obj/bod/ominas_body__define.html">ominas_body__define.pro</a>', "ominas_body__define.pro", "", "ominas_body::init", "", "crdbdii@bod__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/bod/ominas_body__define.html#ominas_body__define", "ominas_body__define", 'routine in <a href="obj/bod/ominas_body__define.html">ominas_body__define.pro</a>', "ominas_body__define.pro", "", "ominas_body__define", "	Class structure for the BODY class.    ", "", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cam/ominas_camera__define.html", "ominas_camera__define.pro", '.pro file in <a href="obj/cam/dir-overview.html">obj/cam/ directory</a>', "ominas_camera__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cam/ominas_camera__define.html#ominas_camera::init", "ominas_camera::init", 'routine in <a href="obj/cam/ominas_camera__define.html">ominas_camera__define.pro</a>', "ominas_camera__define.pro", "", "ominas_camera::init", "", "crdbdcdii@cam__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/cam/ominas_camera__define.html#ominas_camera__define", "ominas_camera__define", 'routine in <a href="obj/cam/ominas_camera__define.html">ominas_camera__define.pro</a>', "ominas_camera__define.pro", "", "ominas_camera__define", "	Class structure fo the CAMERA class.    ", "", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/cor/ominas_core__define.html", "ominas_core__define.pro", '.pro file in <a href="obj/cor/dir-overview.html">obj/cor/ directory</a>', "ominas_core__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/cor/ominas_core__define.html#ominas_core::rereference", "ominas_core::rereference", 'routine in <a href="obj/cor/ominas_core__define.html">ominas_core__define.pro</a>', "ominas_core__define.pro", "", "ominas_core::rereference", "", "struct", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/cor/ominas_core__define.html#ominas_core::dereference", "ominas_core::dereference", 'routine in <a href="obj/cor/ominas_core__define.html">ominas_core__define.pro</a>', "ominas_core__define.pro", "", "ominas_core::dereference", "", "struct", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/cor/ominas_core__define.html#ominas_core::init", "ominas_core::init", 'routine in <a href="obj/cor/ominas_core__define.html">ominas_core__define.pro</a>', "ominas_core__define.pro", "", "ominas_core::init", "", "crdii@cor__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/cor/ominas_core__define.html#ominas_core__define", "ominas_core__define", 'routine in <a href="obj/cor/ominas_core__define.html">ominas_core__define.pro</a>', "ominas_core__define.pro", "", "ominas_core__define", "	Class structure for the CORE class.    ", "", "NV/OBJ/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/dat/ominas_data__define.html", "ominas_data__define.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "ominas_data__define.pro", "", "", "	Structure defining the data descriptor.    ", "", "          -1", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("obj/dat/ominas_data__define.html#ominas_data::init", "ominas_data::init", 'routine in <a href="obj/dat/ominas_data__define.html">ominas_data__define.pro</a>', "ominas_data__define.pro", "", "ominas_data::init", "", "crdddii@dat__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/ominas_data__define.html#dat_dd0_struct__define", "dat_dd0_struct__define", 'routine in <a href="obj/dat/ominas_data__define.html">ominas_data__define.pro</a>', "ominas_data__define.pro", "", "dat_dd0_struct__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/ominas_data__define.html#ominas_data__define", "ominas_data__define", 'routine in <a href="obj/dat/ominas_data__define.html">ominas_data__define.pro</a>', "ominas_data__define.pro", "", "ominas_data__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/dsk/ominas_disk__define.html", "ominas_disk__define.pro", '.pro file in <a href="obj/dsk/dir-overview.html">obj/dsk/ directory</a>', "ominas_disk__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/dsk/ominas_disk__define.html#ominas_disk::init", "ominas_disk::init", 'routine in <a href="obj/dsk/ominas_disk__define.html">ominas_disk__define.pro</a>', "ominas_disk__define.pro", "", "ominas_disk::init", "", "crdbdslddkdii@dsk__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dsk/ominas_disk__define.html#ominas_disk__define", "ominas_disk__define", 'routine in <a href="obj/dsk/ominas_disk__define.html">ominas_disk__define.pro</a>', "ominas_disk__define.pro", "", "ominas_disk__define", "	Class structure for the DISK class.    ", "", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/glb/ominas_globe__define.html", "ominas_globe__define.pro", '.pro file in <a href="obj/glb/dir-overview.html">obj/glb/ directory</a>', "ominas_globe__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/glb/ominas_globe__define.html#ominas_globe::init", "ominas_globe::init", 'routine in <a href="obj/glb/ominas_globe__define.html">ominas_globe__define.pro</a>', "ominas_globe__define.pro", "", "ominas_globe::init", "", "crdbdsldgbdii@glb__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/glb/ominas_globe__define.html#ominas_globe__define", "ominas_globe__define", 'routine in <a href="obj/glb/ominas_globe__define.html">ominas_globe__define.pro</a>', "ominas_globe__define.pro", "", "ominas_globe__define", "	Class structure fo the GLOBE class.    ", "", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/map/ominas_map__define.html", "ominas_map__define.pro", '.pro file in <a href="obj/map/dir-overview.html">obj/map/ directory</a>', "ominas_map__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/map/ominas_map__define.html#ominas_map::init", "ominas_map::init", 'routine in <a href="obj/map/ominas_map__define.html">ominas_map__define.pro</a>', "ominas_map__define.pro", "", "ominas_map::init", "", "crdmdii@map__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/map/ominas_map__define.html#ominas_map__define", "ominas_map__define", 'routine in <a href="obj/map/ominas_map__define.html">ominas_map__define.pro</a>', "ominas_map__define.pro", "", "ominas_map__define", "	Class structure fo the MAP class.    ", "", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("obj/plt/ominas_planet__define.html", "ominas_planet__define.pro", '.pro file in <a href="obj/plt/dir-overview.html">obj/plt/ directory</a>', "ominas_planet__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/plt/ominas_planet__define.html#ominas_planet::init", "ominas_planet::init", 'routine in <a href="obj/plt/ominas_planet__define.html">ominas_planet__define.pro</a>', "ominas_planet__define.pro", "", "ominas_planet::init", "", "crdbdsldgbdpdii@plt__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/plt/ominas_planet__define.html#ominas_planet__define", "ominas_planet__define", 'routine in <a href="obj/plt/ominas_planet__define.html">ominas_planet__define.pro</a>', "ominas_planet__define.pro", "", "ominas_planet__define", "	Class structure for the PLANET class.    ", "", "NV/LIB/PLT", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/ominas_point__define.html", "ominas_point__define.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "ominas_point__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/ominas_point__define.html#ominas_point::init", "ominas_point::init", 'routine in <a href="obj/pnt/ominas_point__define.html">ominas_point__define.pro</a>', "ominas_point__define.pro", "", "ominas_point::init", "", "crdptdii@pnt__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/pnt/ominas_point__define.html#ominas_point__define", "ominas_point__define", 'routine in <a href="obj/pnt/ominas_point__define.html">ominas_point__define.pro</a>', "ominas_point__define.pro", "", "ominas_point__define", "	Structure for managing points.    ", "", "NV/OBJ/PNT", "  Spitale, 11/2015; 	Adapted from pg_points_struct__define   ");
  
  

libdata[libdataItem++] = new Array("obj/rng/ominas_ring__define.html", "ominas_ring__define.pro", '.pro file in <a href="obj/rng/dir-overview.html">obj/rng/ directory</a>', "ominas_ring__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/rng/ominas_ring__define.html#ominas_ring::init", "ominas_ring::init", 'routine in <a href="obj/rng/ominas_ring__define.html">ominas_ring__define.pro</a>', "ominas_ring__define.pro", "", "ominas_ring::init", "", "crdbdslddkdrdii@rng__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/rng/ominas_ring__define.html#ominas_ring__define", "ominas_ring__define", 'routine in <a href="obj/rng/ominas_ring__define.html">ominas_ring__define.pro</a>', "ominas_ring__define.pro", "", "ominas_ring__define", "	Class structure for the RING class.    ", "", "NV/LIB/RNG", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/sld/ominas_solid__define.html", "ominas_solid__define.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "ominas_solid__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/ominas_solid__define.html#ominas_solid::init", "ominas_solid::init", 'routine in <a href="obj/sld/ominas_solid__define.html">ominas_solid__define.pro</a>', "ominas_solid__define.pro", "", "ominas_solid::init", "", "crdbdsldii@sld__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/sld/ominas_solid__define.html#ominas_solid__define", "ominas_solid__define", 'routine in <a href="obj/sld/ominas_solid__define.html">ominas_solid__define.pro</a>', "ominas_solid__define.pro", "", "ominas_solid__define", "	Class structure fo the SOLID class.    ", "", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/str/ominas_star__define.html", "ominas_star__define.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "ominas_star__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/ominas_star__define.html#ominas_star::init", "ominas_star::init", 'routine in <a href="obj/str/ominas_star__define.html">ominas_star__define.pro</a>', "ominas_star__define.pro", "", "ominas_star::init", "", "crdbdsldgbdsdii@str__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/str/ominas_star__define.html#ominas_star__define", "ominas_star__define", 'routine in <a href="obj/str/ominas_star__define.html">ominas_star__define.pro</a>', "ominas_star__define.pro", "", "ominas_star__define", "	Class structure for the STAR class.    ", "", "NV/LIB/STR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/stn/ominas_station__define.html", "ominas_station__define.pro", '.pro file in <a href="obj/stn/dir-overview.html">obj/stn/ directory</a>', "ominas_station__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/stn/ominas_station__define.html#ominas_station::init", "ominas_station::init", 'routine in <a href="obj/stn/ominas_station__define.html">ominas_station__define.pro</a>', "ominas_station__define.pro", "", "ominas_station::init", "", "crdbdstdii@stn__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/stn/ominas_station__define.html#ominas_station__define", "ominas_station__define", 'routine in <a href="obj/stn/ominas_station__define.html">ominas_station__define.pro</a>', "ominas_station__define.pro", "", "ominas_station__define", "	Class structure for the STATION class.    ", "", "NV/LIB/STN", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_anom_to_arg.html", "orb_anom_to_arg.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_anom_to_arg.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_anom_to_arg.html#orb_anom_to_arg", "orb_anom_to_arg", 'routine in <a href="obj/tools/orb/orb_anom_to_arg.html">orb_anom_to_arg.pro</a>', "orb_anom_to_arg.pro", "", "orb_anom_to_arg", "", "apxdanomframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_anom_to_arg_rate.html", "orb_anom_to_arg_rate.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_anom_to_arg_rate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_anom_to_arg_rate.html#orb_anom_to_arg_rate", "orb_anom_to_arg_rate", 'routine in <a href="obj/tools/orb/orb_anom_to_arg_rate.html">orb_anom_to_arg_rate.pro</a>', "orb_anom_to_arg_rate.pro", "", "orb_anom_to_arg_rate", "", "dapdtxddanomdtframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_anom_to_lon.html", "orb_anom_to_lon.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_anom_to_lon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_anom_to_lon.html#orb_anom_to_lon", "orb_anom_to_lon", 'routine in <a href="obj/tools/orb/orb_anom_to_lon.html">orb_anom_to_lon.pro</a>', "orb_anom_to_lon.pro", "", "orb_anom_to_lon", "", "aplanxdanomframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_anom_to_lon_rate.html", "orb_anom_to_lon_rate.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_anom_to_lon_rate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_anom_to_lon_rate.html#orb_anom_to_lon_rate", "orb_anom_to_lon_rate", 'routine in <a href="obj/tools/orb/orb_anom_to_lon_rate.html">orb_anom_to_lon_rate.pro</a>', "orb_anom_to_lon_rate.pro", "", "orb_anom_to_lon_rate", "", "dapdtdlandtxddanomdtframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_arg_to_anom.html", "orb_arg_to_anom.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_arg_to_anom.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_arg_to_anom.html#orb_arg_to_anom", "orb_arg_to_anom", 'routine in <a href="obj/tools/orb/orb_arg_to_anom.html">orb_arg_to_anom.pro</a>', "orb_arg_to_anom.pro", "", "orb_arg_to_anom", "", "apxdargframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_arg_to_anom_rate.html", "orb_arg_to_anom_rate.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_arg_to_anom_rate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_arg_to_anom_rate.html#orb_arg_to_anom_rate", "orb_arg_to_anom_rate", 'routine in <a href="obj/tools/orb/orb_arg_to_anom_rate.html">orb_arg_to_anom_rate.pro</a>', "orb_arg_to_anom_rate.pro", "", "orb_arg_to_anom_rate", "", "dapdtxddargdtframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_arg_to_lon.html", "orb_arg_to_lon.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_arg_to_lon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_arg_to_lon.html#orb_arg_to_lon", "orb_arg_to_lon", 'routine in <a href="obj/tools/orb/orb_arg_to_lon.html">orb_arg_to_lon.pro</a>', "orb_arg_to_lon.pro", "", "orb_arg_to_lon", "", "lanxdargframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_arg_to_lon_rate.html", "orb_arg_to_lon_rate.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_arg_to_lon_rate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_arg_to_lon_rate.html#orb_arg_to_lon_rate", "orb_arg_to_lon_rate", 'routine in <a href="obj/tools/orb/orb_arg_to_lon_rate.html">orb_arg_to_lon_rate.pro</a>', "orb_arg_to_lon_rate.pro", "", "orb_arg_to_lon_rate", "", "dlandtxddargdtframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_cartesian_to_orbit.html", "orb_cartesian_to_orbit.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_cartesian_to_orbit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_cartesian_to_orbit.html#orb_cartesian_to_orbit", "orb_cartesian_to_orbit", 'routine in <a href="obj/tools/orb/orb_cartesian_to_orbit.html">orb_cartesian_to_orbit.pro</a>', "orb_cartesian_to_orbit.pro", "", "orb_cartesian_to_orbit", "", "GGcirculargbx_r_v", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dapdt.html", "orb_compute_dapdt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_dapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dapdt.html#orb_compute_dapdt", "orb_compute_dapdt", 'routine in <a href="obj/tools/orb/orb_compute_dapdt.html">orb_compute_dapdt.pro</a>', "orb_compute_dapdt.pro", "", "orb_compute_dapdt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dlandt.html", "orb_compute_dlandt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_dlandt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dlandt.html#orb_compute_dlandt", "orb_compute_dlandt", 'routine in <a href="obj/tools/orb/orb_compute_dlandt.html">orb_compute_dlandt.pro</a>', "orb_compute_dlandt.pro", "", "orb_compute_dlandt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dlpdt.html", "orb_compute_dlpdt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_dlpdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dlpdt.html#orb_compute_dlpdt", "orb_compute_dlpdt", 'routine in <a href="obj/tools/orb/orb_compute_dlpdt.html">orb_compute_dlpdt.pro</a>', "orb_compute_dlpdt.pro", "", "orb_compute_dlpdt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dmadt.html", "orb_compute_dmadt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_dmadt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dmadt.html#orb_compute_dmadt", "orb_compute_dmadt", 'routine in <a href="obj/tools/orb/orb_compute_dmadt.html">orb_compute_dmadt.pro</a>', "orb_compute_dmadt.pro", "", "orb_compute_dmadt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dmldt.html", "orb_compute_dmldt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_dmldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dmldt.html#orb_compute_dmldt", "orb_compute_dmldt", 'routine in <a href="obj/tools/orb/orb_compute_dmldt.html">orb_compute_dmldt.pro</a>', "orb_compute_dmldt.pro", "", "orb_compute_dmldt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dtapdt.html", "orb_compute_dtapdt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_dtapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_dtapdt.html#orb_compute_dtapdt", "orb_compute_dtapdt", 'routine in <a href="obj/tools/orb/orb_compute_dtapdt.html">orb_compute_dtapdt.pro</a>', "orb_compute_dtapdt.pro", "", "orb_compute_dtapdt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_ea.html", "orb_compute_ea.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_ea.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_ea.html#osk_eval", "osk_eval", 'routine in <a href="obj/tools/orb/orb_compute_ea.html">orb_compute_ea.pro</a>', "orb_compute_ea.pro", "", "osk_eval", "", "ea", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_ea.html#orb_compute_ea", "orb_compute_ea", 'routine in <a href="obj/tools/orb/orb_compute_ea.html">orb_compute_ea.pro</a>', "orb_compute_ea.pro", "", "orb_compute_ea", "", "eccrx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_elements.html", "orb_compute_elements.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_elements.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_elements.html#orb_compute_elements", "orb_compute_elements", 'routine in <a href="obj/tools/orb/orb_compute_elements.html">orb_compute_elements.pro</a>', "orb_compute_elements.pro", "", "orb_compute_elements", "", "smaeccincaplandmldtdmadtdapdtliba_apdlibdt_aplib_apdlandtliba_landlibdt_lanlib_lanmamllptatlraddlpdttimerdtgbxtrdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_ma.html", "orb_compute_ma.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_ma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_ma.html#orb_compute_ma", "orb_compute_ma", 'routine in <a href="obj/tools/orb/orb_compute_ma.html">orb_compute_ma.pro</a>', "orb_compute_ma.pro", "", "orb_compute_ma", "", "eccfearx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_r.html", "orb_compute_r.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_r.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_r.html#orb_compute_r", "orb_compute_r", 'routine in <a href="obj/tools/orb/orb_compute_r.html">orb_compute_r.pro</a>', "orb_compute_r.pro", "", "orb_compute_r", "", "rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/old/orb_compute_sma-old.html", "orb_compute_sma-old.pro", '.pro file in <a href="obj/tools/orb/old/dir-overview.html">obj/tools/orb/old/ directory</a>', "orb_compute_sma-old.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/old/orb_compute_sma-old.html#ocsma_fn", "ocsma_fn", 'routine in <a href="obj/tools/orb/old/orb_compute_sma-old.html">orb_compute_sma-old.pro</a>', "orb_compute_sma-old.pro", "", "ocsma_fn", "", "a", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/orb/old/orb_compute_sma-old.html#orb_compute_sma", "orb_compute_sma", 'routine in <a href="obj/tools/orb/old/orb_compute_sma-old.html">orb_compute_sma-old.pro</a>', "orb_compute_sma-old.pro", "", "orb_compute_sma", "", "GGdmldtxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_sma.html", "orb_compute_sma.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_sma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_sma.html#ocsma_fn", "ocsma_fn", 'routine in <a href="obj/tools/orb/orb_compute_sma.html">orb_compute_sma.pro</a>', "orb_compute_sma.pro", "", "ocsma_fn", "", "a", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_sma.html#orb_compute_sma", "orb_compute_sma", 'routine in <a href="obj/tools/orb/orb_compute_sma.html">orb_compute_sma.pro</a>', "orb_compute_sma.pro", "", "orb_compute_sma", "", "GGJdmldtdlpdtdapdtdlandtxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_ta.html", "orb_compute_ta.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_compute_ta.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_compute_ta.html#orb_compute_ta", "orb_compute_ta", 'routine in <a href="obj/tools/orb/orb_compute_ta.html">orb_compute_ta.pro</a>', "orb_compute_ta.pro", "", "orb_compute_ta", "", "rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_construct_descriptor.html", "orb_construct_descriptor.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_construct_descriptor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_construct_descriptor.html#orb_construct_descriptor", "orb_construct_descriptor", 'routine in <a href="obj/tools/orb/orb_construct_descriptor.html">orb_construct_descriptor.pro</a>', "orb_construct_descriptor.pro", "", "orb_construct_descriptor", "", "namesmaeccinclanaplpmamltatldmldtdmadtdlandtliba_landlibdt_lanlib_landapdtliba_apdlibdt_aplib_apdlpdtmmem_lpmdlpmdtlibamlibmdlibmdtllil_lanldlanldtliballibldlibldttimepptrd0ringGGnoevolvenocomputerdoutgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_evolve.html", "orb_evolve.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_evolve.html#orb_evolve", "orb_evolve", 'routine in <a href="obj/tools/orb/orb_evolve.html">orb_evolve.pro</a>', "orb_evolve.pro", "", "orb_evolve", "", "rxdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_evolve_ma.html", "orb_evolve_ma.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_evolve_ma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_evolve_ma.html#orb_evolve_ma", "orb_evolve_ma", 'routine in <a href="obj/tools/orb/orb_evolve_ma.html">orb_evolve_ma.pro</a>', "orb_evolve_ma.pro", "", "orb_evolve_ma", "", "rxdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_ap.html", "orb_get_ap.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_ap.html#_orb_get_ap", "_orb_get_ap", 'routine in <a href="obj/tools/orb/orb_get_ap.html">orb_get_ap.pro</a>', "orb_get_ap.pro", "", "_orb_get_ap", "", "xdframe_bd", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_ap.html#orb_get_ap", "orb_get_ap", 'routine in <a href="obj/tools/orb/orb_get_ap.html">orb_get_ap.pro</a>', "orb_get_ap.pro", "", "orb_get_ap", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_ascending_node.html", "orb_get_ascending_node.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_ascending_node.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_ascending_node.html#orb_get_ascending_node", "orb_get_ascending_node", 'routine in <a href="obj/tools/orb/orb_get_ascending_node.html">orb_get_ascending_node.pro</a>', "orb_get_ascending_node.pro", "", "orb_get_ascending_node", "", "arbitraryrefsafexdframe_bd", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_ascending_node.html#_orb_get_ascending_node", "_orb_get_ascending_node", 'routine in <a href="obj/tools/orb/orb_get_ascending_node.html">orb_get_ascending_node.pro</a>', "orb_get_ascending_node.pro", "", "_orb_get_ascending_node", "", "arbitraryrefxdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dapdt.html", "orb_get_dapdt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_dapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dapdt.html#orb_get_dapdt", "orb_get_dapdt", 'routine in <a href="obj/tools/orb/orb_get_dapdt.html">orb_get_dapdt.pro</a>', "orb_get_dapdt.pro", "", "orb_get_dapdt", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dlandt.html", "orb_get_dlandt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_dlandt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dlandt.html#orb_get_dlandt", "orb_get_dlandt", 'routine in <a href="obj/tools/orb/orb_get_dlandt.html">orb_get_dlandt.pro</a>', "orb_get_dlandt.pro", "", "orb_get_dlandt", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dlibdt_ap.html", "orb_get_dlibdt_ap.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_dlibdt_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dlibdt_ap.html#orb_get_dlibdt_ap", "orb_get_dlibdt_ap", 'routine in <a href="obj/tools/orb/orb_get_dlibdt_ap.html">orb_get_dlibdt_ap.pro</a>', "orb_get_dlibdt_ap.pro", "", "orb_get_dlibdt_ap", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dlibdt_lan.html", "orb_get_dlibdt_lan.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_dlibdt_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dlibdt_lan.html#orb_get_dlibdt_lan", "orb_get_dlibdt_lan", 'routine in <a href="obj/tools/orb/orb_get_dlibdt_lan.html">orb_get_dlibdt_lan.pro</a>', "orb_get_dlibdt_lan.pro", "", "orb_get_dlibdt_lan", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dlpmdt.html", "orb_get_dlpmdt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_dlpmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dlpmdt.html#orb_get_dlpmdt", "orb_get_dlpmdt", 'routine in <a href="obj/tools/orb/orb_get_dlpmdt.html">orb_get_dlpmdt.pro</a>', "orb_get_dlpmdt.pro", "", "orb_get_dlpmdt", "", "rdpd0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dmadt.html", "orb_get_dmadt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_dmadt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dmadt.html#orb_get_dmadt", "orb_get_dmadt", 'routine in <a href="obj/tools/orb/orb_get_dmadt.html">orb_get_dmadt.pro</a>', "orb_get_dmadt.pro", "", "orb_get_dmadt", "", "xdjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dmldt.html", "orb_get_dmldt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_dmldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_dmldt.html#orb_get_dmldt", "orb_get_dmldt", 'routine in <a href="obj/tools/orb/orb_get_dmldt.html">orb_get_dmldt.pro</a>', "orb_get_dmldt.pro", "", "orb_get_dmldt", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_ecc.html", "orb_get_ecc.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_ecc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_ecc.html#orb_get_ecc", "orb_get_ecc", 'routine in <a href="obj/tools/orb/orb_get_ecc.html">orb_get_ecc.pro</a>', "orb_get_ecc.pro", "", "orb_get_ecc", "", "xdjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_inc.html", "orb_get_inc.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_inc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_inc.html#orb_get_inc", "orb_get_inc", 'routine in <a href="obj/tools/orb/orb_get_inc.html">orb_get_inc.pro</a>', "orb_get_inc.pro", "", "orb_get_inc", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_lan.html", "orb_get_lan.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_lan.html#orb_get_lan", "orb_get_lan", 'routine in <a href="obj/tools/orb/orb_get_lan.html">orb_get_lan.pro</a>', "orb_get_lan.pro", "", "orb_get_lan", "", "refxdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_lib_ap.html", "orb_get_lib_ap.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_lib_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_lib_ap.html#orb_get_lib_ap", "orb_get_lib_ap", 'routine in <a href="obj/tools/orb/orb_get_lib_ap.html">orb_get_lib_ap.pro</a>', "orb_get_lib_ap.pro", "", "orb_get_lib_ap", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_lib_lan.html", "orb_get_lib_lan.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_lib_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_lib_lan.html#orb_get_lib_lan", "orb_get_lib_lan", 'routine in <a href="obj/tools/orb/orb_get_lib_lan.html">orb_get_lib_lan.pro</a>', "orb_get_lib_lan.pro", "", "orb_get_lib_lan", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_liba_ap.html", "orb_get_liba_ap.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_liba_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_liba_ap.html#orb_get_liba_ap", "orb_get_liba_ap", 'routine in <a href="obj/tools/orb/orb_get_liba_ap.html">orb_get_liba_ap.pro</a>', "orb_get_liba_ap.pro", "", "orb_get_liba_ap", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_liba_lan.html", "orb_get_liba_lan.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_liba_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_liba_lan.html#orb_get_liba_lan", "orb_get_liba_lan", 'routine in <a href="obj/tools/orb/orb_get_liba_lan.html">orb_get_liba_lan.pro</a>', "orb_get_liba_lan.pro", "", "orb_get_liba_lan", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_lpm.html", "orb_get_lpm.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_lpm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_lpm.html#orb_get_lpm", "orb_get_lpm", 'routine in <a href="obj/tools/orb/orb_get_lpm.html">orb_get_lpm.pro</a>', "orb_get_lpm.pro", "", "orb_get_lpm", "", "rdpd0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_ma.html", "orb_get_ma.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_ma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_ma.html#orb_get_ma", "orb_get_ma", 'routine in <a href="obj/tools/orb/orb_get_ma.html">orb_get_ma.pro</a>', "orb_get_ma.pro", "", "orb_get_ma", "", "xdjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_sma.html", "orb_get_sma.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_get_sma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_get_sma.html#orb_get_sma", "orb_get_sma", 'routine in <a href="obj/tools/orb/orb_get_sma.html">orb_get_sma.pro</a>', "orb_get_sma.pro", "", "orb_get_sma", "", "xdjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_inertialize.html", "orb_inertialize.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_inertialize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_inertialize.html#orb_inertialize", "orb_inertialize", 'routine in <a href="obj/tools/orb/orb_inertialize.html">orb_inertialize.pro</a>', "orb_inertialize.pro", "", "orb_inertialize", "", "frame_bx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_init_descriptors.html", "orb_init_descriptors.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_init_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_init_descriptors.html#orb_create_descriptors", "orb_create_descriptors", 'routine in <a href="obj/tools/orb/orb_init_descriptors.html">orb_init_descriptors.pro</a>', "orb_init_descriptors.pro", "", "orb_create_descriptors", "", "namesmaeccinclanapmadmadtdlandtdapdttngbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_lon_to_anom.html", "orb_lon_to_anom.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_lon_to_anom.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_lon_to_anom.html#orb_lon_to_anom", "orb_lon_to_anom", 'routine in <a href="obj/tools/orb/orb_lon_to_anom.html">orb_lon_to_anom.pro</a>', "orb_lon_to_anom.pro", "", "orb_lon_to_anom", "", "aplanxdlonframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_lon_to_anom_rate.html", "orb_lon_to_anom_rate.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_lon_to_anom_rate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_lon_to_anom_rate.html#orb_lon_to_anom_rate", "orb_lon_to_anom_rate", 'routine in <a href="obj/tools/orb/orb_lon_to_anom_rate.html">orb_lon_to_anom_rate.pro</a>', "orb_lon_to_anom_rate.pro", "", "orb_lon_to_anom_rate", "", "dapdtdlandtxddlondtframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_lon_to_arg.html", "orb_lon_to_arg.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_lon_to_arg.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_lon_to_arg.html#orb_lon_to_arg", "orb_lon_to_arg", 'routine in <a href="obj/tools/orb/orb_lon_to_arg.html">orb_lon_to_arg.pro</a>', "orb_lon_to_arg.pro", "", "orb_lon_to_arg", "", "lanxdlonframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_lon_to_arg_rate.html", "orb_lon_to_arg_rate.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_lon_to_arg_rate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_lon_to_arg_rate.html#orb_lon_to_arg_rate", "orb_lon_to_arg_rate", 'routine in <a href="obj/tools/orb/orb_lon_to_arg_rate.html">orb_lon_to_arg_rate.pro</a>', "orb_lon_to_arg_rate.pro", "", "orb_lon_to_arg_rate", "", "dlandtxddlondtframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_lon_to_body.html", "orb_lon_to_body.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_lon_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_lon_to_body.html#orb_lon_to_body", "orb_lon_to_body", 'routine in <a href="obj/tools/orb/orb_lon_to_body.html">orb_lon_to_body.pro</a>', "orb_lon_to_body.pro", "", "orb_lon_to_body", "", "frame_bdxdlon", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_min_distance.html", "orb_min_distance.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_min_distance.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_min_distance.html#_eval_omd", "_eval_omd", 'routine in <a href="obj/tools/orb/orb_min_distance.html">orb_min_distance.pro</a>', "orb_min_distance.pro", "", "_eval_omd", "", "p", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_min_distance.html#orb_min_distance", "orb_min_distance", 'routine in <a href="obj/tools/orb/orb_min_distance.html">orb_min_distance.pro</a>', "orb_min_distance.pro", "", "orb_min_distance", "", "frame_bdlon1lon2distanceslons_xd1_xd2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_plot.html", "orb_plot.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_plot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_plot.html#orb_plot", "orb_plot", 'routine in <a href="obj/tools/orb/orb_plot.html">orb_plot.pro</a>', "orb_plot.pro", "", "orb_plot", "", "cd_rdframe_bx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_precess.html", "orb_precess.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_precess.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_precess.html#orb_precess", "orb_precess", 'routine in <a href="obj/tools/orb/orb_precess.html">orb_precess.pro</a>', "orb_precess.pro", "", "orb_precess", "", "_pd_rdpd_precessrd_precessobs_bx_pd0pd_rd0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_print_descriptor.html", "orb_print_descriptor.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_print_descriptor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_print_descriptor.html#orb_get_elements", "orb_get_elements", 'routine in <a href="obj/tools/orb/orb_print_descriptor.html">orb_print_descriptor.pro</a>', "orb_print_descriptor.pro", "", "orb_get_elements", "", "trdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_ap.html", "orb_set_ap.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_ap.html#orb_set_ap", "orb_set_ap", 'routine in <a href="obj/tools/orb/orb_set_ap.html">orb_set_ap.pro</a>', "orb_set_ap.pro", "", "orb_set_ap", "", "xdframe_bdap", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dapdt.html", "orb_set_dapdt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_dapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dapdt.html#orb_set_dapdt", "orb_set_dapdt", 'routine in <a href="obj/tools/orb/orb_set_dapdt.html">orb_set_dapdt.pro</a>', "orb_set_dapdt.pro", "", "orb_set_dapdt", "", "xdframe_bddapdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dlandt.html", "orb_set_dlandt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_dlandt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dlandt.html#orb_set_dlandt", "orb_set_dlandt", 'routine in <a href="obj/tools/orb/orb_set_dlandt.html">orb_set_dlandt.pro</a>', "orb_set_dlandt.pro", "", "orb_set_dlandt", "", "xdframe_bddlandt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dlibdt_ap.html", "orb_set_dlibdt_ap.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_dlibdt_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dlibdt_ap.html#orb_set_dlibdt_ap", "orb_set_dlibdt_ap", 'routine in <a href="obj/tools/orb/orb_set_dlibdt_ap.html">orb_set_dlibdt_ap.pro</a>', "orb_set_dlibdt_ap.pro", "", "orb_set_dlibdt_ap", "", "xdframe_bddlibdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dlibdt_lan.html", "orb_set_dlibdt_lan.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_dlibdt_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dlibdt_lan.html#orb_set_dlibdt_lan", "orb_set_dlibdt_lan", 'routine in <a href="obj/tools/orb/orb_set_dlibdt_lan.html">orb_set_dlibdt_lan.pro</a>', "orb_set_dlibdt_lan.pro", "", "orb_set_dlibdt_lan", "", "xdframe_bddlibdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dlpmdt.html", "orb_set_dlpmdt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_dlpmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dlpmdt.html#orb_set_dlpmdt", "orb_set_dlpmdt", 'routine in <a href="obj/tools/orb/orb_set_dlpmdt.html">orb_set_dlpmdt.pro</a>', "orb_set_dlpmdt.pro", "", "orb_set_dlpmdt", "", "rddlpmdtpd0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dmadt.html", "orb_set_dmadt.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_dmadt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_dmadt.html#orb_set_dmadt", "orb_set_dmadt", 'routine in <a href="obj/tools/orb/orb_set_dmadt.html">orb_set_dmadt.pro</a>', "orb_set_dmadt.pro", "", "orb_set_dmadt", "", "xddmadtjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_ecc.html", "orb_set_ecc.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_ecc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_ecc.html#orb_set_ecc", "orb_set_ecc", 'routine in <a href="obj/tools/orb/orb_set_ecc.html">orb_set_ecc.pro</a>', "orb_set_ecc.pro", "", "orb_set_ecc", "", "xd_eccjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_inc.html", "orb_set_inc.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_inc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_inc.html#orb_set_inc", "orb_set_inc", 'routine in <a href="obj/tools/orb/orb_set_inc.html">orb_set_inc.pro</a>', "orb_set_inc.pro", "", "orb_set_inc", "", "xdframe_bdinc", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_lan.html", "orb_set_lan.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_lan.html#orb_set_lan", "orb_set_lan", 'routine in <a href="obj/tools/orb/orb_set_lan.html">orb_set_lan.pro</a>', "orb_set_lan.pro", "", "orb_set_lan", "", "xdframe_bdlan", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_lib_ap.html", "orb_set_lib_ap.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_lib_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_lib_ap.html#orb_set_lib_ap", "orb_set_lib_ap", 'routine in <a href="obj/tools/orb/orb_set_lib_ap.html">orb_set_lib_ap.pro</a>', "orb_set_lib_ap.pro", "", "orb_set_lib_ap", "", "xdframe_bdlib", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_lib_lan.html", "orb_set_lib_lan.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_lib_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_lib_lan.html#orb_set_lib_lan", "orb_set_lib_lan", 'routine in <a href="obj/tools/orb/orb_set_lib_lan.html">orb_set_lib_lan.pro</a>', "orb_set_lib_lan.pro", "", "orb_set_lib_lan", "", "xdframe_bdlib_lan", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_liba_ap.html", "orb_set_liba_ap.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_liba_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_liba_ap.html#orb_set_liba_ap", "orb_set_liba_ap", 'routine in <a href="obj/tools/orb/orb_set_liba_ap.html">orb_set_liba_ap.pro</a>', "orb_set_liba_ap.pro", "", "orb_set_liba_ap", "", "xdframe_bdliba_ap", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_liba_lan.html", "orb_set_liba_lan.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_liba_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_liba_lan.html#orb_set_liba_lan", "orb_set_liba_lan", 'routine in <a href="obj/tools/orb/orb_set_liba_lan.html">orb_set_liba_lan.pro</a>', "orb_set_liba_lan.pro", "", "orb_set_liba_lan", "", "xdframe_bdliba_lan", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_lpm.html", "orb_set_lpm.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_lpm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_lpm.html#orb_set_lpm", "orb_set_lpm", 'routine in <a href="obj/tools/orb/orb_set_lpm.html">orb_set_lpm.pro</a>', "orb_set_lpm.pro", "", "orb_set_lpm", "", "rdlpmpd0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_ma.html", "orb_set_ma.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_ma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_ma.html#orb_set_ma", "orb_set_ma", 'routine in <a href="obj/tools/orb/orb_set_ma.html">orb_set_ma.pro</a>', "orb_set_ma.pro", "", "orb_set_ma", "", "xdmajunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_sma.html", "orb_set_sma.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_set_sma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_set_sma.html#orb_set_sma", "orb_set_sma", 'routine in <a href="obj/tools/orb/orb_set_sma.html">orb_set_sma.pro</a>', "orb_set_sma.pro", "", "orb_set_sma", "", "xd_smajunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/old/orb_solve_kepler.html", "orb_solve_kepler.pro", '.pro file in <a href="obj/tools/orb/old/dir-overview.html">obj/tools/orb/old/ directory</a>', "orb_solve_kepler.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/old/orb_solve_kepler.html#osk_eval", "osk_eval", 'routine in <a href="obj/tools/orb/old/orb_solve_kepler.html">orb_solve_kepler.pro</a>', "orb_solve_kepler.pro", "", "osk_eval", "", "EE", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/orb/old/orb_solve_kepler.html#orb_solve_kepler", "orb_solve_kepler", 'routine in <a href="obj/tools/orb/old/orb_solve_kepler.html">orb_solve_kepler.pro</a>', "orb_solve_kepler.pro", "", "orb_solve_kepler", "", "rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_span_errors.html", "orb_span_errors.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_span_errors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_span_errors.html#ope_span_mc", "ope_span_mc", 'routine in <a href="obj/tools/orb/orb_span_errors.html">orb_span_errors.pro</a>', "orb_span_errors.pro", "", "ope_span_mc", "", "x0_sig_xnsignseed", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_span_errors.html#ope_span", "ope_span", 'routine in <a href="obj/tools/orb/orb_span_errors.html">orb_span_errors.pro</a>', "orb_span_errors.pro", "", "ope_span", "", "x0_sig_xnsignscanndim", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_span_errors.html#orb_span_errors", "orb_span_errors", 'routine in <a href="obj/tools/orb/orb_span_errors.html">orb_span_errors.pro</a>', "orb_span_errors.pro", "", "orb_span_errors", "", "nsignscannsamplesdkxgbxsig_dkx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_test.html", "orb_test.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_test.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_test.html#orb_test", "orb_test", 'routine in <a href="obj/tools/orb/orb_test.html">orb_test.pro</a>', "orb_test.pro", "", "orb_test", "", "xd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/orb/orb_to_cartesian.html", "orb_to_cartesian.pro", '.pro file in <a href="obj/tools/orb/dir-overview.html">obj/tools/orb/ directory</a>', "orb_to_cartesian.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/orb/orb_to_cartesian.html#orb_to_cartesian", "orb_to_cartesian", 'routine in <a href="obj/tools/orb/orb_to_cartesian.html">orb_to_cartesian.pro</a>', "orb_to_cartesian.pro", "", "orb_to_cartesian", "", "velf_rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_add_selections.html", "pg_add_selections.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_add_selections.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_add_selections.html#pg_add_selections", "pg_add_selections", 'routine in <a href="com/pg/pg_add_selections.html">pg_add_selections.pro</a>', "pg_add_selections.pro", "", "pg_add_selections", "", "trsselect", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_array.html", "pg_array.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_array.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_array.html#pg_array", "pg_array", 'routine in <a href="com/pg/pg_array.html">pg_array.pro</a>', "pg_array.pro", "", "pg_array", "	Computes image points for given array descriptors.    ", "cdArray (n_timesteps) of camera descriptors.   ardArray (n_objects, n_timesteps) of descriptors of objects 		that must be a subclass of array.   gbxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of GLOBE.   dkxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of DISK.   bxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of BODY, instead of gbx or dkx.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   clip If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.    ", "NV/PG", " 	Written by:	Spitale, 10/2012   	Array (n_objects) of objects containing image points and 	the corresponding inertial vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_bad_data.html", "pg_bad_data.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_bad_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_bad_data.html#pg_bad_data", "pg_bad_data", 'routine in <a href="com/pg/pg_bad_data.html">pg_bad_data.pro</a>', "pg_bad_data.pro", "", "pg_bad_data", "	Locates areas of bad data values like saturation and dropouts.    ", "dropoutValue to use for dropouts.  Default is 0   sat	If given, value above which to flag as saturated, 			inclusive.   mask	Byte image of the same size as the input image 			in which nonzero pixel values indicate locations 			where problems should not be flagged.   extend	Number of pixels away from masked pixels before 			locations may be flagged as spikes.   edge	Regions closer than this to the edge of the image 			will be ignored.  Default is 0.   subscriptsSubscript of each bad point.    dd	Data descriptor containing the image to be despiked.   ", "NV/PG", " 	Written by:	Spitale, 7/2013   	POINT objects containing the detected bad points.    STATUS: 	Complete    SEE ALSO: 	pg_spikes    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_blemish.html", "pg_blemish.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_blemish.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_blemish.html#pg_blemish", "pg_blemish", 'routine in <a href="com/pg/pg_blemish.html">pg_blemish.pro</a>', "pg_blemish.pro", "", "pg_blemish", "	Removes blemishes from an image using interpolation.    	Blemishes are modeled as ellipses.  Pixels interior to the ellipse 	are interpolated from those on the boundary.    STATUS: 	Complete    SEE ALSO: 	pg_resloc, pg_linearize_image, pg_resfit    ", "a	Semimajor axis of elliptical blemish model.  Default is 			5 pixels.   b	Semiminor axis of elliptical blemish model.  Default is 			5 pixels.   h	Angle of rotation (in radians) of smimajor axis from 			horizontal.  Default is 0.   image	The corrected image.    show	If set, the outlines of the blemishes are plotted on 			the current graphics window.   dd	Data descriptor containing the image to be corrected.   blem_ptdPOINT object containing the known image 			coordinates of the blemishes.  If an array of 			objects is given, then the operation is 			performed repeatedly using each set of blemish 			coordinates.  			This argument can also be specified directly as an 			array of image points.   nom_ptd", "NV/PG", " 	Written by:	Spitale, 5/2002   	Data descriptor containing the corrected image.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_center.html", "pg_center.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_center.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_center.html#pg_center", "pg_center", 'routine in <a href="com/pg/pg_center.html">pg_center.pro</a>', "pg_center.pro", "", "pg_center", "	Computes image coordinates of the center of each object.    ", "cdArray (nt) of camera descriptors.   bxArray (n_objects, nt) of descriptors of objects 		which must be a subclass of BODY.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   clip If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	Array (n_objects) of POINT objets containing image points and 	the corresponding inertial vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_chisq.html", "pg_chisq.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_chisq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_chisq.html#pg_chisq", "pg_chisq", 'routine in <a href="com/pg/pg_chisq.html">pg_chisq.pro</a>', "pg_chisq.pro", "", "pg_chisq", "	Computes chi-squared value for given curve- or point-fit parameters.    ", "axis_ptdPOINT object containing a single image point 			to be used as the axis of rotation.   fix	Array specifying which parameters to fix as 			[dx,dy,dtheta].   dxy	2-element vector giving the translation as [dx,dy].   dtheta	Rotation in radians.   scan_ptdArray (n_curves) of POINT objects output from 			pg_cvscan or pg_ptscan containing scan data.   ", "NV/PG", " 	Written by:	Spitale, 10/2002   	Normalized chi-square value.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, 	pg_ptchisq, pg_fit, pg_threshold    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_cntrd.html", "pg_cntrd.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_cntrd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_cntrd.html#pg_cntrd", "pg_cntrd", 'routine in <a href="com/pg/pg_cntrd.html">pg_cntrd.pro</a>', "pg_cntrd.pro", "", "pg_cntrd", "	Calculates the centroids centered near given features in 	an image.    	Currently does not work for multiple time steps.    	For each visible object, a centroid is calcualted using the 	astronlib cntrd routine.    SEE ALSO: 	ptscan, pg_ptscan, pg_ptcntrd   STATUS: 	Complete.    ", "fwhm          Full-Width Half-maximum to use around expected point                        location.  If not given, a default fwhm of 2 pixels                        is used.   edge          Distance from edge from which to ignore points.  If                        not given, an edge distance of 0 is used.   sigmin          If given, points are discarded if the sigma above                        the mean for the centroid pixel is below this value.    dd	Data descriptor   object_ptd	Array (n_pts) of POINT objects giving the points. 			Only the image coordinates of the points need to be 			specified.   ", "NV/PG", " 	Written by:	Haemmerle, 2/1999   	An array of type POINT objects giving the detected position for        each object.  The max values for each detection is        saved in the data portion of object with tag 'scan_cc'.        The x and y offset from the given position is also saved.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_coadd.html", "pg_coadd.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_coadd.pro", "", "", "	Averages the given images and geometries.    ", "", "          -1", " 	Written by:	Spitale, 4/2014   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_coadd.html#pgc_compute_average", "pgc_compute_average", 'routine in <a href="com/pg/pg_coadd.html">pg_coadd.pro</a>', "pg_coadd.pro", "", "pgc_compute_average", "", "dd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_coadd.html#pgc_compute_median", "pgc_compute_median", 'routine in <a href="com/pg/pg_coadd.html">pg_coadd.pro</a>', "pg_coadd.pro", "", "pgc_compute_median", "", "dd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_coadd.html#pgc_compute_minimum", "pgc_compute_minimum", 'routine in <a href="com/pg/pg_coadd.html">pg_coadd.pro</a>', "pg_coadd.pro", "", "pgc_compute_minimum", "", "dd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_coadd.html#pgc_compute_maximum", "pgc_compute_maximum", 'routine in <a href="com/pg/pg_coadd.html">pg_coadd.pro</a>', "pg_coadd.pro", "", "pgc_compute_maximum", "", "dd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_coadd.html#pg_coadd", "pg_coadd", 'routine in <a href="com/pg/pg_coadd.html">pg_coadd.pro</a>', "pg_coadd.pro", "", "pg_coadd", "", "cdbxgdmedianminimummaximumalgorithmddbx0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_core.html", "pg_core.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_core.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_core.html#pg_core", "pg_core", 'routine in <a href="com/pg/pg_core.html">pg_core.pro</a>', "pg_core.pro", "", "pg_core", "	Generates a dn profile through a cube, or stack of images.   ", "cdCamera descriptor.  Needed for sinc interpolation. (to get PSF)   gd  Optional generic descriptor containing cd.   distance Array giving the distance, in pixels, along the profile.   interp  Type of interpolation to use.  Options are:                'nearest', 'mean', 'bilinear', 'cubic', 'sinc'.   arg_interp  Arguments to pass to the interpolation function.    sigma  Array giving the standard deviation at each point in the 		profile.   profile  The profile.   image_pts Image point for each point along the profile.    bgUniform value to subtract from profile.   dd Data descriptor(s).   outline_ptd  POINT descriptor giving the outline of the region to plot,                 as produced by the pg_select_region.   ", "NV/PG", "       Written by:     Spitale, 7/2016   	Two data descriptors: the first contains the profile; the second contains 	the profile sigma.    ");
  
  libdata[libdataItem++] = new Array("com/pg/pg_core.html#test", "test", 'routine in <a href="com/pg/pg_core.html">pg_core.pro</a>', "pg_core.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_coregister.html", "pg_coregister.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_coregister.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_coregister.html#pg_coregister", "pg_coregister", 'routine in <a href="com/pg/pg_coregister.html">pg_coregister.pro</a>', "pg_coregister.pro", "", "pg_coregister", "	Using the given geometry information, shifts the given images so as 	to center the given bodies at the same pixel in each image, or aligns 	images based on pointing.    	The given data and camera descriptors are modified: the images are 	shifted and the camera descriptor optic axes are changed accordingly.    STATUS: 	Complete    ", "cdArray of camera descripors, one for each input image.   bxArray of descriptors of any superclass of BODY, one for each 		input image.   gdGeneric descriptor containing the camera and body 		descriptors or an array of generic descriptors, one for each 		input image.   shiftOffset applied to each image.    centerImage coordinates at which to center each body.  By default, 		the average center among all the bodies is used.  If this input 		contains a single element, it is taken as the index of the 		input image to use as the reference.   pArray (1,3) giving surface coordinates at which to center 		each body.   xshiftAdditional image offset by which to shift each image.   wrapIf set shifted pixels are wrapped to the opposite side 		of the image.   subpixelBy default, each image is shifted by an integer number of 		  pixels in each direction. If this keyword is set, the 		  image is interpolated onto a new pixel grid such that the 		  sub-pixel shift is obtained.  (Not currently implemented)   no_shiftddArray of data descriptors giving images to shift.   ", "NV/PG", " 	Written by:	Spitale, 11/2002   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_covariance.html", "pg_covariance.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_covariance.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_covariance.html#pg_covariance", "pg_covariance", 'routine in <a href="com/pg/pg_covariance.html">pg_covariance.pro</a>', "pg_covariance.pro", "", "pg_covariance", "	Computes a covariance matrix for the least-square fit specified by the 	input scan coefficients.    	It is the caller's responsibility to ensure that all of the input 	coefficients were computed using with the same set of fixed parameters.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_ptscan, pg_ptscan_coeff, 	pg_cvchisq, pg_ptchisq, pg_threshold    ", "statuscfArray of pg_fit_coeff_struct as produced by pg_cvscan_coeff or 		pg_ptscan_coeff.   ", "NV/PG", " 	Written by:	Spitale, 9/2002   	Covariance matrix.  The diagonal elements are the variances in each fit 	parameter, the off-diagonal elements are the covariances.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_crop.html", "pg_crop.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_crop.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_crop.html#pg_crop", "pg_crop", 'routine in <a href="com/pg/pg_crop.html">pg_crop.pro</a>', "pg_crop.pro", "", "pg_crop", "       Crops an image and modifies that camera descriptor accordingly.    ", "cdThe optic axis of the camera descriptor is modified to 		correspond to the corrected image.   gd    Generic descriptor to use instead of cd.   imageThe cropped image    cropdd       Data descriptor containing the image to be cropped.   corner_ptdPOINT object containing 2 points, giving the corners 		    for cropping.  May also be an array of 2 image points.   ", "NV/PG", "       Written by:     Spitale; 6/2005   	pg_crop, dd, cd=cd, [[100,200], [800,900]], im=im    STATUS:        Complete.    NOTES: 	This routine should be modified to work with map descriptors as well.        NONE    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_crop_points.html", "pg_crop_points.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_crop_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_crop_points.html#pg_crop_points", "pg_crop_points", 'routine in <a href="com/pg/pg_crop_points.html">pg_crop_points.pro</a>', "pg_crop_points.pro", "", "pg_crop_points", "	Hides image points that lie outside the field of view.    	The given POINT object is modified.    STATUS: 	xx    ", "cdCamera descriptor, used to determine image dimenesions.   slopNumber of pixels outside image to include.  Defautl is 1.   indicesIndices of retained points.    ptdPOINT object containing points to be cropped.   ", "NV/PG", " 	Written by:	Spitale; 5/2005   	NONE    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_cursor.html", "pg_cursor.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_cursor.pro", "", "", "	Allows the user to obtain information about image pixels selected 	using the mouse in the current graphics window.    ", "", "          -1", " 	Written by:	Spitale, 3/2002   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_xy", "_pgc_xy", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_xy", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#__pgc_dn", "__pgc_dn", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "__pgc_dn", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_dn", "_pgc_dn", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_dn", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_star", "_pgc_star", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_star", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_radec", "_pgc_radec", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_radec", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_globe", "_pgc_globe", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_globe", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_map", "_pgc_map", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_map", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_disk", "_pgc_disk", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_disk", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_disk_scale", "_pgc_disk_scale", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_disk_scale", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_eqplane", "_pgc_eqplane", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_eqplane", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_eqplane_scale", "_pgc_eqplane_scale", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_eqplane_scale", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_photom_globe", "_pgc_photom_globe", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_photom_globe", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_photom_disk", "_pgc_photom_disk", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_photom_disk", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#_pgc_photom_eqplane", "_pgc_photom_eqplane", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "_pgc_photom_eqplane", "", "gdformatlabelnamepdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#pgc_table", "pgc_table", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "pgc_table", "", "label_padvalue_padnamename_pvalue_plabel_pformat_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_cursor.html#pg_cursor", "pg_cursor", 'routine in <a href="com/pg/pg_cursor.html">pg_cursor.pro</a>', "pg_cursor.pro", "", "pg_cursor", "", "cdgbxdkxsundsdgdfnradecphotomxystringsilentvaluesddptd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_cusps.html", "pg_cusps.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_cusps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_cusps.html#pg_cusps", "pg_cusps", 'routine in <a href="com/pg/pg_cusps.html">pg_cusps.pro</a>', "pg_cusps.pro", "", "pg_cusps", "	Computes image points at the limb/terminator cusps for each given 	globe object.    	This program uses an iterative scheme to find the two points on 	the surface of the globe where the surface normal is simultaneously 	perpendicular to the vectors from the camera and the Sun.     STATUS: 	Complete    ", "cd Array (n_timesteps) of camera descriptors.   od Array (n_timesteps) of descriptors for the observer, 		 default is the sun is gd given.   gbx Array (n_objects, n_timesteps) of descriptors of objects 		 which must be a subclass of GLOBE.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   epsilonMaximum angular error in the result.  Default is 1e-3.   reveal Normally, points computed for objects whose opaque flag 		 is set are made invisible.  /reveal suppresses this behavior.    ", "NV/PG", " 	Written by:	Spitale, 12/2010   	Array (n_objects) of POINT objects containing image 	points and the corresponding inertial vectors.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_cvchisq.html", "pg_cvchisq.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_cvchisq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_cvchisq.html#pg_cvchisq", "pg_cvchisq", 'routine in <a href="com/pg/pg_cvchisq.html">pg_cvchisq.pro</a>', "pg_cvchisq.pro", "", "pg_cvchisq", "	Computes chi-squared value for given curve fit parameters.    	The caller is responsible for ensuring that the input parameters are 	consistent with those used with other programs like pg_fit.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, 	pg_ptchisq, pg_fit, pg_threshold    ", "axis_ptdPOINT containing a single image  point 			to be used as the axis of rotation.   fix	Array specifying which parameters to fix as 			[dx,dy,dtheta].   dxy	2-element vector giving the translation as [dx,dy].   dtheta	Rotation in radians.   scan_ptdArray (n_curves) of POINT output from 			pg_cvscan containing scanned image points as well as 			other necessary scan data.   ", "NV/PG", " 	Written by:	Spitale, 6/1998   	Chi-square value.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_cvscan.html", "pg_cvscan.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_cvscan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_cvscan.html#pg_cvscan", "pg_cvscan", 'routine in <a href="com/pg/pg_cvscan.html">pg_cvscan.pro</a>', "pg_cvscan.pro", "", "pg_cvscan", "	Attempts to find points of highest correlation with a given model along 	curves in an image.    	Currently does not work for multiple time steps.    	Normal sines and cosines are computed using icv_compute_directions. 	These directions are input to icv_strip_curve along with the image 	in order to extract an image strip to be scanned.  icv_scan_strip is 	then used to find the optimum scan offsets and icv_convert_scan_offsets 	is used to obtain image coordinates corresponding to each scan offset. 	See the documentation for each of those routines for more details.    ", "algorithmName of alrogithm to use to detect the edge. 			Choices are 'MODEL', 'GRAD', and 'HALF'. 			Default is 'MODEL'.   cdbxgdmodel_pArray (n_curves) of pointers to model arrays.  Each 			model array has dimensions (n_points,nm), where n_points 			is the number of points in the curve and nm is the 			number of points in the model.  Thus, a model may be 			specified for each point on the curve.  Default 			model is edge_model_atan().   mzero	Array (n_curves) or (n_curves,n_points) of zero-point 			offsets for each model in model_p.  mzero must be 			specified if model_p is given.   dir	If given the scan will be performed in this direction 			instead of normal to the curve.  Must be a 2-element 			unit vector.   width	Number of pixels to scan on either side of the curve. 			Default is 20.   edge	Distance from the edge of the image within which 			curve points will not be scanned.  Default is 0.   arg	Argument passed to the edge detection routine. 			For the GRAD algorithm, this argument specifies 			whether each edge is interior (arg=1) or 			exterior (arg=0).   scan_ptdIf given, these previously scanned points are updated 			to be consistent with the given data points.  The image 			is not scanned.   dd	Data descriptor   object_ptd", "NV/PG", " 	Written by:	Spitale, 2/1998   	The following command scans for a limb in the image contained in the 	given data descriptor, dd:  	scan_ptd = pg_cvscan(dd, limb_ptd, width=40, edge=20)  	In this call, limb_ptd is a POINT containing computed limb 	points.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, pg_ptchisq, 	pg_fit, pg_threshold 	Array (n_curves) of POINT objects containing resulting image points, 	as well as additional scan data to be used by pg_cvscan_coeff and 	possibly other programs.  The scan data is as follows:  		 tag			 description 	 	-----			------------- 		scan_cos		Cosine of normal at each point. 		scan_sin		Sine of normal at each point. 		scan_offsets		Raw offsets from computed curve. 		scan_cc			Correlation coefficient for each scanned 					point. 		scan_sigma		Scan offset uncertainties. 		scan_model_xpts		Model points corresponding to each 		scan_model_ypts		 scanned point    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_cvscan_coeff.html", "pg_cvscan_coeff.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_cvscan_coeff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_cvscan_coeff.html#pg_cvscan_coeff", "pg_cvscan_coeff", 'routine in <a href="com/pg/pg_cvscan_coeff.html">pg_cvscan_coeff.pro</a>', "pg_cvscan_coeff.pro", "", "pg_cvscan_coeff", "	Computes linear least-squares coefficients for a fit to the image 	coordinate translation and rotation that matches a computed curve to 	a scanned curve in an image.    	Currently does not work for multiple time steps.    	pg_cvscan_coeff extracts the scan data from the given 	scan_ptd structure and uses icv_coeff to compute the coefficients. 	See the documentation for that routine for details.    ", "axis_ptdPOINT containing a single image  point 			to be used as the axis of rotation in the fit for 			every curve.   fix	Array specifying which parameters to fix in the 			fit as [dx,dy,dtheta].   scan_ptdArray (n_curves) of POINT output from 			pg_cvscan containing scanned image points as well as 			other necessary scan data.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	The following command uses scan data from pg_cvscan to compute 	least square coefficients for a fit such that only dx and dtheta 	will be allowed to vary:  	cvscan_cf = pg_cvscan_coeff(scan_ptd, axis=center_ptd, fix=[1])  	In this call, scan_ptd is a POINT containing the scan data 	from pg_cvscan and center_ptd is a POINT giving the center 	of the planet as computed by pg_center.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, pg_ptchisq, 	pg_fit, pg_threshold 	Array (n_curves) of pg_fit_coeff_struct containing coefficients for 	the least-square fit to be input to pg_fit.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_data_adjust.html", "pg_data_adjust.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_data_adjust.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_data_adjust.html#pg_data_adjust", "pg_data_adjust", 'routine in <a href="com/pg/pg_data_adjust.html">pg_data_adjust.pro</a>', "pg_data_adjust.pro", "", "pg_data_adjust", "	Allows the user to adjust data values using the mouse.  A rectangle 	is selected height (positve or negative) gives the data value adjustment. 	Works for 1-D or 2_d data sets.   ", "ddData descriptor.   ", "NV/PG", "      NONE    ORIGINAL AUTHOR : J. Spitale ; 2/2014   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_despike.html", "pg_despike.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_despike.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_despike.html#pg_despike", "pg_despike", 'routine in <a href="com/pg/pg_despike.html">pg_despike.pro</a>', "pg_despike.pro", "", "pg_despike", "	Removes previously-located spurious features like cosmic-ray hits.    	pg_despike replaces the values of the desired pixels with those 	computed by smoothing the input image using a box filter of size 	'scale' repeatedly, 'n' times.    STATUS: 	Complete.    SEE ALSO: 	pg_spikes    ", "image	The corrected image.    scale	Typical size of features to be removed.  Default 			is 10.  	n=n:		Number of timers to repeat the box filter.  Default 			is 5.   nkernel	If set, this kernel is used to weight the replacement 			of all pixels in a box of size scale around each 			spike point, instead of replacing only the spike 			point.  If this is a scalar, then this is taken as the 			width of a Gaussian kernel.   noclonedd	Data descriptor containing the image to be despiked.   spike_ptdPOINT specifying the points to replace; 			typically computed by pg_spikes.   ", "NV/PG", " 	Written by:	Spitale, 2/2004   	Data descriptor containing the corrected image.  If /noclone 	is not set, set input data descriptor is modified.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_disk.html", "pg_disk.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_disk.html#pg_disk", "pg_disk", 'routine in <a href="com/pg/pg_disk.html">pg_disk.pro</a>', "pg_disk.pro", "", "pg_disk", "	Computes image points on the inner and outer edges of each given disk 	object at all given time steps.    ", "cd Array (n_timesteps) of camera descriptors.   dkx Array (n_objects, n_timesteps) of descriptors of objects 		 which must be a subclass of DISK.   ddData descriptor containing a generic descriptor to use 		if gd not given.  	inner/outer: If either of these keywords are set, then only 	             that edge is computed.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   clip If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   innerouternpointsNumber of points to compute around each edge.  Default is 		 1000.   reveal Normally, points computed for objects whose opaque flag 		 is set are made invisible.  /reveal suppresses this behavior.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	Array (2*n_objects) of POINT containing image points and 	the corresponding inertial vectors.  The output array is arranged as 	[inner, outer, inner, outer, ...] in the order that the disk 	descriptors are given in the dkx argument.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_drag.html", "pg_drag.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_drag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_drag.html#pg_drag", "pg_drag", 'routine in <a href="com/pg/pg_drag.html">pg_drag.pro</a>', "pg_drag.pro", "", "pg_drag", "	Allows the user to graphically translate and rotate an array of points 	using the mouse.    	cursor_move is used to perfform the drag.  See that routine for more 	detail.    STATUS: 	Complete    SEE ALSO: 	pg_move    ", "drawxor_graphicsIf set, grahics are drawn using the XOR function.   dtheta	Dragged rotation in radians.    axis_ptdPOINT containing a single image point 			to be used as the axis of rotation.   sample	Sampling interval for drag graphics.  The input 			points are subsampled at this interval so that the 			dragging can be done smoothly.  Default is 10.   move	If set, object_ptd will be modified on return using 			pg_move.   symbol	If set, the symbol number will be passed to cursor_move 			so something other than a period can be used to mark 			points.   silent	If set, turns off the notification that cursor                        movement is required.   color	Drawing color.  Default is ctyellow.   fndataobject_ptdArray (n_objects) of POINT containing the 			image points to be dragged.   ", "NV/PG", " 	Written by:	Spitale, 2/1998       Modified by:     Dyer Lytle, Vance Haemmerle 11/1998   	2-element array giving the drag translation as [dx,dy].    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_drag_shadow_plane.html", "pg_drag_shadow_plane.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_drag_shadow_plane.pro", "", "", "	Allows the user to graphically rotate a plane passing through the 	center of a planet by dragging the shadow cast by the planet on the 	plane using the mouse.    ", "", "          -1", " 	Written by:	Spitale, 2/2012   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_drag_shadow_plane.html#pgdsp_compute", "pgdsp_compute", 'routine in <a href="com/pg/pg_drag_shadow_plane.html">pg_drag_shadow_plane.pro</a>', "pg_drag_shadow_plane.pro", "", "pgdsp_compute", "", "ncdpdsundn0term_ptdaxistheta", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_drag_shadow_plane.html#pg_drag_shadow_plane", "pg_drag_shadow_plane", 'routine in <a href="com/pg/pg_drag_shadow_plane.html">pg_drag_shadow_plane.pro</a>', "pg_drag_shadow_plane.pro", "", "pg_drag_shadow_plane", "", "cdgbxsundddgdxor_graphicsp0n0silentcolorgainaxisshadow_ptd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_draw.html", "pg_draw.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_draw.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_draw.html#pg_draw", "pg_draw", 'routine in <a href="com/pg/pg_draw.html">pg_draw.pro</a>', "pg_draw.pro", "", "pg_draw", "	Calls pg_draw_point or pg_draw_vector depending on the input arrays. 	pg_draw_point is called is only one argument is given.  Otherwise, 	it assumed that a source and target are given and pg_draw_vector is 	called.    ", "literalcolorsshadespsymspsizesplabelsxormodecsizescthickswnumlabel_shadelabel_pointsthicklineprintcdgdcorientlengthsalignnoshortensolidfixedheadswinglengthgraphicslabel_colorshade_thresholdobject_ptdArray of POINT containing image points 			to be plotted in the current data coordinate system. 			Or inertial vectors to be used as vector sources. 			May also be an array of image points or inertial 			vectors.   target_ptdArray of POINTs giving the inertial 			positions of vector targets.  May also be an 			array of inertial vectors.  If this argument is 			present, then vectors are drawn instead of points.   ", "NV/PG", " 	Written by:	Spitale, 9/2005   	NONE    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_draw_point.html", "pg_draw_point.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_draw_point.pro", "", "", "	Draws points from the given POINT on the current graphics 	window using the current data coordinate system.    ", "", "          -1", " 	Written by:	Spitale, 1/1998 (pg_draw) 	Renamed pg_draw_point: Spitale, 9/2005   	The following command draws and labels a lavender 'limb' and a red 	'ring' (assuming that the points have already been computed):  	pg_draw_point, [limb_ptd, ring_ptd], color=[ctpurple(), ctred()], $ 	         plabels=['LIMB','RING']    STATUS: 	Complete ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_draw_point.html#pgdp_draw", "pgdp_draw", 'routine in <a href="com/pg/pg_draw_point.html">pg_draw_point.pro</a>', "pg_draw_point.pro", "", "pgdp_draw", "", "label_pointsplabelspointscolorspsymspsizesthicklinecsizescthickscorientalignplabel_offsetlabel_colors", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_draw_point.html#pgdp_fill", "pgdp_fill", 'routine in <a href="com/pg/pg_draw_point.html">pg_draw_point.pro</a>', "pg_draw_point.pro", "", "pgdp_fill", "", "defall_valn_objects", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_draw_point.html#pg_draw_point", "pg_draw_point", 'routine in <a href="com/pg/pg_draw_point.html">pg_draw_point.pro</a>', "pg_draw_point.pro", "", "pg_draw_point", "", "literalcolorspsymspsizesplabelsxormodecsizescthickswnumshadeslabel_pointsthicklineprintlabel_shadealigncorientlabel_colorshade_threshold_pp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_draw_vector.html", "pg_draw_vector.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_draw_vector.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_draw_vector.html#pg_draw_vector", "pg_draw_vector", 'routine in <a href="com/pg/pg_draw_vector.html">pg_draw_vector.pro</a>', "pg_draw_vector.pro", "", "pg_draw_vector", "         Draws vectors on an image from a source towards a          target. Very useful for locating off-image objects          (planets, say) in an image for referencing.  By default,          vectors are foreshortened to their projections onto the image          plane so that vectors with large  out-of-plane components          will be shorter.  (This can be deactivated with the          /noshorten keyword.)  Also by default, vectors that point          away from the camera will be drawn as dotted lines while          vectors which point towards the camera will be drawn solid.          (This can be controlled with the /solid keyword.)     ", "cdddgdliteralAll of the following input keywords accept an array 			where each element corresponds to an element in the 			object_ptd array.  By default, if the keyword array is 			shorter than the object_ptd array, then the last element 	  		is used to fill out the array.  /literal suppresses 			this behavior and causes unspecified elements to 			take their default values   lengths       Lengths of the vectors.  (Default: 50 pixels)   plabels        Text with which to label vectors.  (Default:                        no label)   colors        Colors to use in drawing.  (Default: current                        default color)   thick        Line thicknesses.  (Default: 1)   csizes     Character sizes for plabels.  (Default: 1)   wnumnoshorten    If set, vectors will not be foreshortened                        depending on how much they point into/out                        of the image plane.   solid        All lines are to be drawn solid (linestyle=0)                        rather than allow vectors pointing into the                        image plane to be dotted.   fixedheads    If set, arrowheads will not be scaled to                         match the foreshortening of the vector.   winglengthdraw_wnumshadeslabel_shadelabel_colorshade_thresholdsourcetarget", "NV/PG", "      Written: John W. Weiss, 5/05      Consolidated some functionality into plot_arrow; Spitale 9/2005           Say moon_points is a POINT object containing the center        data for the four Galilean satellites and jupiter_points has        Jupiter's center data.  Then         IDL> pg_draw_vector, moon_points, jupiter_points, colors=[100, $              150, 200, 250], thick=1.25, length=70, plabels= Jupiter , $              csizes=1.5         will draw vectors from each towards the planet.  Conversely,         IDL> pg_draw_vector, jupiter_points, moon_points, colors=[100, $              150, 200, 250], thick=1.25, length=70, plabels=[ Io ,  Europa , $               Ganymede ,  Callisto ], csizes=1.5         will draw vectors from Jupiter's center towards each moon,        labelling each by the moon's name. ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_edges.html", "pg_edges.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_edges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_edges.html#pg_edges", "pg_edges", 'routine in <a href="com/pg/pg_edges.html">pg_edges.pro</a>', "pg_edges.pro", "", "pg_edges", "	Scans an image for candidate edge points.    	At each pixel in the image, an activity is computed (see activity.pro). 	Points with activity greater than the threshold value are accepted.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, pg_ptchisq, 	pg_fit, pg_threshold    ", "thresholdMinimum activity to accept as an edge point.   edge	Distance from the edge of the image within which 			curve points will not be scanned.  Default is 0.   npointsMaximum number of points to return.   gatelowpassIf given, the image is smoothed with a kernel of 			this size.    dd	Data descriptor   ", "NV/PG", " 	Written by:	Spitale, 4/2002   	POINT giving the resulting edge points.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_exclude_points.html", "pg_exclude_points.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_exclude_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_exclude_points.html#pg_exclude_points", "pg_exclude_points", 'routine in <a href="com/pg/pg_exclude_points.html">pg_exclude_points.pro</a>', "pg_exclude_points.pro", "", "pg_exclude_points", "	xx    Environment variables:   	xx:	xx  	xx:	xx    	xx:	xx  	xx:	xx    	xx    	xx    	xx    ", "radiusptdxptd", "NV/PG", " 	Written by:	xx, xx/xx/xxxx   	xx    STATUS: 	xx    SEE ALSO: 	xx, xx, xx 	xx    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_farfit.html", "pg_farfit.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_farfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_farfit.html#pg_farfit", "pg_farfit", 'routine in <a href="com/pg/pg_farfit.html">pg_farfit.pro</a>', "pg_farfit.pro", "", "pg_farfit", "	Searches for the offset (dx,dy) that gives the best agreement between 	two uncorrelated sets of image points.    	pg_farfit is a wrapper for the routine correlate_points.  See the 	documentation for that routine for details on the fitting procedure    STATUS: 	Complete.    SEE ALSO: 	pg_edges correlate_points    ", "nsamplesNumber of samples in each direction in the grid search. 			See image_correlate.   show	If specified, the search is displayed in the current 			graphics window.  This value can be specified as a 			2-element array giving the size of the displayed image.   bin	Initial bin size for point densities.  Default is 50 			pixels.   max_densityMaximum model point density.  Default = 5.   region	Size of region to scan, centered at offset [0,0].  If not 			specified, the entire image is scanned.   sigma	2-element array giving the width of the correlation 			peak in each direction.   cc	Cross correlation of final result.   mcc	Corss correlation at the model points.   bias	If given, solutions are biased toward the initial 			guess using a weighting function of the form:  				exp(-r^2/2*bias),  			where r is the distance between from the initial 			guess.   nosearchIf set, no search is performed.  An offset of [0,0] 			is returned.    dd	Data descriptor.   base_ptdPOINT giving a set of points to fit to. 			This input may be produced by pg_edges, for example.   model_ptdArray of POINT giving model points (computed 			limb points for example).   ", "NV/PG", " 	Written by:	Spitale, 4/2002   	2-element array giving the fit offset as [dx,dy].    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_fit.html", "pg_fit.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_fit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_fit.html#pg_fit", "pg_fit", 'routine in <a href="com/pg/pg_fit.html">pg_fit.pro</a>', "pg_fit.pro", "", "pg_fit", "	Performs a simultaneous 1-,2-, or 3-parameter linear least-squares fit 	using the given coefficients.    	It is the caller's responsibility to ensure that all of the input 	coefficients were computed using with the same set of fixed parameters.    	pg_fit extracts the fit coefficients from cf and inputs them to mbfit 	to perform a simultatneous least square fit using all of the 	coefficients.  See the documentation for that routine for more detail.    ", "dthetacfArray of pg_fit_coeff_struct as produced by pg_cvscan_coeff or 		pg_ptscan_coeff.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	The following commands perform a simultaneous least square fit to 	a limb, ring and star field with all parameters free:  	cvscan_ptd = pg_cvscan(dd, [limb_ptd,ring_ptd], width=40, edge=20) 	ptscan_ptd = pg_ptscan(dd, [star_ptd], width=40, edge=20)  	cvscan_cf = pg_cvscan_coeff(cvscan_ptd, axis=center_ptd) 	ptscan_cf = pg_ptscan_coeff(ptscan_ptd, axis=center_ptd)  	dxy = pg_fit([cvscan_cf,ptscan_cf], dtheta=dtheta)  	In this example, center_ptd, limb_ptd, ring_ptd, and star_ptd are assumed 	to have been previously computed using the appropriate routines.  	Note that since this is a linear fit, the input systems may have been 	linearized and it may be necessary to iterate this procedure.     STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_ptscan, pg_ptscan_coeff, 	pg_cvchisq, pg_ptchisq, pg_threshold 	2-element array giving the fit offset as [dx,dy].    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_fit_coeff_struct__define.html", "pg_fit_coeff_struct__define.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_fit_coeff_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_fit_coeff_struct__define.html#pg_fit_coeff_struct__define", "pg_fit_coeff_struct__define", 'routine in <a href="com/pg/pg_fit_coeff_struct__define.html">pg_fit_coeff_struct__define.pro</a>', "pg_fit_coeff_struct__define.pro", "", "pg_fit_coeff_struct__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_footprint.html", "pg_footprint.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_footprint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_footprint.html#pg_footprint", "pg_footprint", 'routine in <a href="com/pg/pg_footprint.html">pg_footprint.pro</a>', "pg_footprint.pro", "", "pg_footprint", "	Computes the footprint of a camera on a given body.    ", "cdArray (n_timesteps) of camera descriptors.   bxArray (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   clip If set, points are computed only within this many camera 		 fields of view.   sample Sampling rate; default is 1 pixel.   ", "NV/PG", " 	Written by:	Spitale, 5/2014   	Array (n_objects) of POINT containing image points and 	the corresponding inertial vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_get_arrays.html", "pg_get_arrays.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_get_arrays.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_arrays.html#pg_get_arrays", "pg_get_arrays", 'routine in <a href="com/pg/pg_get_arrays.html">pg_get_arrays.pro</a>', "pg_get_arrays.pro", "", "pg_get_arrays", "	Obtains a array descriptor for the given data descriptor.    	If /override, then a array descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except name) can still be overridden by specifying 	them as keyword parameters.  If name is specified, then 	only descriptors corresponding to those names will be returned.     ", "odbxard	Input array descriptors; used by some translators.   _extraoverrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	arr_*:		All array override keywords are accepted.  See 			array_keywords.include.  			If name is specified, then only descriptors with 			those names are returned.   verbatimIf set, the descriptors requested using name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   dddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @arr__keywords.include", "NV/PG", " 	Written by:	Spitale, 10/2012   	Array of array descriptors, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_get_cameras.html", "pg_get_cameras.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_get_cameras.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_cameras.html#pg_get_cameras", "pg_get_cameras", 'routine in <a href="com/pg/pg_get_cameras.html">pg_get_cameras.pro</a>', "pg_get_cameras.pro", "", "pg_get_cameras", "	Obtains a camera descriptor for the given data descriptor.    	If /override, then a camera descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except cam_name) can still be overridden by specifying 	them as keyword parameters.  If cam_name is specified, then 	only descriptors corresponding to those names will be returned.     ", "cd	Input camera descriptors; used by some translators.   odpd_extraoverrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	cam_*:		All camera override keywords are accepted.  See 			camera_keywords.include.  			If cam_name is specified, then only descriptors with 			those names are returned.   verbatimIf set, the descriptors requested using cam_name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   default_orient	Default orientation matrix to use if camera 				orientation is not available.  If not specified, 				the identity matrix is used.    no_defaultdddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @cam__keywords.include", "NV/PG", " 	Written by:	Spitale, 1998 	Modified:	Spitale, 8/2001   	Array of camera descriptors, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_get_celestial_sphere.html", "pg_get_celestial_sphere.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_get_celestial_sphere.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_celestial_sphere.html#pg_get_celestial_sphere", "pg_get_celestial_sphere", 'routine in <a href="com/pg/pg_get_celestial_sphere.html">pg_get_celestial_sphere.pro</a>', "pg_get_celestial_sphere.pro", "", "pg_get_celestial_sphere", "	Obtains a globe descriptor describing the celestial sphere.    ", "radius Radius to use for the globe.  Default is 1d30.   ", "NV/PG", " 	Written by:	Spitale, 7/2015   	Globe descriptor with inertial body descriptor and very large radii.     ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_get_maps.html", "pg_get_maps.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_get_maps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_maps.html#pg_get_maps", "pg_get_maps", 'routine in <a href="com/pg/pg_get_maps.html">pg_get_maps.pro</a>', "pg_get_maps.pro", "", "pg_get_maps", "	Obtains a map descriptor for the given data descriptor.    	If /override, then a map descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except name) can still be overridden by specifying 	them as keyword parameters.  If name is specified, then 	only descriptors corresponding to those names will be returned.     ", "md	Input map descriptors; used by some translators.   gbxdkxbx_extraoverrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	map_*:		All map override keywords are accepted.  See 			map_keywords.include.  			If name is specified, then only descriptors with 			those names are returned.  			If /override and name is not specified, then 			the name is taken from the core descriptor.   verbatimIf set, the descriptors requested using name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   dddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @map__keywords.include", "NV/PG", " 	Written by:	Spitale, 1998 	Modified:	Spitale, 8/2001   	Array of map descriptors, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_get_planets.html", "pg_get_planets.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_get_planets.pro", "", "", "	Obtains planet descriptors for the given data descriptor.    	If /override, then a planet descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except name) can still be overridden by specifying 	them as keyword parameters.  If name is specified, then 	only descriptors corresponding to those names will be returned.     ", "", "          -1", " 	Written by:	Spitale, 1998 	Modified:	Spitale, 8/2001   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_planets.html#pggp_select_planets", "pggp_select_planets", 'routine in <a href="com/pg/pg_get_planets.html">pg_get_planets.pro</a>', "pg_get_planets.pro", "", "pggp_select_planets", "", "odddpdselect", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_planets.html#pg_get_planets", "pg_get_planets", 'routine in <a href="com/pg/pg_get_planets.html">pg_get_planets.pro</a>', "pg_get_planets.pro", "", "pg_get_planets", "", "pdodsd_extraoverrideverbatimrawddtrs@plt__keywords.include", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_get_rings.html", "pg_get_rings.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_get_rings.pro", "", "", "	Obtains ring descriptors for the given data descriptor.    	If /override, then a ring descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except name) can still be overridden by specifying 	them as keyword parameters.  If name is specified, then 	only descriptors corresponding to those names will be returned.     SEE ALSO: 	xx, xx, xx    ", "", "          -1", " 	Written by:	Spitale, 1998 	Modified:	Spitale, 8/2001   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_rings.html#pggr_select_rings", "pggr_select_rings", 'routine in <a href="com/pg/pg_get_rings.html">pg_get_rings.pro</a>', "pg_get_rings.pro", "", "pggr_select_rings", "", "odddrdselect", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_rings.html#pg_get_rings", "pg_get_rings", 'routine in <a href="com/pg/pg_get_rings.html">pg_get_rings.pro</a>', "pg_get_rings.pro", "", "pg_get_rings", "", "rdpdod_extraoverrideverbatimddtrs@rng__keywords.include", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_get_stars.html", "pg_get_stars.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_get_stars.pro", "", "", "	Obtain star descriptors for the given data descriptor.    	If /override, then a star descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except name) can still be overridden by specifying 	them as keyword parameters.  If name is specified, then 	only descriptors corresponding to those names will be returned.     SEE ALSO: 	xx, xx, xx    ", "", "          -1", " 	Written by:	Spitale, 1998 	Modified:	Spitale, 8/2001   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_stars.html#pggs_select_stars", "pggs_select_stars", 'routine in <a href="com/pg/pg_get_stars.html">pg_get_stars.pro</a>', "pg_get_stars.pro", "", "pggs_select_stars", "", "odddsdselect", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_stars.html#pg_get_stars", "pg_get_stars", 'routine in <a href="com/pg/pg_get_stars.html">pg_get_stars.pro</a>', "pg_get_stars.pro", "", "pg_get_stars", "", "sdod_extraoverrideverbatimrawddtrs@str__keywords.include", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_get_stations.html", "pg_get_stations.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_get_stations.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_get_stations.html#pg_get_stations", "pg_get_stations", 'routine in <a href="com/pg/pg_get_stations.html">pg_get_stations.pro</a>', "pg_get_stations.pro", "", "pg_get_stations", "	Obtains a station descriptor for the given data descriptor.    	If /override, then a station descriptor is created and initialized 	using the specified values.  Otherwise, the descriptor is obtained 	through the translators.  Note that if /override is not used, 	values (except name) can still be overridden by specifying 	them as keyword parameters.  If name is specified, then 	only descriptors corresponding to those names will be returned.     ", "odbxstd	Input station descriptors; used by some translators.   _extraoverrideCreate a data descriptor and initilaize with the 			given values.  Translators will not be called.  	stn_*:		All station override keywords are accepted.  See 			station_keywords.include.  			If name is specified, then only descriptors with 			those names are returned.   verbatimIf set, the descriptors requested using name 			are returned in the order requested.  Otherwise, the 			order is determined by the translators.   dddata descriptor   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @stn__keywords.include", "NV/PG", " 	Written by:	Spitale, 2/2009   	Array of station descriptors, 0 if an error occurs.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_grid.html", "pg_grid.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_grid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_grid.html#pg_grid", "pg_grid", 'routine in <a href="com/pg/pg_grid.html">pg_grid.pro</a>', "pg_grid.pro", "", "pg_grid", "	Computes image points on a surface coordinate grid.    ", "cdArray (n_timesteps) of camera descriptors.   gbxArray (n_objects, n_timesteps) of descriptors of objects 		that must be a subclass of GLOBE.   dkxArray (n_objects, n_timesteps) of descriptors of objects 		that must be a subclass of DISK.   bxArray (n_objects, n_timesteps) of descriptors of objects 		that must be a subclass of BODY.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   latArray giving grid-line latitudes in radians.   lonArray giving grid-line longitudes in radians.    nlatNumber of equally-spaced latitude lines to generate if keyword 		lat not given.  Default is 12.   nlonNumber of equally-spaced longitude lines to generate if keyword 		lon not given.  Default is 12.   flatThis reference latitude line will be one of the latitude lines generated 		if nlat is specified.  Default is zero.   flonThis reference longitude line will be one of the longitude lines generated 		if nlon is specified.  Default is zero.   npointsNumber of points to compute in each latitude or longitude line, 		 per 2*pi radians; default is 360.   clip If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   slatLatitudes to compute on each longitude circle.   slonLongitudes to compute on each latitude circle.    ", "NV/PG", " 	Written by:	Spitale, 2/1998   	Array of POINT containing image points and the corresponding inertial 	vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_hide.html", "pg_hide.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_hide.pro", "", "", "	Hides the given points with respect to each given object and observer 	using the hide methods of the given bodies.    	The flags arrays in point_ptd are modified.    	For each object in point_ptd, hidden points are computed and 	PTD_MASK_INVISIBLE in the POINT is set.  No points are 	removed from the array.    ", "", "          -1", " 	Written by:	Spitale, 3/2017, generalized pg_hide_globe and pg_hide_disk   	The following command hides all points which are behind a planet as 	seen by the camera:  	pg_hide, point_ptd, cd=cd, bx=pd  	In this call, pd is a planet descriptor, and cd is a camera descriptor.    STATUS: 	Complete    SEE ALSO: 	pg_hide_limb ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_hide.html#pgh_select_by_assoc", "pgh_select_by_assoc", 'routine in <a href="com/pg/pg_hide.html">pg_hide.pro</a>', "pg_hide.pro", "", "pgh_select_by_assoc", "", "bxpoint_ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_hide.html#pgh_select_by_bounding_box", "pgh_select_by_bounding_box", 'routine in <a href="com/pg/pg_hide.html">pg_hide.pro</a>', "pg_hide.pro", "", "pgh_select_by_bounding_box", "", "_cdbxpoint_ptd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_hide.html#pg_hide", "pg_hide", 'routine in <a href="com/pg/pg_hide.html">pg_hide.pro</a>', "pg_hide.pro", "", "pg_hide", "", "cdodbxgbxdkxddgdrevealcompresscatrmassoc_point_ptdhide_ptd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_image_sector.html", "pg_image_sector.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_image_sector.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_image_sector.html#pg_image_sector", "pg_image_sector", 'routine in <a href="com/pg/pg_image_sector.html">pg_image_sector.pro</a>', "pg_image_sector.pro", "", "pg_image_sector", "	Allows the user to select a rectangular image region, with an 	arbitrary tilt, by clicking and dragging.  A rectangle is selected 	using the left mouse button and a line of zero width is selected 	using the right moise button.   ", "sample    Pixel grid sampling to use instead of 1.   win_num    Window number of IDL graphics window in which to select                    box, default is current window.   width    Width of box instead of letting the user select.   restore    Do not leave the box in the image.   p0    First corner of box.  If set, then the routine immediately                    begins to drag from that point until a button is released.   p1    Endpoint.  If given, p0 must also be given and is taken                    as the starting point for a line along which to scan.                    In this case, the user does not select the box manually.                    Scan width is one pixel unless 'width' is specified,                    and is centered on the line from p0 to p1.   xor_graphics    If set, the sector outline is drawn and erased using xor                    graphics instead of a pixmap.   color    Color to use for rectangle, default is !color.   silent    If set, messages are suppressed.    corners    If set, then p0 and p1 are taken as the corners of                    the box, and the user is not prompted to select one.   ", "NV/PG", "      POINT containing points on the sector outline.  The point       spacing is determined by the sample keyword.   ORIGINAL AUTHOR : J. Spitale ; 6/2005   ");
  
  libdata[libdataItem++] = new Array("com/pg/pg_image_sector.html#test", "test", 'routine in <a href="com/pg/pg_image_sector.html">pg_image_sector.pro</a>', "pg_image_sector.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_limb.html", "pg_limb.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_limb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_limb.html#pg_limb", "pg_limb", 'routine in <a href="com/pg/pg_limb.html">pg_limb.pro</a>', "pg_limb.pro", "", "pg_limb", "	Computes image points on the limb of each given globe object.    	By definition, the surface normal at a point on the limb of a body is 	perpendicular to a vector from the observer to that same point, so the 	dot product of the two vectors is zero.  This program uses an iterative 	scheme to find points onthe surface at which this dot product is less 	than epsilon.    ", "cd Array (n_timesteps) of camera descriptors.   od Array (n_timesteps) of descriptors of objects 		 which must be a subclass of BODY.  These objects are used 		 as the observer from which limb is computed.  If no observer 		 descriptor is given, the camera descriptor is used.   gbx Array (n_objects, n_timesteps) of descriptors of objects 		 which must be a subclass of GLOBE.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   clip If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   npointsNumber of points to compute.  Default is 1000.   epsilonMaximum angular error in the result.  Default is 1e-3.   reveal Normally, points computed for objects whose opaque flag 		 is set are made invisible.  /reveal suppresses this behavior.   ", "NV/PG", " 	Written by:	Spitale, 1/1998   	The following command computes points on the planet which lie on the 	terminator:  	term_ptd = pg_limb,(cd=cd, gbx=pd, od=sd)  	In this call, pd is a planet descriptor, cd is a camera descriptor, 	and sd is a star descriptor (i.e., the sun).    STATUS: 	Complete 	Array (n_objects) of POINT containing image 	points and the corresponding inertial vectors.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_limb_sector.html", "pg_limb_sector.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_limb_sector.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_limb_sector.html#pg_limb_sector", "pg_limb_sector", 'routine in <a href="com/pg/pg_limb_sector.html">pg_limb_sector.pro</a>', "pg_limb_sector.pro", "", "pg_limb_sector", "	Allows the user to select an image sector along lines of constant  	azimuth and altitude above a planet by clicking and dragging.   ", "cd    Camera descriptor.   gbx    Globe descriptor for the planet whose limb is to be                    scanned.   gd    Generic descriptor containnig the above descriptors.   lonsample    Sets the grid sampling in pixels.  Default is one.   win_num    Window number of IDL graphics window in which to select                    box, default is current window.   restore    Do not leave the box in the image.   p0    First corner of box.  If set, then the routine immediately                    begins to drag from that point until a button is released.   xor_graphics    If set, the sector outline is drawn and erased using xor                    graphics instead of a pixmap.   color    Color to use for rectangle, default is !color.   silent    If set, messages are suppressed.    nodsk    If set, skyplane disk image points will not be included                    in the output POINT.   dkd     Disk desriptor in the skyplane, centered on the planet                    with 0 axis along the skyplane projection of the north                    pole.  For use with pg_profile_ring.   altitudesArray giving altitude at each sample.   azimuthsArray giving azimuth at each sample.   limb_pts_bodyBody coordinates of each limb points on planet surface.    cw    If set, azimuths are assumed to increase in the clockwise                    direction.   ", "NV/PG", "      POINT containing points on the sector outline.  The point       spacing is determined by the sample keyword.  The POINT object       also contains the disk coordinate for each point, relative to the       returned disk descriptor, and the user fields 'nrad' and 'nlon'       giving the number of points in altitude and azimuth.   KNOWN BUGS: 	The sector flips when it hits zero azimuth rather than retaining a 	consistent sense.    MODIFICATION HISTORY : 	Spitale; 8/2006		original version   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_limb_sector_altaz.html", "pg_limb_sector_altaz.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_limb_sector_altaz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_limb_sector_altaz.html#pg_limb_sector_altaz", "pg_limb_sector_altaz", 'routine in <a href="com/pg/pg_limb_sector_altaz.html">pg_limb_sector_altaz.pro</a>', "pg_limb_sector_altaz.pro", "", "pg_limb_sector_altaz", "	Constructs a limb sector outline for use with pg_profile_ring given 	altitude and azimuth bounds.   ", "cd    Camera descriptor.   gbx    Globe descriptor giving the planet about whose limb                    the scan will be extracted.   gd    Generic descriptor containing the above descriptors.   dkd    Disk descriptor in the skyplane, centered on the planet                    with 0 axis along the skyplane projection of the north                    pole.  For use with pg_profile_ring.   sample    Sets the grid sampling in pixels.  Default is one.   nodsk    If set, skyplane disk image points will not be included                    in the output POINT.   altitudesArray giving altitude at each sample.   azimuthsArray giving azimuth at each sample.   limb_pts_bodyBody coordinates of each limb points on planet surface.     cw    If set, azimuths are assumed to increase in the clockwise                    direction.   naz    Total number of samples in the azimuthal direction.                    Determined by the 'sample' keyword by default.   nalt    Total number of samples in the altitude direction.                    Determined by the 'sample' keyword by default.   graphic    If set, the sector is computed in the planetographic                    sense, i.e., lines of constant azimuth extend along                    the local surface normal direction instead of the radial                    direction.    alt2-elements array giving the lower and upper altitude bounds 		for the sector.   _az2-elements array giving the lower and upper azimuth bounds 		for the sector in radians, reliative to the skyplane 		projection of the planet's north pole.   ", "NV/PG", "      POINT containing points on the sector outline.  The point       spacing is determined by the sample keyword.  The POINT objects       also contains the disk coordinate for each point, relative to the       returned disk descriptor, and the user fields 'nrad' and 'nlon'       giving the number of points in altitude and azimuth.   KNOWN BUGS: 	The sector flips when it hits zero azimuth rather than retaining a 	consistent sense.    ORIGINAL AUTHOR : 	Spitale; 8/2006   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_limb_sector_linear.html", "pg_limb_sector_linear.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_limb_sector_linear.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_limb_sector_linear.html#pg_limb_sector_linear", "pg_limb_sector_linear", 'routine in <a href="com/pg/pg_limb_sector_linear.html">pg_limb_sector_linear.pro</a>', "pg_limb_sector_linear.pro", "", "pg_limb_sector_linear", "	Constructs a limb sector outline for use with pg_profile_image, given 	altitude and length bounds.  The sector is rectangular, being tangent 	to the limb at a given azimuth.   ", "cd    Camera descriptor.   gbx    Globe descriptor giving the planet about whose limb                    the scan will be extracted.   gd    Generic descriptor containig the above descriptors.   sample    Sets the grid sampling in pixels.  Default is one.   altitudesArray giving altitude at each sample.    rimsArray giving azimuth at each sample.   nrim    Total number of samples in the scan direction.                    Determined by the 'sample' keyword by default.   nalt    Total number of samples in the altitude direction.                    Determined by the 'sample' keyword by default.   graphic    If set, the sector is computed in the planetographic                    sense, i.e., lines of constant azimuth extend along                    the local surface normal direction instead of the radial                    direction.    alt2-elements array giving the lower and upper altitude bounds 		for the sector.   _rim2-element array giving the image-coordinate cylidrical coordinates 		of the the ends of the sector.   az0Azimuth of the sector tangent point.   ", "NV/PG", "      POINT object containing points on the sector outline.  The point       spacing is determined by the sample keyword.  The POINT object       also contains the user fields 'nl' and 'nw' giving the number of points       in altitude and r.   KNOWN BUGS: 	The sector flips when it hits zero azimuth rather than retaining a 	consistent sense.    ORIGINAL AUTHOR : 	Spitale; 1/2009   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_limb_sector_oblique.html", "pg_limb_sector_oblique.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_limb_sector_oblique.pro", "", "", "	Allows the user to select an image sector along lines of constant  	azimuth and altitude above a planet by clicking and dragging.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_limb_sector_oblique.html#pg_limb_sector_oblique", "pg_limb_sector_oblique", 'routine in <a href="com/pg/pg_limb_sector_oblique.html">pg_limb_sector_oblique.pro</a>', "pg_limb_sector_oblique.pro", "", "pg_limb_sector_oblique", "", "cdgbxgdlonsamplewin_numrestorep0p1widthxor_graphicscolorsilentnodskdkdaltitudesazimuthslimb_pts_bodycw", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_linearize_image.html", "pg_linearize_image.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_linearize_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_linearize_image.html#pg_linearize_image", "pg_linearize_image", 'routine in <a href="com/pg/pg_linearize_image.html">pg_linearize_image.pro</a>', "pg_linearize_image.pro", "", "pg_linearize_image", "	Reprojects an image onto a linear scale.    	The input image is divided into pieces and tranformed one piece at 	a time.  There are two modes of operation: If nmp and scp are 	given, then the image is transformed using them as control points. 	Otherwise, the image is transformed using whatever camera transformation 	is specified in the camera descriptor.    STATUS: 	Control-point scheme not yet implemented.    SEE ALSO: 	pg_resfit, pg_resloc    ", "cdCamera descriptor describing the image to be reprojected.   gdGeneric descriptor containing the above descriptor.   fcpFocal coordinates of known reseau locations.   scpImage coordinates in input image of detected reseau marks 		corresponding to those given by nmp.   scale2-element array giving the camera scale (radians/pixel) 		in each direction for the reprojected image.  If not given, the 		scale of the input image is used.   oaxis2-element array giving the image coordinates of the optic axis 		in the reprojected image.  If not given, the center of 		the reprojected image is used.   size2-element array giving the size of the reprojected image.  If 		not given, the size of the input image is used.   pc_xsizeY-Size of each image piece.  Default is 200 pixels.   pc_ysizeimageThe output image, which is also placed in the data descriptor.    interpType of interpolation to use.  Options are: 		'nearest', 'mean', 'bilinear', 'cubic', 'sinc'.   ddData descriptor containing image to be reprojected.   new_cd", "NV/PG", " 	Written by:	Spitale, 5/2002   	Data descriptor containing the reprojected image.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_load_maps.html", "pg_load_maps.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_load_maps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_load_maps.html#pg_load_maps", "pg_load_maps", 'routine in <a href="com/pg/pg_load_maps.html">pg_load_maps.pro</a>', "pg_load_maps.pro", "", "pg_load_maps", "	Loads maps and descriptors from a map directory.    Environment variables:   	PG_MAPS: 		Sets the map directory; overrides the dir keyword.  Maps are 		organized into subdirectories named for each body.        ", "mdMap descriptor for each map.    bxBody descriptors indicating which maps to load.    dddir", "NV/PG", " 	Written by:	Spitale  7/2015      STATUS: 	Complete 	Data descriptor containing the rendered image.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_map.html", "pg_map.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_map.html#pg_map", "pg_map", 'routine in <a href="com/pg/pg_map.html">pg_map.pro</a>', "pg_map.pro", "", "pg_map", "	Generates map projections.    ", "mdMap descriptor describing the projection.   cdCamera descriptor describing the image to be projected.   bxSubclass of BODY giving the body to be projected.  Can be 		GLOBE or RING.  Only bodies whose names match that in the 		map descriptor are mapped.   gbxGlobe descriptor describing the body to be projected. 		This argument is kept for compatibility with earlier 		code.  It is recommended that you use the 'bx' argument 		instead.   dkxDisk descriptor describing the body to be projected. 		This argument is kept for compatibility with earlier 		code.  It is recommended that you use the 'bx' argument 		instead.   sundStar descriptor for the sun.  If given, points behind the 		terminator are excluded.   gdGeneric descriptor.  If given, the above descriptor inputs 		are taken from the corresponding fields of this structure 		instead of from those keywords.   hide_fnString giving the name of a function whose purpose 			is to exclude hidden points from the map.  The only 			function currently packaged is 'pm_hide_ring', which 			takes a ring descriptor as data (see next keyword).   hide_data_pPointer to data for the hide function.   mapFor convenience, the generated map is returned here as 		well as in the returned data descriptor.    aux_namesArray (naux) giving udata names for additional data 			descriptor planes to reproject.  The dimensions of these 			planes must be the same as the image.  	pc_xsize, pc_ysize:	The map is generated in pieces of size pc_xsize 				x pc_ysize.   Default is 100 x 100 pixels.   pc_xsizepc_ysizebounds	Projection bounds specified as [lat0, lat1, lon0, lon1].   interpType of interpolation, see image_interp_cam.   arg_interpInterpolation argument, see image_interp_cam.   offsetOffset in [lat,lon] to apply to map coordinates before 		projecting.   edgeMinimum proximity to image edge.  Default is 0.   wind_fnwind_datasmoothIf set, the input image is smoothed before reprojection.   roiSubscripts in the output map specifying the map region 		to project, instead of the whole thing.   test_factorIf set, a test map, reduced in size by this factor, 			is projected to determine the roi.  For maps with 			large blank areas, this may speed up the projection 			greatly.    ddData descriptor containing image to be projected.   ", "NV/PG", " 	Written by:	Spitale, 1998 	Modified:	Daiana DiNino; 7, 2011 : test_factor   	Data descriptor containing the output map.  The instrument field is set 	to 'MAP'.  User data arrays are created for the reprojected aux_names 	arrays.    STATUS: 	Complete    SEE ALSO: 	pg_mosaic    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_mask.html", "pg_mask.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_mask.pro", "", "", "	Uses the given geometry to compute an image mask for all objects 	in a scene.    ", "", "          -1", " 	Written by:	Spitale, 4/2004   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_mask.html#pgmsk_grow", "pgmsk_grow", 'routine in <a href="com/pg/pg_mask.html">pg_mask.pro</a>', "pg_mask.pro", "", "pgmsk_grow", "", "maskdr", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_mask.html#pg_mask", "pg_mask", 'routine in <a href="com/pg/pg_mask.html">pg_mask.pro</a>', "pg_mask.pro", "", "pg_mask", "", "maskddgdcdgbxdkxbxsundfgbxfdkxfbxdgbxddkxdbxpgbxpdkxpbxlimb_ptdterm_ptdbody_ptddisk_ptdnoddnp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_mask_points.html", "pg_mask_points.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_mask_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_mask_points.html#pg_mask_points", "pg_mask_points", 'routine in <a href="com/pg/pg_mask_points.html">pg_mask_points.pro</a>', "pg_mask_points.pro", "", "pg_mask_points", "", "mask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_measure.html", "pg_measure.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_measure.pro", "", "", "	Allows the user to measure quantities between two points in an 	image using the mouse in the current graphics window.    ", "", "          -1", " 	Written by:	Spitale, 3/2002   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_xy_test", "_pgm_xy_test", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_xy_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_xy", "_pgm_xy", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_xy", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_dn_test", "_pgm_dn_test", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_dn_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm__dn", "_pgm__dn", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm__dn", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_dn", "_pgm_dn", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_dn", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_radec_test", "_pgm_radec_test", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_radec_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_radec", "_pgm_radec", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_radec", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_globe_test", "_pgm_globe_test", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_globe_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_globe", "_pgm_globe", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_globe", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_disk_test", "_pgm_disk_test", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_disk_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_disk", "_pgm_disk", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_disk", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_eqplane_test", "_pgm_eqplane_test", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_eqplane_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_eqplane", "_pgm_eqplane", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_eqplane", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#____pgm_eqplane", "____pgm_eqplane", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "____pgm_eqplane", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_map_test", "_pgm_map_test", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_map_test", "", "gdinertial_ptsurface_ptpdd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#_pgm_map", "_pgm_map", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "_pgm_map", "", "gdformatlabelinertial_ptsurface_ptpddxd", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#pgm_table", "pgm_table", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "pgm_table", "", "label_padvalue_padnamename_pvalue_plabel_pformat_p", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_measure.html#pg_measure", "pg_measure", 'routine in <a href="com/pg/pg_measure.html">pg_measure.pro</a>', "pg_measure.pro", "", "pg_measure", "", "cdgbxdkxsundsdgdfnradecxystringsilentvaluespdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_mosaic.html", "pg_mosaic.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_mosaic.pro", "", "", "	Combines two or more maps into one.    ", "", "          -1", " 	Written by:	Spitale 1/2002   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_mosaic.html#pg_mosaic", "pg_mosaic", 'routine in <a href="com/pg/pg_mosaic.html">pg_mosaic.pro</a>', "pg_mosaic.pro", "", "pg_mosaic", "", "combine_fnwt_fnsdatamosaicweightpc_xsizepc_ysizescalesdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_move.html", "pg_move.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_move.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_move.html#pg_move", "pg_move", 'routine in <a href="com/pg/pg_move.html">pg_move.pro</a>', "pg_move.pro", "", "pg_move", "	Translates and rotates the given points.    ", "axis_ptdPOINT containing a single image point 			to be used as the axis of rotation.   object_ptdArray (n_objects) of POINT containing the 			image points to be moved.   dxy	2-element array specifying the translation as [dx,dy].   dtheta	Rotation angle in radians.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	object_ptd:	The input points are be modified on return.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_nearest_points.html", "pg_nearest_points.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_nearest_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_nearest_points.html#pg_nearest_points", "pg_nearest_points", 'routine in <a href="com/pg/pg_nearest_points.html">pg_nearest_points.pro</a>', "pg_nearest_points.pro", "", "pg_nearest_points", "	xx    Environment variables:   	xx:	xx  	xx:	xx    	xx:	xx  	xx:	xx    	xx    	xx    	xx    ", "object_ptd_ptd", "NV/PG", " 	Written by:	xx, xx/xx/xxxx   	xx    STATUS: 	xx    SEE ALSO: 	xx, xx, xx 	xx    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_northangle.html", "pg_northangle.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_northangle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_northangle.html#pg_northangle", "pg_northangle", 'routine in <a href="com/pg/pg_northangle.html">pg_northangle.pro</a>', "pg_northangle.pro", "", "pg_northangle", "	Computes the angle between the image-coordinate y-axis and the 	projected z-axis of the given body.  Increasing angle corresponds to 	clockwise rotation in the image.    ", "cdArray (n_timesteps) of camera descriptors.   bxArray (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   ", "NV/PG", " 	Written by:	Spitale, 11/2001   	Array (n_objects) of double giving the northangles in radians.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_photom.html", "pg_photom.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_photom.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_photom.html#pg_photom", "pg_photom", 'routine in <a href="com/pg/pg_photom.html">pg_photom.pro</a>', "pg_photom.pro", "", "pg_photom", "	Photometric image correction for disk or globe objects.    ", "outline_ptdPOINT with image points outlining the 			region of the image to correct.  To correct the entire 			planet, this input could be generated using pg_limb(). 			If this keyword is not given, the entire image is used.   cdCamera descriptor   gbxGlobe descriptor   dkxDisk descriptor   sundSun descriptor   gdGeneric descriptor.  If present, cd, dkx, and gbx are taken 		from here if contained.   refl_fnString naming reflectance function to use.  Default is 			'pht_minneart'.   phase_fnString naming phase function to use.  Default is none.   refl_parmphase_parmemm_outImage emission angles.   inc_outImage incidence angles.   phase_outImage phase angles.    overwriteIf set, the output descriptor is the input descriptor 			with the relevant fields modified.   ddData descriptor containing image to correct.    ", "NV/PG", " 	Written by:	Spitale, 6/2004   	Data descriptor containing the corrected image.  The photometric angles 	emm, inc, and phase are placed in the user data arrays with the tags 	'EMM', 'INC', and 'PHASE' respectively.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_photom_disk.html", "pg_photom_disk.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_photom_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_photom_disk.html#pg_photom_disk", "pg_photom_disk", 'routine in <a href="com/pg/pg_photom_disk.html">pg_photom_disk.pro</a>', "pg_photom_disk.pro", "", "pg_photom_disk", "	Photometric image correction for disk objects.    ", "outline_ptdPOINT with image points outlining the 			region of the image to correct.  To correct the entire 			disk, this input could be generated using pg_ring(). 			If this keyword is not given, the entire image is used. 			If two arrays are given, they are taken as the inner 			and outer boundaries.   cdCamera descriptor   dkxDisk descriptor   sundSun descriptor   gdGeneric descriptor.  If present, cd and dkx are taken from 		here if contained.   refl_fnString naming reflectance function to use.  Default is 			'pht_minneart'.   phase_fnString naming phase function to use.  Default is none.   refl_parmphase_parmemm_outImage emission angles.   inc_outImage incidence angles.   phase_outImage phase angles.    overwriteIf set, the output descriptor is the input descriptor 			with the relevant fields modified.   ddData descriptor containing image to correct.    ", "NV/PG", " 	Written by:	Spitale, 1/2002 (pg_photom) 	 Spitale, 6/2004:	changed to pg_photom_disk   	New data descriptor containing the corrected image.  The photometric 	angles emm, inc, and phase are placed in the user data arrays with 	the tags'EMM', 'INC', and 'PHASE' respectively.  Unless /overwrite is 	set, the nw descriptor is a clone of the input descriptor, with the 	relevant fields modified.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_photom_globe.html", "pg_photom_globe.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_photom_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_photom_globe.html#pg_photom_globe", "pg_photom_globe", 'routine in <a href="com/pg/pg_photom_globe.html">pg_photom_globe.pro</a>', "pg_photom_globe.pro", "", "pg_photom_globe", "	Photometric image correction for globe objects.    ", "outline_ptdPOINT with image points outlining the 			region of the image to correct.  To correct the entire 			planet, this input could be generated using pg_limb(). 			If this keyword is not given, the entire image is used.   cdCamera descriptor   gbxGlobe descriptor   sundSun descriptor   gdGeneric descriptor.  If present, cd and gbx are taken from 		here if contained.   refl_fnString naming reflectance function to use.  Default is 			'pht_refl_minneart'.   phase_fnString naming phase function to use.  Default is none.   refl_parmphase_parmemm_outImage emission angles.   inc_outImage incidence angles.   phase_outImage phase angles.    overwriteIf set, the output descriptor is the input descriptor 			with the relevant fields modified.   ddData descriptor containing image to correct.    ", "NV/PG", " 	Written by:	Spitale, 1/2002 (pg_photom) 	 Spitale, 6/2004:	changed to pg_photom_globe   	New data descriptor containing the corrected image.  The photometric 	angles emm, inc, and phase are placed in the user data arrays with 	the tags'EMM', 'INC', and 'PHASE' respectively.  Unless /overwrite is 	set, the nw descriptor is a clone of the input descriptor, with the 	relevant fields modified.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_profile_image.html", "pg_profile_image.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_profile_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_profile_image.html#pg_profile_image", "pg_profile_image", 'routine in <a href="com/pg/pg_profile_image.html">pg_profile_image.pro</a>', "pg_profile_image.pro", "", "pg_profile_image", "	Generates a dn profile along a line in an image.   ", "cdCamera descriptor.  Needed for sinc interpolation. (to get PSF)   gd  Optional generic descriptor containing cd.   distance Array giving the distance, in pixels, along the profile.   interp  Type of interpolation to use.  Options are:                'nearest', 'mean', 'bilinear', 'cubic', 'sinc'.   arg_interp  Arguments to pass to the interpolation function.    sigma  Array giving the standard deviation at each point in the 		profile.   profile  The profile.   image_pts Image point for each point along the profile.    bgUniform value to subtract from profile.   ddData descriptor.   outline_ptd  POINT giving the outline of the region to plot,                as produced by the pg_image_sector.   ", "NV/PG", "       Written by:     Spitale, 6/2005   	Two data descriptors: the first contains the profile; the second contains 	the profile sigma.    ");
  
  libdata[libdataItem++] = new Array("com/pg/pg_profile_image.html#test", "test", 'routine in <a href="com/pg/pg_profile_image.html">pg_profile_image.pro</a>', "pg_profile_image.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_profile_ring.html", "pg_profile_ring.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_profile_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_profile_ring.html#pg_profile_ring", "pg_profile_ring", 'routine in <a href="com/pg/pg_profile_ring.html">pg_profile_ring.pro</a>', "pg_profile_ring.pro", "", "pg_profile_ring", "	Generates radial or longitudinal ring profiles from the given image 	using an image outline.   	The image points of the sector outline are first calculated.  If        /outline is selected then this is output.  If not, then the        /azimuthal keyword determines if this is a radius or longitude        profile.  The radius and longitude spacing for profile is then is        determined. If n_lon or n_rad is given, then these are used.  If not,        then the outline is used to determine the spacing in radius and        longitude so that the maximum spacing is a pixel.  If oversamp is        given then the number of samples is multiplied by this factor.        Then the image is sampled with this radius x longitude grid and        the dn interpolated with the routine image_interp at each point.        The dn's are then averaged along the requested profile direction.        If /bin keyword is selected then the image is not interpolated but        rather each pixel is binned in a histogram with the calculated        spacing.    ", "cdCamera descriptor.   dkx  Disk descriptor.   gd  Generic descriptor, if used, cd and dkx taken from it unless                overriden by cd and dkx arguments.   azimuthal  If set, the plot is longitudinal instead of radial.   sigma  Array giving the standard deviation at each point in the 		profile.   width  Array giving the width of the scan, in pixels along the                averaging direction, at each point in the profile.   nn  Number of image samples averaged into each profile point.   bin   If set, pixels in sector are binned according to                radius or longitude rather than dn averaged at equal                radius or longitude spacing   dsk_ptsArray of disk coordinates corresponding to each value in the 		returned dn profile.   im_ptsArray of image coordinates corresponding to each value in the 		returned dn profile.   interp   Type of interpolation to use: 'nearest', 'bilinear', 'cubic',                or 'sinc'.  'sinc' is the default.   arg_interp  Arguments to pass to the interpolation function.   profile  The profile.   bgUniform value to subtract from profile.   ddData descriptor.   outline_ptd   POINT giving the outline of the sector to plot,                       as produced by the pg_ring_sector.   ", "NV/PG", "       Written by:     Vance Haemmerle & Spitale, 6/1998 	Modified to use outline_ptd instead of (rad,lon): Spitale 5/2005        lon = [175.,177.]      rad = [65000000.,138000000.]      outline_ptd = pg_ring_sector(cd=cd, dkx=rd, rad=rad, lon=lon)      pg_draw, outline_ptd       profile = pg_profile_ring(dd, cd=cd, dkx=rd, $                                           outline_ptd, dsk_pts=dsk_pts)      window, /free, xs=500, ys=300      plot, dsk_pts[*,0], profile 	Two data descriptors: the first contains the profile; the second contains 	the profile sigma.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ptassoc.html", "pg_ptassoc.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ptassoc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ptassoc.html#pg_ptassoc", "pg_ptassoc", 'routine in <a href="com/pg/pg_ptassoc.html">pg_ptassoc.pro</a>', "pg_ptassoc.pro", "", "pg_ptassoc", "	Associates points between two arrays by searching for the most 	frequent offset between the two.    	Points are associated by searching for the most frequent offset 	between scan points and model points.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_ptscan, pg_ptscan_coeff, 	pg_cvchisq, pg_ptchisq, pg_threshold    ", "radiusdxymaxcountscan_ptdPOINT(s) containing first array, typically 			an array of candidate points detected in an image.   model_ptdPOINT(s) containing the second array, typically 			an array of computed model points.   assoc_model_ptd", "NV/PG", " 	Written by:	Spitale, 3/2004   	POINT containing an associated scan point for each output 	model point in assoc_model_ptd.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ptchisq.html", "pg_ptchisq.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ptchisq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ptchisq.html#pg_ptchisq", "pg_ptchisq", 'routine in <a href="com/pg/pg_ptchisq.html">pg_ptchisq.pro</a>', "pg_ptchisq.pro", "", "pg_ptchisq", "	Computes chi-squared value for given point fit parameters.    	The caller is responsible for ensuring that the input parameters are 	consistent with those used with other programs like pg_fit.    STATUS: 	Complete    SEE ALSO: 	pg_cvscan, pg_cvscan_coeff, pg_cvchisq, pg_ptscan, pg_ptscan_coeff, 	pg_ptchisq, pg_fit, pg_threshold    ", "axis_ptdPOINT containing a single image  point 			to be used as the axis of rotation.   fix	Array specifying which parameters to fix as 			[dx,dy,dtheta].   dxy	2-element vector giving the translation as [dx,dy].   dtheta	Rotation in radians.   scan_ptdArray (n_points) of POINT output from 			pg_ptscan containing scanned image points as well as 			other necessary scan data.   ", "NV/PG", " 	Written by:	Haemmerle, 12/1998   	Single chi-square values for totality of points.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ptcntrd.html", "pg_ptcntrd.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ptcntrd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ptcntrd.html#pg_ptcntrd", "pg_ptcntrd", 'routine in <a href="com/pg/pg_ptcntrd.html">pg_ptcntrd.pro</a>', "pg_ptcntrd.pro", "", "pg_ptcntrd", "	Attempts to find points of highest correlation with a given model 	centered near given features in an image, then returns the centroid.    	xx    	Currently does not work for multiple time steps.    	For each visible object, a section of the image of size width +        the size of the model is extracted and sent to routine ptloc to        find the pixel offset with the highest correlation with the given        model. Then call astrolib routine cntrd to return centroid.    ", "model         Point spread model to be used in correlation.  If                        not given a default gaussian is used.   width         Width to search around expected point location.  If                        not given, a default width of 20 pixels is used.   edge          Distance from edge from which to ignore points.  If                        not given, an edge distance of 0 is used.   ccmin         If given, points are discarded if the correlation                        is below this value.   gdmax         If given, points are discarded if the gradiant of                        the correlation function is higher than this value.   dd	Data descriptor   object_ptd	Array (n_pts) of POINT giving the points. 			Only the image coordinates of the points need to be 			specified.   ", "NV/PG", " 	Written by:	Haemmerle, 5/1998   	To find stellar positions with a correlation higher than 0.6...         star_ptd=pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, /rm        ptscan_ptd=pg_ptscan(dd, star_ptd, edge=30, width=40, ccmin=0.6)   SEE ALSO: 	ptscan, pg_ptscan   STATUS: 	Complete. 	An array of type POINT giving the detected position for        each object.  The correlation coeff values for each detection is        saved in the data portion of POINT with tag 'scan_cc'.        The x and y offset from the given position is also saved.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ptfarscan.html", "pg_ptfarscan.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ptfarscan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ptfarscan.html#pg_ptfarscan", "pg_ptfarscan", 'routine in <a href="com/pg/pg_ptfarscan.html">pg_ptfarscan.pro</a>', "pg_ptfarscan.pro", "", "pg_ptfarscan", "	Attempts to find all occurrences of a model in an image.    ", "namemodel         Point spread model to be used in correlation.  If                        not given a default gaussian is used.   edge          Distance from edge from which to ignore points.  If                        not given, an edge distance of 0 is used.   ccmin         Minimum correlation to consider in search.  Default 			is 0.8.   gdmax         If given, points where the gradient of the                        correlation function is higher than this value 			are not considered in the search.   smooth	If given, the input image is smoothed using 			this width before any further processing.   wmod	x, ysize of default gaussian model.   wpsf	Half width of default gaussian psf model.   sky	If set, it is assumed that the image contains only 			point sources and sky.  Any object more than nsig 			standard deviations above the image mean are 			selected as candidates.   nsig	For use with the /sky option, standard deviation 			threshold for detecting point sources.   median	If given, the input image is filtered using 			a median filter of this width before any further 			processing.   mask	If set, an attempt is made to mask out extended 			objects before performing the scan   extend	If nonzero, star masks are extended by this 			many pixels in all directions.   nmax	Max. number of point sources to return.  If more 			are found, nsig is raised until thiws is satisified.   chifitdd	Data descriptor   ", "NV/PG", " 	Written by:	Spitale 2/2004   	An array of type POINT giving the detected position for        each object.  The correlation coeff value for each detection is        saved in the data portion of POINT with tag 'scan_cc'.    SEE ALSO: 	pg_ptscan   STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ptscan.html", "pg_ptscan.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ptscan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ptscan.html#pg_ptscan", "pg_ptscan", 'routine in <a href="com/pg/pg_ptscan.html">pg_ptscan.pro</a>', "pg_ptscan.pro", "", "pg_ptscan", "	Attempts to find points of highest correlation with a given model 	centered near given features in an image.    	Currently does not work for multiple time steps, only considers 	one point per given POINT.    	For each visible object, a section of the image of size width +        the size of the model is extracted and sent to routine ptloc to        find the pixel offset with the highest correlation with the given        model.    ", "model         Point spread model to be used in correlation.  If                        not given a default gaussian is used.   radius	Width outside of which to exclude detections whose 			offset varies too far from the most frequent offset. 			Detections with offsets outside this radius receive 			correlation coefficients of zero.   width         Width to search around expected point location.  If                        not given, a default width of 20 pixels is used.   edge          Distance from edge from which to ignore points.  If                        not given, an edge distance of 0 is used.   ccmin         If given, points are discarded if the correlation                        is below this value.   gdmax         If given, points are discarded if the gradiant of                        the correlation function is higher than this value.   smooth	If given, the input image is smoothed using 			this width before any further processing.   showwmod	x, ysize of default gaussian model.   wpsf	Half-width of default gaussian psf model.   median	If given, the input image is filtered using 			a median filter of this width before any further 			processing.   chisqmaxMax chisq between the model and the image.   cc_outroundspikedd	Data descriptor   object_ptd	Array (n_pts) of POINT giving the points. 			Only the image coordinates of the points need to be 			specified.   ", "NV/PG", " 	Written by:	Haemmerle, 5/1998 	Modified:	Spitale 9/2002 -- added twice model width to search 			width.   	To find stellar positions with a correlation higher than 0.6...         star_ptd=pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, /rm        ptscan_ptd=pg_ptscan(dd, star_ptd, edge=30, width=40, ccmin=0.6)   SEE ALSO: 	pg_ptfarscan   STATUS: 	Complete. 	An array of type POINT giving the detected position for        each object.  The correlation coeff value for each detection is        saved in the data portion of POINT with tag 'scan_cc'.        The x and y offset from the given position is also saved.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ptscan_coeff.html", "pg_ptscan_coeff.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ptscan_coeff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ptscan_coeff.html#pg_ptscan_coeff", "pg_ptscan_coeff", 'routine in <a href="com/pg/pg_ptscan_coeff.html">pg_ptscan_coeff.pro</a>', "pg_ptscan_coeff.pro", "", "pg_ptscan_coeff", "	Computes linear least-squares coefficients for a fit to the image 	coordinate offset which matches a point to a feature in an image.           pg_ptscan_coeff extracts the scan data from the given        scan_ptd structure and uses ipt_coeff to compute the coefficients.        See the documentation for that routine for details.    ", "axis_ptd      POINT containing a single image point                        to be used as the axis of rotation in the fit for                        every point.   fix           Array specifying which parameters to fix in the                        fit as [dx,dy,dtheta].;   model_ptdpts_ptd       Array (n_pts) of POINT output from                        pg_ptscan containing image points as well as                        other necessary data.;   ", "NV/PG", " 	Written by:	Haemmerle, 5/1998          The following command uses data from pg_ptscan to compute        least square coefficients for a fit such that only dx and dtheta        will be allowed to vary:         optic_ptd = pnt_create_descriptors(points=cam_oaxis(cd))        ptscan_cf = pg_ptscan_coeff(pts_ptd, axis=optic_ptd, fix=[1])         In this call, pts_ptd is a POINT containing the point data        from pg_ptscan and optic_ptd is a POINT giving the optic axis        of the camera as computed by cam_oaxis.    STATUS: 	Complete.        Array (n_pts) of pg_fit_coeff_struct containing coefficients for        the least-square fit to be input to pg_fit.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_put_arrays.html", "pg_put_arrays.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_put_arrays.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_put_arrays.html#pg_put_arrays", "pg_put_arrays", 'routine in <a href="com/pg/pg_put_arrays.html">pg_put_arrays.pro</a>', "pg_put_arrays.pro", "", "pg_put_arrays", "	Outputs array descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	CameStarra descriptors are passed to the translators.  Any star 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_planets, pg_put_rings, pg_put_cameras, pg_put_maps    ", "ardStar descriptors to output.  	arr_*:		All star override keywords are accepted.   odsddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @arr__keywords.include", "NV/PG", " 	Written by:	Spitale, 3/2017   	NONE    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_put_cameras.html", "pg_put_cameras.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_put_cameras.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_put_cameras.html#pg_put_cameras", "pg_put_cameras", 'routine in <a href="com/pg/pg_put_cameras.html">pg_put_cameras.pro</a>', "pg_put_cameras.pro", "", "pg_put_cameras", "	Outputs camera descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	Camera descriptors are passed to the translators.  Any camera 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_planets, pg_put_rings, pg_put_stars, pg_put_maps    ", "cdCamera descriptors to output.  	cam_*:		All camera override keywords are accepted.   ddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @cam__keywords.include", "NV/PG", " 	Written by:	Spitale, 1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_put_maps.html", "pg_put_maps.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_put_maps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_put_maps.html#pg_put_maps", "pg_put_maps", 'routine in <a href="com/pg/pg_put_maps.html">pg_put_maps.pro</a>', "pg_put_maps.pro", "", "pg_put_maps", "	Outputs map descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	Map descriptors are passed to the translators.  Any map 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_planets, pg_put_rings, pg_put_stars, pg_put_cameras    ", "mdMap descriptors to output.  	map_*:		All map override keywords are accepted.   ddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @map__keywords.include", "NV/PG", " 	Written by:	Spitale, 1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_put_planets.html", "pg_put_planets.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_put_planets.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_put_planets.html#pg_put_planets", "pg_put_planets", 'routine in <a href="com/pg/pg_put_planets.html">pg_put_planets.pro</a>', "pg_put_planets.pro", "", "pg_put_planets", "	Outputs planet descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	Planet descriptors are passed to the translators.  Any planet 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_cameras, pg_put_rings, pg_put_stars, pg_put_maps    ", "pdPlanet descriptors to output.  	plt_*:		All planet override keywords are accepted.   odsraw	If set, no aberration corrections are performed.   ddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @plt__keywords.include", "NV/PG", " 	Written by:	Spitale, 1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_put_rings.html", "pg_put_rings.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_put_rings.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_put_rings.html#pg_put_rings", "pg_put_rings", 'routine in <a href="com/pg/pg_put_rings.html">pg_put_rings.pro</a>', "pg_put_rings.pro", "", "pg_put_rings", "	Outputs ring descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	Ring descriptors are passed to the translators.  Any ring 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_planets, pg_put_cameras, pg_put_stars, pg_put_maps    ", "rdRing descriptors to output.  	rng_*:		All ring override keywords are accepted.   odsddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @rng__keywords.include", "NV/PG", " 	Written by:	Spitale, 1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_put_stars.html", "pg_put_stars.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_put_stars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_put_stars.html#pg_put_stars", "pg_put_stars", 'routine in <a href="com/pg/pg_put_stars.html">pg_put_stars.pro</a>', "pg_put_stars.pro", "", "pg_put_stars", "	Outputs star descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	CameStarra descriptors are passed to the translators.  Any star 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_planets, pg_put_rings, pg_put_cameras, pg_put_maps    ", "sdStar descriptors to output.  	str_*:		All star override keywords are accepted.   odsddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @str__keywords.include", "NV/PG", " 	Written by:	Spitale, 1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_put_stations.html", "pg_put_stations.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_put_stations.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_put_stations.html#pg_put_stations", "pg_put_stations", 'routine in <a href="com/pg/pg_put_stations.html">pg_put_stations.pro</a>', "pg_put_stations.pro", "", "pg_put_stations", "	Outputs station descriptors through the translators.    	Translator-dependent.  The data descriptor may be affected.    	CameStarra descriptors are passed to the translators.  Any star 	keywords are used to override the corresponding quantities in the 	output descriptors.    STATUS: 	Complete    SEE ALSO: 	pg_put_planets, pg_put_rings, pg_put_cameras, pg_put_maps    ", "stdStar descriptors to output.  	stn_*:		All star override keywords are accepted.   odsddData descriptor.   trsString containing keywords and values to be passed directly 		to the translators as if they appeared as arguments in the 		translators table.  These arguments are passed to every 		translator called, so the user should be aware of possible 		conflicts.  Keywords passed using this mechanism take 		precedence over keywords appearing in the translators table.   @stn__keywords.include", "NV/PG", " 	Written by:	Spitale, 3/2017   	NONE    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_range.html", "pg_range.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_range.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_range.html#pg_range", "pg_range", 'routine in <a href="com/pg/pg_range.html">pg_range.pro</a>', "pg_range.pro", "", "pg_range", "	Computes distance between the centers of two bodies.    ", "bx1Array (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   bx2Array (n_objects, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   ", "NV/PG", " 	Written by:	Spitale, 11/2001   	Array (n_objects) doubles giving the ranges.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ray.html", "pg_ray.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ray.pro", "", "", "	Computes image points on each specified ray.    ", "", "          -1", " 	Written by:	Spitale, 9/2012   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ray.html#pgr_density_uniform", "pgr_density_uniform", 'routine in <a href="com/pg/pg_ray.html">pg_ray.pro</a>', "pg_ray.pro", "", "pgr_density_uniform", "", "npnvlen", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_ray.html#pg_ray", "pg_ray", 'routine in <a href="com/pg/pg_ray.html">pg_ray.pro</a>', "pg_ray.pro", "", "pg_ray", "", "rvlencdbxddgdclipcullnpointscatdensity_fndispersion", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_reflection.html", "pg_reflection.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_reflection.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_reflection.html#pg_reflection", "pg_reflection", 'routine in <a href="com/pg/pg_reflection.html">pg_reflection.pro</a>', "pg_reflection.pro", "", "pg_reflection", "	Computes image coordinates of given inertial vectors projected onto 	surface of the given disks and globes with respect to the given 	observer.  Returns only the closest reflection point for each objoect 	point.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   dkxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of DISK.   gbxArray (n_globes, n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.   bxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   ddData descriptor containing a generic descriptor to use 		if gd not given.  	  All other keywords are passed directly to pg_reflection_globe 	  and pg_reflection_disk and are documented with those programs.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   revealclipnocullallobject_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 6/2016   	Array (n_disks,n_objects) of POINT containing image 	points and the corresponding inertial vectors.    STATUS: 	Soon to be replaced by a new program that merges pg_reflection_globe and 	pg_reflection_disk.  The API for the new routine may be slightly different.    SEE ALSO: 	pg_reflection_disk, pg_reflection_globe, pg_reflection_points    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_reflection_disk.html", "pg_reflection_disk.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_reflection_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_reflection_disk.html#pg_reflection_disk", "pg_reflection_disk", 'routine in <a href="com/pg/pg_reflection_disk.html">pg_reflection_disk.pro</a>', "pg_reflection_disk.pro", "", "pg_reflection_disk", "	Computes image coordinates of given inertial vectors reflected onto 	surface of the given disk with respect to the given observer.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the camera descriptor in gd is used. 		Only one observer is allowed.   dkxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of DISK.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   nocullall_ptdreveal Normally, disks whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   clip If set reflection points are cropped to within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   all If set, all points are returned, even if invalid.   object_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 1/2002   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_reflection_globe.html", "pg_reflection_globe.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_reflection_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_reflection_globe.html#pg_reflection_globe", "pg_reflection_globe", 'routine in <a href="com/pg/pg_reflection_globe.html">pg_reflection_globe.pro</a>', "pg_reflection_globe.pro", "", "pg_reflection_globe", "	Computes image coordinates of the given inertial vectors projected onto 	surface of the given globe with respect to the given observer.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   gbxArray (n_globes, n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   nocullreveal Normally, disks whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   clip If set reflection points are cropped to within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   all If set, all points are returned, even if invalid.   nosolveIf set, reflection points are not computed.   object_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 6/2016   	Array (n_globes,n_objects) of POINT containing image 	points and the corresponding inertial vectors.    STATUS: 	Soon to be obsolete.  This program will be merged with pg_reflection_disk 	to make a more general program, which will replace pg_reflection.    SEE ALSO: 	pg_reflection, pg_reflection_disk, pg_reflection_points    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_render.html", "pg_render.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_render.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_render.html#pg_render", "pg_render", 'routine in <a href="com/pg/pg_render.html">pg_render.pro</a>', "pg_render.pro", "", "pg_render", "	Performs rendering on an array of bodies.        ", "cd      Camera descriptor.   sund        Star descriptor for the Sun.   bx      Array of object descriptors; must be a subclass of BODY.   ddmap       Array of data descriptors containing the body maps, 	              one for each body.  If not given, maps are loaded using 		      pg_load_maps.   md          Array of map descriptors for each ddmap.   dd	Data descriptor containing a generic descriptor to use 			if gd not given.   gd	Generic descriptor.  If given, the descriptor inputs 			are taken from this structure if not explicitly given.   sample      Amount by which to subsample pixels.   pc_size     To save memory, the projection is performed in pieces 	              of this size.  Default is 65536.   showpht_min     Minimum value to assign to photometric output.    no_phtmap       2-D array containing the rendered scene.    standoff    If given, secondary vectors are advanced by this distance 	              before tracing in order to avoid hitting target bodies 	              through round-off error.   limit_sourceIf set, secondary vectors originating on a given 	              body are not considered for targets that are the 	              same body.  Default is on.   nodd        If set, no data descrptor is produced.  The return value 	              is zero and the rendering is returned via the IMAGE 	              keyword.   psf         If set, the rendering is convolved with a point-spread 	              function.  If /psf, then the PSF is obtained via cd; if 	              psf is a 2D array, then is is used as the PSF.   npsf        Width of psf array to use if PSF is obtained via cd. 	              Default is 10.   penumbra    If set, lighting rays are traced to random points on 	              each secondary body rather then the center.   no_secondaryIf set, no secondary ray tracing is performed, 	              resulting in no shadows.   image_ptd   POINT or array with image points 	              specifying the grid to trace.  If not set, the entire 	              image described by cd is used.  The array can have 	              dimensions of (2,np) or (2,nx,ny).  If the latter, 	              the output map will have dimensions (nx,ny).  Note 	              that a PSF cannot be applied if nx and ny are not known.   mask_width  Width of trace mask.  Default is 512.  If set to zero, 	              no masking is performed.   no_maps     If set, maps are not loaded.   ", "NV/PG", " 	Written by:	Spitale      STATUS: 	Complete 	Data descriptor containing the rendered image.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_renderfit.html", "pg_renderfit.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_renderfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_renderfit.html#pg_renderfit", "pg_renderfit", 'routine in <a href="com/pg/pg_renderfit.html">pg_renderfit.pro</a>', "pg_renderfit.pro", "", "pg_renderfit", "	Searches for the offset (dx,dy) that gives the best agreement between 	two uncorrelated sets of image points.    	pg_renderfit finds the offset that gives the best correlation between 	the given image and a simulated image.    STATUS: 	Some bugs.  One problem is that the current search grid wraps pixels 	instead of truncating them.  This causes problems for images where 	a large body is not entirly within the FOV.    NOTES: 	This could be improved by iterating, starting with a broader, more 	coarsely sampled scene.    SEE ALSO: 	pg_farfit    ", "cd		Camera descriptor.   sund	Sun descriptor.   bx	Array of body descriptors describing objects in the scene.   show	If specified, some graphics are displayed illustrating 			aspects of the search.    fovdd	Data descriptor.   ", "NV/PG", " 	Written by:	Spitale, 2/2017   	2-element array giving the fit offset as [dx,dy].    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_repoint.html", "pg_repoint.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_repoint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_repoint.html#pg_repoint", "pg_repoint", 'routine in <a href="com/pg/pg_repoint.html">pg_repoint.pro</a>', "pg_repoint.pro", "", "pg_repoint", "	Modifies the camera orientation matrix based on the given image 	coordinate translation and rotation.    	pg_repoint adds its name to the task list of each given camera 	descriptor.    STATUS: 	Complete    SEE ALSO: 	pg_fit, pg_drag    ", "cd If given, the camera descriptor is modified with a new 		 orientation matrix.   gd If given in this way, the camera descriptor contained in the 		 generic descriptor is modified with a new orientation matrix.    axis_ptdPOINT containing a single image point 		 to be used as the axis of rotation.  Default is the camera 		 optic axis.   bore_cd Array (nt) of camera descriptors from which to copy the 		  new orientation instead of using dxy, dtheta, and axis_ptd.   bore_rotIf given, the orientation from bore_cd will be rotated 		  using this rotation matrix (3,3) before being copied.   bore_dxyBoresight offset in pixels.   absoluteIf set, the dxy argument represents and abosolute image 		  position rather than an offset.   _dxy	Array (2,1,nt) or (2,1) specifying the 			translation as [dx,dy] in pixels.   _dtheta	Array (nt) specfying the rotation angle in radians.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_repos.html", "pg_repos.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_repos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_repos.html#pg_repos", "pg_repos", 'routine in <a href="com/pg/pg_repos.html">pg_repos.pro</a>', "pg_repos.pro", "", "pg_repos", "	Modifies the body position based on the given offset and observer.    	pg_repos modifies bx and adds its name to the task list of each given 	descriptor.    STATUS: 	Complete    ", "bx   Array (nt) of body descriptors to translate.   od   Observer descriptor; specifies the body frame for the 		   translation vector.   ref_bx  Body descriptor giving reference position for directional 		   keywords.   dd   Data descriptor containing a generic descriptor to use 		   if gd not given.   gd   Generic descriptor.  If given, the descriptor inputs 		   are taken from this structure if not explicitly given.   toward   Body should be translated toward ref_bx (default).   away     Body should be translated away from ref_bx.   at       Body should be placed at the position of ref_bx.   along    Index of bx axis along which to translate.    _dv	Array (nv,3,nt) specifying the translation vector. 			The components are assumed to be given wrt to the 			inertial frame unless od is given.  In that case 			dv is interpreted as a vector in the body frame of od.  			For convenience, if dv is given in the nonstandard form 			of a 3-element array, it is reinterpreted as a column 			vector (1,3).  			If ref_bx is given, then dv is interpreted as a distance 			and the direction is constructed from one of the directional 			keywords below.   ", "NV/PG", " 	Written by:	Spitale, 3/2007   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_resfit.html", "pg_resfit.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_resfit.pro", "", "", "	Computes polynomial coefficients for a camera distortion model by 	comparing detected reseaus with the known focal plane locations.    	First, candidate reseaus are associated with nominal reseaus by 	choosing the candidate with the highest correlation coefficient 	within a given number of pixels surrounding each known reseau.  	Next, coefficients for a polynomial of order n are derived using a 	least-squares fit.    STATUS: 	Complete    SEE ALSO: 	pg_resloc, pg_linearize_image, pg_blemish    ", "", "          -1", " 	Written by:	Spitale, 5/2002   ");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_resfit.html#pgrf_associate_marks", "pgrf_associate_marks", 'routine in <a href="com/pg/pg_resfit.html">pg_resfit.pro</a>', "pg_resfit.pro", "", "pgrf_associate_marks", "", "scan_ptsfoc_ptsccrange", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_resfit.html#pgrf_get_matches", "pgrf_get_matches", 'routine in <a href="com/pg/pg_resfit.html">pg_resfit.pro</a>', "pg_resfit.pro", "", "pgrf_get_matches", "", "nom_ptdfpspscan_subfoc_ptsscan_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_resfit.html#pg_resfit", "pg_resfit", 'routine in <a href="com/pg/pg_resfit.html">pg_resfit.pro</a>', "pg_resfit.pro", "", "pg_resfit", "", "cdgdrangenom_ptdres_ptdscpfcpassocuse_nomscan_ptdfoc_ptdn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_residuals.html", "pg_residuals.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_residuals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_residuals.html#pg_residuals", "pg_residuals", 'routine in <a href="com/pg/pg_residuals.html">pg_residuals.pro</a>', "pg_residuals.pro", "", "pg_residuals", "	Computes residuals value for given curve- or point-fit parameters.    ", "scan_ptdArray (n_curves) of POINT output from 			pg_cvscan or pg_ptscan containing scan data.   ", "NV/PG", " 	Written by:	Spitale   	Array (2,n_curves) of residuals.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_resloc.html", "pg_resloc.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_resloc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_resloc.html#pg_resloc", "pg_resloc", 'routine in <a href="com/pg/pg_resloc.html">pg_resloc.pro</a>', "pg_resloc.pro", "", "pg_resloc", "	Scans an image for candidate reseau marks.    	A correlation map is computed across image.  Candidates reseau marks 	are identified as local maxima in the correlation map by accepting 	points where the correlation is above the specified threshold and 	where the gradient of the correlation map is below the specified 	threshold.    STATUS: 	Complete    SEE ALSO: 	pg_resfit, modloc    ", "edge Distance from edge within which points are ignored.   model 2-D array giving a model of the reseau image.  Default model 		is an inverted Gaussian.   ccmin Minimum correlation coefficient to accept.  Default is 0.8 .   gdmax Maximum gradiant of correlation coefficient to accept. 		Default is 0.25   nom_ptdIf given, reseau marks are searched for only within the 		given radius about each nominal point.   radiusRadius about no_ptd to search.  Default is ten pixels.   ddData descriptor containing the image to scan.   ", "NV/PG", " 	Written by:	Spitale, 1998   	Points structure containing the image coordinates of each candidiate 	reseau mark and the corresponding correlation coefficients.  If not 	marks are found, zero is returned.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_retarg.html", "pg_retarg.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_retarg.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_retarg.html#pg_retarg", "pg_retarg", 'routine in <a href="com/pg/pg_retarg.html">pg_retarg.pro</a>', "pg_retarg.pro", "", "pg_retarg", "	Modifies the camera orientation such that the optic axis points 	along a given vector, or toward a specified body.    	pg_retarg modifies cd and adds its name to the task list of each given 	descriptor.    STATUS: 	Complete    ", "cd Camera descriptor to repoint.   bx Body descriptor at which to point.   ref_bxdd Data descriptor containing a generic descriptor to use 		 if gd not given.   gd Generic descriptor.  If given, the descriptor inputs 		 are taken from this structure if not explicitly given.   towardCamera should be pointed toward bx (default).   away  Camera should be pointed away from bx.   along  Index of bx axis along which to point.    vInertial vector giving new optic axis direction.   ", "NV/PG", " 	Written by:	Spitale, 3/2007   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ring_sector.html", "pg_ring_sector.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ring_sector.pro", "", "", "	Allows the user to select a ring sector by clicking and dragging. 	With the left button, the sector is defined along lines of constant 	radius and longitude.  With the right button, the sides of the sector 	are perpendicular to the projected radial direction.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector.html#pg_ring_sector", "pg_ring_sector", 'routine in <a href="com/pg/pg_ring_sector.html">pg_ring_sector.pro</a>', "pg_ring_sector.pro", "", "pg_ring_sector", "", "cddkxgdradlonsamplewin_numrestoreslopep0buttonxor_graphicscolorsilentnodsk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_box.html", "pg_ring_sector_box.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ring_sector_box.pro", "", "", "	Allows the user to select a box to use with pg_profile_ring.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_box.html#pg_ring_sector_box", "pg_ring_sector_box", 'routine in <a href="com/pg/pg_ring_sector_box.html">pg_ring_sector_box.pro</a>', "pg_ring_sector_box.pro", "", "pg_ring_sector_box", "", "samplewin_numrestorebuttonp0xor_graphicscolorsilentp", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_box.html#test", "test", 'routine in <a href="com/pg/pg_ring_sector_box.html">pg_ring_sector_box.pro</a>', "pg_ring_sector_box.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_box_oblique.html", "pg_ring_sector_box_oblique.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ring_sector_box_oblique.pro", "", "", "	Allows the user to select an oblique box to use with pg_profile_ring.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_box_oblique.html#pg_ring_sector_box_oblique", "pg_ring_sector_box_oblique", 'routine in <a href="com/pg/pg_ring_sector_box_oblique.html">pg_ring_sector_box_oblique.pro</a>', "pg_ring_sector_box_oblique.pro", "", "pg_ring_sector_box_oblique", "", "lonsamplewin_numrestorep0xor_graphicscolornoverbosep", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_box_oblique.html#test", "test", 'routine in <a href="com/pg/pg_ring_sector_box_oblique.html">pg_ring_sector_box_oblique.pro</a>', "pg_ring_sector_box_oblique.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_box_ortho.html", "pg_ring_sector_box_ortho.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ring_sector_box_ortho.pro", "", "", "	Allows the user to select a box to use with pg_profile_ring.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_box_ortho.html#pg_ring_sector_box_ortho", "pg_ring_sector_box_ortho", 'routine in <a href="com/pg/pg_ring_sector_box_ortho.html">pg_ring_sector_box_ortho.pro</a>', "pg_ring_sector_box_ortho.pro", "", "pg_ring_sector_box_ortho", "", "samplewin_numrestorep0xor_graphicscolorsilentp", "          -1", "");
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_box_ortho.html#test", "test", 'routine in <a href="com/pg/pg_ring_sector_box_ortho.html">pg_ring_sector_box_ortho.pro</a>', "pg_ring_sector_box_ortho.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_oblique.html", "pg_ring_sector_oblique.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ring_sector_oblique.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_oblique.html#pg_ring_sector_oblique", "pg_ring_sector_oblique", 'routine in <a href="com/pg/pg_ring_sector_oblique.html">pg_ring_sector_oblique.pro</a>', "pg_ring_sector_oblique.pro", "", "pg_ring_sector_oblique", "	Allows the user to select a ring sector by clicking and dragging. 	The top and bottom of the sector are defined along lines of constant 	radius, while the sides are perpendicular to the image-projected 	radial direction.   ", "cd    Camera descriptor.   dkx    Disk descriptor describing the ring.   gd    Generic descriptor containnig the above descriptors.   lonsample    Grid sampling, default is 1.   win_num    Window number of IDL graphics window in which to select                    box, default is current window.   restore    Do not leave the box in the image.   slope    This keyword allows the longitude to vary from the                    perpendicular direction as a function of radius as:                    lon = slope*(rad - rad0).   p0    First corner of box.  If set, then the routine immediately                    begins to drag from that point until a button is released.   xor_graphics    If set, the sector outline is drawn and erased using xor                    graphics instead of a pixmap.   color    Color to use for rectangle, default is !color.   silent    If set, messages are suppressed.   nodsk    If set, image points will not be included in the output                    POINT.   ", "NV/PG", "      POINT containing points on the sector outline.  The point       spacing is determined by the sample keyword.  The POINT object       also contains the disk coordinate for each point and the user fields       'nrad' and 'nlon' giving the number of points in radius and longitude.   KNOWN BUGS: 	The sector flips when it hits zero azimuth rather than retaining a 	consistent sense.    ORIGINAL AUTHOR : J. Spitale ; 5/2005   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_perp.html", "pg_ring_sector_perp.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ring_sector_perp.pro", "", "", "	Allows the user to select a ring sector by clicking and dragging. 	The top and bottom of the sector are defined along lines of constant 	radius, while the sides are perpendicular to the image-projected 	radial direction.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_perp.html#pg_ring_sector_perp", "pg_ring_sector_perp", 'routine in <a href="com/pg/pg_ring_sector_perp.html">pg_ring_sector_perp.pro</a>', "pg_ring_sector_perp.pro", "", "pg_ring_sector_perp", "", "cddkxgdlonsamplewin_numrestoreslopep0xor_graphicscolorsilentnodskp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_rad.html", "pg_ring_sector_rad.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ring_sector_rad.pro", "", "", "	Allows the user to select a ring sector by clicking and dragging. 	The sector is defined along lines of constant radius and longitude.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_rad.html#pg_ring_sector_rad", "pg_ring_sector_rad", 'routine in <a href="com/pg/pg_ring_sector_rad.html">pg_ring_sector_rad.pro</a>', "pg_ring_sector_rad.pro", "", "pg_ring_sector_rad", "", "cddkxgdlonsamplewin_numrestoreslopep0xor_graphicscolorsilentnodsk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_radlon.html", "pg_ring_sector_radlon.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_ring_sector_radlon.pro", "", "", "	Constructs a ring sector outline for use with pg_profile_ring given 	radius and longitude bounds.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_ring_sector_radlon.html#pg_ring_sector_radlon", "pg_ring_sector_radlon", 'routine in <a href="com/pg/pg_ring_sector_radlon.html">pg_ring_sector_radlon.pro</a>', "pg_ring_sector_radlon.pro", "", "pg_ring_sector_radlon", "", "cddkxgdsampleslopenodsknlonnradradlon", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_rm_points.html", "pg_rm_points.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_rm_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_rm_points.html#pg_rm_points", "pg_rm_points", 'routine in <a href="com/pg/pg_rm_points.html">pg_rm_points.pro</a>', "pg_rm_points.pro", "", "pg_rm_points", "	xx    Environment variables:   	xx:	xx  	xx:	xx    	xx:	xx  	xx:	xx    	xx    	xx    	xx    ", "radiusptdxptd", "NV/PG", " 	Written by:	xx, xx/xx/xxxx   	xx    STATUS: 	xx    SEE ALSO: 	xx, xx, xx 	xx    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_select.html", "pg_select.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_select.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_select.html#pg_select", "pg_select", 'routine in <a href="com/pg/pg_select.html">pg_select.pro</a>', "pg_select.pro", "", "pg_select", "	Allows the user to select objects in an image using the mouse.    ", "silent	If set, turns off the notification that cursor 			movement is required.   region	If set, the user selects a region in the image. 			This is the default.   points	If set, the user selects points.   ddData descriptor containing the image.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	Array of subscripts of all image points which lie within the selected 	region.    STATUS: 	Complete    SEE ALSO: 	pg_trim    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_select_bodies.html", "pg_select_bodies.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_select_bodies.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_select_bodies.html#pg_select_bodies", "pg_select_bodies", 'routine in <a href="com/pg/pg_select_bodies.html">pg_select_bodies.pro</a>', "pg_select_bodies.pro", "", "pg_select_bodies", "", "odddbxselect", "          -1", "");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_select_points.html", "pg_select_points.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_select_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_select_points.html#pg_select_points", "pg_select_points", 'routine in <a href="com/pg/pg_select_points.html">pg_select_points.pro</a>', "pg_select_points.pro", "", "pg_select_points", "	Allows the user to select points in an image using the mouse.    ", "psym		Plotting symbol to use for the points.   noverbose	If set, turns off the notification that cursor 			movement is required.   color	Color to use for graphics overlays.   p0	Initial point, instead of user selection.   one	If set, the routine will exit after selecting one point.   number	If set, each point will be labeled with a number.   cancelledSet if routine is caused to return by the cancel button.    ptd_outputIf set, a POINT object is returned instead 			of a points array.   ddData descriptor containing the image.   ", "NV/PG", " 	Written by:	Spitale, 9/2001      To print the coordinates of each point as the user selects them, use:     can=0 & while(NOT can) do print, pg_select_points(dd, /one, /nov, can=can)    STATUS: 	Complete 	Array of image points (2,n).    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_select_region.html", "pg_select_region.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_select_region.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_select_region.html#pg_select_region", "pg_select_region", 'routine in <a href="com/pg/pg_select_region.html">pg_select_region.pro</a>', "pg_select_region.pro", "", "pg_select_region", "	Allows the user to select regions in an image using the mouse.    ", "color	Color to use for graphics overlays.    select_buttonIndex of button to use as the select button instead 			of the left button (1).   cancel_buttonIndex of mouse button to be used as a cancel 			button instead of left+middle, (3).   end_buttonIndex of button to use as the end button instead 			of the right button (4).   silent	If set, turns off the notification that cursor 			movement is required.   p0	First point of line.  If set, then the routine 			immediately begins to drag from that point until a 			button is released.   autocloseIf set, the region is automaticaly closed when the 			end button is pressed.   points	If set, the selected points are returned instead 			of enclosed indices.   noclosedatabox	If set, a rectanguar region is selected.    image_ptsddData descriptor containing an image.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	Array of subscripts of all image points which lie within the selected 	region.  -1 is returned if the cancel button is pressed.    STATUS: 	Complete    SEE ALSO: 	pg_trim    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_shadow.html", "pg_shadow.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_shadow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_shadow.html#pg_shadow", "pg_shadow", 'routine in <a href="com/pg/pg_shadow.html">pg_shadow.pro</a>', "pg_shadow.pro", "", "pg_shadow", "	Computes image coordinates of given inertial vectors projected onto 	surface of the given disks and globes with respect to the given 	observer.  Returns only the closest shadow point for each objoect 	point.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   dkxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of DISK.   gbxArray (n_globes, n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.   bxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of BODY.   ddData descriptor containing a generic descriptor to use 		if gd not given.  	  All other keywords are passed directly to pg_shadow_globe 	  and pg_shadow_disk and are documented with those programs.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   revealclipnocullallbothbackshadowepsilonnosolveobject_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 1/2002   	Array (n_disks,n_objects) of POINT containing image 	points and the corresponding inertial vectors.    STATUS: 	Soon to be replaced by a new program that merges pg_shadow_globe and 	pg_shadow_disk.  The API for the new routine may be slightly different.    SEE ALSO: 	pg_shadow_disk, pg_shadow_globe, pg_shadow_points    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_shadow_disk.html", "pg_shadow_disk.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_shadow_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_shadow_disk.html#pg_shadow_disk", "pg_shadow_disk", 'routine in <a href="com/pg/pg_shadow_disk.html">pg_shadow_disk.pro</a>', "pg_shadow_disk.pro", "", "pg_shadow_disk", "	Computes image coordinates of given inertial vectors projected onto 	surface of the given disk with respect to the given observer.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   dkxArray (n_disks, n_timesteps) of descriptors of objects 		which must be a subclass of DISK.   gbxddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   nocullboth If set, both shadows and backshadows are returned.   reveal Normally, disks whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   clip If set shadow points are cropped to within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   backshadow If set, only backshadows (shadows cast between the object and  		 observer) are returned.   all If set, all points are returned, even if invalid.   epsilonIf set, shadow points that are closer than this amount 		 to the source point will be excluded.   object_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 1/2002   	Array (n_disks,n_objects) of POINT containing image 	points and the corresponding inertial vectors.    STATUS: 	Soon to be obsolete.  This program will be merged with pg_shadow_globe 	to make a more general program, which will replace pg_shadow.    SEE ALSO: 	pg_shadow, pg_shadow_globe, pg_shadow_points    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_shadow_globe.html", "pg_shadow_globe.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_shadow_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_shadow_globe.html#pg_shadow_globe", "pg_shadow_globe", 'routine in <a href="com/pg/pg_shadow_globe.html">pg_shadow_globe.pro</a>', "pg_shadow_globe.pro", "", "pg_shadow_globe", "	Computes image coordinates of the given inertial vectors projected onto 	surface of the given globe with respect to the given observer.    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   gbxArray (n_globes, n_timesteps) of descriptors of objects 		which must be a subclass of GLOBE.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   nocullboth If set, both shadows and backshadows are returned.   reveal Normally, disks whose opaque flag is set are ignored. 		 /reveal suppresses this behavior.   clip If set shadow points are cropped to within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   backshadow If set, only backshadows (shadows cast between the object and  		 observer) are returned.   all If set, all points are returned, even if invalid.   epsilonIf set, shadow points that are closer than this amount 		 to the source point will be excluded.   nosolveIf set, shadow points are not computed.   object_ptdArray of POINT containing inertial vectors.   ", "NV/PG", " 	Written by:	Spitale, 1/2002   	Array (n_globes,n_objects) of POINT containing image 	points and the corresponding inertial vectors.    STATUS: 	Soon to be obsolete.  This program will be merged with pg_shadow_disk 	to make a more general program, which will replace pg_shadow.    SEE ALSO: 	pg_shadow, pg_shadow_disk, pg_shadow_points    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_shadow_points.html", "pg_shadow_points.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_shadow_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_shadow_points.html#pg_shadow_points", "pg_shadow_points", 'routine in <a href="com/pg/pg_shadow_points.html">pg_shadow_points.pro</a>', "pg_shadow_points.pro", "", "pg_shadow_points", "	Determines whether each given point is shadowed by the given object.    	Shadowed points are flagged as invisible.    STATUS:     SEE ALSO: 	pg_shadow, pg_shadow_globe, pg_shadow_disk    ", "cdArray (n_timesteps) of camera descriptors.   odArray (n_timesteps) of descriptors of objects 		which must be a subclass of BODY.  These objects are used 		as the source from which points are projected.  If no observer 		descriptor is given, then the sun descriptor in gd is used. 		Only one observer is allowed.   bxArray (nbx, n_timesteps) of descriptors of objects 		which must be a subclass of BODY describing the shadowing 		bodies.   gdGeneric descriptor.  If given, the cd and bx inputs 		are taken from the corresponding fields of this structure 		instead of from those keywords.   noculledge If set, only points near the edge of the shadow are returned.   nosolveclip If set shadow points are cropped to within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.   both If set, both shadows and backshadows are returned.   backshadow If set, only backshadows (shadows cast between the object and  		 observer) are considered.   object_ptdArray of POINT containing inertial vectors 			to shadow.   shadow_ptd", "NV/PG", " 	Written by:	Spitale, 9/2012   	shadow_ptd:	Array of POINT containing the shadowed 			points.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_shift.html", "pg_shift.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_shift.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_shift.html#pg_shift", "pg_shift", 'routine in <a href="com/pg/pg_shift.html">pg_shift.pro</a>', "pg_shift.pro", "", "pg_shift", "	Shifts the given image by a non-integer offset and adjusts the camera 	pointing accordingly.    	The given data and camera descriptors are modified: the images are 	shifted and the camera descriptor optic axes are changed accordingly.    STATUS: 	xx    ", "cdArray of camera descripors, one for each input image.   gdGeneric descriptor containing the camera and body 		descriptors or an array of generic descriptors, one for each 		input image.    ddArray of data descriptors giving images to shift.   dxy", "NV/PG", " 	Written by:	Spitale, 7/2008   ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_spikes.html", "pg_spikes.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_spikes.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_spikes.html#pg_spikes", "pg_spikes", 'routine in <a href="com/pg/pg_spikes.html">pg_spikes.pro</a>', "pg_spikes.pro", "", "pg_spikes", "	Locates spurious features like cosmic-ray hits.     	Clusters of hot pixels of size 'scale' are identified by looking 	for regions bounded by large gradients.  Each cluster is then 	examined for pixels whose values are larger than nsig standard 	deviations above the local mean.    STATUS: 	Complete    SEE ALSO: 	pg_despike, pg_mask    ", "nsig	Number of standard deviations above the local 			mean data value to flag for removal.  Default is 2.   grad	Minimum data value gradient to use when searching 			for clusters of hot pixels.  Default is 5.   maskumask	Byte image of the same size as the input image 			in which nonzero pixel values indicate locations 			where spikes should not be flagged.   extend	Number of pixels away from masked pixels before 			locations may be flagged as spikes.   scale	Typical size of objects to be flagged.  Default is 10.   edge	Regions closer than this to the edge of the image 			will be ignored.  Default is 10.   local	Multiplier that determines the width of the region 			over which the local mean and standard deviation are 			taken.  That width is local * scale.  Default is 5.   nohotallpix	If set, all pixels in the spike region are returned 			instead of of the centroids.   dd	Data descriptor containing the image to be despiked.   ", "NV/PG", " 	Written by:	Spitale, 4/2005   	dd = dat_read(filename) 	spike_ptd = pg_spikes(dd) 	dd1 = pg_despike(dd, spike_ptd) 	POINT containing the detected spike points.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_station.html", "pg_station.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_station.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_station.html#pg_station", "pg_station", 'routine in <a href="com/pg/pg_station.html">pg_station.pro</a>', "pg_station.pro", "", "pg_station", "	Computes image points for given station descriptors.    ", "cdArray (n_timesteps) of camera descriptors.   stdArray (n_objects, n_timesteps) of descriptors of objects 		that must be a subclass of STATION.   gbxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of GLOBE.   dkxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of DISK.   bxArray (n_xd, n_timesteps) of descriptors of objects 		that must be a subclass of BODY, instead of gbx or dkx.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   clip If set points are computed only within this many camera 		 fields of view.   cull If set, POINT objects excluded by the clip keyword 		 are not returned.  Normally, empty POINT objects 		 are returned as placeholders.    ", "NV/PG", " 	Written by:	Spitale, 10/2012   	Array (n_objects) of POINT containing image points and 	the corresponding inertial vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_stereo_split.html", "pg_stereo_split.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_stereo_split.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_stereo_split.html#pg_stereo_split", "pg_stereo_split", 'routine in <a href="com/pg/pg_stereo_split.html">pg_stereo_split.pro</a>', "pg_stereo_split.pro", "", "pg_stereo_split", "	Produces two camera descriptors whose positions are offset 	in the +/-x image directions for computing stereo overlays.     ", "cd	Camera descriptor to be split.   separationstereo separation for the new camera descriptors.   ", "NV/PG", " 	Written by:	Spitale; 7/29/2005   	Array containing two camera descriptors.    STATUS: 	xx    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_str_limit_mag.html", "pg_str_limit_mag.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_str_limit_mag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_str_limit_mag.html#pg_str_limit_mag", "pg_str_limit_mag", 'routine in <a href="com/pg/pg_str_limit_mag.html">pg_str_limit_mag.pro</a>', "pg_str_limit_mag.pro", "", "pg_str_limit_mag", "	Removes stars whose visual magnitude falls outside the given minimum 	and maximum values.    ", "maxMaximum visual magnitude.   minMinimum visual magnitude.   sds", "NV/PG", " 	Written by:	Haemmerle, 1998   	Array of star descriptors whose visual magnitudes fall within the 	specified range.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_strip.html", "pg_strip.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_strip.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_strip.html#pg_strip", "pg_strip", 'routine in <a href="com/pg/pg_strip.html">pg_strip.pro</a>', "pg_strip.pro", "", "pg_strip", "	Plots the portion of an image between two chosen points.    ", "width	An odd integer giving the width in pixels of the 			extracted strip (default=5).  This width is rebinned 			to a single pixel for plotting.   nw	When set, each plot is done in a new window.   nomarksSuppresses the marks that show the locations of 			the chosen points, which are difficult to 			entirely erase.   devicexs	Specifies the x-dimension of the window, in pixels. 			Default is 400.   ys	Specifies the y-dimension of the window, in pixels. 			Default is 300.   im	The two-dimensional array from which the 			plotted strip will be extracted.   ", "COM/PG", "       Written by:     Tiscareno, 7/00          NONE    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_sub_body.html", "pg_sub_body.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_sub_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_sub_body.html#pg_sub_body", "pg_sub_body", 'routine in <a href="com/pg/pg_sub_body.html">pg_sub_body.pro</a>', "pg_sub_body.pro", "", "pg_sub_body", "	Computes surface coordinates of sub-body point.    ", "gbxbxddgd", "NV/PG", " 	Written by:	Spitale, 11/2001   	Array (n_objects,3) of surface coordinate vectors.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_threshold.html", "pg_threshold.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_threshold.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_threshold.html#pg_threshold", "pg_threshold", 'routine in <a href="com/pg/pg_threshold.html">pg_threshold.pro</a>', "pg_threshold.pro", "", "pg_threshold", "	Excludes points whose associated data lie outside of specified 	thresholds by setting the PTD_MASK_INVISIBLE.    	The input argument object_ptd is modified.    	xx    	The thresholding is performed by cc_threshold.  See the documentation 	for that routine for details.    ", "tag	Tag name for user data array to threshold.  Default 			is 'scan_cc'.   min	Lower threshold - values less than this will be 			excluded.   max	Upper threshold - values greater than this will be 			excluded.   relativeIf set, the max and min arguments will be taken as 			fractions of the maximum value in the array.   scan_ptd", "NV/PG", " 	Written by:	Spitale, 6/1998   	xx    STATUS: 	Complete 	object_ptd:	Modified array of POINT.  PTD_MASK_INVISIBLE 			is set for all excluded points.    ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_tiepoints.html", "pg_tiepoints.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_tiepoints.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_tiepoints.html#pg_tiepoints", "pg_tiepoints", 'routine in <a href="com/pg/pg_tiepoints.html">pg_tiepoints.pro</a>', "pg_tiepoints.pro", "", "pg_tiepoints", "       Computes tiepoint image offsets.    ", "cdCamera descriptor.   bxBody descriptor; can be GLOBE or RING.   gbxGlobe descriptor for each globe in image instead of 		specifying bx.   dkxDisk descriptor for each globe in image instead of 		specifying bx.   ddData descriptor containing a generic descriptor to use 		if gd not given.   gdGeneric descriptor.  If given, the descriptor inputs 		are taken from this structure if not explicitly given.   body_pts	Array of np column vectors giving the body-frame coordinates 		for each tie point.  If this keyword is given as an input, 		then no output is generated.   dxyptd        POINT containing the image points.   ", "NV/PG", "       Written by:     Spitale, 8/2006     1) Manually select a set of tiepoints in a set of images and fit      a pointing offset:  	ndd = n_elements(dd) 	for i=0, ndd-1 do ptd[i] = pg_select_points(dd[i], /ptd)  	body_pts = 0 	for i=0, ndd-1 do $ 	 begin &$ 	  tie_ptd = pg_tiepoints(cd=cd[i], bx=pd[i], ptd[i], body_pts=body_pts) &$ 	  tpcoeff = pg_ptscan_coeff(tie_ptd, fix=[2]) &$ 	  dxy = pg_fit(tpcoeff) &$ 	  pg_repoint, dxy, 0d, cd=cd[i] &$ 	 end       In the above example, the first image is used as a reference;      because body_pts is initially undefined, those points are computed      for the first image, but not subsequently.  Instead, the subsequent      images will have a nonzero offset stored in the tie_ptd structure,      which are then used by pg_ptscan_coeff to compute fit coefficients.    STATUS:        Complete ");
  
  

libdata[libdataItem++] = new Array("com/pg/pg_trim.html", "pg_trim.pro", '.pro file in <a href="com/pg/dir-overview.html">com/pg/ directory</a>', "pg_trim.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("com/pg/pg_trim.html#pg_trim", "pg_trim", 'routine in <a href="com/pg/pg_trim.html">pg_trim.pro</a>', "pg_trim.pro", "", "pg_trim", "	For each given object, excludes points contained in the given region 	by setting the PTD_MASK_INVISIBLE.    ", "mask	Mask to use instead of PTD_MASK_INVISIBLE.   off	If set, the masked flag bit will be turned off.   dd	Data descriptor containing the image.   object_ptdArray (n_objects) of POINT containing the 			image points to be trimmed.   region	Array of subscripts of image points to be trimmed.   ", "NV/PG", " 	Written by:	Spitale, 2/1998   	object_ptd:	The input points are be modified on return.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/phase_correction.html", "phase_correction.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "phase_correction.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/phase_correction.html#phase_correction", "phase_correction", 'routine in <a href="obj/tools/phase_correction.html">phase_correction.pro</a>', "phase_correction.pro", "", "phase_correction", "	Assuming body gbx is a sphere, this routine computes the correction 	in pixels needed to obtain its true image center given a measurement 	of its center of light.    ", "cdAny subclass of DISK.   gbxAny subclass of GLOBE.   sundSTAR descriptor representing the sun.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2) giving the phase correction offset.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_angles.html", "pht_angles.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_angles.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_angles.html#pht_angles", "pht_angles", 'routine in <a href="obj/tools/pht/pht_angles.html">pht_angles.pro</a>', "pht_angles.pro", "", "pht_angles", "", "inertialemmincgvalidbody_ptsnorthimage_ptscdbxsund", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_lamb.html", "pht_lamb.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_lamb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_lamb.html#pht_lamb", "pht_lamb", 'routine in <a href="obj/tools/pht/pht_lamb.html">pht_lamb.pro</a>', "pht_lamb.pro", "", "pht_lamb", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_lunar.html", "pht_lunar.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_lunar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_lunar.html#pht_lunar", "pht_lunar", 'routine in <a href="obj/tools/pht/pht_lunar.html">pht_lunar.pro</a>', "pht_lunar.pro", "", "pht_lunar", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_lunar_lambert.html", "pht_lunar_lambert.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_lunar_lambert.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_lunar_lambert.html#pht_lunar_lambert", "pht_lunar_lambert", 'routine in <a href="obj/tools/pht/pht_lunar_lambert.html">pht_lunar_lambert.pro</a>', "pht_lunar_lambert.pro", "", "pht_lunar_lambert", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_minneart.html", "pht_minneart.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_minneart.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_minneart.html#pht_minneart", "pht_minneart", 'routine in <a href="obj/tools/pht/pht_minneart.html">pht_minneart.pro</a>', "pht_minneart.pro", "", "pht_minneart", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_phase_corr.html", "pht_phase_corr.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_phase_corr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_phase_corr.html#pht_phase_corr", "pht_phase_corr", 'routine in <a href="obj/tools/pht/pht_phase_corr.html">pht_phase_corr.pro</a>', "pht_phase_corr.pro", "", "pht_phase_corr", "", "fnparmgg1", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_phase_henyey_greenstein.html", "pht_phase_henyey_greenstein.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_phase_henyey_greenstein.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_phase_henyey_greenstein.html#pht_phase_henyey_greenstein", "pht_phase_henyey_greenstein", 'routine in <a href="obj/tools/pht/pht_phase_henyey_greenstein.html">pht_phase_henyey_greenstein.pro</a>', "pht_phase_henyey_greenstein.pro", "", "pht_phase_henyey_greenstein", "", "gparm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_phase_isotropic.html", "pht_phase_isotropic.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_phase_isotropic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_phase_isotropic.html#pht_phase_isotropic", "pht_phase_isotropic", 'routine in <a href="obj/tools/pht/pht_phase_isotropic.html">pht_phase_isotropic.pro</a>', "pht_phase_isotropic.pro", "", "pht_phase_isotropic", "", "gparm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_refl_corr.html", "pht_refl_corr.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_refl_corr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_refl_corr.html#pht_refl_corr", "pht_refl_corr", 'routine in <a href="obj/tools/pht/pht_refl_corr.html">pht_refl_corr.pro</a>', "pht_refl_corr.pro", "", "pht_refl_corr", "", "fnparmmumu0mu1mu01", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_refl_lunar.html", "pht_refl_lunar.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_refl_lunar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_refl_lunar.html#pht_refl_lunar", "pht_refl_lunar", 'routine in <a href="obj/tools/pht/pht_refl_lunar.html">pht_refl_lunar.pro</a>', "pht_refl_lunar.pro", "", "pht_refl_lunar", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_refl_lunar_lambert.html", "pht_refl_lunar_lambert.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_refl_lunar_lambert.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_refl_lunar_lambert.html#pht_refl_lunar_lambert", "pht_refl_lunar_lambert", 'routine in <a href="obj/tools/pht/pht_refl_lunar_lambert.html">pht_refl_lunar_lambert.pro</a>', "pht_refl_lunar_lambert.pro", "", "pht_refl_lunar_lambert", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pht/pht_refl_minneart.html", "pht_refl_minneart.pro", '.pro file in <a href="obj/tools/pht/dir-overview.html">obj/tools/pht/ directory</a>', "pht_refl_minneart.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pht/pht_refl_minneart.html#pht_refl_minneart", "pht_refl_minneart", 'routine in <a href="obj/tools/pht/pht_refl_minneart.html">pht_refl_minneart.pro</a>', "pht_refl_minneart.pro", "", "pht_refl_minneart", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/pixel_grid.html", "pixel_grid.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "pixel_grid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/pixel_grid.html#pixel_grid", "pixel_grid", 'routine in <a href="obj/tools/pixel_grid.html">pixel_grid.pro</a>', "pixel_grid.pro", "", "pixel_grid", "	Generates grid lines aligned with the image window.    ", "spacingnpwnum", "NV/LIB/TOOLS", "       Written by:     Spitale          Angle in radians.     ");
  
  

libdata[libdataItem++] = new Array("obj/tools/plot_inertial.html", "plot_inertial.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "plot_inertial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/plot_inertial.html#plot_inertial", "plot_inertial", 'routine in <a href="obj/tools/plot_inertial.html">plot_inertial.pro</a>', "plot_inertial.pro", "", "plot_inertial", "       Plots inertial vectors on a camera image.    ", "colorthicklabelscdCamera descriptor.   _vInertial vectors giving origins of vectors to plot.  If only one 		vector, this will be used as the origin for all of the plotted 		vectors.   rInertial vectors giving the vectors to plot, starting at 		the given origins.   ", "NV/LIB/TOOLS", "       Written by:     Spitale; 7/2002          NONE   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/plt/plt_assign.html", "plt_assign.pro", '.pro file in <a href="obj/plt/dir-overview.html">obj/plt/ directory</a>', "plt_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/plt/plt_assign.html#plt_assign", "plt_assign", 'routine in <a href="obj/plt/plt_assign.html">plt_assign.pro</a>', "plt_assign.pro", "", "plt_assign", "	Replaces fields in a PLANET object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@plt__keywords.include", "NV/OBJ/PLT", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/plt/plt_create_descriptors.html", "plt_create_descriptors.pro", '.pro file in <a href="obj/plt/dir-overview.html">obj/plt/ directory</a>', "plt_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/plt/plt_create_descriptors.html#plt_create_descriptors", "plt_create_descriptors", 'routine in <a href="obj/plt/plt_create_descriptors.html">plt_create_descriptors.pro</a>', "plt_create_descriptors.pro", "", "plt_create_descriptors", "	Init method for the PLANET class.    ", "crdCore descriptor(s) to pass to cor_create_descriptors.   bdBody descriptor(s) to pass to bod_create_descriptors.   sldSolid descriptor(s) to pass to sld_create_descriptors.   gbdGlobe descriptor(s) to pass to glb_create_descriptors.   pdPlanet descriptor(s) to initialize, instead of creating new ones.   n     Number of planet descriptors.   @plt__keywords.include", "NV/LIB/PLT", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          An array (n) of planet descriptors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/plt/plt_evolve.html", "plt_evolve.pro", '.pro file in <a href="obj/plt/dir-overview.html">obj/plt/ directory</a>', "plt_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/plt/plt_evolve.html#plt_evolve", "plt_evolve", 'routine in <a href="obj/plt/plt_evolve.html">plt_evolve.pro</a>', "plt_evolve.pro", "", "plt_evolve", "	Computes new planet descriptors at the given time offsets from the 	given planet descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given planet 	descriptor.    ", "nodv If set, derivatives will not be evolved.   copyIf set, the evolved descriptor is copied into the input 		descriptor and it is freed.  The input descriptor is returned.    pddt Time offset.   ", "NV/LIB/PLT", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (npd,ndt) of newly allocated descriptors, of class PLANET, 	evolved by time dt, where npd is the number of px, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/plt/plt_query.html", "plt_query.pro", '.pro file in <a href="obj/plt/dir-overview.html">obj/plt/ directory</a>', "plt_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/plt/plt_query.html#plt_query", "plt_query", 'routine in <a href="obj/plt/plt_query.html">plt_query.pro</a>', "plt_query.pro", "", "plt_query", "	Returns the fields associated with a PLANET object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@plt__keywords.include", "NV/OBJ/PLT", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/plt/plt_replicate.html", "plt_replicate.pro", '.pro file in <a href="obj/plt/dir-overview.html">obj/plt/ directory</a>', "plt_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/plt/plt_replicate.html#plt_replicate", "plt_replicate", 'routine in <a href="obj/plt/plt_replicate.html">plt_replicate.pro</a>', "plt_replicate.pro", "", "plt_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "pd Planet descriptor.   dim Dimensions of the result.   ", "NV/LIB/PLT", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_apply_condition.html", "pnt_apply_condition.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_apply_condition.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_apply_condition.html#pnt_apply_condition", "pnt_apply_condition", 'routine in <a href="obj/pnt/pnt_apply_condition.html">pnt_apply_condition.pro</a>', "pnt_apply_condition.pro", "", "pnt_apply_condition", "	Selects point in POINT structures based on a given condition structure.    ", "ptd	Points object.   conditionCondition structure to compare against the flags 			contained in _ps.  			The condition structure is organized as follows: 			  field	   values 			  -----------------------------------------------------  ", "NV/OBJ/PNT", "  	Spitale, 11/2015   	Condition structure corresponding to the given keyword.    STATUS: 	Complete    SEE ALSO: pnt_points, pnt_vectors, pnt_data    ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_assign.html", "pnt_assign.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_assign.html#pnt_assign", "pnt_assign", 'routine in <a href="obj/pnt/pnt_assign.html">pnt_assign.pro</a>', "pnt_assign.pro", "", "pnt_assign", "	Replaces fields in a POINT object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@pnt__keywords.include", "NV/OBJ/PNT", " 	Written by:	Spitale		12/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_assoc_xd.html", "pnt_assoc_xd.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_assoc_xd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_assoc_xd.html#pnt_assoc_xd", "pnt_assoc_xd", 'routine in <a href="obj/pnt/pnt_assoc_xd.html">pnt_assoc_xd.pro</a>', "pnt_assoc_xd.pro", "", "pnt_assoc_xd", "	Returns the associated descriptor for a CORE object.    ", "noeventIf set, no event is generated.   ptdPOINT object.   ", "NV/SYS/PNT", " 	Written by:	Spitale, 11/2015   	The associated descriptor for the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_assoc_xd     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_compress.html", "pnt_compress.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_compress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_compress.html#pnt_compress", "pnt_compress", 'routine in <a href="obj/pnt/pnt_compress.html">pnt_compress.pro</a>', "pnt_compress.pro", "", "pnt_compress", "	Compresses many POINT objects into one.  Arrays are concatenated 	in the nv/np directions unless /nt is specified.  Point-by-point data 	arrays must be identical.    ", "nt	If given, arrays are concatenated in the nt dimension. 			this requires that all input arrays have the same number 			of points (nv/np), and only one element in the nt 			direction.   pptd	If given, this points object is used to store the 			result, rather than allocating a new one.   ptd0", "NV/OBJ/PNT", "  Spitale, 11/2015; 	Adapted from pgs_compress   	POINT object containing the concatenated data.     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_condition.html", "pnt_condition.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_condition.pro", "", "", "	Returns predefined condition structures for various common situations.    ", "", "          -1", "  	Spitale, 11/2015   ");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_condition.html#pnt_condition_set", "pnt_condition_set", 'routine in <a href="obj/pnt/pnt_condition.html">pnt_condition.pro</a>', "pnt_condition.pro", "", "pnt_condition_set", "", "statemaskflag", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_condition.html#pnt_condition_unset", "pnt_condition_unset", 'routine in <a href="obj/pnt/pnt_condition.html">pnt_condition.pro</a>', "pnt_condition.pro", "", "pnt_condition_unset", "", "statemaskflag", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_condition.html#pnt_condition", "pnt_condition", 'routine in <a href="obj/pnt/pnt_condition.html">pnt_condition.pro</a>', "pnt_condition.pro", "", "pnt_condition", "", "condition@pnt_condition_keywords.include", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_create_descriptors.html", "pnt_create_descriptors.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_create_descriptors.html#pnt_create_descriptors", "pnt_create_descriptors", 'routine in <a href="obj/pnt/pnt_create_descriptors.html">pnt_create_descriptors.pro</a>', "pnt_create_descriptors.pro", "", "pnt_create_descriptors", "	Creates and initializes a POINT object.    ", "crdptdn@pnt__keywords.include", "NV/OBJ/PNT", " 	Written by:	Spitale, 11/2015   	Newly created and initialized POINT object.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_cull.html", "pnt_cull.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_cull.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_cull.html#pnt_cull", "pnt_cull", 'routine in <a href="obj/pnt/pnt_cull.html">pnt_cull.pro</a>', "pnt_cull.pro", "", "pnt_cull", "	Cleans out an array of POINT objects by removing invisible points 	and/or empty POINT objects.    ", "nofree	If set, invalid POINT object are not freed.   condition_ptdArray of POINT objects.   @pnt_condition_keywords.include", "NV/OBJ/PNT", "  Spitale, 11/2015; 	Adapted from pgs_cull   	Array POINT objects, or 0 if all were empty.     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_data.html", "pnt_data.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_data.html#pnt_data", "pnt_data", 'routine in <a href="obj/pnt/pnt_data.html">pnt_data.pro</a>', "pnt_data.pro", "", "pnt_data", "	Returns the point-by-point data associated with a POINT object.    ", "tagsIf given, data arrays are returned only for these tags, 		and are arranged in this order.   sample	Sampling interval in the nv direction.  Default is 1.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   cat	If set, arrays from mulitple input objets are 			concatenated.   conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   noeventIf set, no event is generated.   ptd0@pnt_condition_keywords.include", "NV/OBJ/PNT", " 	Written by:	Spitale, 11/2015   	The point-by-point data associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_data     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_desc.html", "pnt_desc.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_desc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_desc.html#pnt_desc", "pnt_desc", 'routine in <a href="obj/pnt/pnt_desc.html">pnt_desc.pro</a>', "pnt_desc.pro", "", "pnt_desc", "	Returns the description associated with a POINT object.    ", "noeventIf set, no event is generated.   ptdPOINT object.   ", "NV/OBJ/PNT", " 	Written by:	Spitale, 11/2015   	The description associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_desc     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_explode.html", "pnt_explode.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_explode.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_explode.html#pnt_explode", "pnt_explode", 'routine in <a href="obj/pnt/pnt_explode.html">pnt_explode.pro</a>', "pnt_explode.pro", "", "pnt_explode", "	Explodes a POINT object into single-point objects.    ", "nIf given, new objects will have nv = n instead of nv = 1. 		nv must be divisible by n.   ptd	POINT object.   ", "NV/OBJ/PNT", " 	Adapted from pgs_explode:	Spitale, 11/2015   	Array (nv/n x nt) of POINT objects, each containing a n points.    STATUS: 	Complete      ");
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_explode.html#__pnt_explode", "__pnt_explode", 'routine in <a href="obj/pnt/pnt_explode.html">pnt_explode.pro</a>', "pnt_explode.pro", "", "__pnt_explode", "", "nptd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_flags.html", "pnt_flags.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_flags.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_flags.html#pnt_flags", "pnt_flags", 'routine in <a href="obj/pnt/pnt_flags.html">pnt_flags.pro</a>', "pnt_flags.pro", "", "pnt_flags", "	Returns the flags associated with a POINT object.    ", "sample	Sampling interval in the nv direction.  Default is 1.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   cat	If set, arrays from mulitple input objets are 			concatenated.   conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   noeventIf set, no event is generated.   ptd0@pnt_condition_keywords.include", "NV/OBJ/PNT", " 	Written by:	Spitale, 11/2015   	The flags associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_flags     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_include.html", "pnt_include.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_include.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_input.html", "pnt_input.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_input.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_input.html#pnt_input", "pnt_input", 'routine in <a href="obj/pnt/pnt_input.html">pnt_input.pro</a>', "pnt_input.pro", "", "pnt_input", "	Returns the input description associated with a POINT object.    ", "noeventIf set, no event is generated.   ptdPOINT object.   ", "NV/OBJ/PNT", " 	Written by:	Spitale, 11/2015   	The input description associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_input     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_nt.html", "pnt_nt.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_nt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_nt.html#pnt_nt", "pnt_nt", 'routine in <a href="obj/pnt/pnt_nt.html">pnt_nt.pro</a>', "pnt_nt.pro", "", "pnt_nt", "	Returns the nt dimension of a POINT object.    ", "conditionnoeventIf set, no event is generated.   ptdPOINT object.   @pnt_condition_keywords.include", "nt/SYS/PS", " 	Written by:	Spitale, 11/2015   	The nt dimensions of the POINT object.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_nv.html", "pnt_nv.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_nv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_nv.html#pnt_nv", "pnt_nv", 'routine in <a href="obj/pnt/pnt_nv.html">pnt_nv.pro</a>', "pnt_nv.pro", "", "pnt_nv", "	Returns the nv dimension of a POINT object.    ", "conditionnoeventIf set, no event is generated.   ptdPOINT object.   @pnt_condition_keywords.include", "NV/OBJ/PNT", " 	Written by:	Spitale, 11/2015   	The nv dimensions of the POINT object.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_offset.html", "pnt_offset.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_offset.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_offset.html#pnt_offset", "pnt_offset", 'routine in <a href="obj/pnt/pnt_offset.html">pnt_offset.pro</a>', "pnt_offset.pro", "", "pnt_offset", "	Offsets points in a POINT object.    ", "noeventptd	POINT object.   offset	Offset to apply.   ", "NV/OBJ/PNT", "  Spitale, 11/2015; 	Adapted from pgs_offset   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_points.html", "pnt_points.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_points.html#pnt_points", "pnt_points", 'routine in <a href="obj/pnt/pnt_points.html">pnt_points.pro</a>', "pnt_points.pro", "", "pnt_points", "	Returns the points associated with a POINT object.    ", "segmentsSubscripts in the output array denoting segments in the 			(assumed) continuous curve due to the point selection 			conditions.    sample	Sampling interval in the nv direction.  Default is 1.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   cat	If set, arrays from multiple input objects are 			concatenated.   conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   noeventIf set, no event is generated.   ptd0@pnt_condition_keywords.include", "NV/OBJ/PNT", " 	Written by:	Spitale, 11/2015   	The points associated with the POINT object, or zero.    STATUS: 	Complete    SEE ALSO: 	pnt_set_points     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_query.html", "pnt_query.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_query.html#pnt_query", "pnt_query", 'routine in <a href="obj/pnt/pnt_query.html">pnt_query.pro</a>', "pnt_query.pro", "", "pnt_query", "	Returns the fields associated with a POINT object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@pnt__keywords.include", "NV/OBJ/PNT", " 	Written by:	Spitale, 12/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_read.html", "pnt_read.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_read.pro", "", "", " 	Reads a POINT file.    ", "", "          -1", "  Spitale, 11/2015; 	Adapted from pgs_read_ps   ");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_read.html#pnt_read_0", "pnt_read_0", 'routine in <a href="obj/pnt/pnt_read.html">pnt_read.pro</a>', "pnt_read.pro", "", "pnt_read_0", "", "visiblenamedescflagspointsvectorscommentfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_read.html#psrpnt_get_next", "psrpnt_get_next", 'routine in <a href="obj/pnt/pnt_read.html">pnt_read.pro</a>', "pnt_read.pro", "", "psrpnt_get_next", "", "stopstatusnbinbufunittoken", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_read.html#pnt_read_1", "pnt_read_1", 'routine in <a href="obj/pnt/pnt_read.html">pnt_read.pro</a>', "pnt_read.pro", "", "pnt_read_1", "", "visiblenamedescflagspointsvectorscommentversiondatatagsfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_read.html#pnt_read_2", "pnt_read_2", 'routine in <a href="obj/pnt/pnt_read.html">pnt_read.pro</a>', "pnt_read.pro", "", "pnt_read_2", "", "visiblenamedescflagspointsvectorscommentversiondatatagsfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_read.html#pnt_read", "pnt_read", 'routine in <a href="obj/pnt/pnt_read.html">pnt_read.pro</a>', "pnt_read.pro", "", "pnt_read", "", "binnamedescflagspointsvectorscommentdatatagsfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_scale.html", "pnt_scale.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_scale.html#pnt_scale", "pnt_scale", 'routine in <a href="obj/pnt/pnt_scale.html">pnt_scale.pro</a>', "pnt_scale.pro", "", "pnt_scale", "	Scales points in a POINT object.    ", "noeventptd	POINT object.   scale	Scale to apply.   ", "NV/OBJ/PNT", "  Spitale, 11/2015; 	Adapted from pgs_scale   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_set_assoc_xd.html", "pnt_set_assoc_xd.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_set_assoc_xd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_set_assoc_xd.html#pnt_set_assoc_xd", "pnt_set_assoc_xd", 'routine in <a href="obj/pnt/pnt_set_assoc_xd.html">pnt_set_assoc_xd.pro</a>', "pnt_set_assoc_xd.pro", "", "pnt_set_assoc_xd", "	Replaces the assoc_xd field in a CORE object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   assoc_xdNew assoc_xd.   ", "NV/SYS/PNT", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_set_data.html", "pnt_set_data.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_set_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_set_data.html#pnt_set_data", "pnt_set_data", 'routine in <a href="obj/pnt/pnt_set_data.html">pnt_set_data.pro</a>', "pnt_set_data.pro", "", "pnt_set_data", "	Replaces the point-by-point data in a POINT object.    ", "tagsIf given, data arrays are replaced only for these tags, and in 		this order.   noeventIf set, no event is generated.   ptd	POINT object.   new_data", "NV/OBJ/PNT", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_set_desc.html", "pnt_set_desc.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_set_desc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_set_desc.html#pnt_set_desc", "pnt_set_desc", 'routine in <a href="obj/pnt/pnt_set_desc.html">pnt_set_desc.pro</a>', "pnt_set_desc.pro", "", "pnt_set_desc", "	Replaces the description field in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   desc	New description.   ", "NV/OBJ/PNT", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_set_flags.html", "pnt_set_flags.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_set_flags.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_set_flags.html#pnt_set_flags", "pnt_set_flags", 'routine in <a href="obj/pnt/pnt_set_flags.html">pnt_set_flags.pro</a>', "pnt_set_flags.pro", "", "pnt_set_flags", "	Replaces the flags in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   flags	New flags array.   ", "NV/OBJ/PNT", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_set_input.html", "pnt_set_input.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_set_input.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_set_input.html#pnt_set_input", "pnt_set_input", 'routine in <a href="obj/pnt/pnt_set_input.html">pnt_set_input.pro</a>', "pnt_set_input.pro", "", "pnt_set_input", "	Replaces the input description field in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   input", "NV/OBJ/PNT", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_set_points.html", "pnt_set_points.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_set_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_set_points.html#pnt_set_points", "pnt_set_points", 'routine in <a href="obj/pnt/pnt_set_points.html">pnt_set_points.pro</a>', "pnt_set_points.pro", "", "pnt_set_points", "	Replaces the points in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   points	New points array.   ", "NV/OBJ/PNT", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_set_tags.html", "pnt_set_tags.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_set_tags.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_set_tags.html#pnt_set_tags", "pnt_set_tags", 'routine in <a href="obj/pnt/pnt_set_tags.html">pnt_set_tags.pro</a>', "pnt_set_tags.pro", "", "pnt_set_tags", "	Replaces the tags in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   tags	New tags array.   ", "NV/OBJ/PNT", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_set_vectors.html", "pnt_set_vectors.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_set_vectors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_set_vectors.html#pnt_set_vectors", "pnt_set_vectors", 'routine in <a href="obj/pnt/pnt_set_vectors.html">pnt_set_vectors.pro</a>', "pnt_set_vectors.pro", "", "pnt_set_vectors", "	Replaces the vectors in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   vectorsNew vectors array.   ", "NV/OBJ/PNT", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_tags.html", "pnt_tags.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_tags.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_tags.html#pnt_tags", "pnt_tags", 'routine in <a href="obj/pnt/pnt_tags.html">pnt_tags.pro</a>', "pnt_tags.pro", "", "pnt_tags", "	Returns the tags associated with a POINT object.    ", "noeventIf set, no event is generated.   ptdPOINT object.   ", "NV/OBJ/PNT", " 	Written by:	Spitale, 11/2015   	The tags associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_tags     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_template.html", "pnt_template.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_template.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_template.html#pnt_template", "pnt_template", 'routine in <a href="obj/pnt/pnt_template.html">pnt_template.pro</a>', "pnt_template.pro", "", "pnt_template", "	Creates a new POINT using an existing one as a template.    ", "ptd0	POINT object.   ", "NV/OBJ/PNT", " 	Written:	Spitale, 11/2015   	New POINT with array fields left blank.    STATUS: 	Complete      ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_test.html", "pnt_test.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_test.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_test.html#pnt_test", "pnt_test", 'routine in <a href="obj/pnt/pnt_test.html">pnt_test.pro</a>', "pnt_test.pro", "", "pnt_test", "	Assesses the validity of a single POINT object.  This function 	differs from pnt_valid in that it simply returns true or false, rather 	than a list of validity flags.    ", "genericIf set, a generic input is test to determine whether 			it is a POINT object.  Its validity is not tested.   noeventptdArray of POINT objects.   ", "NV/OBJ/PNT", "  Spitale, 12/2015; 	Adapted from pgs_test   	1 if the given POINT object is valid and contains points, 0 otherwise.    STATUS: 	Complete    SEE ALSO: 	pnt_test    ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_threshold.html", "pnt_threshold.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_threshold.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_threshold.html#pnt_threshold", "pnt_threshold", 'routine in <a href="obj/pnt/pnt_threshold.html">pnt_threshold.pro</a>', "pnt_threshold.pro", "", "pnt_threshold", "	Flags points whose given indicator falls below or above a given 	threshold.    ", "aboveIf set, values above the theshold are allowed.   belowIf set, values below the theshold are allowed.   ptd	POINT object.   indicatorsValues to be tested against the threshold.  One for 			each point in ptd.   thresholdThreshold value.   ", "NV/OBJ/PNT", "  Spitale, 11/2015; 	Adapted from pgs_threshold   ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_uncompress.html", "pnt_uncompress.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_uncompress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_uncompress.html#pnt_uncompress", "pnt_uncompress", 'routine in <a href="obj/pnt/pnt_uncompress.html">pnt_uncompress.pro</a>', "pnt_uncompress.pro", "", "pnt_uncompress", "	Explodes a compressed POINT object back into an array of POINT objects 	using the original POINT objects as a template.  The 	compressed POINT object is freed.    ", "nn	If given, it is assumed that there are nn elements 			in the compressed array for each element in the 			original input arrays.   pptdCompressed POINT object.   ptd0", "NV/OBJ/PNT", "  Spitale, 11/2015; 	Adapted from pgs_uncompress   	Array of POINT objects containing the uncompressed data.     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_valid.html", "pnt_valid.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_valid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_valid.html#pnt_valid", "pnt_valid", 'routine in <a href="obj/pnt/pnt_valid.html">pnt_valid.pro</a>', "pnt_valid.pro", "", "pnt_valid", "	Assesses the validity of POINT objects.    ", "noeventptd0", "NV/OBJ/PNT", "  Spitale, 11/2015; 	Adapted from pgs_valid   	Array of flags, one for each input PS.  1 indicates that the PS 	contains points.    STATUS: 	Complete    SEE ALSO: 	pnt_test    ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_vectors.html", "pnt_vectors.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_vectors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_vectors.html#pnt_vectors", "pnt_vectors", 'routine in <a href="obj/pnt/pnt_vectors.html">pnt_vectors.pro</a>', "pnt_vectors.pro", "", "pnt_vectors", "	Returns the vectors associated with a POINT object.    ", "sample	Sampling interval in the nv direction.  Default is 1.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   cat	If set, arrays from mulitple input objets are 			concatenated.   conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT objects, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   noeventIf set, no event is generated.   ptd0@pnt_condition_keywords.include", "NV/OBJ/PNT", " 	Written by:	Spitale, 11/2015   	The vectors associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_vectors     ");
  
  

libdata[libdataItem++] = new Array("obj/pnt/pnt_write.html", "pnt_write.pro", '.pro file in <a href="obj/pnt/dir-overview.html">obj/pnt/ directory</a>', "pnt_write.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/pnt/pnt_write.html#pnt_write", "pnt_write", 'routine in <a href="obj/pnt/pnt_write.html">pnt_write.pro</a>', "pnt_write.pro", "", "pnt_write", " 	Writes a POINT object to a file.    ", "binIf set, a binary POINT object file is written;  		not currently implemented.   noeventfilenameName of the file to write.   ptd	POINT object to write.   ", "NV/OBJ/PNT", "  Spitale, 11/2015; 	Adapted from pgs_write_ps   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/project_map.html", "project_map.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "project_map.pro", "", "", "       Reprojects images.    ", "", "          -1", "       Written by:     Spitale, 6/1998   ");
  
  
  libdata[libdataItem++] = new Array("obj/tools/project_map.html#pm_hide_ring", "pm_hide_ring", 'routine in <a href="obj/tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_hide_ring", "", "rdmap_image_ptscam_image_ptssurface_ptsbody_ptspos_cam", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/project_map.html#pm_hide_globe", "pm_hide_globe", 'routine in <a href="obj/tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_hide_globe", "", "xdmap_image_ptscam_image_ptssurface_ptsbody_ptspos_cam", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/project_map.html#pm_rm_globe", "pm_rm_globe", 'routine in <a href="obj/tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_rm_globe", "", "xdmap_image_ptscam_image_ptssurface_ptsbody_ptspos_cam", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/project_map.html#pm_rm_globe", "pm_rm_globe", 'routine in <a href="obj/tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_rm_globe", "", "xdmap_image_ptscam_image_ptssurface_ptsbody_ptspos_cam", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/project_map.html#pm_bounds", "pm_bounds", 'routine in <a href="obj/tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_bounds", "", "boundssurface_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/project_map.html#pm_hide_points_limb", "pm_hide_points_limb", 'routine in <a href="obj/tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_hide_points_limb", "", "bxpos_cambody_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/project_map.html#pm_wind_zonal", "pm_wind_zonal", 'routine in <a href="obj/tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_wind_zonal", "", "bxmap_ptswind_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/project_map.html#pm_wind_kepler", "pm_wind_kepler", 'routine in <a href="obj/tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_wind_kepler", "", "bxmap_ptswind_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/project_map.html#project_map", "project_map", 'routine in <a href="obj/tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "project_map", "", "mdcdbxsundboundshitvaluehide_fnhide_data_proiinterparg_interpoffsetwind_fnwind_dataedgesmoothimage_pc_xsize_pc_ysize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/radec_angle.html", "radec_angle.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "radec_angle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/radec_angle.html#radec_angle", "radec_angle", 'routine in <a href="obj/tools/radec_angle.html">radec_angle.pro</a>', "radec_angle.pro", "", "radec_angle", "	Computes angles between vectors specified in the radec system.    ", "radec1Array (nv,3,nt) giving the radec representation of the 		first vector.   radec2Array (nv,3,nt) giving the radec representation of the 		second vector.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Array (nv,nt) of angles between the input vectors.     ");
  
  

libdata[libdataItem++] = new Array("obj/tools/radec_grid.html", "radec_grid.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "radec_grid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/radec_grid.html#radec_grid", "radec_grid", 'routine in <a href="obj/tools/radec_grid.html">radec_grid.pro</a>', "radec_grid.pro", "", "radec_grid", "", "nnpcd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/radec_image_bounds.html", "radec_image_bounds.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "radec_image_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/radec_image_bounds.html#radec_image_bounds", "radec_image_bounds", 'routine in <a href="obj/tools/radec_image_bounds.html">radec_image_bounds.pro</a>', "radec_image_bounds.pro", "", "radec_image_bounds", "	Determines radec coordinate ranges visible in an image described 	by a given camera descriptor.    ", "slopborder_pts_imraminramaxdecmindecmaxcornersstatuscdCamera descripor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	ramin:	Minimum RA in image.  	ramax:	Maximum RA in image.  	decmin:	Minimum DEC in image.  	decmax:	Maximum DEC in image.  	border_pts_im:	Array (2,np) of points along the edge of the image.  	status:	-1 if no globe in the image, 0 otherwise.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/radec_to_image.html", "radec_to_image.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "radec_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/radec_to_image.html#radec_to_image", "radec_to_image", 'routine in <a href="obj/tools/composite/radec_to_image.html">radec_to_image.pro</a>', "radec_to_image.pro", "", "radec_to_image", "       Transforms points in polar ra/dec coords w.r.t the inertial frame 	to image coords.    ", "body_ptscdArray of nt camera descriptors.   pArray (nv x 3 x nt) of radec points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/radec_to_orient.html", "radec_to_orient.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "radec_to_orient.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/radec_to_orient.html#radec_to_orient", "radec_to_orient", 'routine in <a href="obj/tools/radec_to_orient.html">radec_to_orient.pro</a>', "radec_to_orient.pro", "", "radec_to_orient", "	Computes orientation matrices such that the optic axis (axis 1) 	points in the direction of the given radec and the image y direction 	(axis 2) points toward celestial north (inertial [0,0,1]).    ", "radecArray (nt) giving the radec representations of the 		pointing vectors.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Array (3,3,nt) of orientation matrices.     ");
  
  

libdata[libdataItem++] = new Array("obj/tools/radec_twist_to_cd.html", "radec_twist_to_cd.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "radec_twist_to_cd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/radec_twist_to_cd.html#radec_twist_to_cd", "radec_twist_to_cd", 'routine in <a href="obj/tools/radec_twist_to_cd.html">radec_twist_to_cd.pro</a>', "radec_twist_to_cd.pro", "", "radec_twist_to_cd", "       Computes a camera orietation matrix from thegiven Euler angles.    ", "cdraRight ascension relative to the inertial frame.   decDeclination relative to the inertial frame.   twistTwist angle relative to the inertial frame.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	cd:	Array (nt) of camera descriptors with new 		orientations.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/ray_points.html", "ray_points.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "ray_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/ray_points.html#ray_points", "ray_points", 'routine in <a href="obj/tools/ray_points.html">ray_points.pro</a>', "ray_points.pro", "", "ray_points", "       Computes points along rays.    ", "cdrArray (nt) of inertial ray origins.   vArray (nt) of inertial ray directions, of unit length.   npNumber of points to compute on each ray.   dpPoint spacing.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	If no camera descriptor is given, an array (np,3,nt) of inertial 	position vectors is returned.  If cd is given, an array (2,np,nt) 	of image points is returned.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/ray_sub_point_graphic.html", "ray_sub_point_graphic.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "ray_sub_point_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/ray_sub_point_graphic.html#ray_sub_point_graphic", "ray_sub_point_graphic", 'routine in <a href="obj/tools/ray_sub_point_graphic.html">ray_sub_point_graphic.pro</a>', "ray_sub_point_graphic.pro", "", "ray_sub_point_graphic", "	Iterates to find the point on the surface of the globe where the 	given ray is closest to the surface.   ", "vvnormalpdvArray (nv,3) giving the ray origins in the BODY frame.   rArray (nv,3) giving the ray directions in the BODY frame.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nv,3) of closest approach poitns in the BODY frame.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/raytrace.html", "raytrace.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "raytrace.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/raytrace.html#raytrace", "raytrace", 'routine in <a href="obj/tools/raytrace.html">raytrace.pro</a>', "raytrace.pro", "", "raytrace", "	Traces rays from a camera to a set of objects.        ", "cd       Camera descriptor.   bx       Array of object descriptors; must be a subclass of BODY.   sbx          Body descriptor for secondary ray tracing.  If set, 	               image_pts and cd are not used; instead, secondary rays 	               are traced from the given hit_matrix points to sbx.   hit_matrix  Array (nray,3,nhit) of body-frame points for nearest 	              ray intersections.   showpenumbra     If set, lighting rays are traced to random points on 	               each secondary body rather then the center.     hit_indices Array (nray) of body indices corresponding to the first 	              intersection for each ray.   range_matrixArray (nhit,nray) giving distance to the near-side 	              ray intersection for each body in the hit_matrix.   hit_list    Array (nhit) giving indices of all bx that have ray 	              intersections.   far_matrix  Array (nray,3,nhit) of body-frame points for all 	              far-side intersections with bodies in the hit_list.   near_matrix  Array (nray,3,nhit) of body-frame points for all 	               near-side intersections with bodies in the hit_list.    backstandoff     If given, secondary vectors are advanced by this distance 	               before tracing in order to avoid hitting target bodies 	               through round-off error.  Default is 1 unit.   limit_sourceimage_pts Array (2,np) of image points relative to cd.  These 	            points will be turned into rays to be traced from the 	            position of the camera.   ", "NV/PG", " 	Written by:	Spitale      STATUS: 	Complete ");
  
  

libdata[libdataItem++] = new Array("obj/tools/remove_lines.html", "remove_lines.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "remove_lines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/remove_lines.html#remove_lines", "remove_lines", 'routine in <a href="obj/tools/remove_lines.html">remove_lines.pro</a>', "remove_lines.pro", "", "remove_lines", "", "slopptdlines", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/render.html", "render.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "render.pro", "", "", "	Performs rendering on an array of bodies.        ", "", "          -1", " 	Written by:	Spitale      STATUS: 	Complete ");
  
  
  libdata[libdataItem++] = new Array("obj/tools/render.html#map_smoothing_width", "map_smoothing_width", 'routine in <a href="obj/tools/render.html">render.pro</a>', "render.pro", "", "map_smoothing_width", "", "datai", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/render.html#rdr_photometry", "rdr_photometry", 'routine in <a href="obj/tools/render.html">render.pro</a>', "render.pro", "", "rdr_photometry", "", "no_phtdatacdsundbxbody_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/render.html#rdr_map", "rdr_map", 'routine in <a href="obj/tools/render.html">render.pro</a>', "render.pro", "", "rdr_map", "", "datapiecebxmdddmapbody_ptsphotii", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/render.html#rdr_piece", "rdr_piece", 'routine in <a href="obj/tools/render.html">render.pro</a>', "render.pro", "", "rdr_piece", "", "dataimage_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/render.html#render", "render", 'routine in <a href="obj/tools/render.html">render.pro</a>', "render.pro", "", "render", "", "cdsundbxddmapmdsamplepc_sizeshowpht_minno_phtstandofflimit_sourcepenumbrano_secondaryimage_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/render.html#test", "test", 'routine in <a href="obj/tools/render.html">render.pro</a>', "render.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/reproject_image.html", "reproject_image.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "reproject_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/reproject_image.html#reproject_image", "reproject_image", 'routine in <a href="obj/tools/reproject_image.html">reproject_image.pro</a>', "reproject_image.pro", "", "reproject_image", "       xx    ", "cd    Camera descriptor.   new_cdsizeinterparg_interpimage    Image of body.   pc_xsize    x size of map workspace   pc_ysize    y size of map workspace    ", "NV/LIB/TOOLS", "       Written by:     Spitale, 6/1998          The reprojected image.   ");
  
  

libdata[libdataItem++] = new Array("grim/rim.html", "rim.pro", '.pro file in <a href="grim/dir-overview.html">grim/ directory</a>', "rim.pro", "", "", "	Prints the headers, or specific header values, for the specified files.    ", "", "          -1", " 	Written by:	Spitale, 8/2013   ");
  
  
  libdata[libdataItem++] = new Array("grim/rim.html#rim", "rim", 'routine in <a href="grim/rim.html">rim.pro</a>', "rim.pro", "", "rim", "", "keywordsfiles", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/ringplane_radial_bounds.html", "ringplane_radial_bounds.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "ringplane_radial_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/ringplane_radial_bounds.html#ringplane_radial_bounds", "ringplane_radial_bounds", 'routine in <a href="obj/tools/ringplane_radial_bounds.html">ringplane_radial_bounds.pro</a>', "ringplane_radial_bounds.pro", "", "ringplane_radial_bounds", "	Finds ringplane radial bounds by projecting the camera FOV on 	the ringplane.    ", "cdCamera descriptor.   dkxAny subclass of DISK.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Array (2) giving the minimum and maximum disk radii visible 	to the camera.     ");
  
  

libdata[libdataItem++] = new Array("obj/rng/rng_assign.html", "rng_assign.pro", '.pro file in <a href="obj/rng/dir-overview.html">obj/rng/ directory</a>', "rng_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/rng/rng_assign.html#rng_assign", "rng_assign", 'routine in <a href="obj/rng/rng_assign.html">rng_assign.pro</a>', "rng_assign.pro", "", "rng_assign", "	Replaces fields in a RING object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@rng__keywords.include", "NV/OBJ/RNG", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/rng/rng_create_descriptors.html", "rng_create_descriptors.pro", '.pro file in <a href="obj/rng/dir-overview.html">obj/rng/ directory</a>', "rng_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/rng/rng_create_descriptors.html#rng_create_descriptors", "rng_create_descriptors", 'routine in <a href="obj/rng/rng_create_descriptors.html">rng_create_descriptors.pro</a>', "rng_create_descriptors.pro", "", "rng_create_descriptors", "	Init method for the RING class.    ", "crdCore descriptor(s) to pass to cor_create_descriptors.   bdBody descriptor(s) to pass to bod_create_descriptors.   sldSolid descriptor(s) to pass to sld_create_descriptors.   dkdDisk descriptor(s) to pass to dsk_create_descriptors.   rdRing descriptor(s) to initialize, instead of creating new 		ones.   n     Number of ring descriptors.   @rng__keywords.include", "NV/LIB/RNG", "       Written by:     Spitale  	Adapted by:	Spitale, 5/2016          An array (n) of ring descriptors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/rng/rng_desc.html", "rng_desc.pro", '.pro file in <a href="obj/rng/dir-overview.html">obj/rng/ directory</a>', "rng_desc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/rng/rng_desc.html#rng_desc", "rng_desc", 'routine in <a href="obj/rng/rng_desc.html">rng_desc.pro</a>', "rng_desc.pro", "", "rng_desc", "	Returns the description string for each given ring descriptor.    ", "noeventrd Array (nt) of RING descriptors.   ", "NV/LIB/RNG", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Description string associated with each given ring descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/rng/rng_evolve.html", "rng_evolve.pro", '.pro file in <a href="obj/rng/dir-overview.html">obj/rng/ directory</a>', "rng_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/rng/rng_evolve.html#rng_evolve", "rng_evolve", 'routine in <a href="obj/rng/rng_evolve.html">rng_evolve.pro</a>', "rng_evolve.pro", "", "rng_evolve", "	Computes new ring descriptors at the given time offsets from the 	given ring descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given ring 	descriptor.    ", "nodv If set, derivatives will not be evolved.   copyIf set, the evolved descriptor is copied into the input 		descriptor and it is freed.  The input descriptor is returned.    rd Any subclass of RING.   dt Time offset.   ", "NV/LIB/RNG", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nrd,ndt) of newly allocated descriptors, of class RING, 	evolved by time dt, where nrd is the number of rd, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/rng/rng_primary.html", "rng_primary.pro", '.pro file in <a href="obj/rng/dir-overview.html">obj/rng/ directory</a>', "rng_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/rng/rng_primary.html#rng_primary", "rng_primary", 'routine in <a href="obj/rng/rng_primary.html">rng_primary.pro</a>', "rng_primary.pro", "", "rng_primary", "	Returns the primary string for each given ring descriptor.    ", "noeventrd Array (nt) of RING descriptors.   ", "NV/LIB/RNG", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Primary string associated with each given ring descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/rng/rng_query.html", "rng_query.pro", '.pro file in <a href="obj/rng/dir-overview.html">obj/rng/ directory</a>', "rng_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/rng/rng_query.html#rng_query", "rng_query", 'routine in <a href="obj/rng/rng_query.html">rng_query.pro</a>', "rng_query.pro", "", "rng_query", "	Returns the fields associated with a RING object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@rng__keywords.include", "NV/OBJ/RNG", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/rng/rng_replicate.html", "rng_replicate.pro", '.pro file in <a href="obj/rng/dir-overview.html">obj/rng/ directory</a>', "rng_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/rng/rng_replicate.html#rng_replicate", "rng_replicate", 'routine in <a href="obj/rng/rng_replicate.html">rng_replicate.pro</a>', "rng_replicate.pro", "", "rng_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "rd Ring descriptor.   dim Dimensions of the result.   ", "NV/LIB/RNG", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/rng/rng_set_desc.html", "rng_set_desc.pro", '.pro file in <a href="obj/rng/dir-overview.html">obj/rng/ directory</a>', "rng_set_desc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/rng/rng_set_desc.html#rng_set_desc", "rng_set_desc", 'routine in <a href="obj/rng/rng_set_desc.html">rng_set_desc.pro</a>', "rng_set_desc.pro", "", "rng_set_desc", "	Replaces the description string in each given ring descriptor.    ", "noeventrdArray (nt) of STATION descriptors.   descArray (nt) of description strings.   ", "NV/LIB/RNG", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/rng/rng_set_primary.html", "rng_set_primary.pro", '.pro file in <a href="obj/rng/dir-overview.html">obj/rng/ directory</a>', "rng_set_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/rng/rng_set_primary.html#rng_set_primary", "rng_set_primary", 'routine in <a href="obj/rng/rng_set_primary.html">rng_set_primary.pro</a>', "rng_set_primary.pro", "", "rng_set_primary", "	Replaces the primary string in each given ring descriptor.    ", "noeventrdArray (nt) of STATION descriptor.   xd", "NV/LIB/RNG", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/set_image_origin.html", "set_image_origin.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "set_image_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/set_image_origin.html#set_image_origin", "set_image_origin", 'routine in <a href="obj/tools/composite/set_image_origin.html">set_image_origin.pro</a>', "set_image_origin.pro", "", "set_image_origin", "	Sets the origin of a map or camera image.    ", "cdoriginorigin argument as in map_set_origin    ", "NV/LIB/TOOLS/COMPOSITE", "	NONE.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/set_image_size.html", "set_image_size.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "set_image_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/set_image_size.html#set_image_size", "set_image_size", 'routine in <a href="obj/tools/composite/set_image_size.html">set_image_size.pro</a>', "set_image_size.pro", "", "set_image_size", "	Sets the size of a map or camera image.    ", "cdsize	 Size argument as in map_set_size    ", "NV/LIB/TOOLS/COMPOSITE", "	NONE.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_albedo.html", "sld_albedo.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_albedo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_albedo.html#sld_albedo", "sld_albedo", 'routine in <a href="obj/sld/sld_albedo.html">sld_albedo.pro</a>', "sld_albedo.pro", "", "sld_albedo", "       Returns the bond albedo for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016          Array (nt) of albedos associated with each given solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_assign.html", "sld_assign.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_assign.html#sld_assign", "sld_assign", 'routine in <a href="obj/sld/sld_assign.html">sld_assign.pro</a>', "sld_assign.pro", "", "sld_assign", "	Replaces fields in a SOLID object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@sld__keywords.include", "NV/OBJ/SLD", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_create_descriptors.html", "sld_create_descriptors.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_create_descriptors.html#sld_create_descriptors", "sld_create_descriptors", 'routine in <a href="obj/sld/sld_create_descriptors.html">sld_create_descriptors.pro</a>', "sld_create_descriptors.pro", "", "sld_create_descriptors", "	Init method for the SOLID class.    ", "crdbdsldnNumber of descriptors to create.   @sld__keywords.include", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	Newly created or or freshly initialized solid descriptors, depending 	on the presence of the bd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_evolve.html", "sld_evolve.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_evolve.html#sld_evolve", "sld_evolve", 'routine in <a href="obj/sld/sld_evolve.html">sld_evolve.pro</a>', "sld_evolve.pro", "", "sld_evolve", "       Computes new solid descriptors at the given time offsets from        the given solid descriptors using the taylor series expansion        corresponding to the derivatives contained in the given solid        descriptor.    ", "nodv If set, velocities will not be evolved.   copyIf set, the evolved descriptor is copied into the input 		descriptor and it is freed.  The input descriptor is returned.    sld Array (nsld) of any subclass of SOLID descriptors.   dt Array (ndt) of time offsets.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (ngd,ndt) of newly allocated solid descriptors evolved        by time dt, where ngd is the number of sld, and ndt is the        number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_gm.html", "sld_gm.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_gm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_gm.html#sld_gm", "sld_gm", 'routine in <a href="obj/sld/sld_gm.html">sld_gm.pro</a>', "sld_gm.pro", "", "sld_gm", "       Returns the GM value for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016          Array (nt) of GM values associated with each given solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_mass.html", "sld_mass.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_mass.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_mass.html#sld_mass", "sld_mass", 'routine in <a href="obj/sld/sld_mass.html">sld_mass.pro</a>', "sld_mass.pro", "", "sld_mass", "       Returns the mass for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016          Array (nt) of mass values associated with each given solid 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_npht.html", "sld_npht.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_npht.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_npht.html#sld_npht", "sld_npht", 'routine in <a href="obj/sld/sld_npht.html">sld_npht.pro</a>', "sld_npht.pro", "", "sld_npht", "	Returns an integer indicating the maximum number of parameters 	allowed in the refl_parm and phase-parm fields of the solid 	descriptor.  This number can be adjusted using the environment 	variable 'SLD_NPHT'.  The default is 4.    Environment variables:   	SLD_NPHT:	Sets the npht value.    ", "", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998   	Current npht value.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_opacity.html", "sld_opacity.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_opacity.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_opacity.html#sld_opacity", "sld_opacity", 'routine in <a href="obj/sld/sld_opacity.html">sld_opacity.pro</a>', "sld_opacity.pro", "", "sld_opacity", "	Returns the opacity for each given solid descriptor.    ", "noeventsld", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	Opacity value associated with each given solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_phase.html", "sld_phase.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_phase.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_phase.html#sld_phase", "sld_phase", 'routine in <a href="obj/sld/sld_phase.html">sld_phase.pro</a>', "sld_phase.pro", "", "sld_phase", "	Computes a phase function.    	The function indicated by the phase_fn field of the solid descriptor 	is called and its return value is passed through to the caller of 	sld_phase.    STATUS: 	Complete    ", "sld Globe descriptor.   mu Cosine of the emission angle.   mu0 Cosine of the incidence angle.   ", "NV/LIB/SLD", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Phase function value for the given mu and mu0 parameters.    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_phase_fn.html", "sld_phase_fn.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_phase_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_phase_fn.html#sld_phase_fn", "sld_phase_fn", 'routine in <a href="obj/sld/sld_phase_fn.html">sld_phase_fn.pro</a>', "sld_phase_fn.pro", "", "sld_phase_fn", "       Returns the name of the phase function for each given solid 	descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nt) of phase function names associated with each given solid 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_phase_parm.html", "sld_phase_parm.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_phase_parm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_phase_parm.html#sld_phase_parm", "sld_phase_parm", 'routine in <a href="obj/sld/sld_phase_parm.html">sld_phase_parm.pro</a>', "sld_phase_parm.pro", "", "sld_phase_parm", "       Returns the phase function parameters for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (npht,nt) of phase function parameters associated with each 	given solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_query.html", "sld_query.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_query.html#sld_query", "sld_query", 'routine in <a href="obj/sld/sld_query.html">sld_query.pro</a>', "sld_query.pro", "", "sld_query", "	Returns the fields associated with a CAMERA object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@sld__keywords.include", "NV/OBJ/CAM", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_refl.html", "sld_refl.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_refl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_refl.html#sld_refl", "sld_refl", 'routine in <a href="obj/sld/sld_refl.html">sld_refl.pro</a>', "sld_refl.pro", "", "sld_refl", "	Computes a reflection function.    	The function indicated by the refl_fn field of the solid descriptor 	is called and its return value is passed through to the caller of 	sld_phase.    STATUS: 	Complete    ", "sld Globe descriptor.   mu Cosine of the emission angle.   mu0 Cosine of the incidence angle.   ", "NV/LIB/SLD", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Refletion function value for the given mu and mu0 parameters.    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_refl_fn.html", "sld_refl_fn.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_refl_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_refl_fn.html#sld_refl_fn", "sld_refl_fn", 'routine in <a href="obj/sld/sld_refl_fn.html">sld_refl_fn.pro</a>', "sld_refl_fn.pro", "", "sld_refl_fn", "       Returns the name of the reflection function for each given solid 	descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nt) of reflection function names associated with each given 	solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_refl_parm.html", "sld_refl_parm.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_refl_parm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_refl_parm.html#sld_refl_parm", "sld_refl_parm", 'routine in <a href="obj/sld/sld_refl_parm.html">sld_refl_parm.pro</a>', "sld_refl_parm.pro", "", "sld_refl_parm", "       Returns the reflection function parameters for each given solid 	descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (npht,nt) of reflection function parameters associated with 	each given solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_set_albedo.html", "sld_set_albedo.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_set_albedo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_set_albedo.html#sld_set_albedo", "sld_set_albedo", 'routine in <a href="obj/sld/sld_set_albedo.html">sld_set_albedo.pro</a>', "sld_set_albedo.pro", "", "sld_set_albedo", "       Replaces the bond albedo for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   albedo Array (nt) of new bond albedos.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_set_gm.html", "sld_set_gm.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_set_gm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_set_gm.html#sld_set_gm", "sld_set_gm", 'routine in <a href="obj/sld/sld_set_gm.html">sld_set_gm.pro</a>', "sld_set_gm.pro", "", "sld_set_gm", "       Replaces the GM value for each given solid descriptor.    ", "nosynchnoeventsld Array (nt) of any subclass of SOLID descriptors.   gm Array (nt) of new GM values.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_set_mass.html", "sld_set_mass.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_set_mass.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_set_mass.html#sld_set_mass", "sld_set_mass", 'routine in <a href="obj/sld/sld_set_mass.html">sld_set_mass.pro</a>', "sld_set_mass.pro", "", "sld_set_mass", "       Replaces the mass for each given solid descriptor.    ", "nosynchnoeventsld Array (nt) of any subclass of SOLID descriptors.   mass", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_set_opacity.html", "sld_set_opacity.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_set_opacity.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_set_opacity.html#sld_set_opacity", "sld_set_opacity", 'routine in <a href="obj/sld/sld_set_opacity.html">sld_set_opacity.pro</a>', "sld_set_opacity.pro", "", "sld_set_opacity", "	Replaces the opacity of each given solid descriptor.    ", "noeventsld Any subclass of SOLID.   opacity New opacity value.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_set_phase_fn.html", "sld_set_phase_fn.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_set_phase_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_set_phase_fn.html#sld_set_phase_fn", "sld_set_phase_fn", 'routine in <a href="obj/sld/sld_set_phase_fn.html">sld_set_phase_fn.pro</a>', "sld_set_phase_fn.pro", "", "sld_set_phase_fn", "       Replaces the phase function for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   phase_fnArray (nt) of new phase functions.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_set_phase_parm.html", "sld_set_phase_parm.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_set_phase_parm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_set_phase_parm.html#sld_set_phase_parm", "sld_set_phase_parm", 'routine in <a href="obj/sld/sld_set_phase_parm.html">sld_set_phase_parm.pro</a>', "sld_set_phase_parm.pro", "", "sld_set_phase_parm", "       Replaces the phase function parameters for each given solid descriptor.    ", "noeventsld	Array (nt) of any subclass of SOLID descriptors.   phase_parmArray (nt) of new phase function parameters.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 3/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_set_refl_fn.html", "sld_set_refl_fn.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_set_refl_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_set_refl_fn.html#sld_set_refl_fn", "sld_set_refl_fn", 'routine in <a href="obj/sld/sld_set_refl_fn.html">sld_set_refl_fn.pro</a>', "sld_set_refl_fn.pro", "", "sld_set_refl_fn", "       Replaces the reflection function for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   refl_fnArray (nt) of new reflection functions.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/sld/sld_set_refl_parm.html", "sld_set_refl_parm.pro", '.pro file in <a href="obj/sld/dir-overview.html">obj/sld/ directory</a>', "sld_set_refl_parm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/sld/sld_set_refl_parm.html#sld_set_refl_parm", "sld_set_refl_parm", 'routine in <a href="obj/sld/sld_set_refl_parm.html">sld_set_refl_parm.pro</a>', "sld_set_refl_parm.pro", "", "sld_set_refl_parm", "       Replaces the reflection function parameters for each given solid 	descriptor.    ", "noeventsld	Array (nt) of any subclass of SOLID descriptors.   refl_parmArray (nt) of new reflection function parameters.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 3/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/smear_psf.html", "smear_psf.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "smear_psf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/smear_psf.html#smear_psf", "smear_psf", 'routine in <a href="obj/tools/smear_psf.html">smear_psf.pro</a>', "smear_psf.pro", "", "smear_psf", "", "cdbxwidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/smooth_on_curve.html", "smooth_on_curve.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "smooth_on_curve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/smooth_on_curve.html#smooth_on_curve", "smooth_on_curve", 'routine in <a href="obj/tools/smooth_on_curve.html">smooth_on_curve.pro</a>', "smooth_on_curve.pro", "", "smooth_on_curve", "", "cdimagepwidth", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/smooth_on_curve.html#_smooth_on_curve", "_smooth_on_curve", 'routine in <a href="obj/tools/smooth_on_curve.html">smooth_on_curve.pro</a>', "smooth_on_curve.pro", "", "_smooth_on_curve", "", "imagepwidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/stellab.html", "stellab.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "stellab.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/stellab.html#stellab", "stellab", 'routine in <a href="obj/tools/stellab.html">stellab.pro</a>', "stellab.pro", "", "stellab", "	Corrects body positions for stellar aberration on objects for which the 	correction has not already been performed..    ", "c	Speed of light.   fastinvert	If set, the inverse correction is performed.   obs_bx	Array (nt) of any subclass of BODY describing 			the observer.   _targ_bxArray (nt) of any subclass of BODY describing 			the target.  The position of this body is modified.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   ");
  
  

libdata[libdataItem++] = new Array("obj/tools/stellab_pos.html", "stellab_pos.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "stellab_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/stellab_pos.html#stellab_pos", "stellab_pos", 'routine in <a href="obj/tools/stellab_pos.html">stellab_pos.pro</a>', "stellab_pos.pro", "", "stellab_pos", "	Corrects positions for stellar aberration.    ", "cSpeed of light.   axisArray (nv,3) of rotation axes corresponding to each 		correction.   thetaArray (nv) of rotation angles corresponding to each 		correction.    fastposArray (nv,3) of target inertial position vectors to be 		corrected.   velArray (nv,3) of observer inertial velocity vectors. 		Note observer is assumed to be at the origin.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nv,3) of corrected position vectors.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/stellab_radec.html", "stellab_radec.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "stellab_radec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/stellab_radec.html#stellab_radec", "stellab_radec", 'routine in <a href="obj/tools/stellab_radec.html">stellab_radec.pro</a>', "stellab_radec.pro", "", "stellab_radec", "	Corrects positions given in the radec system for stellar 	aberration.    ", "cSpeed of light.   radecArray (nv,3) of target inertial position vectors to be 		corrected, given in the radec system.   velArray (nv,3) of observer inertial velocity vectors. 		Note observer is assumed to be at the origin.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nv,3) of corrected position vectors in the radec system.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/stereo_split.html", "stereo_split.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "stereo_split.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/stereo_split.html#stereo_split", "stereo_split", 'routine in <a href="obj/tools/stereo_split.html">stereo_split.pro</a>', "stereo_split.pro", "", "stereo_split", "       Splits a given camera descriptor into a stereo pair.    ", "sepcdCamera descriptor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2) giving the left and right camera descriptors. 	Each descriptor is cloned from the input descripor, and has 	been translated +/- sep/2 in the camara body 0-axis direction.    ");
  
  

libdata[libdataItem++] = new Array("obj/stn/stn_assign.html", "stn_assign.pro", '.pro file in <a href="obj/stn/dir-overview.html">obj/stn/ directory</a>', "stn_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/stn/stn_assign.html#stn_assign", "stn_assign", 'routine in <a href="obj/stn/stn_assign.html">stn_assign.pro</a>', "stn_assign.pro", "", "stn_assign", "	Replaces fields in a STATION object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@stn__keywords.include", "NV/OBJ/CAM", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/stn/stn_create_descriptors.html", "stn_create_descriptors.pro", '.pro file in <a href="obj/stn/dir-overview.html">obj/stn/ directory</a>', "stn_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/stn/stn_create_descriptors.html#stn_create_descriptors", "stn_create_descriptors", 'routine in <a href="obj/stn/stn_create_descriptors.html">stn_create_descriptors.pro</a>', "stn_create_descriptors.pro", "", "stn_create_descriptors", "	Init method for the STATION class.    ", "crdCore descriptor(s) to pass to cor_create_descriptors.   bdBody descriptor(s) to pass to bod_create_descriptors.   stdStation descriptor(s) to initialize, instead of creating new 		ones.   n     Number of station descriptors.   @stn__keywords.include", "NV/LIB/STN", "       Written by:     Spitale  	Adapted by:	Spitale, 5/2016          An array (n) of station descriptors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/stn/stn_evolve.html", "stn_evolve.pro", '.pro file in <a href="obj/stn/dir-overview.html">obj/stn/ directory</a>', "stn_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/stn/stn_evolve.html#stn_evolve", "stn_evolve", 'routine in <a href="obj/stn/stn_evolve.html">stn_evolve.pro</a>', "stn_evolve.pro", "", "stn_evolve", "	Computes new station descriptors at the given time offsets from the 	given station descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given station 	descriptor.    ", "nodv If set, derivatives will not be evolved.   copyIf set, the evolved descriptor is copied into the input 		descriptor and it is freed.  The input descriptor is returned.    stddt Time offset.   ", "NV/LIB/STN", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nstd,ndt) of newly allocated descriptors, of class STATION, 	evolved by time dt, where nstd is the number of stx, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/stn/stn_primary.html", "stn_primary.pro", '.pro file in <a href="obj/stn/dir-overview.html">obj/stn/ directory</a>', "stn_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/stn/stn_primary.html#stn_primary", "stn_primary", 'routine in <a href="obj/stn/stn_primary.html">stn_primary.pro</a>', "stn_primary.pro", "", "stn_primary", "	Returns the primary string for each given station descriptor.    ", "noeventstd Array (nt) of STATION descriptors.   ", "NV/LIB/STN", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Primary descriptor associated with each given station descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/stn/stn_query.html", "stn_query.pro", '.pro file in <a href="obj/stn/dir-overview.html">obj/stn/ directory</a>', "stn_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/stn/stn_query.html#stn_query", "stn_query", 'routine in <a href="obj/stn/stn_query.html">stn_query.pro</a>', "stn_query.pro", "", "stn_query", "	Returns the fields associated with a STATION object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@stn__keywords.include", "NV/OBJ/CAM", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/stn/stn_replicate.html", "stn_replicate.pro", '.pro file in <a href="obj/stn/dir-overview.html">obj/stn/ directory</a>', "stn_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/stn/stn_replicate.html#stn_replicate", "stn_replicate", 'routine in <a href="obj/stn/stn_replicate.html">stn_replicate.pro</a>', "stn_replicate.pro", "", "stn_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "std Station descriptor.   dim Dimensions of the result.   ", "NV/LIB/STN", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/stn/stn_set_primary.html", "stn_set_primary.pro", '.pro file in <a href="obj/stn/dir-overview.html">obj/stn/ directory</a>', "stn_set_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/stn/stn_set_primary.html#stn_set_primary", "stn_set_primary", 'routine in <a href="obj/stn/stn_set_primary.html">stn_set_primary.pro</a>', "stn_set_primary.pro", "", "stn_set_primary", "	Replaces the primary string in each given station descriptor.    ", "noeventstdArray (nt) of STATION descriptors.   primaryArray (nt) of primary descriptors.   ", "NV/LIB/STN", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/stn/stn_set_surface_pt.html", "stn_set_surface_pt.pro", '.pro file in <a href="obj/stn/dir-overview.html">obj/stn/ directory</a>', "stn_set_surface_pt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/stn/stn_set_surface_pt.html#stn_set_surface_pt", "stn_set_surface_pt", 'routine in <a href="obj/stn/stn_set_surface_pt.html">stn_set_surface_pt.pro</a>', "stn_set_surface_pt.pro", "", "stn_set_surface_pt", "	Replaces the surface_pt vector in each given station descriptor.    ", "noeventstdArray (nt) of STATION descriptors.   surface_ptArray (1,3,nt) of surface_pt vectors.   ", "NV/LIB/STN", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/stn/stn_surface_pt.html", "stn_surface_pt.pro", '.pro file in <a href="obj/stn/dir-overview.html">obj/stn/ directory</a>', "stn_surface_pt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/stn/stn_surface_pt.html#stn_surface_pt", "stn_surface_pt", 'routine in <a href="obj/stn/stn_surface_pt.html">stn_surface_pt.pro</a>', "stn_surface_pt.pro", "", "stn_surface_pt", "	Returns the surface_pt vector for each given station descriptor.    ", "noeventstd Array (nt) of STATION descriptors.   ", "NV/LIB/STN", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (1,3,nt) of surface_pt vectors associated with each given 	station descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_assign.html", "str_assign.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_assign.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_assign.html#str_assign", "str_assign", 'routine in <a href="obj/str/str_assign.html">str_assign.pro</a>', "str_assign.pro", "", "str_assign", "	Replaces fields in a STAR object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "noeventIf set, no event is generated.   xd@str__keywords.include", "NV/OBJ/STR", " 	Written by:	Spitale		2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_create_descriptors.html", "str_create_descriptors.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_create_descriptors.html#str_create_descriptors", "str_create_descriptors", 'routine in <a href="obj/str/str_create_descriptors.html">str_create_descriptors.pro</a>', "str_create_descriptors.pro", "", "str_create_descriptors", "	Init method for the STAR class.    ", "crdCore descriptor(s) to pass to cor_create_descriptors.   bdBody descriptor(s) to pass to bod_create_descriptors.   sldSolid descriptor(s) to pass to sld_create_descriptors.   gbdGlobe descriptor(s) to pass to glb_create_descriptors.   sdStar descriptor(s) to initialize, instead of creating new ones.   n     Number of star descriptors.   @str__keywords.include", "NV/LIB/STR", "       Written by:     Haemmerle, 5/1998  	Adapted by:	Spitale, 5/2016          An array (n) of star descriptors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_evolve.html", "str_evolve.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_evolve.html#str_evolve", "str_evolve", 'routine in <a href="obj/str/str_evolve.html">str_evolve.pro</a>', "str_evolve.pro", "", "str_evolve", "	Computes new star descriptors at the given time offsets from the 	given star descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given star 	descriptor.    ", "nodv If set, derivatives will not be evolved.   copyIf set, the evolved descriptor is copied into the input 		descriptor and it is freed.  The input descriptor is returned.    sddt Time offset.   ", "NV/LIB/STR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nsd,ndt) of newly allocated descriptors, of class STAR, 	evolved by time dt, where nsd is the number of sx, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_get_mag.html", "str_get_mag.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_get_mag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_get_mag.html#str_get_mag", "str_get_mag", 'routine in <a href="obj/str/str_get_mag.html">str_get_mag.pro</a>', "str_get_mag.pro", "", "str_get_mag", "       Calculates the visual magnitude for each given star descriptor.           Calls str_body to get the position vector.  The position is assumed        to be in meters and the Luminosity (sds.lum) is in J/sec.  Absolute        visual magnitude is calculated by using the formula for the Sun.        Mv = 4.83 - 2.5 log (L/Lsun)        where Lsun = 3.826e+26 J/sec        Visual magnitude is corrected by using the distance modulus.        m = Mv + 5 log (dist/pc) - 5        where pc = 3.085678e+16 m  (parsec)   STATUS:        Completed.    ", "sd   Array (nt) of star descriptors.   ", "NV/LIB/STR", "       Written by:     Haemmerle, 5/1998 	Modified by:	Haemmerle, 12/2000  	Adapted by:	Spitale, 5/2016           An array (nt) of magnitues.   ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_limit_mag.html", "str_limit_mag.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_limit_mag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_limit_mag.html#str_limit_mag", "str_limit_mag", 'routine in <a href="obj/str/str_limit_mag.html">str_limit_mag.pro</a>', "str_limit_mag.pro", "", "str_limit_mag", "       Returns subscripts of stars with magnitudes within the min, max range.    ", "min   Minimum threshold for magnitude.   max   Maximum threshold for magnitude.   sd   Array of star descriptors.   ", "NV/LIB/STR", "       Written by:     Haemmerle, 5/1998  	Adapted by:	Spitale, 5/2016          An array of subscripts into sd for stars fitting 	min <=  magnitude <= max.    SEE ALSO: 	pg_str_limit_mag   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_lum.html", "str_lum.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_lum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_lum.html#str_lum", "str_lum", 'routine in <a href="obj/str/str_lum.html">str_lum.pro</a>', "str_lum.pro", "", "str_lum", "       Returns a luminosity for each given star descriptor.    ", "noeventsd   Array (nt) of star descriptors   ", "NV/LIB/STR", "       Written by:     Haemmerle, 5/1998  	Adapted by:	Spitale, 5/2016          An array (nt) of luminosities.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_query.html", "str_query.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_query.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_query.html#str_query", "str_query", 'routine in <a href="obj/str/str_query.html">str_query.pro</a>', "str_query.pro", "", "str_query", "	Returns the fields associated with a STAR object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   noeventIf set, no event is generated.   xd@str__keywords.include", "NV/OBJ/STR", " 	Written by:	Spitale, 2/2017   ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_replicate.html", "str_replicate.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_replicate.html#str_replicate", "str_replicate", 'routine in <a href="obj/str/str_replicate.html">str_replicate.pro</a>', "str_replicate.pro", "", "str_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "sd Star descriptor.   dim Dimensions of the result.   ", "NV/LIB/STR", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_set_lum.html", "str_set_lum.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_set_lum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_set_lum.html#str_set_lum", "str_set_lum", 'routine in <a href="obj/str/str_set_lum.html">str_set_lum.pro</a>', "str_set_lum.pro", "", "str_set_lum", "	Replaces the luminosities for each given star descriptor.    ", "noeventsd Array (nt) of any subclass of STAR.   lum Array (nt) of new luminosity values.   ", "NV/LIB/STR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_set_sp.html", "str_set_sp.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_set_sp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_set_sp.html#str_set_sp", "str_set_sp", 'routine in <a href="obj/str/str_set_sp.html">str_set_sp.pro</a>', "str_set_sp.pro", "", "str_set_sp", "	Replaces the spectra class for each given star descriptor.    ", "noeventsd Array (nt) of any subclass of STAR.   sp Array (nt) of new sp strings.   ", "NV/LIB/STR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("obj/str/str_sp.html", "str_sp.pro", '.pro file in <a href="obj/str/dir-overview.html">obj/str/ directory</a>', "str_sp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/str/str_sp.html#str_sp", "str_sp", 'routine in <a href="obj/str/str_sp.html">str_sp.pro</a>', "str_sp.pro", "", "str_sp", "       Returns a spectral type for each given star descriptor.    ", "noeventsd   Array (t) of star descriptors   ", "NV/LIB/STR", "       Written by:     Haemmerle, 5/1998  	Adapted by:	Spitale, 5/2016          An array (nt) of spectral types which is a three character string.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/sub_latlon.html", "sub_latlon.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "sub_latlon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/sub_latlon.html#sub_latlon", "sub_latlon", 'routine in <a href="obj/tools/sub_latlon.html">sub_latlon.pro</a>', "sub_latlon.pro", "", "sub_latlon", "	Computes sub-observer latitude and longitude on a globe.   ", "body_ptArray (nv,3,nt) giving the sub-observer point in 			BODY coordinates.   surf_ptArray (nv,3,nt) giving the sub-observer point in 			SURFACE coordinates.    graphic  If set, use planetographic coordinates.   gbxArray (nt) of any subclass of GLOBE.   vArray (nv,3,nt) giving the observer position in the BODY frame.   sublatsublon", "NV/LIB/TOOLS", "       Written by:     Spitale   	sublat:	Array (nv,nt) of latitude of sub-observer point on gbx.  	sublon:	Array (nv,nt) of longitude of sub-observer point on gbx.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/surface_hide_points.html", "surface_hide_points.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "surface_hide_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/surface_hide_points.html#surface_hide_points", "surface_hide_points", 'routine in <a href="obj/tools/composite/surface_hide_points.html">surface_hide_points.pro</a>', "surface_hide_points.pro", "", "surface_hide_points", "	Hides points with respect to surface objects.    ", "bxArray (nt) of any subclass of BODY descriptors with 		the expected surface parameters.   vArray (nv,3,nt) giving viewer positions in the BODY frame.   rArray (nv,3,nt) giving points to hide in the BODY frame.    ", "NV/LIB/TOOLS/COMPOSITE", " 	Written by:	Spitale, 7/2016   	Subscripts of the points in p that are hidden by the object.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/surface_image_bounds.html", "surface_image_bounds.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "surface_image_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/surface_image_bounds.html#surface_image_bounds", "surface_image_bounds", 'routine in <a href="obj/tools/composite/surface_image_bounds.html">surface_image_bounds.pro</a>', "surface_image_bounds.pro", "", "surface_image_bounds", "	Computes latitude / longitude ranges visible in an image.    ", "slopAmount, in pixels, by which to expand the image size 		considered in the calcultaion.   border_pts_imImage points on the border of the image defined by cd.   latminMinimum latitude covered in image   latmaxMaximum latitude covered in image   lonminMinimum longitude covered in image   lonmaxMaximum longitude covered in image    statuscd     Camera descriptor   bx     Object descriptor (subclass of BODY)    ", "NV/LIB/TOOLS/COMPOSITE", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/surface_intersect.html", "surface_intersect.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "surface_intersect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/surface_intersect.html#surface_intersect", "surface_intersect", 'routine in <a href="obj/tools/composite/surface_intersect.html">surface_intersect.pro</a>', "surface_intersect.pro", "", "surface_intersect", "	Computes the intersection of rays with surface objects.    ", "hitnearfarbxArray (nt) of any subclass of BODY descriptors with 		the expected surface parameters.   vArray (nv,3,nt) giving ray origins in the BODY frame.   rArray (nv,3,nt) giving ray directions in the BODY frame.    ", "NV/LIB/TOOLS/COMPOSITE", " 	Written by:	Spitale, 7/2015   	Array (2*nv,3,nt) of points in the BODY frame, where 	int_pts[0:nv-1,*,*] correspond to the near-side intersections 	and int_pts[nv:2*nv-1,*,1] correspond to the far side.  Zero 	vector is returned for points with no solution.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/surface_normal.html", "surface_normal.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "surface_normal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/surface_normal.html#surface_normal", "surface_normal", 'routine in <a href="obj/tools/surface_normal.html">surface_normal.pro</a>', "surface_normal.pro", "", "surface_normal", "	Computes the normal at points on a surface.    ", "frame_bd Frame descriptor, if required for bx.   north    Passed to dsk_surface_normal.  Causes surface normal 	           to point north regardless of observer position.   bxArray (nt) of any subclass of BODY descriptors with 		the expected surface parameters.   vArray (nv,3,nt) giving observer positions in the BODY frame.   rArray (nv,3,nt) giving surface positions in the BODY frame.    ", "NV/LIB/TOOLS/COMPOSITE", " 	Written by:	Spitale, 7/2015   	Array (nv, 3, nt) of surface unit normals in the BODY frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/surface_normal.html", "surface_normal.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "surface_normal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/surface_normal.html#surface_normal", "surface_normal", 'routine in <a href="obj/tools/composite/surface_normal.html">surface_normal.pro</a>', "surface_normal.pro", "", "surface_normal", "	Computes the normal at points on a surface.    ", "north    Passed to dsk_surface_normal.  Causes surface normal 	           to point north regardless of observer position.   bxArray (nt) of any subclass of BODY descriptors with 		the expected surface parameters.   vArray (nv,3,nt) giving observer positions in the BODY frame.   rArray (nv,3,nt) giving surface positions in the BODY frame.    ", "NV/LIB/TOOLS/COMPOSITE", " 	Written by:	Spitale, 7/2015   	Array (nv, 3, nt) of surface unit normals in the BODY frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/surface_to_body.html", "surface_to_body.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "surface_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/surface_to_body.html#surface_to_body", "surface_to_body", 'routine in <a href="obj/tools/composite/surface_to_body.html">surface_to_body.pro</a>', "surface_to_body.pro", "", "surface_to_body", "       Transforms points in any surface coordinate system to body 	coordinates.    ", "bx     Array of nt object descriptors (subclass of BODY).   p", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of body coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/surface_to_degrees.html", "surface_to_degrees.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "surface_to_degrees.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/surface_to_degrees.html#surface_to_degrees", "surface_to_degrees", 'routine in <a href="obj/tools/surface_to_degrees.html">surface_to_degrees.pro</a>', "surface_to_degrees.pro", "", "surface_to_degrees", "       Converts angular part of surface vectors from radians to degrees    ", "v      An array of surface vectors (nv,3,nt).   ", "NV/LIB/TOOLS", "       Array of vectors (nv,3,nt)   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/surface_to_image.html", "surface_to_image.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "surface_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/surface_to_image.html#surface_to_image", "surface_to_image", 'routine in <a href="obj/tools/composite/surface_to_image.html">surface_to_image.pro</a>', "surface_to_image.pro", "", "surface_to_image", "       Transforms points in any surface coordinate system to image 	coordinates.    ", "body_ptsvalidcd     Array of nt camera or map descriptors.   bx     Array of nt object descriptors (subclass of BODY).   p", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/surface_to_map.html", "surface_to_map.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "surface_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/surface_to_map.html#surface_to_map", "surface_to_map", 'routine in <a href="obj/tools/composite/surface_to_map.html">surface_to_map.pro</a>', "surface_to_map.pro", "", "surface_to_map", "       Transforms points in any surface coordinate system to map 	coordinates.    ", "md     Array of nt map descriptors.   bx     Array of nt object descriptors (subclass of BODY.   surface_pts      Array (nv x 3 x nt) of surface points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of map coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/synth_image.html", "synth_image.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "synth_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/synth_image.html#synth_image", "synth_image", 'routine in <a href="obj/tools/synth_image.html">synth_image.pro</a>', "synth_image.pro", "", "synth_image", "", "rdcdpdsund", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/composite/ta_to_az.html", "ta_to_az.pro", '.pro file in <a href="obj/tools/composite/dir-overview.html">obj/tools/composite/ directory</a>', "ta_to_az.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/composite/ta_to_az.html#ta_to_az", "ta_to_az", 'routine in <a href="obj/tools/composite/ta_to_az.html">ta_to_az.pro</a>', "ta_to_az.pro", "", "ta_to_az", "	Computes azimuths relative to a given observer descriptor.    ", "taLongitude.   dkxDisk descriptor.   odObject descriptor (subclass of BODY) describing the observer.   ", "NV/LIB/TOOLS/COMPOSITE", "       An array of azimuths.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("obj/tools/target_altaz.html", "target_altaz.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "target_altaz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/target_altaz.html#target_altaz", "target_altaz", 'routine in <a href="obj/tools/target_altaz.html">target_altaz.pro</a>', "target_altaz.pro", "", "target_altaz", "	Computes altitude/azimuth of a target relative to a point on or near the 	surface of a globe.   ", "bxArray (nt) of any subclass of BODY giving the target.   pdlatLatitude of observer wrt gbx.   lonLongitude of observer wrt gbx.   altAltitude of observer wrt gbx.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Vector from observer to target in the altaz system.    ");
  
  

libdata[libdataItem++] = new Array("obj/dat/tr_keyword_value.html", "tr_keyword_value.pro", '.pro file in <a href="obj/dat/dir-overview.html">obj/dat/ directory</a>', "tr_keyword_value.pro", "", "", "	Looks up a keyword in the data descriptor-stored keyword/value pairs.    ", "", "          -1", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("obj/dat/tr_keyword_value.html#trkv_match", "trkv_match", 'routine in <a href="obj/dat/tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "trkv_match", "", "valuekvikeyword", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/tr_keyword_value.html#trkv_parse", "trkv_parse", 'routine in <a href="obj/dat/tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "trkv_parse", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/dat/tr_keyword_value.html#tr_keyword_value", "tr_keyword_value", 'routine in <a href="obj/dat/tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "tr_keyword_value", "", "ddkeyword", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/tvxmap.html", "tvxmap.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "tvxmap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/tvxmap.html#tvxmap", "tvxmap", 'routine in <a href="obj/tools/tvxmap.html">tvxmap.pro</a>', "tvxmap.pro", "", "tvxmap", "", "colorfndatamaxminradiusweightbinoffset_xmap_ptd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("obj/tools/warp_cp.html", "warp_cp.pro", '.pro file in <a href="obj/tools/dir-overview.html">obj/tools/ directory</a>', "warp_cp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("obj/tools/warp_cp.html#wcp_add_quad", "wcp_add_quad", 'routine in <a href="obj/tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_add_quad", "", "triijquadnquadqtrip0", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/warp_cp.html#wcp_longest_side", "wcp_longest_side", 'routine in <a href="obj/tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_longest_side", "", "p0tripq", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/warp_cp.html#wcp_requadrangulate", "wcp_requadrangulate", 'routine in <a href="obj/tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_requadrangulate", "", "p0triqtri", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/warp_cp.html#wcp_map_quad_coords", "wcp_map_quad_coords", 'routine in <a href="obj/tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_map_quad_coords", "", "x0y0p0p1quadx1y1", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/warp_cp.html#wcp_map_quad", "wcp_map_quad", 'routine in <a href="obj/tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_map_quad", "", "cdinterpimagep0p1quadtriqtrisize", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/warp_cp.html#wcp_map_tri_coords", "wcp_map_tri_coords", 'routine in <a href="obj/tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_map_tri_coords", "", "x0y0p0p1trix1y1", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/warp_cp.html#wcp_map_tri", "wcp_map_tri", 'routine in <a href="obj/tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_map_tri", "", "cdimagep0p1trisize", "          -1", "");
  
  libdata[libdataItem++] = new Array("obj/tools/warp_cp.html#warp_cp", "warp_cp", 'routine in <a href="obj/tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "warp_cp", "", "cdsizequadinterpimagep0p1", "          -1", "");
  
  

