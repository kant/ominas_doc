/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "OMINAS API Documentation";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("glb/_glb_get_surface_normal_body.html", "_glb_get_surface_normal_body.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "_glb_get_surface_normal_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/_glb_get_surface_normal_body.html#_glb_get_surface_normal_body", "_glb_get_surface_normal_body", 'routine in <a href="glb/_glb_get_surface_normal_body.html">_glb_get_surface_normal_body.pro</a>', "_glb_get_surface_normal_body.pro", "", "_glb_get_surface_normal_body", "	Computes the surface normals of a GLOBE object at the given 	body-frame positions.  This is an internal routine.    ", "nonormIf set, the returned vectors are not normalized.   _gbdArray (nt) of GLOBE structures.   rArray (nv,3) of surface positions in the BODY frame.    ", "NV/LIB/GLB", " 	Written by:	Spitale, 6/2016   	Array (nv, 3, nt) of surface unit normals in the BODY frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("pnt/_pnt_apply_condition.html", "_pnt_apply_condition.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "_pnt_apply_condition.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/_pnt_apply_condition.html#_pnt_apply_condition", "_pnt_apply_condition", 'routine in <a href="pnt/_pnt_apply_condition.html">_pnt_apply_condition.pro</a>', "_pnt_apply_condition.pro", "", "_pnt_apply_condition", "	Selects point in POINT structures based on a given condition structure.    ", "_psconditionCondition structure to compare against the flags 			contained in _ps.  			The condition structure is organized as follows: 			  field	   values 			  -----------------------------------------------------  ", "NV/SYS/PS", "  	Spitale, 11/2015   	Condition structure corresponding to the given keyword.    STATUS: 	Complete    SEE ALSO: pnt_points, pnt_vectors, pnt_data    ");
  
  

libdata[libdataItem++] = new Array("pnt/_pnt_resize.html", "_pnt_resize.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "_pnt_resize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/_pnt_resize.html#_pnt_resize", "_pnt_resize", 'routine in <a href="pnt/_pnt_resize.html">_pnt_resize.pro</a>', "_pnt_resize.pro", "", "_pnt_resize", "	Resizes a POINT structure.  Arrays are padded with zeroes or truncated 	as needed.    ", "nvnt_ptd	POINT struct.  Note this is an actual POINT structure 			rather than an object, as this routine is only 			meant to be called internally.   ", "NV/SYS/PS", " 	Written by:	Spitale		12/2015   ");
  
  

libdata[libdataItem++] = new Array("tools/abcorr.html", "abcorr.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "abcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/abcorr.html#abcorr", "abcorr", 'routine in <a href="tools/abcorr.html">abcorr.pro</a>', "abcorr.pro", "", "abcorr", "	Performs stellar aberration and light-travel-time corrections.    ", "citerateepsilonfastobs_bxArray(nt) of any subclass of BODY describing the targets.   targ_bx", "NV/LIB/TOOLS", "       Written by:     Spitale   ");
  
  

libdata[libdataItem++] = new Array("arr/arr_create_descriptors.html", "arr_create_descriptors.pro", '.pro file in <a href="arr/dir-overview.html">arr/ directory</a>', "arr_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("arr/arr_create_descriptors.html#arr_create_descriptors", "arr_create_descriptors", 'routine in <a href="arr/arr_create_descriptors.html">arr_create_descriptors.pro</a>', "arr_create_descriptors.pro", "", "arr_create_descriptors", "	Init method for the ARRAY class.    ", "crdCore descriptor(s) to pass to cor_create_descriptors.   ardStation descriptor(s) to initialize, instead of creating new 		ones.   abbrevusernametasksudataunameprimaryArray (n) of primary strings.   surface_ptsn     Number of array descriptors.   end_keywords", "NV/LIB/arr", "       Written by:     Spitale  	Adapted by:	Spitale, 5/2016          An array (n) of array descriptors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("arr/arr_primary.html", "arr_primary.pro", '.pro file in <a href="arr/dir-overview.html">arr/ directory</a>', "arr_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("arr/arr_primary.html#arr_primary", "arr_primary", 'routine in <a href="arr/arr_primary.html">arr_primary.pro</a>', "arr_primary.pro", "", "arr_primary", "	Returns the primary string for each given array descriptor.    ", "noeventard Array (nt) of ARRAY descriptors.   ", "NV/LIB/arr", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Primary string associated with each given array descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("arr/arr_replicate.html", "arr_replicate.pro", '.pro file in <a href="arr/dir-overview.html">arr/ directory</a>', "arr_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("arr/arr_replicate.html#arr_replicate", "arr_replicate", 'routine in <a href="arr/arr_replicate.html">arr_replicate.pro</a>', "arr_replicate.pro", "", "arr_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "ard Station descriptor.   dim Dimensions of the result.   ", "NV/LIB/arr", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("arr/arr_set_primary.html", "arr_set_primary.pro", '.pro file in <a href="arr/dir-overview.html">arr/ directory</a>', "arr_set_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("arr/arr_set_primary.html#arr_set_primary", "arr_set_primary", 'routine in <a href="arr/arr_set_primary.html">arr_set_primary.pro</a>', "arr_set_primary.pro", "", "arr_set_primary", "	Replaces the primary string in each given array descriptor.    ", "noeventardArray (nt) of ARRAY descriptors.   primaryArray (nt) of primary strings.   ", "NV/LIB/arr", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("arr/arr_set_surface_pts.html", "arr_set_surface_pts.pro", '.pro file in <a href="arr/dir-overview.html">arr/ directory</a>', "arr_set_surface_pts.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("arr/arr_set_surface_pts.html#arr_set_surface_pts", "arr_set_surface_pts", 'routine in <a href="arr/arr_set_surface_pts.html">arr_set_surface_pts.pro</a>', "arr_set_surface_pts.pro", "", "arr_set_surface_pts", "	Replaces the surface_pts vector in each given array descriptor.    ", "noeventardArray (nt) of ARRAY descriptors.   surface_ptsArray (nv,3,nt) of surface_pts vectors.   ", "NV/LIB/arr", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("arr/arr_surface_pts.html", "arr_surface_pts.pro", '.pro file in <a href="arr/dir-overview.html">arr/ directory</a>', "arr_surface_pts.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("arr/arr_surface_pts.html#arr_surface_pts", "arr_surface_pts", 'routine in <a href="arr/arr_surface_pts.html">arr_surface_pts.pro</a>', "arr_surface_pts.pro", "", "arr_surface_pts", "	Returns the surface_pts vector for each given array descriptor.    ", "noeventard Array (nt) of ARRAY descriptors.   ", "NV/LIB/arr", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) of surface_pts vectors associated with each given 	array descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/best_radial_scale_feat.html", "best_radial_scale_feat.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "best_radial_scale_feat.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/best_radial_scale_feat.html#best_radial_scale_feat", "best_radial_scale_feat", 'routine in <a href="tools/best_radial_scale_feat.html">best_radial_scale_feat.pro</a>', "best_radial_scale_feat.pro", "", "best_radial_scale_feat", "", "radminradmaxlonminlonmaxpp_minpp_maxpp0resperpcdrdpd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("bod/bod_avel.html", "bod_avel.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_avel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_avel.html#bod_avel", "bod_avel", 'routine in <a href="bod/bod_avel.html">bod_avel.pro</a>', "bod_avel.pro", "", "bod_avel", "	Returns the angular velocity for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   	Angular velocity value associated with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_body_to_inertial.html", "bod_body_to_inertial.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_body_to_inertial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_body_to_inertial.html#bod_body_to_inertial", "bod_body_to_inertial", 'routine in <a href="bod/bod_body_to_inertial.html">bod_body_to_inertial.pro</a>', "bod_body_to_inertial.pro", "", "bod_body_to_inertial", "	Transforms the given column vectors from the body coordinate 	system to the inertial coordinate system.    ", "camvecsbdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   	Array (nv,3,nt) of column vectors in the bx inertial frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_body_to_inertial_pos.html", "bod_body_to_inertial_pos.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_body_to_inertial_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_body_to_inertial_pos.html#bod_body_to_inertial_pos", "bod_body_to_inertial_pos", 'routine in <a href="bod/bod_body_to_inertial_pos.html">bod_body_to_inertial_pos.pro</a>', "bod_body_to_inertial_pos.pro", "", "bod_body_to_inertial_pos", "       Transforms the given column position vectors from the body        coordinate system to the inertial coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998          Array (nv,3,nt) of column position vectors in the inertial        frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_body_to_inertial_vel.html", "bod_body_to_inertial_vel.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_body_to_inertial_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_body_to_inertial_vel.html#bod_body_to_inertial_vel", "bod_body_to_inertial_vel", 'routine in <a href="bod/bod_body_to_inertial_vel.html">bod_body_to_inertial_vel.pro</a>', "bod_body_to_inertial_vel.pro", "", "bod_body_to_inertial_vel", "       Transforms the given column velocity vectors from the body        coordinate system to the inertial coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998          Array (nv,3,nt) of column velocity vectors in the inertial        frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_body_to_radec.html", "bod_body_to_radec.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_body_to_radec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_body_to_radec.html#bod_body_to_radec", "bod_body_to_radec", 'routine in <a href="bod/bod_body_to_radec.html">bod_body_to_radec.pro</a>', "bod_body_to_radec.pro", "", "bod_body_to_radec", "       Transforms the given column vectors from the body coordinate        system to the RA/DEC coordinate system associated to that        body.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998          Array (nv,3,nt) of column vectors in the bx radec frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_body_to_radec_vel.html", "bod_body_to_radec_vel.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_body_to_radec_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_body_to_radec_vel.html#bod_body_to_radec_vel", "bod_body_to_radec_vel", 'routine in <a href="bod/bod_body_to_radec_vel.html">bod_body_to_radec_vel.pro</a>', "bod_body_to_radec_vel.pro", "", "bod_body_to_radec_vel", "       Transforms the given column velocity vectors from the body coordinate        system to the RA/DEC coordinate system associated with that body.    ", "bdrv", "NV/LIB/BOD", " 	Written by:	Spitale, 7/2015          Array (nv,3,nt) of column vectors in the bx radec frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_create_descriptors.html", "bod_create_descriptors.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_create_descriptors.html#bod_create_descriptors", "bod_create_descriptors", 'routine in <a href="bod/bod_create_descriptors.html">bod_create_descriptors.pro</a>', "bod_create_descriptors.pro", "", "bod_create_descriptors", "	Init method for the BODY class.    ", "crdbdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarraynNumber of descriptors to create.   end_keywords", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016  	Newly created or or freshly initialized body descriptors, depending 	on the presence of the bd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_dlibdt.html", "bod_dlibdt.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_dlibdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_dlibdt.html#bod_dlibdt", "bod_dlibdt", 'routine in <a href="bod/bod_dlibdt.html">bod_dlibdt.pro</a>', "bod_dlibdt.pro", "", "bod_dlibdt", "       Returns the frequency of each libration vector for each given        body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998          Values of the frequency of each libration vector associated        with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_evolve.html", "bod_evolve.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_evolve.html#bod_evolve", "bod_evolve", 'routine in <a href="bod/bod_evolve.html">bod_evolve.pro</a>', "bod_evolve.pro", "", "bod_evolve", "	Computes new body descriptors at the given time offsets from the 	given body descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given body 	descriptor.    ", "nodv If set, derivatives will not be evolved.    bddt Time offset.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   	Array (nbd,ndt) of newly allocated descriptors, of class BODY, 	evolved by time dt, where nbd is the number of bx, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_get_radec_ranges.html", "bod_get_radec_ranges.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_get_radec_ranges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_get_radec_ranges.html#bod_get_radec_ranges", "bod_get_radec_ranges", 'routine in <a href="bod/bod_get_radec_ranges.html">bod_get_radec_ranges.pro</a>', "bod_get_radec_ranges.pro", "", "bod_get_radec_ranges", "	Returns ranges of valid  radec coordinates for the given BODY object.    ", "bd", "NV/LIB/BOD", " 	Written by:	Spitale   	Array (2 x 3) giving the ranges in radius, RA and DEC.    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_inertial.html", "bod_inertial.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_inertial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_inertial.html#bod_inertial", "bod_inertial", 'routine in <a href="bod/bod_inertial.html">bod_inertial.pro</a>', "bod_inertial.pro", "", "bod_inertial", "	Returns body descriptors defining te inertial coordinate system.    ", "nt", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Body descriptor defining the inertial frame.  Note this descriptor is 	not allocated on the heap, so it should not be freed by the caller.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_inertial_to_body.html", "bod_inertial_to_body.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_inertial_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_inertial_to_body.html#bod_inertial_to_body", "bod_inertial_to_body", 'routine in <a href="bod/bod_inertial_to_body.html">bod_inertial_to_body.pro</a>', "bod_inertial_to_body.pro", "", "bod_inertial_to_body", "	Transforms the given column vectors from the inertial coordinate 	system to the body coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) of column vectors in the bx body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_inertial_to_body_pos.html", "bod_inertial_to_body_pos.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_inertial_to_body_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_inertial_to_body_pos.html#bod_inertial_to_body_pos", "bod_inertial_to_body_pos", 'routine in <a href="bod/bod_inertial_to_body_pos.html">bod_inertial_to_body_pos.pro</a>', "bod_inertial_to_body_pos.pro", "", "bod_inertial_to_body_pos", "       Transforms the given column position vectors from the inertial        coordinate system to the body coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column position vectors in the bx body        frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_inertial_to_body_vel.html", "bod_inertial_to_body_vel.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_inertial_to_body_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_inertial_to_body_vel.html#bod_inertial_to_body_vel", "bod_inertial_to_body_vel", 'routine in <a href="bod/bod_inertial_to_body_vel.html">bod_inertial_to_body_vel.pro</a>', "bod_inertial_to_body_vel.pro", "", "bod_inertial_to_body_vel", "       Transforms the given column velocity vectors from the inertial        coordinate system to the body coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column velocity vectors in the bx body        frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_lib.html", "bod_lib.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_lib.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_lib.html#bod_lib", "bod_lib", 'routine in <a href="bod/bod_lib.html">bod_lib.pro</a>', "bod_lib.pro", "", "bod_lib", "       Returns the phase of the libration vector at body time for        each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Phase of the libraton vectors at body time associated with        each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_libv.html", "bod_libv.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_libv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_libv.html#bod_libv", "bod_libv", 'routine in <a href="bod/bod_libv.html">bod_libv.pro</a>', "bod_libv.pro", "", "bod_libv", "	Returns the libration vector for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Libration vector associated with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_ndv.html", "bod_ndv.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_ndv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_ndv.html#bod_ndv", "bod_ndv", 'routine in <a href="bod/bod_ndv.html">bod_ndv.pro</a>', "bod_ndv.pro", "", "bod_ndv", "	Returns an integer indicating the maximum number of time derivatives 	allowed in the vel and avel fields of the body descriptor.  This number 	can be adjusted using the environment variable 'BOD_NDV'.  The default 	is 4.    ", "", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   	Current ndv value.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_opaque.html", "bod_opaque.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_opaque.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_opaque.html#bod_opaque", "bod_opaque", 'routine in <a href="bod/bod_opaque.html">bod_opaque.pro</a>', "bod_opaque.pro", "", "bod_opaque", "	Returns the opaque value for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Opaque value associated with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_orient.html", "bod_orient.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_orient.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_orient.html#bod_orient", "bod_orient", 'routine in <a href="bod/bod_orient.html">bod_orient.pro</a>', "bod_orient.pro", "", "bod_orient", "	Returns the orientation matrix for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Orientation matrix associated with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_orientt.html", "bod_orientt.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_orientt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_orientt.html#bod_orientT", "bod_orientT", 'routine in <a href="bod/bod_orientt.html">bod_orientt.pro</a>', "bod_orientt.pro", "", "bod_orientT", "	Returns the transpose of the orientation matrix for each given body 	descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Transpose of the orientation matrix associated with each given body 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_pos.html", "bod_pos.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_pos.html#bod_pos", "bod_pos", 'routine in <a href="bod/bod_pos.html">bod_pos.pro</a>', "bod_pos.pro", "", "bod_pos", "       Returns the position of body center (in the inertial frame)        for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Position of body center (in the inertial frame) associated        with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_radec_to_body.html", "bod_radec_to_body.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_radec_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_radec_to_body.html#bod_radec_to_body", "bod_radec_to_body", 'routine in <a href="bod/bod_radec_to_body.html">bod_radec_to_body.pro</a>', "bod_radec_to_body.pro", "", "bod_radec_to_body", "	Transforms the given column vectors from the RA/DEC coordinate        system associated to the body to the body coordinate system.    ", "bdv", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) of column vectors in the bx body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_radec_to_body_vel.html", "bod_radec_to_body_vel.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_radec_to_body_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_radec_to_body_vel.html#bod_radec_to_body_vel", "bod_radec_to_body_vel", 'routine in <a href="bod/bod_radec_to_body_vel.html">bod_radec_to_body_vel.pro</a>', "bod_radec_to_body_vel.pro", "", "bod_radec_to_body_vel", "	Transforms the given column velocity vectors from the RA/DEC coordinate        system associated to the body to the body coordinate system.    ", "bdrv", "NV/LIB/BOD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) of column velocity vectors in the bx body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_recenter.html", "bod_recenter.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_recenter.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_recenter.html#bod_recenter", "bod_recenter", 'routine in <a href="bod/bod_recenter.html">bod_recenter.pro</a>', "bod_recenter.pro", "", "bod_recenter", "	Transforms a body descriptor into another body frame.    ", "bxDescriptor to transform, array (nt) of any subclass of BODY.   bx0Frame to transform into, array (nt) of any subclass of BODY.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_reorient.html", "bod_reorient.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_reorient.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_reorient.html#bod_reorient", "bod_reorient", 'routine in <a href="bod/bod_reorient.html">bod_reorient.pro</a>', "bod_reorient.pro", "", "bod_reorient", "	Rotates the orientation matrix of each body such that the specified 	axis vector is parallel to the given vector.    ", "bxArray (nt) of any subclass of BODY.   ii_vArray (nv,3,nt) of column vectors to align with the 		each reference axis.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_replicate.html", "bod_replicate.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_replicate.html#bod_replicate", "bod_replicate", 'routine in <a href="bod/bod_replicate.html">bod_replicate.pro</a>', "bod_replicate.pro", "", "bod_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "bddim Dimensions of the result.   ", "NV/LIB/BOD", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_rotate.html", "bod_rotate.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_rotate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_rotate.html#bod_rotate", "bod_rotate", 'routine in <a href="bod/bod_rotate.html">bod_rotate.pro</a>', "bod_rotate.pro", "", "bod_rotate", "	Rotates a body about one its axes.    ", "axisbx 	Any subclass of BODY (nt).   _theta	Angle of rotation (nt).   ", "NV/LIB/BOD", " 	Written by:	Spitale, 2/2014  	Adapted by:	Spitale, 5/2016   	NONE    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_set_avel.html", "bod_set_avel.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_set_avel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_set_avel.html#bod_set_avel", "bod_set_avel", 'routine in <a href="bod/bod_set_avel.html">bod_set_avel.pro</a>', "bod_set_avel.pro", "", "bod_set_avel", "	Replaces the angular velocity vector of each given body descriptor.    ", "noeventbdavel Array (ndv,3,nt) of new angular velocity vectors.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_set_dlibdt.html", "bod_set_dlibdt.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_set_dlibdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_set_dlibdt.html#bod_set_dlibdt", "bod_set_dlibdt", 'routine in <a href="bod/bod_set_dlibdt.html">bod_set_dlibdt.pro</a>', "bod_set_dlibdt.pro", "", "bod_set_dlibdt", "       Replaces the frequency of each libration vector for each given        body descriptor.    ", "noeventbddlibdt Array (ndv,nt) of new frequencies.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_set_lib.html", "bod_set_lib.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_set_lib.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_set_lib.html#bod_set_lib", "bod_set_lib", 'routine in <a href="bod/bod_set_lib.html">bod_set_lib.pro</a>', "bod_set_lib.pro", "", "bod_set_lib", "       Replaces the phase of the libration vector at body time for        each given body descriptor.    ", "noeventbdlib Array (ndv,nt) of new phases of the libration vectors.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_set_libv.html", "bod_set_libv.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_set_libv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_set_libv.html#bod_set_libv", "bod_set_libv", 'routine in <a href="bod/bod_set_libv.html">bod_set_libv.pro</a>', "bod_set_libv.pro", "", "bod_set_libv", "	Replaces the libration vector of each given body descriptor.    ", "noeventbdlibv Array (ndv,3,nt) of new libration vectors.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_set_opaque.html", "bod_set_opaque.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_set_opaque.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_set_opaque.html#bod_set_opaque", "bod_set_opaque", 'routine in <a href="bod/bod_set_opaque.html">bod_set_opaque.pro</a>', "bod_set_opaque.pro", "", "bod_set_opaque", "	Replaces the opaque flag of each given body descriptor.    ", "noeventbdopaque", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_set_orient.html", "bod_set_orient.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_set_orient.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_set_orient.html#bod_set_orient", "bod_set_orient", 'routine in <a href="bod/bod_set_orient.html">bod_set_orient.pro</a>', "bod_set_orient.pro", "", "bod_set_orient", "	Replaces the orientation matrix of each given body descriptor.    ", "noeventbdorient Array (3,3,nt) of new orientation matrices.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_set_pos.html", "bod_set_pos.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_set_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_set_pos.html#bod_set_pos", "bod_set_pos", 'routine in <a href="bod/bod_set_pos.html">bod_set_pos.pro</a>', "bod_set_pos.pro", "", "bod_set_pos", "       Replaces the position of body center (in the inertial frame)        of each given body descriptor.    ", "noeventbdpos Array (1,3,nt) of new position vectors.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_set_time.html", "bod_set_time.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_set_time.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_set_time.html#bod_set_time", "bod_set_time", 'routine in <a href="bod/bod_set_time.html">bod_set_time.pro</a>', "bod_set_time.pro", "", "bod_set_time", "	Replaces the time of each given body descriptor.    ", "noeventbdtime New time value.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_set_vel.html", "bod_set_vel.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_set_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_set_vel.html#bod_set_vel", "bod_set_vel", 'routine in <a href="bod/bod_set_vel.html">bod_set_vel.pro</a>', "bod_set_vel.pro", "", "bod_set_vel", "       Replaces the velocity vector (of body center in the inertial        frame) of each given body descriptor.    ", "noeventbdvel Array (ndv,3,nt) of new velocity vectors.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("bod/bod_time.html", "bod_time.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_time.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_time.html#bod_time", "bod_time", 'routine in <a href="bod/bod_time.html">bod_time.pro</a>', "bod_time.pro", "", "bod_time", "	Returns the time for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Time value associated with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("bod/bod_vel.html", "bod_vel.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "bod_vel.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/bod_vel.html#bod_vel", "bod_vel", 'routine in <a href="bod/bod_vel.html">bod_vel.pro</a>', "bod_vel.pro", "", "bod_vel", "       Returns the velocity of body center (in the inertial frame)        for each given body descriptor.    ", "noeventbd", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Velocity of body center (in the inertial frame) associated        with each given body descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/body_size.html", "body_size.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "body_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/body_size.html#body_size", "body_size", 'routine in <a href="tools/composite/body_size.html">body_size.pro</a>', "body_size.pro", "", "body_size", "	Returns the sizes of the given bodies.    ", "bx     Globe or Disk descriptor; nt.    ", "NV/LIB/TOOLS/COMPOSITE", "	nt-element array giving the size of each body.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/body_to_image_pos.html", "body_to_image_pos.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "body_to_image_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/body_to_image_pos.html#body_to_image_pos", "body_to_image_pos", 'routine in <a href="tools/composite/body_to_image_pos.html">body_to_image_pos.pro</a>', "body_to_image_pos.pro", "", "body_to_image_pos", "       Transforms vectors in body coordinates to image coordinates    ", "inertial      Array (nv x 3 x nt) of Vectors in inertial coordinates.   validIndices of valid output points.    cd      Array of nt camera or map descriptors.   bx      Array of nt object descriptors, subclass of BODY.   v      Array (nv x 3 x nt) of position vectors.   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale          An array (2 x nv x nt) of points in image coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/body_to_surface.html", "body_to_surface.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "body_to_surface.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/body_to_surface.html#body_to_surface", "body_to_surface", 'routine in <a href="tools/composite/body_to_surface.html">body_to_surface.pro</a>', "body_to_surface.pro", "", "body_to_surface", "       Transforms points in body coordinates to sirface coordinates.    ", "bx     Array of nt object descriptors (subclass of BODY).   p", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of surface coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_body_to_focal.html", "cam_body_to_focal.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_body_to_focal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_body_to_focal.html#cam_body_to_focal", "cam_body_to_focal", 'routine in <a href="cam/cam_body_to_focal.html">cam_body_to_focal.pro</a>', "cam_body_to_focal.pro", "", "cam_body_to_focal", "       Transforms the given column vectors from the body coordinate        system to the camera focal plane coordinate system.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the camera focal plane frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_create_descriptors.html", "cam_create_descriptors.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_create_descriptors.html#cam_create_descriptors", "cam_create_descriptors", 'routine in <a href="cam/cam_create_descriptors.html">cam_create_descriptors.pro</a>', "cam_create_descriptors.pro", "", "cam_create_descriptors", "	Init method for the CAMERA class.    ", "crdbdcdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayfn_focal_to_imagefn_image_to_focalfn_data_pscaleoaxisexposuresizefn_psffiltersfn_body_to_imagenNumber of descriptors to create.   end_keywords", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created or or freshly initialized camera descriptors, depending 	on the presence of the cd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_evolve.html", "cam_evolve.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_evolve.html#cam_evolve", "cam_evolve", 'routine in <a href="cam/cam_evolve.html">cam_evolve.pro</a>', "cam_evolve.pro", "", "cam_evolve", "       Computes new camera descriptors at the given time offsets from        the given camera descriptors using the taylor series expansion        corresponding to the derivatives contained in the given camera        descriptor.    ", "nodv If set, velocities will not be evolved.    cd Array (ncd) of CAMERA descriptors.   dt Array (ndt) of time offsets.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (ncd,ndt) of newly allocated camera descriptors evolved        by time dt, where ncd is the number of cd, and ndt is the        number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_exposure.html", "cam_exposure.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_exposure.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_exposure.html#cam_exposure", "cam_exposure", 'routine in <a href="cam/cam_exposure.html">cam_exposure.pro</a>', "cam_exposure.pro", "", "cam_exposure", "       Returns the exposure duration of each given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Exposure duration associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_filters.html", "cam_filters.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_filters.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_filters.html#cam_filters", "cam_filters", 'routine in <a href="cam/cam_filters.html">cam_filters.pro</a>', "cam_filters.pro", "", "cam_filters", "	Returns the filter name(s) for a given camera descriptor.    ", "noeventcd Camera descriptor.   i", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Names of requested filters.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_fn_body_to_image.html", "cam_fn_body_to_image.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_fn_body_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_fn_body_to_image.html#cam_fn_body_to_image", "cam_fn_body_to_image", 'routine in <a href="cam/cam_fn_body_to_image.html">cam_fn_body_to_image.pro</a>', "cam_fn_body_to_image.pro", "", "cam_fn_body_to_image", "       Returns the name of the user-defined body --> image        transformation function for each given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016          Focal --> image transformation function associated with each        given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_fn_data_p.html", "cam_fn_data_p.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_fn_data_p.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_fn_data_p.html#cam_fn_data_p", "cam_fn_data_p", 'routine in <a href="cam/cam_fn_data_p.html">cam_fn_data_p.pro</a>', "cam_fn_data_p.pro", "", "cam_fn_data_p", "	For each given camera descriptor, returns the pointer to the        generic data intended to be used by the user-defined focal        <--> image transformation functions.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016          Pointer to user defined data associated with each given camera        descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_fn_focal_to_image.html", "cam_fn_focal_to_image.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_fn_focal_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_fn_focal_to_image.html#cam_fn_focal_to_image", "cam_fn_focal_to_image", 'routine in <a href="cam/cam_fn_focal_to_image.html">cam_fn_focal_to_image.pro</a>', "cam_fn_focal_to_image.pro", "", "cam_fn_focal_to_image", "       Returns the name of the user-defined focal --> image        transformation function for each given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016          Focal --> image transformation function associated with each        given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_fn_image_to_focal.html", "cam_fn_image_to_focal.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_fn_image_to_focal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_fn_image_to_focal.html#cam_fn_image_to_focal", "cam_fn_image_to_focal", 'routine in <a href="cam/cam_fn_image_to_focal.html">cam_fn_image_to_focal.pro</a>', "cam_fn_image_to_focal.pro", "", "cam_fn_image_to_focal", "       Returns the name of the user-defined image --> focal        transformation function for each given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016          Image --> focal transformation function associated with each        given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_fn_psf.html", "cam_fn_psf.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_fn_psf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_fn_psf.html#cam_fn_psf", "cam_fn_psf", 'routine in <a href="cam/cam_fn_psf.html">cam_fn_psf.pro</a>', "cam_fn_psf.pro", "", "cam_fn_psf", "	Returns the user-defined psf function for the given camera descriptor.    ", "noeventcd", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	PSF function associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_focal_to_body.html", "cam_focal_to_body.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_focal_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_focal_to_body.html#cam_focal_to_body", "cam_focal_to_body", 'routine in <a href="cam/cam_focal_to_body.html">cam_focal_to_body.pro</a>', "cam_focal_to_body.pro", "", "cam_focal_to_body", "       Transforms the given array of points from the camera focal        plane coordinate system to the body coordinate system.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_focal_to_image.html", "cam_focal_to_image.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_focal_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_focal_to_image.html#cam_focal_to_image", "cam_focal_to_image", 'routine in <a href="cam/cam_focal_to_image.html">cam_focal_to_image.pro</a>', "cam_focal_to_image.pro", "", "cam_focal_to_image", "	Transforms the given array of points in the focal plane        coordinate system to an array of points in the image        coordinate system using the fn_focal_to_image function of the        camera descriptor.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the image coordinate system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_focal_to_image_linear.html", "cam_focal_to_image_linear.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_focal_to_image_linear.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_focal_to_image_linear.html#cam_focal_to_image_linear", "cam_focal_to_image_linear", 'routine in <a href="cam/cam_focal_to_image_linear.html">cam_focal_to_image_linear.pro</a>', "cam_focal_to_image_linear.pro", "", "cam_focal_to_image_linear", "       Transforms the given array of points in the focal plane        coordinate system to an array of points in the image        coordinate system using a linear model that assumes that        distances in the image are proportional to angles in the focal        plane.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the image coordinate system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_focal_to_image_poly.html", "cam_focal_to_image_poly.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_focal_to_image_poly.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_focal_to_image_poly.html#cam_focal_to_image_poly", "cam_focal_to_image_poly", 'routine in <a href="cam/cam_focal_to_image_poly.html">cam_focal_to_image_poly.pro</a>', "cam_focal_to_image_poly.pro", "", "cam_focal_to_image_poly", "       Transforms the given array of points in the focal plane        coordinate system to an array of points in the image        coordinate system using a polynomial distortion model.   ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the image coordinate system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_focal_to_image_radial.html", "cam_focal_to_image_radial.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_focal_to_image_radial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_focal_to_image_radial.html#cam_focal_to_image_radial", "cam_focal_to_image_radial", 'routine in <a href="cam/cam_focal_to_image_radial.html">cam_focal_to_image_radial.pro</a>', "cam_focal_to_image_radial.pro", "", "cam_focal_to_image_radial", "       Transforms the given array of points in the focal plane        coordinate system to an array of points in the image        coordinate system using a radial distortion model.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the image coordinate system.    STATUS: 	**Incomplete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_get_poly_matrices.html", "cam_get_poly_matrices.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_get_poly_matrices.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_get_poly_matrices.html#cam_get_poly_matrices", "cam_get_poly_matrices", 'routine in <a href="cam/cam_get_poly_matrices.html">cam_get_poly_matrices.pro</a>', "cam_get_poly_matrices.pro", "", "cam_get_poly_matrices", "       Obtains the camera function data for the polynomial distortion model.   ", "cdArray (nt) of and subclass of CAMERA.   XXYYPPQQ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016           XX:     Polynominal distortion coefficients in x.         YY:     Polynominal distortion coefficients in y.         PP:     Inverse polynominal distortion coefficients in x.         QQ:     Inverse polynominal distortion coefficients in y.    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_get_radec_twist.html", "cam_get_radec_twist.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_get_radec_twist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_get_radec_twist.html#cam_get_radec_twist", "cam_get_radec_twist", 'routine in <a href="cam/cam_get_radec_twist.html">cam_get_radec_twist.pro</a>', "cam_get_radec_twist.pro", "", "cam_get_radec_twist", "       Computes camera Euler angles relative to the inertial frame.    ", "radectwistcd        Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	ra:	Array (nt) of RA angles.  	dec:	Array (nt) of DEC angles.  	twist:	Array (nt) of TWIST angles.    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_image_to_focal.html", "cam_image_to_focal.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_image_to_focal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_image_to_focal.html#cam_image_to_focal", "cam_image_to_focal", 'routine in <a href="cam/cam_image_to_focal.html">cam_image_to_focal.pro</a>', "cam_image_to_focal.pro", "", "cam_image_to_focal", "       Transforms the given array of points in the image coordinate        system to an array of points in the camera focal plane        coordinate system using the fn_image_to_focal function of the        camera descriptor.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the camera focal frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_image_to_focal_linear.html", "cam_image_to_focal_linear.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_image_to_focal_linear.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_image_to_focal_linear.html#cam_image_to_focal_linear", "cam_image_to_focal_linear", 'routine in <a href="cam/cam_image_to_focal_linear.html">cam_image_to_focal_linear.pro</a>', "cam_image_to_focal_linear.pro", "", "cam_image_to_focal_linear", "       Transforms the given array of points in the image coordinate        system to an array of points in the camera focal plane        coordinate system using a linear model that assumes that        distances in the image are proportional to angles in the focal        plane.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the camera focal frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_image_to_focal_poly.html", "cam_image_to_focal_poly.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_image_to_focal_poly.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_image_to_focal_poly.html#cam_image_to_focal_poly", "cam_image_to_focal_poly", 'routine in <a href="cam/cam_image_to_focal_poly.html">cam_image_to_focal_poly.pro</a>', "cam_image_to_focal_poly.pro", "", "cam_image_to_focal_poly", "       Transforms the given array of points in the image coordinate        system to an array of points in the camera focal plane        coordinate system using a polynomial distortion model.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the camera focal frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_image_to_focal_radial.html", "cam_image_to_focal_radial.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_image_to_focal_radial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_image_to_focal_radial.html#cam_image_to_focal_radial", "cam_image_to_focal_radial", 'routine in <a href="cam/cam_image_to_focal_radial.html">cam_image_to_focal_radial.pro</a>', "cam_image_to_focal_radial.pro", "", "cam_image_to_focal_radial", "       Transforms the given array of points in the image coordinate        system to an array of points in the camera focal plane        coordinate system using a radial distortion model.    ", "cd        Array (nt) of CAMERA descriptors.   v", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (2,nv,nt) of points in the camera focal frame.    STATUS: 	**Incomplete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_nfilters.html", "cam_nfilters.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_nfilters.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_nfilters.html#cam_nfilters", "cam_nfilters", 'routine in <a href="cam/cam_nfilters.html">cam_nfilters.pro</a>', "cam_nfilters.pro", "", "cam_nfilters", "	Returns an integer indicating the maximum number of filters allowed 	in the 'filters' fields of the camera descriptor.  This number can 	be adjusted using the environment variable 'CAM_NFILTERS'.  The default 	is 4.    ", "", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Current nfilters value.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_oaxis.html", "cam_oaxis.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_oaxis.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_oaxis.html#cam_oaxis", "cam_oaxis", 'routine in <a href="cam/cam_oaxis.html">cam_oaxis.pro</a>', "cam_oaxis.pro", "", "cam_oaxis", "       Returns the 2-element array giving the image coordinates (in        pixels) corresponding to the camera optic axis for each given        camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Oaxis array associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_origin.html", "cam_origin.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_origin.html#cam_origin", "cam_origin", 'routine in <a href="cam/cam_origin.html">cam_origin.pro</a>', "cam_origin.pro", "", "cam_origin", "       Returns the 2-element array giving the image coordinates (in        pixels) corresponding to the camera optic axis for each given        camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	origin array associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_psf.html", "cam_psf.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_psf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_psf.html#cam_psf", "cam_psf", 'routine in <a href="cam/cam_psf.html">cam_psf.pro</a>', "cam_psf.pro", "", "cam_psf", "	Computes a point-spread function.    	The function indicated by the fn_psf field of the camera descriptor 	is called and its return value is passed through to the caller of 	cam_psf.  If x and y widths are given instead of arrays, the PSF 	will be centered, and the grid spacing will be one pixel.    STATUS: 	Complete    ", "noeventcd Camera descriptor.   _x Array of x coordinates relative to the center of the PSF, 		 or a width in the x direction.   _y Array of y coordinates relative to the center of the PSF, 		 or a width in the y direction.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Point-spread function values at each point specified by the x and y 	arguments.    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_psf_attrib.html", "cam_psf_attrib.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_psf_attrib.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_psf_attrib.html#cam_psf_attrib", "cam_psf_attrib", 'routine in <a href="cam/cam_psf_attrib.html">cam_psf_attrib.pro</a>', "cam_psf_attrib.pro", "", "cam_psf_attrib", "	Computes attributes of a point-spread function.    ", "fwhmcd Camera descriptor.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	fwhm:	Full-width at half maximum of the point-spread function.    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_rebin.html", "cam_rebin.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_rebin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_rebin.html#cam_rebin", "cam_rebin", 'routine in <a href="cam/cam_rebin.html">cam_rebin.pro</a>', "cam_rebin.pro", "", "cam_rebin", "       Modifies the camera parameters to reflect a re-binning of the pixels.    ", "noeventcd    Array (nt) of CAMERA descriptors.   bin       Binning factor, can be non-integer.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_reorient.html", "cam_reorient.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_reorient.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_reorient.html#cam_reorient", "cam_reorient", 'routine in <a href="cam/cam_reorient.html">cam_reorient.pro</a>', "cam_reorient.pro", "", "cam_reorient", "       Repoints the camera orientiation matrix based on x,y, and theta 	image offsets.    ", "absoluteIf set, the dxy argument represents and abosolute image 		  position rather than an offset.   nsin_anglecos_anglecd0image_axisArray (2,1,nt) of image points corresponding to the 			rotation axis for each descriptor.   dxyArray (2,1,nt) of image offsets in x and y.   dtheta", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_replicate.html", "cam_replicate.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_replicate.html#cam_replicate", "cam_replicate", 'routine in <a href="cam/cam_replicate.html">cam_replicate.pro</a>', "cam_replicate.pro", "", "cam_replicate", "	Replicates the given camera descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "cd One CAMERA descriptor.   dim Dimensions of the result.   ", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_rescale.html", "cam_rescale.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_rescale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_rescale.html#cam_rescale", "cam_rescale", 'routine in <a href="cam/cam_rescale.html">cam_rescale.pro</a>', "cam_rescale.pro", "", "cam_rescale", "       Produces a new camera descriptor describing an image of the same 	angluar dimensions, but with a new scale, specified by camera scale.    ", "noeventcdArray (nt) of CAMERA descriptors to modify.   scaleArray (2,1,nt) of new camera scales.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_resize.html", "cam_resize.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_resize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_resize.html#cam_resize", "cam_resize", 'routine in <a href="cam/cam_resize.html">cam_resize.pro</a>', "cam_resize.pro", "", "cam_resize", "       Produces a new camera descriptor describing an image of the same 	angluar dimensions, but with a new scale, specified by image size.    ", "noeventcdArray (nt) of CAMERA descriptors to modify.   sizeArray (2,1,nt) of new image sizes.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_scale.html", "cam_scale.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_scale.html#cam_scale", "cam_scale", 'routine in <a href="cam/cam_scale.html">cam_scale.pro</a>', "cam_scale.pro", "", "cam_scale", "       Returns the 2-element array giving the camera scale        (radians/pixel) in each direction for each given camera        descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Scale array associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_exposure.html", "cam_set_exposure.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_exposure.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_exposure.html#cam_set_exposure", "cam_set_exposure", 'routine in <a href="cam/cam_set_exposure.html">cam_set_exposure.pro</a>', "cam_set_exposure.pro", "", "cam_set_exposure", "       Replaces the exposure duration for each given camera descriptor.    ", "noeventcd     Array (nt) of CAMERA descriptors.   exposure   Array (nt) of new exposure values.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_filters.html", "cam_set_filters.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_filters.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_filters.html#cam_set_filters", "cam_set_filters", 'routine in <a href="cam/cam_set_filters.html">cam_set_filters.pro</a>', "cam_set_filters.pro", "", "cam_set_filters", "	Sets the filter name(s) for a given camera descriptor.    ", "noeventcd Camera descriptor.   filteri", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_fn_data_p.html", "cam_set_fn_data_p.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_fn_data_p.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_fn_data_p.html#cam_set_fn_data_p", "cam_set_fn_data_p", 'routine in <a href="cam/cam_set_fn_data_p.html">cam_set_fn_data_p.pro</a>', "cam_set_fn_data_p.pro", "", "cam_set_fn_data_p", "       For each given camera descriptor, sets the pointer to the        generic data intended to be used by the user-defined focal        <--> image transformation functions.    ", "noeventcdArray (nt) of CAMERA descriptors.   fn_data_p", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_fn_focal_to_image.html", "cam_set_fn_focal_to_image.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_fn_focal_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_fn_focal_to_image.html#cam_set_fn_focal_to_image", "cam_set_fn_focal_to_image", 'routine in <a href="cam/cam_set_fn_focal_to_image.html">cam_set_fn_focal_to_image.pro</a>', "cam_set_fn_focal_to_image.pro", "", "cam_set_fn_focal_to_image", "       Sets the user-defined focal --> image transformation function        for the given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   fn_focal_to_image", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_fn_image_to_focal.html", "cam_set_fn_image_to_focal.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_fn_image_to_focal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_fn_image_to_focal.html#cam_set_fn_image_to_focal", "cam_set_fn_image_to_focal", 'routine in <a href="cam/cam_set_fn_image_to_focal.html">cam_set_fn_image_to_focal.pro</a>', "cam_set_fn_image_to_focal.pro", "", "cam_set_fn_image_to_focal", "       Sets the user-defined image --> focal transformation function        for the given camera descriptor.    ", "noeventcd Array (nt) of CAMERA descriptors.   fn_image_to_focal", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_fn_psf.html", "cam_set_fn_psf.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_fn_psf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_fn_psf.html#cam_set_fn_psf", "cam_set_fn_psf", 'routine in <a href="cam/cam_set_fn_psf.html">cam_set_fn_psf.pro</a>', "cam_set_fn_psf.pro", "", "cam_set_fn_psf", "	Sets the user-defined PSF function for the given camera descriptor.    ", "noeventcd Camera descriptor.   psf", "NV/LIB/CAM", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_oaxis.html", "cam_set_oaxis.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_oaxis.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_oaxis.html#cam_set_oaxis", "cam_set_oaxis", 'routine in <a href="cam/cam_set_oaxis.html">cam_set_oaxis.pro</a>', "cam_set_oaxis.pro", "", "cam_set_oaxis", "       Replaces the oaxis array for each given camera descriptor.    ", "noeventcdArray (nt) of CAMERA descriptors.   oaxisArray (2,nt) of new oaxis values.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_origin.html", "cam_set_origin.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_origin.html#cam_set_origin", "cam_set_origin", 'routine in <a href="cam/cam_set_origin.html">cam_set_origin.pro</a>', "cam_set_origin.pro", "", "cam_set_origin", "       Replaces the origin array for each given camera descriptor.    ", "noeventcdArray (nt) of CAMERA descriptors.   originArray (2,nt) of new origin values.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_poly_matrices.html", "cam_set_poly_matrices.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_poly_matrices.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_poly_matrices.html#cam_set_poly_matrices", "cam_set_poly_matrices", 'routine in <a href="cam/cam_set_poly_matrices.html">cam_set_poly_matrices.pro</a>', "cam_set_poly_matrices.pro", "", "cam_set_poly_matrices", "       Sets up the camera function data for the polynomial distortion model.   ", "noeventcdArray (nt) of and subclass of CAMERA.   XX    Polynominal distortion coefficients in x.   YY    Polynominal distortion coefficients in y.   PP    Inverse polynominal distortion coefficients in x.   QQ    Inverse polynominal distortion coefficients in y.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_scale.html", "cam_set_scale.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_scale.html#cam_set_scale", "cam_set_scale", 'routine in <a href="cam/cam_set_scale.html">cam_set_scale.pro</a>', "cam_set_scale.pro", "", "cam_set_scale", "       Replaces the scale array for each given camera descriptor.    ", "noeventcdArray (nt) of CAMERA descriptors.   scaleArray (2,nt) of new scale values.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_set_size.html", "cam_set_size.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_set_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_set_size.html#cam_set_size", "cam_set_size", 'routine in <a href="cam/cam_set_size.html">cam_set_size.pro</a>', "cam_set_size.pro", "", "cam_set_size", "       Replaces the size array for each given camera descriptor.    ", "noeventcd     Array (nt) of CAMERA descriptors.   size       Array (2,nt) of new size values.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/cam_size.html", "cam_size.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_size.html#cam_size", "cam_size", 'routine in <a href="cam/cam_size.html">cam_size.pro</a>', "cam_size.pro", "", "cam_size", "	Returns the image size (in pixels) for each given camera descriptor.    ", "noeventnxnycd Array (nt) of CAMERA descriptors.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Size array associated with each given camera descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cam/cam_subimage.html", "cam_subimage.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "cam_subimage.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/cam_subimage.html#cam_subimage", "cam_subimage", 'routine in <a href="cam/cam_subimage.html">cam_subimage.pro</a>', "cam_subimage.pro", "", "cam_subimage", "       Produces a new camera descriptor corresponding to dividing the 	associated image as specified.    ", "noeventcdArray (nt) of CAMERA descriptors to modify.   p0Starting corner of subimage.   sizeArray (2,1,nt) of image sizes.   ", "NV/LIB/CAM", " 	Written by:	Spitale, 4/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("tools/cd_to_radec_twist.html", "cd_to_radec_twist.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "cd_to_radec_twist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/cd_to_radec_twist.html#cd_to_radec_twist", "cd_to_radec_twist", 'routine in <a href="tools/cd_to_radec_twist.html">cd_to_radec_twist.pro</a>', "cd_to_radec_twist.pro", "", "cd_to_radec_twist", "       Computes Euler angles representing the orientation of a given 	camera descriptor.    ", "radectwistcd      Array (nv,3,nt) of camera descriptors.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          ra:	Right ascension relative to the inertial frame.  	dec:	Declination relative to the inertial frame.  	twist:	Twist angle relative to the inertial frame.    ");
  
  

libdata[libdataItem++] = new Array("arr/compile_arr.html", "compile_arr.pro", '.pro file in <a href="arr/dir-overview.html">arr/ directory</a>', "compile_arr.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("bod/compile_bod.html", "compile_bod.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "compile_bod.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("cam/compile_cam.html", "compile_cam.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "compile_cam.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/composite/compile_composite.html", "compile_composite.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "compile_composite.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("cor/compile_cor.html", "compile_cor.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "compile_cor.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("dsk/compile_dsk.html", "compile_dsk.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "compile_dsk.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("glb/compile_glb.html", "compile_glb.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "compile_glb.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/icv/compile_icv.html", "compile_icv.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "compile_icv.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/ipt/compile_ipt.html", "compile_ipt.pro", '.pro file in <a href="tools/ipt/dir-overview.html">tools/ipt/ directory</a>', "compile_ipt.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./compile_lib.html", "compile_lib.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "compile_lib.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("map/compile_map.html", "compile_map.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "compile_map.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/orb/compile_orb.html", "compile_orb.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "compile_orb.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/photometry/compile_photometry.html", "compile_photometry.pro", '.pro file in <a href="tools/photometry/dir-overview.html">tools/photometry/ directory</a>', "compile_photometry.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/pht/compile_pht.html", "compile_pht.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "compile_pht.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("plt/compile_plt.html", "compile_plt.pro", '.pro file in <a href="plt/dir-overview.html">plt/ directory</a>', "compile_plt.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("rng/compile_rng.html", "compile_rng.pro", '.pro file in <a href="rng/dir-overview.html">rng/ directory</a>', "compile_rng.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("sld/compile_sld.html", "compile_sld.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "compile_sld.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("stn/compile_stn.html", "compile_stn.pro", '.pro file in <a href="stn/dir-overview.html">stn/ directory</a>', "compile_stn.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("str/compile_str.html", "compile_str.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "compile_str.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/compile_tools.html", "compile_tools.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "compile_tools.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/construct_mosaic.html", "construct_mosaic.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "construct_mosaic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_combine_edge1", "cm_combine_edge1", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_edge1", "", "mapsdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_combine_edge", "cm_combine_edge", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_edge", "", "mapsdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_combine_emm", "cm_combine_emm", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_emm", "", "mapsdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_combine_emm5", "cm_combine_emm5", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_emm5", "", "mapsdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_wt_edge1", "cm_wt_edge1", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_wt_edge1", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_wt_edge", "cm_wt_edge", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_wt_edge", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_combine_median", "cm_combine_median", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_median", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_combine_sum", "cm_combine_sum", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_sum", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_combine_mean", "cm_combine_mean", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_mean", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_combine_overlay", "cm_combine_overlay", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_combine_overlay", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_wt_rescale", "cm_wt_rescale", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_wt_rescale", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#cm_wt_emm", "cm_wt_emm", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "cm_wt_emm", "", "mapsdataaux", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/construct_mosaic.html#construct_mosaic", "construct_mosaic", 'routine in <a href="tools/construct_mosaic.html">construct_mosaic.pro</a>', "construct_mosaic.pro", "", "construct_mosaic", "", "combine_fnwt_fnsdataauxmaps", "          -1", "");
  
  

libdata[libdataItem++] = new Array("cor/cor_abbrev.html", "cor_abbrev.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_abbrev.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_abbrev.html#cor_abbrev", "cor_abbrev", 'routine in <a href="cor/cor_abbrev.html">cor_abbrev.pro</a>', "cor_abbrev.pro", "", "cor_abbrev", "	Returns the abbrieviation for the given object class.    ", "noeventcrd", "NV/LIB/COR", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	String giving the standard abbreviation for the given class, 	e.g., 'BOD'.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("cor/cor_abbrev.html#_cor_abbrev", "_cor_abbrev", 'routine in <a href="cor/cor_abbrev.html">cor_abbrev.pro</a>', "cor_abbrev.pro", "", "_cor_abbrev", "", "xd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("cor/cor_add_task.html", "cor_add_task.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_add_task.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_add_task.html#cor_add_task", "cor_add_task", 'routine in <a href="cor/cor_add_task.html">cor_add_task.pro</a>', "cor_add_task.pro", "", "cor_add_task", "	Adds a task to the descriptor task list.    ", "noeventcrdtask String giving the name of a program that modified the 		 descriptor.   ", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cor/cor_class.html", "cor_class.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_class.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_class.html#cor_class", "cor_class", 'routine in <a href="cor/cor_class.html">cor_class.pro</a>', "cor_class.pro", "", "cor_class", "	Returns the class name for the given object class.    ", "xd Descriptor.   ", "NV/LIB/COR", " 	Written by:	Spitale		4/2016   	String giving the class name for the given class, without the OMINAS_ 	prefix.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_create_descriptors.html", "cor_create_descriptors.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_create_descriptors.html#cor_create_descriptors", "cor_create_descriptors", 'routine in <a href="cor/cor_create_descriptors.html">cor_create_descriptors.pro</a>', "cor_create_descriptors.pro", "", "cor_create_descriptors", "	Init method for the CORE class.    ", "crdCore descriptor(s) to initialize, instead of creating a new one.   abbrevusernametasksudataunamen Number of descriptors to create.   end_keywords", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created or or freshly initialized core descriptors depending 	on the presence of the crd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_dereference.html", "cor_dereference.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_dereference.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_dereference.html#cor_dereference", "cor_dereference", 'routine in <a href="cor/cor_dereference.html">cor_dereference.pro</a>', "cor_dereference.pro", "", "cor_dereference", "	Turns an array of pointers to descriptors into an array of descriptors.    ", "xdArray of pointers to an arbitrary type of descriptor.   ", "NV/SYS/COR", " 	Written by:	Spitale, 6/2002  	Adapted by:	Spitale, 5/2016   	Array of descriptors (structures).    STATUS: 	Complete    SEE ALSO: 	cor_rereference    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_evolve.html", "cor_evolve.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_evolve.html#cor_evolve", "cor_evolve", 'routine in <a href="cor/cor_evolve.html">cor_evolve.pro</a>', "cor_evolve.pro", "", "cor_evolve", "	Calls the 'evolve' method appropriate for the given descriptor.    ", "nodv If set, velocities will not be evolved.   xd Any subclass of BODY.   dt Time offset.   ", "NV/SYS/COR", " 	Written by:	Spitale   	Array (nxd,ndt) of newly allocated descriptors, of the same class 	as xd, evolved by time dt, where nxd is the number of xd, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_init_state.html", "cor_init_state.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_init_state.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_init_state.html#cor_init_state", "cor_init_state", 'routine in <a href="cor/cor_init_state.html">cor_init_state.pro</a>', "cor_init_state.pro", "", "cor_init_state", "	Initializes the CORE state structure.    ", "", "NV/SYS", " 	Written by:	Spitale		5/2016   	New core state structure.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_isa.html", "cor_isa.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_isa.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_isa.html#cor_isa", "cor_isa", 'routine in <a href="cor/cor_isa.html">cor_isa.pro</a>', "cor_isa.pro", "", "cor_isa", "", "odclass", "          -1", "");
  
  

libdata[libdataItem++] = new Array("cor/cor_name.html", "cor_name.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_name.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_name.html#cor_name", "cor_name", 'routine in <a href="cor/cor_name.html">cor_name.pro</a>', "cor_name.pro", "", "cor_name", "	Returns the name for each given core descriptor.    ", "noeventcrd", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 4/2016   	Name associated with each given core descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_replicate.html", "cor_replicate.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_replicate.html#cor_replicate", "cor_replicate", 'routine in <a href="cor/cor_replicate.html">cor_replicate.pro</a>', "cor_replicate.pro", "", "cor_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "crddim Dimensions of the result.   ", "NV/LIB/COR", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_rereference.html", "cor_rereference.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_rereference.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_rereference.html#cor_rereference", "cor_rereference", 'routine in <a href="cor/cor_rereference.html">cor_rereference.pro</a>', "cor_rereference.pro", "", "cor_rereference", "	Copies an array of descriptors into an array of pointers to descriptors.    ", "newIf set, new pointers will be allocated in xd.   xdArray of pointers to the appropriate type of descriptor.   _xdArray of descriptors.   ", "NV/SYS", " 	Written by:	Spitale, 6/2002  	Adapted by:	Spitale, 5/2016   	NONE    STATUS: 	Complete    SEE ALSO: 	cor_dereference    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_select.html", "cor_select.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_select.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_select.html#cor_select", "cor_select", 'routine in <a href="cor/cor_select.html">cor_select.pro</a>', "cor_select.pro", "", "cor_select", "	Selects descriptors based on given criteria.    ", "indicesrmnoeventnameclasscrx Array of descriptors of any subclass of CORE.   key Array of key to select.   ", "NV/SYS/COR", " 	Written by:	Spitale, 1/1998  	Rewritten by:	Spitale, 4/2016   	All descriptors in crx whose parameters match the given key. 	0 if no matches found.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_set_field.html", "cor_set_field.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_set_field.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_set_field.html#cor_set_field", "cor_set_field", 'routine in <a href="cor/cor_set_field.html">cor_set_field.pro</a>', "cor_set_field.pro", "", "cor_set_field", "", "foundnoeventodptag_namevalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("cor/cor_set_name.html", "cor_set_name.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_set_name.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_set_name.html#cor_set_name", "cor_set_name", 'routine in <a href="cor/cor_set_name.html">cor_set_name.pro</a>', "cor_set_name.pro", "", "cor_set_name", "	Replaces the name for each given core descriptor.    ", "noeventcrdname", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("cor/cor_set_udata.html", "cor_set_udata.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_set_udata.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_set_udata.html#cor_set_udata", "cor_set_udata", 'routine in <a href="cor/cor_set_udata.html">cor_set_udata.pro</a>', "cor_set_udata.pro", "", "cor_set_udata", "	Stores user data in a descriptor and associates it with the 	specified name. If multiple descriptors, then the trailing dimension 	must match the number of descriptors.    ", "noeventcrdnameudata", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cor/cor_state.html", "cor_state.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_state.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_state.html#cor_state", "cor_state", 'routine in <a href="cor/cor_state.html">cor_state.pro</a>', "cor_state.pro", "", "cor_state", "	Builds a class tree for te given descriptor.    ", "traceNew value for the trace flag.   ", "NV/LIB/COR", " 	Written by:	Spitale		5/2016   ");
  
  

libdata[libdataItem++] = new Array("cor/cor_tasks.html", "cor_tasks.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_tasks.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_tasks.html#cor_tasks", "cor_tasks", 'routine in <a href="cor/cor_tasks.html">cor_tasks.pro</a>', "cor_tasks.pro", "", "cor_tasks", "	Returns the descriptor task list.    ", "noeventcrd", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	String array containing the list of all programs that have modified 	the given descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_test_udata.html", "cor_test_udata.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_test_udata.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_test_udata.html#cor_test_udata", "cor_test_udata", 'routine in <a href="cor/cor_test_udata.html">cor_test_udata.pro</a>', "cor_test_udata.pro", "", "cor_test_udata", "	Tests the existence of data stored in a descriptor under the 	specified name.    ", "noeventcrdname", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	True if the data is stored under the given name, false otherwise.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_tree.html", "cor_tree.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_tree.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_tree.html#cor_tree", "cor_tree", 'routine in <a href="cor/cor_tree.html">cor_tree.pro</a>', "cor_tree.pro", "", "cor_tree", "	Builds a class tree for te given descriptor.    ", "od Descriptor of any class.   ", "NV/SYS/COR", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	String array giving the names of all classes in od, in descending order.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_udata.html", "cor_udata.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_udata.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_udata.html#cor_udata", "cor_udata", 'routine in <a href="cor/cor_udata.html">cor_udata.pro</a>', "cor_udata.pro", "", "cor_udata", "	Retrieves user data stored in a descriptor under the specified name.    ", "noeventcrdname", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Data associated with the given name.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/cor_user.html", "cor_user.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "cor_user.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/cor_user.html#cor_user", "cor_user", 'routine in <a href="cor/cor_user.html">cor_user.pro</a>', "cor_user.pro", "", "cor_user", "	Returns the username for each given core descriptor.    ", "noeventcrd", "NV/LIB/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Username associated with each given core descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("cor/core_state_struct__define.html", "core_state_struct__define.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "core_state_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/core_state_struct__define.html#core_state_struct__define", "core_state_struct__define", 'routine in <a href="cor/core_state_struct__define.html">core_state_struct__define.pro</a>', "core_state_struct__define.pro", "", "core_state_struct__define", "	Structure defining the CORE state.    ", "", "NV/LIB/COR", " 	Written by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("tools/corot_to_disk.html", "corot_to_disk.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "corot_to_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/corot_to_disk.html#corot_to_disk", "corot_to_disk", 'routine in <a href="tools/corot_to_disk.html">corot_to_disk.pro</a>', "corot_to_disk.pro", "", "corot_to_disk", "", "cddkxgbxt0dmldttimescorot_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/corot_to_disk_lon.html", "corot_to_disk_lon.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "corot_to_disk_lon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/corot_to_disk_lon.html#corot_to_disk_lon", "corot_to_disk_lon", 'routine in <a href="tools/corot_to_disk_lon.html">corot_to_disk_lon.pro</a>', "corot_to_disk_lon.pro", "", "corot_to_disk_lon", "", "cddkxgbxt0dmldttimescorot_lons", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dat/dat_add_transient_keyvals.html", "dat_add_transient_keyvals.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_add_transient_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_add_transient_keyvals.html#dat_add_transient_keyvals", "dat_add_transient_keyvals", 'routine in <a href="dat/dat_add_transient_keyvals.html">dat_add_transient_keyvals.pro</a>', "dat_add_transient_keyvals.pro", "", "dat_add_transient_keyvals", "	Records keyword/value pairs from a transient argument string.    ", "_ddData descriptor in which to record transient keyvals.   trsTransient argument string.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_compress.html", "dat_compress.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_compress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_compress.html#dat_compress", "dat_compress", 'routine in <a href="dat/dat_compress.html">dat_compress.pro</a>', "dat_compress.pro", "", "dat_compress", "	Returns the compression function suffix associated with a data 	descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	String giving the compression suffix.  The full name 	of the compression function is dat_compress_data_<suffix>.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_compress_data_mask.html", "dat_compress_data_mask.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_compress_data_mask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_compress_data_mask.html#dat_compress_data_mask", "dat_compress_data_mask", 'routine in <a href="dat/dat_compress_data_mask.html">dat_compress_data_mask.pro</a>', "dat_compress_data_mask.pro", "", "dat_compress_data_mask", "", "_dddata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dat/dat_create_descriptors.html", "dat_create_descriptors.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_create_descriptors.html#dat_create_descriptors", "dat_create_descriptors", 'routine in <a href="dat/dat_create_descriptors.html">dat_create_descriptors.pro</a>', "dat_create_descriptors.pro", "", "dat_create_descriptors", "	Creates and initializes a data descriptor.    ", "crdddsilent	If set, messages are suppressed.    abbrevusernametasksudataunamefilenameName of data file.   dimArray giving the dimensions of the data array.   typeInteger giving the type code of the data array.   dataData array.   nhistNumber of past version of the data array to archive. 		If not given, the environment variable NV_NHIST is 		used.  If that is not set, then nhist defaults to 1.   headerHeader array.   filetypeFiletype identifier string.  If not given 			an attempt is made to detect it.   input_fnName of function to read data file.   output_fnName of function to write data file.   keyword_fnName of function to read/write header keywords.   instrumentInstrument string.  If not given an 			attempt is made to detect it.   input_translatorsString array giving the names of the 				input translators.   output_translatorsString array giving the names of the 				output translators.     input_transformsString array giving the names of the 				input transforms.   output_transformsString array giving the names of the 				output transforms.   maintainData maintenance mode.   compressCompression suffix.   tab_translatorsn Number of descriptors to create.   end_keywords", "NV/SYS", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created and initialized data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_data.html", "dat_data.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_data.html#dat_data", "dat_data", 'routine in <a href="dat/dat_data.html">dat_data.pro</a>', "dat_data.pro", "", "dat_data", "	Returns the data array associated with a data descriptor.    ", "samples Samping indices.  If set, only these data elements are 		  returned.  May be 1D or the same number of dimensions as 		  the data array.   nd      If set, the samples input is taken to be an ND coordinate 	          rather than a 1D subscript.  dat_data can normally tell 	          the difference automatically, but there is an ambiguity 	          if a single ND point is requested.  In that case, dat_data 	          interprets that as an array of 1D subscripts, unless /nd 	          is set.   true    If set, the actual data array is returned, even if there is 	          a sampling function.   noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	The data array associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_data    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_detect_filetype.html", "dat_detect_filetype.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_detect_filetype.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_detect_filetype.html#dat_detect_filetype", "dat_detect_filetype", 'routine in <a href="dat/dat_detect_filetype.html">dat_detect_filetype.pro</a>', "dat_detect_filetype.pro", "", "dat_detect_filetype", "	Attempts to detect the type of the given file by calling the 	detectors in the filetype detectors table.    ", "silentIf set, messages will be suppressed.   defaultIf set, the 'default' filetype is returned. 			The default filetype is the first item in the table 			whose action is not 'IGNORE'.   allIf set, all filetypes in the table are returned.   actionfilenameName of file to test.   ", "NV/SYS", " 	Written by:	Spitale   	String giving the filetype, or null string if none detected.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_detect_instrument.html", "dat_detect_instrument.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_detect_instrument.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_detect_instrument.html#dat_detect_instrument", "dat_detect_instrument", 'routine in <a href="dat/dat_detect_instrument.html">dat_detect_instrument.pro</a>', "dat_detect_instrument.pro", "", "dat_detect_instrument", "	Attempts to detect the instrument for a data set by calling the 	detectors in the instrument detectors table.    ", "silentIf set, messages will be suppressed.   labeludata	User data for the detectors.   filetypeFiletype from dat_detect_filetype.   ", "NV/SYS", " 	Written by:	Spitale   	String giving the instrument, or 'DEFAULT' if none detected.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_dim.html", "dat_dim.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_dim.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_dim.html#dat_dim", "dat_dim", 'routine in <a href="dat/dat_dim.html">dat_dim.pro</a>', "dat_dim.pro", "", "dat_dim", "	Returns the dimensions of the data array in the given data 	descriptor.    ", "trueIf set, the dimension function is not called and the true 	 	dimensions of the dat are returned.   noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array giving the dimensions of the data in the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_dim_fn.html", "dat_dim_fn.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_dim_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_dim_fn.html#dat_dim_fn", "dat_dim_fn", 'routine in <a href="dat/dat_dim_fn.html">dat_dim_fn.pro</a>', "dat_dim_fn.pro", "", "dat_dim_fn", "	Returns the dimension function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The dim_fn associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_dim_fn    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_dim_fn_data.html", "dat_dim_fn_data.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_dim_fn_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_dim_fn_data.html#dat_dim_fn_data", "dat_dim_fn_data", 'routine in <a href="dat/dat_dim_fn_data.html">dat_dim_fn_data.pro</a>', "dat_dim_fn_data.pro", "", "dat_dim_fn_data", "	Returns the dimension function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The dim_fn_data associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_dim_fn_data    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_filetype.html", "dat_filetype.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_filetype.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_filetype.html#dat_filetype", "dat_filetype", 'routine in <a href="dat/dat_filetype.html">dat_filetype.pro</a>', "dat_filetype.pro", "", "dat_filetype", "	Returns the filetype associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	String giving the filetype.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_get_value.html", "dat_get_value.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_get_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_get_value.html#dat_get_value", "dat_get_value", 'routine in <a href="dat/dat_get_value.html">dat_get_value.pro</a>', "dat_get_value.pro", "", "dat_get_value", "	Calls input translators, supplying the given keyword, and builds 	a list of  returned values.    ", "status	0 if at least one translator call was successful, 			-1 otherwise.    trs	Transient argument string.   tr_disableIf set, dat_get_value returns without performing 			any action.   tr_overrideComma-delimited list of translators to use instead 			of those stored in dd.   tr_firstIf set, dat_get_value returns after the first 			successful translator.   key1key2key3key4key5key6key7key8dd	Data descriptor.   keywordKeyword to pass to translators, describing the 			requested quantity.   end_keywords", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of values returned from all successful translator calls. 	Values are returned in the same order that the corresponding 	translators were called.  The dimensions are determined by the 	output of the first translator call.  Dimensions are (dim,n_values), 	where n_objects is the total number of returned values (there may 	be more than one per translator), and dim is the dimensions of 	each value.  If dim == 1, the dimensions of the dat_get_value result 	are (n_values).    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_header.html", "dat_header.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_header.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_header.html#dat_header", "dat_header", 'routine in <a href="dat/dat_header.html">dat_header.pro</a>', "dat_header.pro", "", "dat_header", "	Returns the header array associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	The header array associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_header    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_header_value.html", "dat_header_value.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_header_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_header_value.html#dat_header_value", "dat_header_value", 'routine in <a href="dat/dat_header_value.html">dat_header_value.pro</a>', "dat_header_value.pro", "", "dat_header_value", "	Reads and write header keyword values.    ", "getValue of the specified keyword read from the header.     setNew value to write to the specified keyword.    noeventdd	Data descriptor.   keywordString giving the name of the keyword to get or set.   ", "NV/SYS", " 	Written by:	Spitale, 8/2013  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_instrument.html", "dat_instrument.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_instrument.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_instrument.html#dat_instrument", "dat_instrument", 'routine in <a href="dat/dat_instrument.html">dat_instrument.pro</a>', "dat_instrument.pro", "", "dat_instrument", "	Returns the instrument string associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 9/2001  	Adapted by:	Spitale, 5/2016   	The instrument string associated with the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_load_data.html", "dat_load_data.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_load_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_load_data.html#dat_load_data", "dat_load_data", 'routine in <a href="dat/dat_load_data.html">dat_load_data.pro</a>', "dat_load_data.pro", "", "dat_load_data", "	Loads the data array for a given data descriptor.  Adds to 	NV state maintained list if maintain == 1.    ", "sampleddData descriptor to test.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Loaded data array.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_lookup_io.html", "dat_lookup_io.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_lookup_io.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_lookup_io.html#dat_lookup_io", "dat_lookup_io", 'routine in <a href="dat/dat_lookup_io.html">dat_lookup_io.pro</a>', "dat_lookup_io.pro", "", "dat_lookup_io", "	Looks up the names of the data input and output functions in 	the I/O table.    ", "silentIf set, messages are suppressed.   filetypeFiletype string from dat_detect_filetype.   input_fnoutput_fnkeyword_fn", "NV/SYS", " 	Written by:	Spitale   	input_fn:	Name of the input function.  	output_fn:	Name of the output function.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_lookup_transforms.html", "dat_lookup_transforms.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_lookup_transforms.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_lookup_transforms.html#dat_lookup_transforms", "dat_lookup_transforms", 'routine in <a href="dat/dat_lookup_transforms.html">dat_lookup_transforms.pro</a>', "dat_lookup_transforms.pro", "", "dat_lookup_transforms", "	Looks up the names of the data input and output functions in 	the I/O table.    ", "tab_transformssilentIf set, messages are suppressed.   instrumentInstrument string from dat_detect_instrument.   input_transformsoutput_transforms", "NV/SYS", " 	Written by:	Spitale   	input_transforms:	Array giving the names of the input transform 				functions.  	output_transforms:	Array giving the names of the output transform 				functions.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_lookup_translators.html", "dat_lookup_translators.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_lookup_translators.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_lookup_translators.html#dat_lookup_translators", "dat_lookup_translators", 'routine in <a href="dat/dat_lookup_translators.html">dat_lookup_translators.pro</a>', "dat_lookup_translators.pro", "", "dat_lookup_translators", "	Looks up the names of the data input and output tranlators in 	the translators table.    ", "tab_translatorssilentIf set, messages are suppressed.   instrumentInstrument string from dat_detect_instrument.   input_translatorsoutput_translatorsinput_keyvalsoutput_keyvals", "NV/SYS", " 	Written by:	Spitale   	input_translators:	Array giving the names of the input translator 				functions.  	output_translators:	Array giving the names of the output translator 				functions.  	input_keyvals:	Array giving the keyword/value pairs the from the 			translators table, for each input translator.  	output_keyvals:	Array giving the keyword/value pairs the from the 			translators table, for each output translator.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_maintain.html", "dat_maintain.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_maintain.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_maintain.html#dat_maintain", "dat_maintain", 'routine in <a href="dat/dat_maintain.html">dat_maintain.pro</a>', "dat_maintain.pro", "", "dat_maintain", "	Returns the maintenance value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The maintenance value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("dat/dat_manage_dd.html", "dat_manage_dd.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_manage_dd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_manage_dd.html#dat_manage_dd", "dat_manage_dd", 'routine in <a href="dat/dat_manage_dd.html">dat_manage_dd.pro</a>', "dat_manage_dd.pro", "", "dat_manage_dd", "	Adds a data descriptor to the NV state maintained list.  If the list 	is full, the oldest descriptor is unloaded and removed.    ", "ddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_max.html", "dat_max.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_max.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_max.html#dat_max", "dat_max", 'routine in <a href="dat/dat_max.html">dat_max.pro</a>', "dat_max.pro", "", "dat_max", "	Returns the max value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   	The max value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("dat/dat_min.html", "dat_min.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_min.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_min.html#dat_min", "dat_min", 'routine in <a href="dat/dat_min.html">dat_min.pro</a>', "dat_min.pro", "", "dat_min", "	Returns the min value associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   	The min value associated with the data descriptor.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("dat/dat_ndd.html", "dat_ndd.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_ndd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_ndd.html#dat_ndd", "dat_ndd", 'routine in <a href="dat/dat_ndd.html">dat_ndd.pro</a>', "dat_ndd.pro", "", "dat_ndd", "	Returns the global maintenance ndd value.    ", "ddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   	The global maintenance ndd value.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("dat/dat_nhist.html", "dat_nhist.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_nhist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_nhist.html#dat_nhist", "dat_nhist", 'routine in <a href="dat/dat_nhist.html">dat_nhist.pro</a>', "dat_nhist.pro", "", "dat_nhist", "	Returns the number of archived data states.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Integer giving the number of past data states archived 	in the data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_parse_keyval.html", "dat_parse_keyval.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_parse_keyval.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_parse_keyval.html#dat_parse_keyval", "dat_parse_keyval", 'routine in <a href="dat/dat_parse_keyval.html">dat_parse_keyval.pro</a>', "dat_parse_keyval.pro", "", "dat_parse_keyval", "	Parses a string containing a keyword=value pair.    ", "_keyval	String of the form <keyword>=<value>.   keywordvalue", "NV/SYS", " 	Written by:	Spitale   	keyword:	String giving the keyword.  	value:		String giving the value.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_parse_keyvals.html", "dat_parse_keyvals.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_parse_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_parse_keyvals.html#dat_parse_keyvals", "dat_parse_keyvals", 'routine in <a href="dat/dat_parse_keyvals.html">dat_parse_keyvals.pro</a>', "dat_parse_keyvals.pro", "", "dat_parse_keyvals", "	Parses an array strings containing keyword=value pairs.    ", "keywordskeyvalsArray of strings of the form <keyword>=<value>.   ", "NV/SYS", " 	Written by:	Spitale   	Array of type keyval_struct containing the parsed keywords 	and values.  One element per input array element.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_parse_transient_keyvals.html", "dat_parse_transient_keyvals.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_parse_transient_keyvals.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_parse_transient_keyvals.html#dat_parse_transient_keyvals", "dat_parse_transient_keyvals", 'routine in <a href="dat/dat_parse_transient_keyvals.html">dat_parse_transient_keyvals.pro</a>', "dat_parse_transient_keyvals.pro", "", "dat_parse_transient_keyvals", "	Parses a comma-delimited transient argument string into an of array 	of strings containing keyword=value pairs.    ", "trsTransient argument string.   ", "NV/SYS", " 	Written by:	Spitale   	Array of strings containing keyword=value pairs.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_put_value.html", "dat_put_value.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_put_value.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_put_value.html#dat_put_value", "dat_put_value", 'routine in <a href="dat/dat_put_value.html">dat_put_value.pro</a>', "dat_put_value.pro", "", "dat_put_value", "	Calls output translators, supplying the given keyword and value.    ", "trs	Transient argument string.   status	0 if at least one translator call was successful, 			-1 otherwise.    tr_disableIf set, dat_get_value returns without performing 			any action.   tr_overrideComma-delimited list of translators to use instead 			of those stored in dd.   tr_firstIf set, dat_get_value returns after the first 			successful translator.   key1key2key3key4key5key6key7key8dd	Data descriptor.   keywordKeyword to pass to translators, describing the 			requested quantity.   value	Value to write through the translators.   end_keywords", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_read.html", "dat_read.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_read.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_read.html#dat_read", "dat_read", 'routine in <a href="dat/dat_read.html">dat_read.pro</a>', "dat_read.pro", "", "dat_read", "	Reads a data file of arbitrary format and produces a data descriptor.    Environment variables:   	NV_TRANSLATORS:		Name(s) of the translators table(s) to use unless 				overridden by the tab_translators keyword. 				Multiple table names are delimited with ':'.  	NV_FTP_DETECT:		Name(s) of the filetype detectors table(s). 				Multiple table names are delimited with ':'.  	NV_IO:			Name(s) of the I/O table(s). 				Multiple table names are delimited with ':'.  	NV_INS_DETECT:		Name(s) of the instrument detectors table(s). 				Multiple table names are delimited with ':'.    	Under unix, the IDL findfile routine does not expand the ~ symbol, 	but openr does.  In order to salvage some functionality, dat_read 	allows filespecs to pass even if they don't expand to anything using 	findfile.  In this way, a filespec contianing ~ can be properly 	expanded, but only if it expands to one filename.  If it expands 	to multiple filenames, then openr will choke on it.    	dat_read expands all file specifications and then attempts to detect 	the filetype for each resulting filename using the filetype detectors 	table.  If a filetype is detected, dat_read looks up the I/O functions 	and calls the input function to read the file.  Finally, it calls 	nv_init_descriptor to obtain a data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_write    ", "filetypeOverrides automatic filetype detection.   input_fnOverrides input function lookup.   output_fnOverrides output function lookup.   keyword_fninstrumentUse this instrument name instead of attempting to 			detect it.   input_translatorsoutput_translatorsinput_transformsoutput_transformstab_translatorsName of translators table to use instead of 				that given by the environment variable 				NV_TRANSLATORS.  If no path is given, then the 				file is assumed to reside in the same directory 				as the translator named by the NV_TRANSLATORS 				environment variable.   maintaincompresssilent	If set, dat_read suppresses superfluous printed output 			and passes the flag to the input function.   sample	Vector giving the sampling indices in the input data 			file.  This parameter is passed through to the input 			function, which may choose to ignore it.   nodatanamenhistextensionsIf given, these extensions are attempted for each file. 			If a file with the extension is not found, then the next 			extension is tried until no extensions are left to try. 			If no extensions work, then the raw filename is attemtped.    filespecArray of strings giving file specifications for 			file to read.   dataheader", "NV/SYS", " 	Written by:	Spitale, 2/1998   	Array of data descriptors - one for each file resulting from the 	expansion of the given file specifications.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_read_config.html", "dat_read_config.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_read_config.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_read_config.html#dat_read_config", "dat_read_config", 'routine in <a href="dat/dat_read_config.html">dat_read_config.pro</a>', "dat_read_config.pro", "", "dat_read_config", "	Reads an NV configuration table.    ", "continueenvName of an environment variable giving the names of the 		configuration files to read, delimited by ':'.   table_pfilenames_p", "NV/SYS", " 	Written by:	Spitale   	table_p:	Pointer to the configuration table contructed by 			concatenating the contents of each file.  	filenames_p:	List of configuration filenames that were read.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_replicate.html", "dat_replicate.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_replicate.html#dat_replicate", "dat_replicate", 'routine in <a href="dat/dat_replicate.html">dat_replicate.pro</a>', "dat_replicate.pro", "", "dat_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "fnName of the cloning function.  Default is nv_clone.   dd Data deccriptor to replicate.   dim Dimensions of the result.   ", "NV/LIB/BOD", " 	Written by:	Spitale   	Array of the given dimensions containing cloned versions of the input 	data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_sampling_fn.html", "dat_sampling_fn.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_sampling_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_sampling_fn.html#dat_sampling_fn", "dat_sampling_fn", 'routine in <a href="dat/dat_sampling_fn.html">dat_sampling_fn.pro</a>', "dat_sampling_fn.pro", "", "dat_sampling_fn", "	Returns the sampling function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The sampling_fn associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_sampling_fn    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_sampling_fn_data.html", "dat_sampling_fn_data.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_sampling_fn_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_sampling_fn_data.html#dat_sampling_fn_data", "dat_sampling_fn_data", 'routine in <a href="dat/dat_sampling_fn_data.html">dat_sampling_fn_data.pro</a>', "dat_sampling_fn_data.pro", "", "dat_sampling_fn_data", "	Returns the sampling function associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	The sampling_fn_data associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_sampling_fn_data    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_compress.html", "dat_set_compress.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_compress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_compress.html#dat_set_compress", "dat_set_compress", 'routine in <a href="dat/dat_set_compress.html">dat_set_compress.pro</a>', "dat_set_compress.pro", "", "dat_set_compress", "	Replaces the name of the compression function in a data descriptor.    ", "dd	Data descriptor.   compressString giving the name of a new compression function.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_data.html", "dat_set_data.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_data.html#dat_set_data", "dat_set_data", 'routine in <a href="dat/dat_set_data.html">dat_set_data.pro</a>', "dat_set_data.pro", "", "dat_set_data", "	Replaces the data array associated with a data descriptor.    ", "silentIf set, messages are suppressed.   updateUpdate mode flag.  If not given, it will be taken from dd.   noeventddData descriptor.   _dataNew data array.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_dim_fn.html", "dat_set_dim_fn.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_dim_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_dim_fn.html#dat_set_dim_fn", "dat_set_dim_fn", 'routine in <a href="dat/dat_set_dim_fn.html">dat_set_dim_fn.pro</a>', "dat_set_dim_fn.pro", "", "dat_set_dim_fn", "	Replaces the dimension function associated with a data descriptor.    ", "noeventdd	Data descriptor.   dim_fnNew sampling function.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_dim_fn_data.html", "dat_set_dim_fn_data.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_dim_fn_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_dim_fn_data.html#dat_set_dim_fn_data", "dat_set_dim_fn_data", 'routine in <a href="dat/dat_set_dim_fn_data.html">dat_set_dim_fn_data.pro</a>', "dat_set_dim_fn_data.pro", "", "dat_set_dim_fn_data", "	Replaces the dimension function data associated with a data descriptor.    ", "noeventdd		Data descriptor.   dim_fn_dataNew sampling function data.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_header.html", "dat_set_header.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_header.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_header.html#dat_set_header", "dat_set_header", 'routine in <a href="dat/dat_set_header.html">dat_set_header.pro</a>', "dat_set_header.pro", "", "dat_set_header", "	Replaces the header array associated with a data descriptor.    ", "silentIf set, messages are suppressed.   updateUpdate mode flag.  If not given, in will be taken from dd.   noeventddData descriptor.   headerNew header array.   ", "NV/SYS", " 	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_maintain.html", "dat_set_maintain.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_maintain.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_maintain.html#dat_set_maintain", "dat_set_maintain", 'routine in <a href="dat/dat_set_maintain.html">dat_set_maintain.pro</a>', "dat_set_maintain.pro", "", "dat_set_maintain", "	Replaces the maintain flag in a data descriptor.    ", "noeventdd	Data descriptor.   maintainNew maintain flag.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_max.html", "dat_set_max.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_max.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_max.html#dat_set_max", "dat_set_max", 'routine in <a href="dat/dat_set_max.html">dat_set_max.pro</a>', "dat_set_max.pro", "", "dat_set_max", "	Replaces the max value in a data descriptor.    ", "noeventdd	Data descriptor.   maxNew max value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_min.html", "dat_set_min.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_min.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_min.html#dat_set_min", "dat_set_min", 'routine in <a href="dat/dat_set_min.html">dat_set_min.pro</a>', "dat_set_min.pro", "", "dat_set_min", "	Replaces the min value in a data descriptor.    ", "noeventdd	Data descriptor.   minNew min value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_ndd.html", "dat_set_ndd.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_ndd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_ndd.html#dat_set_ndd", "dat_set_ndd", 'routine in <a href="dat/dat_set_ndd.html">dat_set_ndd.pro</a>', "dat_set_ndd.pro", "", "dat_set_ndd", "	Sets a new ndd value in the NV state structure.    ", "nddNew ndd value.   ", "NV/SYS", " 	Written by:	Spitale, 1998   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_nhist.html", "dat_set_nhist.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_nhist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_nhist.html#dat_set_nhist", "dat_set_nhist", 'routine in <a href="dat/dat_set_nhist.html">dat_set_nhist.pro</a>', "dat_set_nhist.pro", "", "dat_set_nhist", "	Changes the number of past states archived in a data descriptor.    ", "noeventddData descriptor.   nhistNew nhist value.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_sampling_fn.html", "dat_set_sampling_fn.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_sampling_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_sampling_fn.html#dat_set_sampling_fn", "dat_set_sampling_fn", 'routine in <a href="dat/dat_set_sampling_fn.html">dat_set_sampling_fn.pro</a>', "dat_set_sampling_fn.pro", "", "dat_set_sampling_fn", "	Replaces the sampling function associated with a data descriptor.    ", "noeventdd	Data descriptor.   sampling_fnNew sampling function.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_sampling_fn_data.html", "dat_set_sampling_fn_data.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_sampling_fn_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_sampling_fn_data.html#dat_set_sampling_fn_data", "dat_set_sampling_fn_data", 'routine in <a href="dat/dat_set_sampling_fn_data.html">dat_set_sampling_fn_data.pro</a>', "dat_set_sampling_fn_data.pro", "", "dat_set_sampling_fn_data", "	Replaces the sampling function data associated with a data descriptor.    ", "noeventdd		Data descriptor.   sampling_fn_dataNew sampling function data.   ", "NV/SYS", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	dd:	Modified data descriptor.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_sibling.html", "dat_set_sibling.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_sibling.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_sibling.html#dat_set_sibling", "dat_set_sibling", 'routine in <a href="dat/dat_set_sibling.html">dat_set_sibling.pro</a>', "dat_set_sibling.pro", "", "dat_set_sibling", "	Changes the sibling in a data descriptor.    ", "noeventdd	Data descriptor.   dd_siblingData descriptor of new sibling.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_set_update.html", "dat_set_update.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_set_update.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_set_update.html#dat_set_update", "dat_set_update", 'routine in <a href="dat/dat_set_update.html">dat_set_update.pro</a>', "dat_set_update.pro", "", "dat_set_update", "	Changes the update flag in a data descriptor.    ", "noeventddData descriptor.   updateNew update flag.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_sibling.html", "dat_sibling.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_sibling.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_sibling.html#dat_sibling", "dat_sibling", 'routine in <a href="dat/dat_sibling.html">dat_sibling.pro</a>', "dat_sibling.pro", "", "dat_sibling", "	Returns the sibling data descriptor associated with a data 	descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Data descriptor of the sibling.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_test_dd.html", "dat_test_dd.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_test_dd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_test_dd.html#dat_test_dd", "dat_test_dd", 'routine in <a href="dat/dat_test_dd.html">dat_test_dd.pro</a>', "dat_test_dd.pro", "", "dat_test_dd", "	Determines whether the argument is a valid data descriptor.    ", "noeventddData descriptor to test.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	True if the argument is present, is a valid pointer, and 	points to a data descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_type.html", "dat_type.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_type.html#dat_type", "dat_type", 'routine in <a href="dat/dat_type.html">dat_type.pro</a>', "dat_type.pro", "", "dat_type", "	Returns the type code associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Integer giving the type.    STATUS: 	This data descriptor functonality is not complete.  A 'type' field  	needs to be added to the input functions similar to the 'dim' field. 	Then dat_read would include that argument in its call to input_fn and 	it should work.    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_uncompress_data_mask.html", "dat_uncompress_data_mask.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_uncompress_data_mask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_uncompress_data_mask.html#dat_uncompress_data_mask", "dat_uncompress_data_mask", 'routine in <a href="dat/dat_uncompress_data_mask.html">dat_uncompress_data_mask.pro</a>', "dat_uncompress_data_mask.pro", "", "dat_uncompress_data_mask", "", "_ddcdata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dat/dat_undo.html", "dat_undo.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_undo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_undo.html#dat_undo", "dat_undo", 'routine in <a href="dat/dat_undo.html">dat_undo.pro</a>', "dat_undo.pro", "", "dat_undo", "	Increments the data archive index in the data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_unload_data.html", "dat_unload_data.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_unload_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_unload_data.html#dat_unload_data", "dat_unload_data", 'routine in <a href="dat/dat_unload_data.html">dat_unload_data.pro</a>', "dat_unload_data.pro", "", "dat_unload_data", "	Unloads the dat descriptor data array and removes dd from the NV 	state maintained list if present.    ", "allIf set, all maintained data descriptors are unloaded.   ddData descriptor to test.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/dat_update.html", "dat_update.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_update.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_update.html#dat_update", "dat_update", 'routine in <a href="dat/dat_update.html">dat_update.pro</a>', "dat_update.pro", "", "dat_update", "	Returns the update flag associated with a data descriptor.    ", "noeventddData descriptor.   ", "NV/SYS", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Data descriptor update flag.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_valid_descriptor.html", "dat_valid_descriptor.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_valid_descriptor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_valid_descriptor.html#dat_valid_descriptor", "dat_valid_descriptor", 'routine in <a href="dat/dat_valid_descriptor.html">dat_valid_descriptor.pro</a>', "dat_valid_descriptor.pro", "", "dat_valid_descriptor", "	Determines whether the argument is a valid data descriptor, 	or data descriptor structure.    ", "ddp", "NV/SYS", " 	Written by:	Spitale   	True if the argument is a data descriptor structure or a 	pointer to one.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dat/dat_write.html", "dat_write.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "dat_write.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/dat_write.html#dat_write", "dat_write", 'routine in <a href="dat/dat_write.html">dat_write.pro</a>', "dat_write.pro", "", "dat_write", "	Writes a data file of arbitrary format.    	Under unix, the IDL findfile routine does not expand the ~ symbol, 	but openr does.  In order to salvage some functionality, dat_read 	allows filespecs to pass even if they don't expand to anything using 	findfile.  In this way, a filespec contianing ~ can be properly 	expanded, but only if it expands to one filename.  If it expands 	to multiple filenames, then openr will choke on it.    	dat_write expands all file specifications and attempts to write a 	file corresponding to each given data descriptor.  An error results 	if the filespec expands to a different number of files than the number 	of given data descriptors.    STATUS: 	Complete    SEE ALSO: 	dat_read    ", "nodatafiletypeOverrides data descriptor filetype (and thus the 			output function).   output_fnOverrides data descriptor output function.   verboseIf set, message are enabled.    filespecArray of strings giving file specifications for 			file to write.   dd	Array of data descriptors.   ", "NV/SYS", " 	Written by:	Spitale, 7/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("tools/disk_to_corot.html", "disk_to_corot.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "disk_to_corot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/disk_to_corot.html#disk_to_corot", "disk_to_corot", 'routine in <a href="tools/disk_to_corot.html">disk_to_corot.pro</a>', "disk_to_corot.pro", "", "disk_to_corot", "", "cddkxgbxt0dmldttimesdisk_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/disk_to_corot_lon.html", "disk_to_corot_lon.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "disk_to_corot_lon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/disk_to_corot_lon.html#disk_to_corot_lon", "disk_to_corot_lon", 'routine in <a href="tools/disk_to_corot_lon.html">disk_to_corot_lon.pro</a>', "disk_to_corot_lon.pro", "", "disk_to_corot_lon", "", "cddkxgbxt0dmldttimesdisk_lons", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/composite/disk_to_image.html", "disk_to_image.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "disk_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/disk_to_image.html#disk_to_image", "disk_to_image", 'routine in <a href="tools/composite/disk_to_image.html">disk_to_image.pro</a>', "disk_to_image.pro", "", "disk_to_image", "       Transforms points in disk coordinates to image coordinates    ", "body_ptsBody coordinates of output points.    validIndices of valid output points.   cd      Array of nt camera or map descriptors.   dkx     Array of nt object descriptors (subclass of DISK).   p      Array (nv x 3 x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of image coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/disk_to_inertial_pos.html", "disk_to_inertial_pos.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "disk_to_inertial_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/disk_to_inertial_pos.html#disk_to_inertial_pos", "disk_to_inertial_pos", 'routine in <a href="tools/composite/disk_to_inertial_pos.html">disk_to_inertial_pos.pro</a>', "disk_to_inertial_pos.pro", "", "disk_to_inertial_pos", "       Transforms position vectors in disk coordinates to inertial 	coordinates.    ", "rdp", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale          Array (nv x 3 x nt) of inertial points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/disk_to_map.html", "disk_to_map.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "disk_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/disk_to_map.html#disk_to_map", "disk_to_map", 'routine in <a href="tools/composite/disk_to_map.html">disk_to_map.pro</a>', "disk_to_map.pro", "", "disk_to_map", "       Transforms points in disk coordinates to map coordinates.    ", "md     Array of nt map descriptors.   dkddisk_pts      Array (nv x 3 x nt) of disk points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of map coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("arr/doc_arr.html", "doc_arr.pro", '.pro file in <a href="arr/dir-overview.html">arr/ directory</a>', "doc_arr.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("bod/doc_bod.html", "doc_bod.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "doc_bod.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("cam/doc_cam.html", "doc_cam.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "doc_cam.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/composite/doc_composite.html", "doc_composite.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "doc_composite.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("cor/doc_cor.html", "doc_cor.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "doc_cor.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("dsk/doc_dsk.html", "doc_dsk.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "doc_dsk.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("glb/doc_glb.html", "doc_glb.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "doc_glb.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/icv/doc_icv.html", "doc_icv.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "doc_icv.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/ipt/doc_ipt.html", "doc_ipt.pro", '.pro file in <a href="tools/ipt/dir-overview.html">tools/ipt/ directory</a>', "doc_ipt.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./doc_lib.html", "doc_lib.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "doc_lib.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("map/doc_map.html", "doc_map.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "doc_map.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/orb/doc_orb.html", "doc_orb.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "doc_orb.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/photometry/doc_photometry.html", "doc_photometry.pro", '.pro file in <a href="tools/photometry/dir-overview.html">tools/photometry/ directory</a>', "doc_photometry.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/pht/doc_pht.html", "doc_pht.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "doc_pht.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("plt/doc_plt.html", "doc_plt.pro", '.pro file in <a href="plt/dir-overview.html">plt/ directory</a>', "doc_plt.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("rng/doc_rng.html", "doc_rng.pro", '.pro file in <a href="rng/dir-overview.html">rng/ directory</a>', "doc_rng.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("sld/doc_sld.html", "doc_sld.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "doc_sld.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("stn/doc_stn.html", "doc_stn.pro", '.pro file in <a href="stn/dir-overview.html">stn/ directory</a>', "doc_stn.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("str/doc_str.html", "doc_str.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "doc_str.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("tools/doc_tools.html", "doc_tools.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "doc_tools.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("dsk/dsk_apply_scale.html", "dsk_apply_scale.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_apply_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_apply_scale.html#dsk_apply_scale", "dsk_apply_scale", 'routine in <a href="dsk/dsk_apply_scale.html">dsk_apply_scale.pro</a>', "dsk_apply_scale.pro", "", "dsk_apply_scale", "	Computes scaled radii.    ", "inverseIf set, the operation is performed in reverse.   noeventdkd A single disk descriptors.   radii Array of radii to convert.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Scaled radii based onthe scale parameters in the disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_body_to_disk.html", "dsk_body_to_disk.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_body_to_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_body_to_disk.html#dsk_body_to_disk", "dsk_body_to_disk", 'routine in <a href="dsk/dsk_body_to_disk.html">dsk_body_to_disk.pro</a>', "dsk_body_to_disk.pro", "", "dsk_body_to_disk", "	Transforms vectors from the body coordinate system to the disk 	coordinate system.    ", "dkd Array (nt) of any subclass of DISK.   v", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 3 x nt) of column vectors in the disk coordinate system.    ");
  
  

libdata[libdataItem++] = new Array("tools/dsk_cat.html", "dsk_cat.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "dsk_cat.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/dsk_cat.html#dsk_cat", "dsk_cat", 'routine in <a href="tools/dsk_cat.html">dsk_cat.pro</a>', "dsk_cat.pro", "", "dsk_cat", "	Concatenates the given disk descriptors into one descriptor encompassing 	the entire system.    ", "dkxs", "NV/LIB/TOOLS", "       Written by:     Spitale   	A descriptor of the same class as dkx whose semimajor axes 	encompass the all of the input disks.    ");
  
  

libdata[libdataItem++] = new Array("tools/dsk_cat_by_name.html", "dsk_cat_by_name.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "dsk_cat_by_name.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/dsk_cat_by_name.html#dsk_cat_by_name", "dsk_cat_by_name", 'routine in <a href="tools/dsk_cat_by_name.html">dsk_cat_by_name.pro</a>', "dsk_cat_by_name.pro", "", "dsk_cat_by_name", "	Concatenates the given disk descriptors into one descriptor 	encompassing all of the named descriptors.    ", "dkxsnamesArray of names of disks to concatenate.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	A descriptor of the same class as dkx whose semimajor axes 	encompass the all of the named input disks.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_create_descriptors.html", "dsk_create_descriptors.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_create_descriptors.html#dsk_create_descriptors", "dsk_create_descriptors", 'routine in <a href="dsk/dsk_create_descriptors.html">dsk_create_descriptors.pro</a>', "dsk_create_descriptors.pro", "", "dsk_create_descriptors", "	Init method for the DISK class.    ", "crdbdslddkdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedosmaeccdapscalenm_memtapmdtapmdtlibamlibmdlibmdtnl_liltaanldtaanldtliballibldlibldtnNumber of descriptors to create.   end_keywords", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created or or freshly initialized disk descriptors, depending 	on the presence of the dkd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_dap.html", "dsk_dap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_dap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_dap.html#dsk_dap", "dsk_dap", 'routine in <a href="dsk/dsk_dap.html">dsk_dap.pro</a>', "dsk_dap.pro", "", "dsk_dap", "	Returns dap for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   	dap value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_disk_to_body.html", "dsk_disk_to_body.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_disk_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_disk_to_body.html#dsk_disk_to_body", "dsk_disk_to_body", 'routine in <a href="dsk/dsk_disk_to_body.html">dsk_disk_to_body.pro</a>', "dsk_disk_to_body.pro", "", "dsk_disk_to_body", "	Transforms vectors from the disk coordinate system to the body 	coordinate system.    ", "dkd Array (nt) of any subclass of DISK.   v", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 3 x nt) of column vectors in the body coordinate system.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_dlibldt.html", "dsk_dlibldt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_dlibldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_dlibldt.html#dsk_dlibldt", "dsk_dlibldt", 'routine in <a href="dsk/dsk_dlibldt.html">dsk_dlibldt.pro</a>', "dsk_dlibldt.pro", "", "dsk_dlibldt", "	Returns dlibldt for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dlibldt value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_dlibmdt.html", "dsk_dlibmdt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_dlibmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_dlibmdt.html#dsk_dlibmdt", "dsk_dlibmdt", 'routine in <a href="dsk/dsk_dlibmdt.html">dsk_dlibmdt.pro</a>', "dsk_dlibmdt.pro", "", "dsk_dlibmdt", "	Returns dlibmdt for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dlibmdt value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_dtaanldt.html", "dsk_dtaanldt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_dtaanldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_dtaanldt.html#dsk_dtaanldt", "dsk_dtaanldt", 'routine in <a href="dsk/dsk_dtaanldt.html">dsk_dtaanldt.pro</a>', "dsk_dtaanldt.pro", "", "dsk_dtaanldt", "	Returns dtaanldt for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   	dtaanldt value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_dtapmdt.html", "dsk_dtapmdt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_dtapmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_dtapmdt.html#dsk_dtapmdt", "dsk_dtapmdt", 'routine in <a href="dsk/dsk_dtapmdt.html">dsk_dtapmdt.pro</a>', "dsk_dtapmdt.pro", "", "dsk_dtapmdt", "	Returns dtapmdt for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   	dtapmdt value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_ecc.html", "dsk_ecc.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_ecc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_ecc.html#dsk_ecc", "dsk_ecc", 'routine in <a href="dsk/dsk_ecc.html">dsk_ecc.pro</a>', "dsk_ecc.pro", "", "dsk_ecc", "	Returns ecc for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	ecc value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_em.html", "dsk_em.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_em.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_em.html#dsk_em", "dsk_em", 'routine in <a href="dsk/dsk_em.html">dsk_em.pro</a>', "dsk_em.pro", "", "dsk_em", "	Returns em for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	em value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_evolve.html", "dsk_evolve.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_evolve.html#dsk_evolve", "dsk_evolve", 'routine in <a href="dsk/dsk_evolve.html">dsk_evolve.pro</a>', "dsk_evolve.pro", "", "dsk_evolve", "	Computes new disk descriptors at the given time offsets from the 	given disk descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given disk 	descriptor.    ", "nodv If set, derivatives will not be evolved.    dkd Any subclass of DISK.   dt Time offset.   ", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (ndkd,ndt) of newly allocated descriptors, of class DISK, 	evolved by time dt, where ndkd is the number of dkd, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_ansa.html", "dsk_get_ansa.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_ansa.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_ansa.html#dsk_get_ansa", "dsk_get_ansa", 'routine in <a href="dsk/dsk_get_ansa.html">dsk_get_ansa.pro</a>', "dsk_get_ansa.pro", "", "dsk_get_ansa", "", "ndkdr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_ap.html", "dsk_get_ap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_ap.html#dsk_get_ap", "dsk_get_ap", 'routine in <a href="dsk/dsk_get_ap.html">dsk_get_ap.pro</a>', "dsk_get_ap.pro", "", "dsk_get_ap", "	Determines ap for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	ap value associated with each given disk descriptor.  One for each dkd.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_dapdt.html", "dsk_get_dapdt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_dapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_dapdt.html#dsk_get_dapdt", "dsk_get_dapdt", 'routine in <a href="dsk/dsk_get_dapdt.html">dsk_get_dapdt.pro</a>', "dsk_get_dapdt.pro", "", "dsk_get_dapdt", "	Determines dapdt for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dapdt value associated with each given disk descriptor.  One for each dkd.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_disk_points.html", "dsk_get_disk_points.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_disk_points.pro", "", "", "	Computes points on the inner and outer edges of a disk.    ", "", "          -1", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_disk_points.html#_dsk_get_disk_points", "_dsk_get_disk_points", 'routine in <a href="dsk/dsk_get_disk_points.html">dsk_get_disk_points.pro</a>', "dsk_get_disk_points.pro", "", "_dsk_get_disk_points", "", "dkdn_points", "          -1", "");
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_disk_points.html#dsk_get_disk_points", "dsk_get_disk_points", 'routine in <a href="dsk/dsk_get_disk_points.html">dsk_get_disk_points.pro</a>', "dsk_get_disk_points.pro", "", "dsk_get_disk_points", "", "dtadkdn_points", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_dlandt.html", "dsk_get_dlandt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_dlandt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_dlandt.html#dsk_get_dlandt", "dsk_get_dlandt", 'routine in <a href="dsk/dsk_get_dlandt.html">dsk_get_dlandt.pro</a>', "dsk_get_dlandt.pro", "", "dsk_get_dlandt", "	Determines dlandt for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dlandt value associated with each given disk descriptor.  One for each dkd.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_dlibdt_ap.html", "dsk_get_dlibdt_ap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_dlibdt_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_dlibdt_ap.html#dsk_get_dlibdt_ap", "dsk_get_dlibdt_ap", 'routine in <a href="dsk/dsk_get_dlibdt_ap.html">dsk_get_dlibdt_ap.pro</a>', "dsk_get_dlibdt_ap.pro", "", "dsk_get_dlibdt_ap", "	Determines dlibdt_ap for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dlibdt_ap value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_dlibdt_lan.html", "dsk_get_dlibdt_lan.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_dlibdt_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_dlibdt_lan.html#dsk_get_dlibdt_lan", "dsk_get_dlibdt_lan", 'routine in <a href="dsk/dsk_get_dlibdt_lan.html">dsk_get_dlibdt_lan.pro</a>', "dsk_get_dlibdt_lan.pro", "", "dsk_get_dlibdt_lan", "	Determines dlibdt_lan for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	dlibdt_lan value associated with each given disk descriptor.  One for each dkd.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_edge_elevation.html", "dsk_get_edge_elevation.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_edge_elevation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_edge_elevation.html#dsk_get_edge_elevation", "dsk_get_edge_elevation", 'routine in <a href="dsk/dsk_get_edge_elevation.html">dsk_get_edge_elevation.pro</a>', "dsk_get_edge_elevation.pro", "", "dsk_get_edge_elevation", "	Computes elevations along the edge of a disk.    ", "innerIf set, the inner edge is used.   outerIf set, the outer edge is used.   one_to_onenoeventdkd Array (nt) of any subclass of DISK.   ta Array (nta) of true anomalies at which to compute elevations.    ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nt x nta) of elevations computed at each true anomaly on each 	disk.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_edge_radius.html", "dsk_get_edge_radius.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_edge_radius.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_edge_radius.html#dsk_get_edge_radius", "dsk_get_edge_radius", 'routine in <a href="dsk/dsk_get_edge_radius.html">dsk_get_edge_radius.pro</a>', "dsk_get_edge_radius.pro", "", "dsk_get_edge_radius", "	Computes radii along the edge of a disk.    ", "innerIf set, the inner edge is used.   outerIf set, the outer edge is used.   timeone_to_onenoeventdkd Array (nt) of any subclass of DISK.   ta Array (nta) of true anomalies at which to compute radii.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nt x nta) of radii computed at each true anomaly on each 	disk.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_grid_points.html", "dsk_get_grid_points.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_grid_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_grid_points.html#dsk_get_grid_points", "dsk_get_grid_points", 'routine in <a href="dsk/dsk_get_grid_points.html">dsk_get_grid_points.pro</a>', "dsk_get_grid_points.pro", "", "dsk_get_grid_points", "", "radtascan_radmintamaxtaminradmaxraddkdnlpointsnrpoints", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_inc.html", "dsk_get_inc.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_inc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_inc.html#dsk_get_inc", "dsk_get_inc", 'routine in <a href="dsk/dsk_get_inc.html">dsk_get_inc.pro</a>', "dsk_get_inc.pro", "", "dsk_get_inc", "	Determines inc for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	inc value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_inner_disk_points.html", "dsk_get_inner_disk_points.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_inner_disk_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_inner_disk_points.html#dsk_get_inner_disk_points", "dsk_get_inner_disk_points", 'routine in <a href="dsk/dsk_get_inner_disk_points.html">dsk_get_inner_disk_points.pro</a>', "dsk_get_inner_disk_points.pro", "", "dsk_get_inner_disk_points", "	Computes points on the inner edge of a disk.    ", "taTrue anomalies for the points.  Default is the full circle.   disk_ptsdkd Array (nt) of any subclass of DISK.   n_points", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (np x 3 x nt) of points on the outer edge of each disk, 	in disk body coordinates.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_lan.html", "dsk_get_lan.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_lan.html#dsk_get_lan", "dsk_get_lan", 'routine in <a href="dsk/dsk_get_lan.html">dsk_get_lan.pro</a>', "dsk_get_lan.pro", "", "dsk_get_lan", "	Determines lan for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	lan value associated with each given disk descriptor.  One for each dkd.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_lib_ap.html", "dsk_get_lib_ap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_lib_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_lib_ap.html#dsk_get_lib_ap", "dsk_get_lib_ap", 'routine in <a href="dsk/dsk_get_lib_ap.html">dsk_get_lib_ap.pro</a>', "dsk_get_lib_ap.pro", "", "dsk_get_lib_ap", "	Determines lib_ap for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	lib_ap value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_lib_lan.html", "dsk_get_lib_lan.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_lib_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_lib_lan.html#dsk_get_lib_lan", "dsk_get_lib_lan", 'routine in <a href="dsk/dsk_get_lib_lan.html">dsk_get_lib_lan.pro</a>', "dsk_get_lib_lan.pro", "", "dsk_get_lib_lan", "	Determines lib_lan for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	lib_lan value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_liba_ap.html", "dsk_get_liba_ap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_liba_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_liba_ap.html#dsk_get_liba_ap", "dsk_get_liba_ap", 'routine in <a href="dsk/dsk_get_liba_ap.html">dsk_get_liba_ap.pro</a>', "dsk_get_liba_ap.pro", "", "dsk_get_liba_ap", "	Determines liba_ap for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	liba_ap value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_liba_lan.html", "dsk_get_liba_lan.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_liba_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_liba_lan.html#dsk_get_liba_lan", "dsk_get_liba_lan", 'routine in <a href="dsk/dsk_get_liba_lan.html">dsk_get_liba_lan.pro</a>', "dsk_get_liba_lan.pro", "", "dsk_get_liba_lan", "	Determines liba_lan for each given disk descriptor, based on the 	orientation of its BODY axes.    ", "dkdframe_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	liba_lan value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_nl.html", "dsk_get_nl.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_nl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_nl.html#dsk_get_nl", "dsk_get_nl", 'routine in <a href="dsk/dsk_get_nl.html">dsk_get_nl.pro</a>', "dsk_get_nl.pro", "", "dsk_get_nl", "	Obtains the nl (number of vertical harmonics) value from the enironment.    ", "", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Value for nl obtained from the DSK_NL environmet variable.  Default 	is 4.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_nm.html", "dsk_get_nm.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_nm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_nm.html#dsk_get_nm", "dsk_get_nm", 'routine in <a href="dsk/dsk_get_nm.html">dsk_get_nm.pro</a>', "dsk_get_nm.pro", "", "dsk_get_nm", "	Obtains the nm (number of radial harmonics) value from the enironment.    ", "", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Value for nm obtained from the DSK_NM environmet variable.  Default 	is 4.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_node.html", "dsk_get_node.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_node.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_node.html#dsk_get_node", "dsk_get_node", 'routine in <a href="dsk/dsk_get_node.html">dsk_get_node.pro</a>', "dsk_get_node.pro", "", "dsk_get_node", "	Computes the ascending node of the given disk wrt the given frame 	body descriptor.    ", "dkd Array (nt) of any subclass of DISK.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	One unit vector for each input descriptor pointng along the 	ascending node of each given disk on each given frame 	body descriptor.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_outer_disk_points.html", "dsk_get_outer_disk_points.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_outer_disk_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_outer_disk_points.html#dsk_get_outer_disk_points", "dsk_get_outer_disk_points", 'routine in <a href="dsk/dsk_get_outer_disk_points.html">dsk_get_outer_disk_points.pro</a>', "dsk_get_outer_disk_points.pro", "", "dsk_get_outer_disk_points", "	Computes points on the outer edge of a disk.    ", "taTrue anomalies for the points.  Default is the full circle.   disk_ptsdkd Array (nt) of any subclass of DISK.   n_points", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (np x 3 x nt) of points on the outer edge of each disk, 	in disk body coordinates.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/dsk_get_perp.html", "dsk_get_perp.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "dsk_get_perp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/dsk_get_perp.html#dsk_get_perp", "dsk_get_perp", 'routine in <a href="tools/dsk_get_perp.html">dsk_get_perp.pro</a>', "dsk_get_perp.pro", "", "dsk_get_perp", "	Computes vectors in the direction perpendicular to the azimuthal 	direction at a point on a disk.    ", "uucdCamera descriptor.   dkdpPoint on the disk n inertial coordinates.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nv,3) of inertial direction vectors.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_radius.html", "dsk_get_radius.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_radius.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_radius.html#dsk_get_radius", "dsk_get_radius", 'routine in <a href="dsk/dsk_get_radius.html">dsk_get_radius.pro</a>', "dsk_get_radius.pro", "", "dsk_get_radius", "	Computes radii along the iner and outer edges of a disk.    ", "dkd Array (nt) of any subclass of DISK.   ta Array (nta) of true anomalies at which to compute radii.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nta x 2 x nt) of radii computed at each true anomaly on each 	disk.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_get_ranges.html", "dsk_get_ranges.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_get_ranges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_get_ranges.html#dsk_get_ranges", "dsk_get_ranges", 'routine in <a href="dsk/dsk_get_ranges.html">dsk_get_ranges.pro</a>', "dsk_get_ranges.pro", "", "dsk_get_ranges", "	Returns ranges of valid coordinates for the given DISK object.    ", "dkd Any subclass of DISK.  One descriptor only.    ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (2 x 3) giving the ranges in radius, true anomaly and altitude.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_hide_points.html", "dsk_hide_points.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_hide_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_hide_points.html#dsk_hide_points", "dsk_hide_points", 'routine in <a href="dsk/dsk_hide_points.html">dsk_hide_points.pro</a>', "dsk_hide_points.pro", "", "dsk_hide_points", "	Hides points wrt a DISK object.    ", "epsilonDistance in front of the disk for a point to be 			considered  in front of  the disk.  Default is 1.    dkd Array (nt) of any subclass of DISK.   r Column vector giving the position of the viewer in the disk 		 body frame.   points Array (nv x 3 x nt) of points to test, given in the disk 		 body frame   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array Subscripts of all input vectors (points argument) that are hidden 	from the viewer at r by the given disk.    ");
  
  libdata[libdataItem++] = new Array("dsk/dsk_hide_points.html#_dsk_hide_points", "_dsk_hide_points", 'routine in <a href="dsk/dsk_hide_points.html">dsk_hide_points.pro</a>', "dsk_hide_points.pro", "", "_dsk_hide_points", "", "epsiloninvertdkdrpoints", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_il.html", "dsk_il.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_il.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_il.html#dsk_il", "dsk_il", 'routine in <a href="dsk/dsk_il.html">dsk_il.pro</a>', "dsk_il.pro", "", "dsk_il", "	Returns il for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	il value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/dsk_image_bounds.html", "dsk_image_bounds.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "dsk_image_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/dsk_image_bounds.html#dsk_image_bounds", "dsk_image_bounds", 'routine in <a href="tools/dsk_image_bounds.html">dsk_image_bounds.pro</a>', "dsk_image_bounds.pro", "", "dsk_image_bounds", "	Determines disk coordinate ranges visible in an image described 	by a given camera descriptor.    ", "slopborder_pts_imradminradmaxlonminlonmaxnpplanestatuscropcdCamera descripor.   dkxAny subclass of DISK.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	radmin:	Minimum disk radius in image.  	radmax:	Maximum disk radius in image.  	lonmin:	Minimum disk longitude in image.  	lonmax:	Maximum disk longitude in image.  	border_pts_im:	Array (2,np) of points along the edge of the image.  	status:	-1 if no disk in the image, 0 otherwise.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_intersect.html", "dsk_intersect.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_intersect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_intersect.html#dsk_intersect", "dsk_intersect", 'routine in <a href="dsk/dsk_intersect.html">dsk_intersect.pro</a>', "dsk_intersect.pro", "", "dsk_intersect", "	Computes ray intersections with a DISK object.    ", "thitnearfaralldkd Array (nt) of any subclass of DISK.   v Array (nv x 3 x nt) of column vectors giving the origins 		 of the rays in the body frame.   r Array (nv x 3 x nt) of column vectors giving the directions 		 of the rays in the body frame.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 3 x nt) of column vectors giving the ray/disk 	intersections in the body frame.    ");
  
  libdata[libdataItem++] = new Array("dsk/dsk_intersect.html#_dsk_intersect", "_dsk_intersect", 'routine in <a href="dsk/dsk_intersect.html">dsk_intersect.pro</a>', "dsk_intersect.pro", "", "_dsk_intersect", "", "thitdkdvr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_intersect_inertial.html", "dsk_intersect_inertial.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_intersect_inertial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_intersect_inertial.html#dsk_intersect_inertial", "dsk_intersect_inertial", 'routine in <a href="dsk/dsk_intersect_inertial.html">dsk_intersect_inertial.pro</a>', "dsk_intersect_inertial.pro", "", "dsk_intersect_inertial", "	Computes ray intersections with a DISK object, in inertial coordinates.    ", "thitnoeventdkd Array (nt) of any subclass of DISK.   v Array (nv x 3 x nt) of column vectors giving the origins 		 of the rays in the inertial frame.   r Array (nv x 3 x nt) of column vectors giving the directions 		 of the rays in the inertial frame.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 3 x nt) of column vectors giving the ray/disk 	intersections in the inertial frame.  Note this if inertial 	results are needed, this routine is slightly faster than 	dsk_intersect.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_l.html", "dsk_l.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_l.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_l.html#dsk_l", "dsk_l", 'routine in <a href="dsk/dsk_l.html">dsk_l.pro</a>', "dsk_l.pro", "", "dsk_l", "	Returns l for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	l value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_libal.html", "dsk_libal.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_libal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_libal.html#dsk_libal", "dsk_libal", 'routine in <a href="dsk/dsk_libal.html">dsk_libal.pro</a>', "dsk_libal.pro", "", "dsk_libal", "	Returns libal for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	libal value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_libam.html", "dsk_libam.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_libam.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_libam.html#dsk_libam", "dsk_libam", 'routine in <a href="dsk/dsk_libam.html">dsk_libam.pro</a>', "dsk_libam.pro", "", "dsk_libam", "	Returns libam for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	libam value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_libl.html", "dsk_libl.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_libl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_libl.html#dsk_libl", "dsk_libl", 'routine in <a href="dsk/dsk_libl.html">dsk_libl.pro</a>', "dsk_libl.pro", "", "dsk_libl", "	Returns libl for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	libl value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_libm.html", "dsk_libm.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_libm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_libm.html#dsk_libm", "dsk_libm", 'routine in <a href="dsk/dsk_libm.html">dsk_libm.pro</a>', "dsk_libm.pro", "", "dsk_libm", "	Returns libm for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	libm value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_m.html", "dsk_m.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_m.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_m.html#dsk_m", "dsk_m", 'routine in <a href="dsk/dsk_m.html">dsk_m.pro</a>', "dsk_m.pro", "", "dsk_m", "	Returns m for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	m value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_nl.html", "dsk_nl.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_nl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_nl.html#dsk_nl", "dsk_nl", 'routine in <a href="dsk/dsk_nl.html">dsk_nl.pro</a>', "dsk_nl.pro", "", "dsk_nl", "	Returns nl for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	nl value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_nm.html", "dsk_nm.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_nm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_nm.html#dsk_nm", "dsk_nm", 'routine in <a href="dsk/dsk_nm.html">dsk_nm.pro</a>', "dsk_nm.pro", "", "dsk_nm", "	Returns nm for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	nm value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_npht.html", "dsk_npht.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_npht.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_npht.html#dsk_npht", "dsk_npht", 'routine in <a href="dsk/dsk_npht.html">dsk_npht.pro</a>', "dsk_npht.pro", "", "dsk_npht", "	Returns an integer indicating the maximum number of parameters 	allowed in the refl_parm and phase-parm fields of the disk 	descriptor.  This number can be adjusted using the environment 	variable 'dsk_NPHT'.  The default is 4.    ", "", "NV/LIB/dsk", " 	Written by:	Spitale, 7/2015   	Current npht value.    STATUS: 	Complete  	Adapted by:	Spitale, 5/2016    ");
  
  

libdata[libdataItem++] = new Array("tools/dsk_projected_resolution.html", "dsk_projected_resolution.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "dsk_projected_resolution.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/dsk_projected_resolution.html#dsk_projected_resolution", "dsk_projected_resolution", 'routine in <a href="tools/dsk_projected_resolution.html">dsk_projected_resolution.pro</a>', "dsk_projected_resolution.pro", "", "dsk_projected_resolution", "	Computes the resolution (actually scale) components at a point on a 	disk in a given camera.    ", "radlonperprrdkdcdCamera descriptor.   pPoint on the dkx in inertial coordinates.   scale", "NV/LIB/TOOLS", "       Written by:     Spitale, usning an approach suggested by M. Tiscareno   	Radial resolution on dkx at r, computed as the length of a 	segment bisecting the intersection ellipse in the radial direction.    ");
  
  

libdata[libdataItem++] = new Array("tools/dsk_radial_resolution.html", "dsk_radial_resolution.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "dsk_radial_resolution.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/dsk_radial_resolution.html#dsk_radial_resolution", "dsk_radial_resolution", 'routine in <a href="tools/dsk_radial_resolution.html">dsk_radial_resolution.pro</a>', "dsk_radial_resolution.pro", "", "dsk_radial_resolution", "	Computes the radial resolution at a point on a disk in a 	given camera.    ", "dkdcdCamera descriptor.   rPoint on the dkx in inertial coordinates.   scale", "NV/LIB/TOOLS", "       Written by:     Spitale   	Radial resolution on dkx at r, computed as the length of a 	segment bisecting the intersection ellipse in the radial direction.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_reflect.html", "dsk_reflect.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_reflect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_reflect.html#dsk_reflect", "dsk_reflect", 'routine in <a href="dsk/dsk_reflect.html">dsk_reflect.pro</a>', "dsk_reflect.pro", "", "dsk_reflect", "	Computes ray reflections with a DISK object.    ", "hitdkd Array (nt) of any subclass of DISK.   v Array (nv x 3 x nt) of column vectors giving the observer 		 position in the body frame.   r Array (nv x 3 x nt) of column vectors giving the source 		 position in the body frame.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nv x 3 x nt) of column vectors giving the ray/disk 	reflections in the body frame.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_replicate.html", "dsk_replicate.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_replicate.html#dsk_replicate", "dsk_replicate", 'routine in <a href="dsk/dsk_replicate.html">dsk_replicate.pro</a>', "dsk_replicate.pro", "", "dsk_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "dkd Any superclass of DISK.   dim Dimensions of the result.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_rm_points.html", "dsk_rm_points.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_rm_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_rm_points.html#dsk_rm_points", "dsk_rm_points", 'routine in <a href="dsk/dsk_rm_points.html">dsk_rm_points.pro</a>', "dsk_rm_points.pro", "", "dsk_rm_points", "	Removes points in front of or behind a DISK object.    ", "dkd Array (nt) of any subclass of DISK.   r Column vector giving the position of the viewer in the disk 		 body frame.   points Array (nv x 3 x nt) of points to test, given in the disk 		 body frame   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array Subscripts of all input vectors (points argument) that are hidden 	from the viewer at r by the given disk.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_scale.html", "dsk_scale.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_scale.html#dsk_scale", "dsk_scale", 'routine in <a href="dsk/dsk_scale.html">dsk_scale.pro</a>', "dsk_scale.pro", "", "dsk_scale", "	Returns scale for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	scale value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_ap.html", "dsk_set_ap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_ap.html#dsk_set_ap", "dsk_set_ap", 'routine in <a href="dsk/dsk_set_ap.html">dsk_set_ap.pro</a>', "dsk_set_ap.pro", "", "dsk_set_ap", "	Replaces ap in each given disk descriptor.    ", "dkd Array (nt) of any subclass of DISK.   ap New ap value.   frame_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_dap.html", "dsk_set_dap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_dap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_dap.html#dsk_set_dap", "dsk_set_dap", 'routine in <a href="dsk/dsk_set_dap.html">dsk_set_dap.pro</a>', "dsk_set_dap.pro", "", "dsk_set_dap", "	Replaces the apsidal shift in each given disk descriptor.  Half of the 	shift is applied to each edge, so as to not affect the mean periapse 	direction.    ", "noeventdkd Array (nt) of any subclass of DISK.   dap New dap value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_dapdt.html", "dsk_set_dapdt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_dapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_dapdt.html#dsk_set_dapdt", "dsk_set_dapdt", 'routine in <a href="dsk/dsk_set_dapdt.html">dsk_set_dapdt.pro</a>', "dsk_set_dapdt.pro", "", "dsk_set_dapdt", "	Replaces dapdt in each given disk descriptor.    ", "dkd Array (nt) of any subclass of DISK.   dapdt New dapdt value.   frame_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_dlandt.html", "dsk_set_dlandt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_dlandt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_dlandt.html#dsk_set_dlandt", "dsk_set_dlandt", 'routine in <a href="dsk/dsk_set_dlandt.html">dsk_set_dlandt.pro</a>', "dsk_set_dlandt.pro", "", "dsk_set_dlandt", "	Replaces dlandt in each given disk descriptor.    ", "dkd Array (nt) of any subclass of DISK.   dlandt New dlandt value.   frame_bd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_dlibdt_ap.html", "dsk_set_dlibdt_ap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_dlibdt_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_dlibdt_ap.html#dsk_set_dlibdt_ap", "dsk_set_dlibdt_ap", 'routine in <a href="dsk/dsk_set_dlibdt_ap.html">dsk_set_dlibdt_ap.pro</a>', "dsk_set_dlibdt_ap.pro", "", "dsk_set_dlibdt_ap", "	Sets dlibdt_ap in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   dlibdt_ap New dlibdt_ap value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_dlibdt_lan.html", "dsk_set_dlibdt_lan.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_dlibdt_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_dlibdt_lan.html#dsk_set_dlibdt_lan", "dsk_set_dlibdt_lan", 'routine in <a href="dsk/dsk_set_dlibdt_lan.html">dsk_set_dlibdt_lan.pro</a>', "dsk_set_dlibdt_lan.pro", "", "dsk_set_dlibdt_lan", "	Sets dlibdt_lan in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   dlibdt_lan New dlibdt_lan value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_dlibldt.html", "dsk_set_dlibldt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_dlibldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_dlibldt.html#dsk_set_dlibldt", "dsk_set_dlibldt", 'routine in <a href="dsk/dsk_set_dlibldt.html">dsk_set_dlibldt.pro</a>', "dsk_set_dlibldt.pro", "", "dsk_set_dlibldt", "	Replaces dlibldt in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   dlibldt New dlibldt value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_dlibmdt.html", "dsk_set_dlibmdt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_dlibmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_dlibmdt.html#dsk_set_dlibmdt", "dsk_set_dlibmdt", 'routine in <a href="dsk/dsk_set_dlibmdt.html">dsk_set_dlibmdt.pro</a>', "dsk_set_dlibmdt.pro", "", "dsk_set_dlibmdt", "	Replaces dlibmdt in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   dlibmdt New dlibmdt value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_dtaanldt.html", "dsk_set_dtaanldt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_dtaanldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_dtaanldt.html#dsk_set_dtaanldt", "dsk_set_dtaanldt", 'routine in <a href="dsk/dsk_set_dtaanldt.html">dsk_set_dtaanldt.pro</a>', "dsk_set_dtaanldt.pro", "", "dsk_set_dtaanldt", "	Replaces dtaanldt in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   dtaanldt New dtaanldt value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_dtapmdt.html", "dsk_set_dtapmdt.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_dtapmdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_dtapmdt.html#dsk_set_dtapmdt", "dsk_set_dtapmdt", 'routine in <a href="dsk/dsk_set_dtapmdt.html">dsk_set_dtapmdt.pro</a>', "dsk_set_dtapmdt.pro", "", "dsk_set_dtapmdt", "	Replaces dtapmdt in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   dtapmdt New dtapmdt value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_ecc.html", "dsk_set_ecc.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_ecc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_ecc.html#dsk_set_ecc", "dsk_set_ecc", 'routine in <a href="dsk/dsk_set_ecc.html">dsk_set_ecc.pro</a>', "dsk_set_ecc.pro", "", "dsk_set_ecc", "	Replaces ecc in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   ecc New ecc value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_em.html", "dsk_set_em.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_em.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_em.html#dsk_set_em", "dsk_set_em", 'routine in <a href="dsk/dsk_set_em.html">dsk_set_em.pro</a>', "dsk_set_em.pro", "", "dsk_set_em", "	Replaces em in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   em New em value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_il.html", "dsk_set_il.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_il.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_il.html#dsk_set_il", "dsk_set_il", 'routine in <a href="dsk/dsk_set_il.html">dsk_set_il.pro</a>', "dsk_set_il.pro", "", "dsk_set_il", "	Replaces il in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   il New il value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_inc.html", "dsk_set_inc.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_inc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_inc.html#dsk_set_inc", "dsk_set_inc", 'routine in <a href="dsk/dsk_set_inc.html">dsk_set_inc.pro</a>', "dsk_set_inc.pro", "", "dsk_set_inc", "	Sets inc in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   inc New inc value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_l.html", "dsk_set_l.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_l.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_l.html#dsk_set_l", "dsk_set_l", 'routine in <a href="dsk/dsk_set_l.html">dsk_set_l.pro</a>', "dsk_set_l.pro", "", "dsk_set_l", "	Replaces l in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   l New l value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_lan.html", "dsk_set_lan.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_lan.html#dsk_set_lan", "dsk_set_lan", 'routine in <a href="dsk/dsk_set_lan.html">dsk_set_lan.pro</a>', "dsk_set_lan.pro", "", "dsk_set_lan", "	Sets lan in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   lan New lan value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_lib_ap.html", "dsk_set_lib_ap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_lib_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_lib_ap.html#dsk_set_lib_ap", "dsk_set_lib_ap", 'routine in <a href="dsk/dsk_set_lib_ap.html">dsk_set_lib_ap.pro</a>', "dsk_set_lib_ap.pro", "", "dsk_set_lib_ap", "	Sets lib_ap in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   lib_ap New lib_ap value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_lib_lan.html", "dsk_set_lib_lan.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_lib_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_lib_lan.html#dsk_set_lib_lan", "dsk_set_lib_lan", 'routine in <a href="dsk/dsk_set_lib_lan.html">dsk_set_lib_lan.pro</a>', "dsk_set_lib_lan.pro", "", "dsk_set_lib_lan", "	Sets lib_lan in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   lib_lan New lib_lan value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_liba_ap.html", "dsk_set_liba_ap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_liba_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_liba_ap.html#dsk_set_liba_ap", "dsk_set_liba_ap", 'routine in <a href="dsk/dsk_set_liba_ap.html">dsk_set_liba_ap.pro</a>', "dsk_set_liba_ap.pro", "", "dsk_set_liba_ap", "	Sets liba_ap in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   liba_ap New liba_ap value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_liba_lan.html", "dsk_set_liba_lan.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_liba_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_liba_lan.html#dsk_set_liba_lan", "dsk_set_liba_lan", 'routine in <a href="dsk/dsk_set_liba_lan.html">dsk_set_liba_lan.pro</a>', "dsk_set_liba_lan.pro", "", "dsk_set_liba_lan", "	Sets liba_lan in each given disk descriptor.  This value is determined 	by the orientation of the BODY axes.    ", "dkd Array (nt) of any subclass of DISK.   liba_lan New liba_lan value.   frame_bdSubclass of BODY giving the frame against which to 			measure inclinations and nodes, e.g., a planet 			descriptor.  One for each dkd.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_libal.html", "dsk_set_libal.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_libal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_libal.html#dsk_set_libal", "dsk_set_libal", 'routine in <a href="dsk/dsk_set_libal.html">dsk_set_libal.pro</a>', "dsk_set_libal.pro", "", "dsk_set_libal", "	Replaces libal in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   libal New libal value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_libam.html", "dsk_set_libam.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_libam.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_libam.html#dsk_set_libam", "dsk_set_libam", 'routine in <a href="dsk/dsk_set_libam.html">dsk_set_libam.pro</a>', "dsk_set_libam.pro", "", "dsk_set_libam", "	Replaces libam in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   libam New libam value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_libl.html", "dsk_set_libl.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_libl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_libl.html#dsk_set_libl", "dsk_set_libl", 'routine in <a href="dsk/dsk_set_libl.html">dsk_set_libl.pro</a>', "dsk_set_libl.pro", "", "dsk_set_libl", "	Replaces libl in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   libl New libl value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_libm.html", "dsk_set_libm.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_libm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_libm.html#dsk_set_libm", "dsk_set_libm", 'routine in <a href="dsk/dsk_set_libm.html">dsk_set_libm.pro</a>', "dsk_set_libm.pro", "", "dsk_set_libm", "	Replaces libm in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   libm New libm value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_m.html", "dsk_set_m.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_m.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_m.html#dsk_set_m", "dsk_set_m", 'routine in <a href="dsk/dsk_set_m.html">dsk_set_m.pro</a>', "dsk_set_m.pro", "", "dsk_set_m", "	Replaces m in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   m New m value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_nl.html", "dsk_set_nl.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_nl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_nl.html#dsk_set_nl", "dsk_set_nl", 'routine in <a href="dsk/dsk_set_nl.html">dsk_set_nl.pro</a>', "dsk_set_nl.pro", "", "dsk_set_nl", "	Replaces nl in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   nl New nl value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_nm.html", "dsk_set_nm.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_nm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_nm.html#dsk_set_nm", "dsk_set_nm", 'routine in <a href="dsk/dsk_set_nm.html">dsk_set_nm.pro</a>', "dsk_set_nm.pro", "", "dsk_set_nm", "	Replaces nm in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   nm New nm value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_phase_fn.html", "dsk_set_phase_fn.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_phase_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_phase_fn.html#dsk_set_phase_fn", "dsk_set_phase_fn", 'routine in <a href="dsk/dsk_set_phase_fn.html">dsk_set_phase_fn.pro</a>', "dsk_set_phase_fn.pro", "", "dsk_set_phase_fn", "       Replaces the phase function for each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK descriptors.   phase_fnArray (nt) of new phase functions.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_refl_fn.html", "dsk_set_refl_fn.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_refl_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_refl_fn.html#dsk_set_refl_fn", "dsk_set_refl_fn", 'routine in <a href="dsk/dsk_set_refl_fn.html">dsk_set_refl_fn.pro</a>', "dsk_set_refl_fn.pro", "", "dsk_set_refl_fn", "       Replaces the reflection function for each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK descriptors.   refl_fnArray (nt) of new reflection functions.   ", "NV/LIB/dsk", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_scale.html", "dsk_set_scale.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_scale.html#dsk_set_scale", "dsk_set_scale", 'routine in <a href="dsk/dsk_set_scale.html">dsk_set_scale.pro</a>', "dsk_set_scale.pro", "", "dsk_set_scale", "	Replaces the scale in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   scale New scale value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_sma.html", "dsk_set_sma.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_sma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_sma.html#dsk_set_sma", "dsk_set_sma", 'routine in <a href="dsk/dsk_set_sma.html">dsk_set_sma.pro</a>', "dsk_set_sma.pro", "", "dsk_set_sma", "	Replaces the sma in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   sma New sma value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_taanl.html", "dsk_set_taanl.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_taanl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_taanl.html#dsk_set_taanl", "dsk_set_taanl", 'routine in <a href="dsk/dsk_set_taanl.html">dsk_set_taanl.pro</a>', "dsk_set_taanl.pro", "", "dsk_set_taanl", "	Replaces taanl in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   taanl New taanl value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_set_tapm.html", "dsk_set_tapm.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_set_tapm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_set_tapm.html#dsk_set_tapm", "dsk_set_tapm", 'routine in <a href="dsk/dsk_set_tapm.html">dsk_set_tapm.pro</a>', "dsk_set_tapm.pro", "", "dsk_set_tapm", "	Replaces tapm in each given disk descriptor.    ", "noeventdkd Array (nt) of any subclass of DISK.   tapm New tapm value.   ", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_shape_radial.html", "dsk_shape_radial.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_shape_radial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_shape_radial.html#dsk_shape_radial", "dsk_shape_radial", 'routine in <a href="dsk/dsk_shape_radial.html">dsk_shape_radial.pro</a>', "dsk_shape_radial.pro", "", "dsk_shape_radial", "	Computes radii along the edge of a disk using disk elements.    ", "dkdmmIf set, only the radius component for this wavenumber 		is returned.   miiIf set, only the radius component with this index 		is returned.   a Array (nt) of semimajor axis values.   e Array (nt) of eccentricity values.   dap Array (nt) of apsidal shift values.   ta Array (nta) of true anomalies at which to compute radii.   m Array (nt) of radial wavenumbers.   em Array (nt) of eccentricities for each m.   tapm Array (nt) of true anomalies of periapse for each m.    ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nt x nta) of radii computed at each true anomaly on each 	disk.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_shape_vertical.html", "dsk_shape_vertical.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_shape_vertical.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_shape_vertical.html#dsk_shape_vertical", "dsk_shape_vertical", 'routine in <a href="dsk/dsk_shape_vertical.html">dsk_shape_vertical.pro</a>', "dsk_shape_vertical.pro", "", "dsk_shape_vertical", "	Computes elevations along the edge of a disk using disk elements.    ", "dkdllIf set, only the elevation component for this wavenumber 		is returned.   liiIf set, only the elevation component with this index 		is returned.   a Array (nt) of semimajor axis values.   ta Array (nta) of true anomalies at which to compute elevations.   l Array (nt) of vertical wavenumbers.   il Array (nt) of inclinations for each l.   taanl Array (nt) of true anomalies of ascending node for each l.    ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nt x nta) of elevations computed at each true anomaly on each 	disk.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_sma.html", "dsk_sma.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_sma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_sma.html#dsk_sma", "dsk_sma", 'routine in <a href="dsk/dsk_sma.html">dsk_sma.pro</a>', "dsk_sma.pro", "", "dsk_sma", "	Returns sma for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	sma value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_surface_normal.html", "dsk_surface_normal.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_surface_normal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_surface_normal.html#dsk_surface_normal", "dsk_surface_normal", 'routine in <a href="dsk/dsk_surface_normal.html">dsk_surface_normal.pro</a>', "dsk_surface_normal.pro", "", "dsk_surface_normal", "	Computes the surface normal for a DISK object at the given 	body-frame positions.    ", "noeventnorth    If set, the retruned normals will be pointed north. 	           Otherwise, they point toward the observer's hemisphere.    dkdArray (nt) of any subclass of DISK descriptors.   vArray (nv,3) of observer positions in the BODY frame.   rArray (nv,3) of surface positions in the BODY frame.    ", "NV/LIB/DSK", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	Array (nv, 3, nt) of surface unit normals in the BODY frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_swap.html", "dsk_swap.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_swap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_swap.html#dsk_swap", "dsk_swap", 'routine in <a href="dsk/dsk_swap.html">dsk_swap.pro</a>', "dsk_swap.pro", "", "dsk_swap", "", "noeventdkd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_taanl.html", "dsk_taanl.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_taanl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_taanl.html#dsk_taanl", "dsk_taanl", 'routine in <a href="dsk/dsk_taanl.html">dsk_taanl.pro</a>', "dsk_taanl.pro", "", "dsk_taanl", "	Returns taanl for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   	taanl value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_tapm.html", "dsk_tapm.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_tapm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_tapm.html#dsk_tapm", "dsk_tapm", 'routine in <a href="dsk/dsk_tapm.html">dsk_tapm.pro</a>', "dsk_tapm.pro", "", "dsk_tapm", "	Returns tapm for each given disk descriptor.    ", "noeventdkd", "NV/LIB/DSK", " 	Written by:	Spitale, 6/2016   	tapm value associated with each given disk descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_valid_edges.html", "dsk_valid_edges.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_valid_edges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_valid_edges.html#dsk_valid_edges", "dsk_valid_edges", 'routine in <a href="dsk/dsk_valid_edges.html">dsk_valid_edges.pro</a>', "dsk_valid_edges.pro", "", "dsk_valid_edges", "	Determines which edges (i.e., inner/outer) in the input DISK objects 	are valid.    ", "innerIf set, only the inner edges are tested.   outerIf set, only the outer edges are tested.   allIf set, the inner and outer edges are tested, and must 		both be valid to be selected.   noeventdkd Array (nt) of any subclass of DISK.   ", "NV/LIB/DSK", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of subscripts of the descriptors whose edges meet the criteria 	defined by the input keyowrds.    ");
  
  

libdata[libdataItem++] = new Array("dsk/dsk_widen.html", "dsk_widen.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "dsk_widen.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/dsk_widen.html#dsk_widen", "dsk_widen", 'routine in <a href="dsk/dsk_widen.html">dsk_widen.pro</a>', "dsk_widen.pro", "", "dsk_widen", "", "noeventdkdwidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/icv/edge_model_atan.html", "edge_model_atan.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "edge_model_atan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/edge_model_atan.html#edge_model_atan", "edge_model_atan", 'routine in <a href="tools/icv/edge_model_atan.html">edge_model_atan.pro</a>', "edge_model_atan.pro", "", "edge_model_atan", "	Calculates an arctan edge model for use in curve fitting.   ", "zerodeltacdnSize of the model in samples   aScaling factor: larger values give a sharper edge.   ", "NV/LIB/TOOLS/ICV", "       Written by:     Spitale, 6/1998   	An array containing the model.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/edge_model_gauss.html", "edge_model_gauss.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "edge_model_gauss.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/edge_model_gauss.html#edge_model_gauss", "edge_model_gauss", 'routine in <a href="tools/icv/edge_model_gauss.html">edge_model_gauss.pro</a>', "edge_model_gauss.pro", "", "edge_model_gauss", "	Calculates a gaussian edge model for use in curve fitting.   ", "zerodeltacdnSize of the model in samples   wWidth of the gaussian (sigma)   ", "NV/LIB/TOOLS/ICV", "       Written by:     Haemmerle, 6/1998   	An array containing the model.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/edge_model_nav_limb.html", "edge_model_nav_limb.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "edge_model_nav_limb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/edge_model_nav_limb.html#edge_model_nav_limb", "edge_model_nav_limb", 'routine in <a href="tools/icv/edge_model_nav_limb.html">edge_model_nav_limb.pro</a>', "edge_model_nav_limb.pro", "", "edge_model_nav_limb", "	Returns the edge model used by the VICAR program NAV for limb fits.   ", "zerodeltacd", "NV/LIB/TOOLS/ICV", "       Written by:     Spitale, 6/1998   	An array containing the model.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/edge_model_nav_ring.html", "edge_model_nav_ring.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "edge_model_nav_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/edge_model_nav_ring.html#edge_model_nav_ring", "edge_model_nav_ring", 'routine in <a href="tools/icv/edge_model_nav_ring.html">edge_model_nav_ring.pro</a>', "edge_model_nav_ring.pro", "", "edge_model_nav_ring", "	Returns the edge model used by the VICAR program NAV for ring fits.   ", "zerodeltacd", "NV/LIB/TOOLS/ICV", "       Written by:     Spitale, 6/1998   	An array containing the model.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/edge_model_psf_ring.html", "edge_model_psf_ring.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "edge_model_psf_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/edge_model_psf_ring.html#edge_model_psf_ring", "edge_model_psf_ring", 'routine in <a href="tools/icv/edge_model_psf_ring.html">edge_model_psf_ring.pro</a>', "edge_model_psf_ring.pro", "", "edge_model_psf_ring", "	Returns an edge model produced by convolving a sharp edge with 	a point-spread function.   ", "cdzerodelta", "NV/LIB/TOOLS/ICV", "       Written by:     Spitale, 6/1998   	An array containing the model.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/photometry/emission_angle.html", "emission_angle.pro", '.pro file in <a href="tools/photometry/dir-overview.html">tools/photometry/ directory</a>', "emission_angle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/photometry/emission_angle.html#emission_angle", "emission_angle", 'routine in <a href="tools/photometry/emission_angle.html">emission_angle.pro</a>', "emission_angle.pro", "", "emission_angle", "", "surface_coordcamera_coordvertical", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/epoch_radec.html", "epoch_radec.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "epoch_radec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/epoch_radec.html#epoch_radec", "epoch_radec", 'routine in <a href="tools/epoch_radec.html">epoch_radec.pro</a>', "epoch_radec.pro", "", "epoch_radec", "", "odbxepoch", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/fill_ring.html", "fill_ring.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "fill_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/fill_ring.html#fill_ring", "fill_ring", 'routine in <a href="tools/fill_ring.html">fill_ring.pro</a>', "fill_ring.pro", "", "fill_ring", "", "cdrdimagesub", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/footprint.html", "footprint.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "footprint.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/footprint.html#footprint", "footprint", 'routine in <a href="tools/footprint.html">footprint.pro</a>', "footprint.pro", "", "footprint", "	Computes the footprint of a camera on a given body.    ", "slop	Number of pixels by which to expand the image in each 			direction.   cornersArray(2,2) giving corers of image region to consider.   image_ptsFootprint points in the image frame.   body_ptsFootprint points in the body frame.   valid 	Indices of valid output points.   sample	Sampling rate; default is 1 pixel.    cd	Camera descripor.   bx	Body descriptor; globe or disk.   ", "NV/LIB/TOOLS", "       Written by:     Spitale		5/2014   	Array nv,3,nt of surface points.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_disk_ref.html", "get_disk_ref.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_disk_ref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_disk_ref.html#get_disk_ref", "get_disk_ref", 'routine in <a href="tools/get_disk_ref.html">get_disk_ref.pro</a>', "get_disk_ref.pro", "", "get_disk_ref", "	Produces inertial unit vectors corresponding to the projection 	of the given body 2-axis direction into the given disk plane.    ", "dkxArray (nt) of any subclass of DISK.   bxArray (nt) of any subclass of BODY.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (1,3,nt) of inertial unit vectors.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_edge_points.html", "get_edge_points.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_edge_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_edge_points.html#get_edge_points", "get_edge_points", 'routine in <a href="tools/get_edge_points.html">get_edge_points.pro</a>', "get_edge_points.pro", "", "get_edge_points", "", "cdbxgbxdkx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/get_image_border_pts.html", "get_image_border_pts.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_image_border_pts.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_image_border_pts.html#get_image_border_pts", "get_image_border_pts", 'routine in <a href="tools/get_image_border_pts.html">get_image_border_pts.pro</a>', "get_image_border_pts.pro", "", "get_image_border_pts", "	Computes points around the edge of an image.    ", "cornerscentercropsampleaperturecdCamera descripor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2,np) of image points on the image border.  np is computed 	such that points are spaced by one pixel.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_image_profile.html", "get_image_profile.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_image_profile.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_image_profile.html#get_image_profile", "get_image_profile", 'routine in <a href="tools/get_image_profile.html">get_image_profile.pro</a>', "get_image_profile.pro", "", "get_image_profile", "	Extracts a profile from a rectangular, but not necessarily axis-aligned, 	image region using interpolation.    ", "distanceArray (nl) giving the distance along the scan.   interp	Type of interpolation, see image_interp_cam.   arg_interpInterpolation argument, see image_interp_cam.   sigma	Standard deviation across the profile at each sample 			along the profile.    image_ptsArray (2,nl) of image points along the center of 			the scan.   imcdCamera descriptor.   pArray (2,2) of image points giving the start and end points 		for the scan.   nlNumber of samples along the scan.   nwNumber of samples across the scan.    sample", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nl) containing the profile.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_image_profile_outline.html", "get_image_profile_outline.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_image_profile_outline.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_image_profile_outline.html#get_image_profile_outline", "get_image_profile_outline", 'routine in <a href="tools/get_image_profile_outline.html">get_image_profile_outline.pro</a>', "get_image_profile_outline.pro", "", "get_image_profile_outline", "	Generates an outline of an oblique rectangular image region.    ", "nwNumber of samples across the scan.   nlNumber of samples along the scan.   samplepointsArray (2,2) of image points defining corners at opposite ends 		on one side of the sector.   pointImage point defining and third corner.    ", "NV/LIB/TOOLS", "       Written by:     Spitale          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_image_vector.html", "get_image_vector.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_image_vector.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_image_vector.html#get_image_vector", "get_image_vector", 'routine in <a href="tools/get_image_vector.html">get_image_vector.pro</a>', "get_image_vector.pro", "", "get_image_vector", "	Projects inertial vectors into an image.    ", "cdArray (nt) of camera descriptors.   vArray (nv,3,nt) of vectors in the inertial frame.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2,nv,nt) of image vectors.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_limb_profile_outline.html", "get_limb_profile_outline.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_limb_profile_outline.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_limb_profile_outline.html#get_limb_profile_outline", "get_limb_profile_outline", 'routine in <a href="tools/get_limb_profile_outline.html">get_limb_profile_outline.pro</a>', "get_limb_profile_outline.pro", "", "get_limb_profile_outline", "       Generates an outline of a limb sector.   ", "altaznaltnazinertialInertial vectors corresponding to the limb sector 			outline points.   dkdDisk descriptor corresponding to the skyplane.    save_azsscan_altscan_azlimb_pts_bodygraphiccdCamera descriptor.   gbxGlobe descriptor.   pointsArray (2,2) of image points defining opposite corners 		of the sector.   ", "NV/LIB/TOOLS", "       Written by:     Spitale, 8/2006          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_limb_profile_outline_linear.html", "get_limb_profile_outline_linear.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_limb_profile_outline_linear.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_limb_profile_outline_linear.html#get_limb_profile_outline_linear", "get_limb_profile_outline_linear", 'routine in <a href="tools/get_limb_profile_outline_linear.html">get_limb_profile_outline_linear.pro</a>', "get_limb_profile_outline_linear.pro", "", "get_limb_profile_outline_linear", "       Generates an outline of a rectangular limb sector.   ", "altaz0rimpointsnaltnriminertialInertial vectors corresponding to the limb sector 			outline points.    save_rimsscan_altscan_rimlimb_pts_bodygraphiccdCamera descriptor.   gbxGlobe descriptor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale, 1/2009          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_limb_profile_outline_oblique.html", "get_limb_profile_outline_oblique.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_limb_profile_outline_oblique.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_limb_profile_outline_oblique.html#get_limb_profile_outline_oblique", "get_limb_profile_outline_oblique", 'routine in <a href="tools/get_limb_profile_outline_oblique.html">get_limb_profile_outline_oblique.pro</a>', "get_limb_profile_outline_oblique.pro", "", "get_limb_profile_outline_oblique", "       Generates an outline of an oblique limb sector.   ", "naltnazdkdcdCamera descriptor.   gbxGlobe descriptor.   pointsArray (2,2) of image points defining opposite corners 		of the sector.   point   ", "NV/LIB/TOOLS", "       Written by:     Spitale, 1/2009          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_lonperp.html", "get_lonperp.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_lonperp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_lonperp.html#get_lonperp", "get_lonperp", 'routine in <a href="tools/get_lonperp.html">get_lonperp.pro</a>', "get_lonperp.pro", "", "get_lonperp", "", "cdrdp0p1", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/get_object_by_name.html", "get_object_by_name.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_object_by_name.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_object_by_name.html#get_object_by_name", "get_object_by_name", 'routine in <a href="tools/get_object_by_name.html">get_object_by_name.pro</a>', "get_object_by_name.pro", "", "get_object_by_name", "	Selects from a list of descriptors based on their name.    ", "xdsArray of any subclass of CORE.   name", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array descriptors whose CORE name field matches the given name. 	If no matches are found, 0 is returned.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_primary.html", "get_primary.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_primary.html#get_primary", "get_primary", 'routine in <a href="tools/get_primary.html">get_primary.pro</a>', "get_primary.pro", "", "get_primary", "	Attempts to determine the primary planet from a list of descriptors 	based on their names and proximity to the observer.    ", "planetsrxodgbxArray (nd,nt) of any subclass of GLOBE, specifying a 		system of globe objects.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	GLOBE descriptor for the selected primary.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_radperp.html", "get_radperp.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_radperp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_radperp.html#get_radperp", "get_radperp", 'routine in <a href="tools/get_radperp.html">get_radperp.pro</a>', "get_radperp.pro", "", "get_radperp", "", "cddkxp0p1dsk_pt0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/get_ring_profile.html", "get_ring_profile.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_ring_profile.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_ring_profile.html#get_ring_profile", "get_ring_profile", 'routine in <a href="tools/get_ring_profile.html">get_ring_profile.pro</a>', "get_ring_profile.pro", "", "get_ring_profile", "       Generates a ring profile in radius or longitude.           The profile is calculated by applying a grid of (radius, longitude)        given by rad and lon on a ring sector, interpolating the dn in        the image, and averaging along a direction to give a radius profile,        or a longitudinal profile.   STATUS:        Completed.    ", "azimuthal     If set, a longitudinal scan is done instead.   interpim_ptsdxdsk_ptssigmawidthnnarg_interpimage     The image to scan   cd     Camera descriptor   dkd     Disk descriptor   lon_ptsrad_pts", "NV/LIB/TOOLS", "       Written by:     Haemmerle, 6/1998          An array of averaged dn values that match the given rad or        match the given lon if /azimuthal selected.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_ring_profile_bin.html", "get_ring_profile_bin.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_ring_profile_bin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_ring_profile_bin.html#get_ring_profile_bin", "get_ring_profile_bin", 'routine in <a href="tools/get_ring_profile_bin.html">get_ring_profile_bin.pro</a>', "get_ring_profile_bin.pro", "", "get_ring_profile_bin", "       Generates a ring profile in radius or longitude using binning.           A ring sector polygon is calculated from the given dlon and rad        arrays.  All the pixels of the image within this polygon are        binned in an equally-spaced histogram in radius or longitude.          The dlon and rad arrays are treated as equally spaced, that is,        the binsize is calculated by dividing the spacing in radius by        number of points minus one.   STATUS:        Completed.    ", "slopeazimuthal     If set, a longitudinal scan is done instead.   image     The image to scan   cd     Camera descriptor   dkd     Disk descriptor   lon_ptsrad_pts", "NV/LIB/TOOLS", "       Written by:     Haemmerle, 6/1998          An array of averaged dn values that match the given rad or        match the given dlon if /azimuthal selected.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_ring_profile_n.html", "get_ring_profile_n.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_ring_profile_n.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_ring_profile_n.html#get_ring_profile_n", "get_ring_profile_n", 'routine in <a href="tools/get_ring_profile_n.html">get_ring_profile_n.pro</a>', "get_ring_profile_n.pro", "", "get_ring_profile_n", "       Calculate the number of points in radius and longitude for        a ring profile.           Routine goes along the radial and longitudinal edges of a ring        profile sector and calculates the minimum spacing between the        points in image space, then derives the n_rad and n_lon points        to make the minimum spacing 1 pixel.  If the oversamp parameter        is given, the numbers are multiplied by this factor.   STATUS:        Completed.    ", "oversamp   Oversample factor compared to regular calculation of                        radius and longitude spacing which would put maximum                        spacing at 1 pixel.   outline_pts   Outline sector image points which are the result                        of calling get_ring_profile_outline()   cd   Camera descriptor   dkd   Disk descriptor   lon   Equally spaced longitude array   rad   Equally spaced radius array   ", "NV/LIB/TOOLS", "       Written by:     Haemmerle, 6/1998          Array containg n_rad and n_lon to be used by get_ring_profile() or        get_ring_profile_bin().    ");
  
  

libdata[libdataItem++] = new Array("tools/get_ring_profile_outline.html", "get_ring_profile_outline.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_ring_profile_outline.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_ring_profile_outline.html#get_ring_profile_outline", "get_ring_profile_outline", 'routine in <a href="tools/get_ring_profile_outline.html">get_ring_profile_outline.pro</a>', "get_ring_profile_outline.pro", "", "get_ring_profile_outline", "       Generates an outline of a ring sector.   ", "radArray of disk radii for sector   lonArray of disk longitudes for sector   xlondirnradNumber of points in the radial direction.   nlonNumber of points in the longitudinal direction.   slopeinertialInertial vectors corresponding to the ring sector 			outline points.    cdCamera descriptor.   dkdpointsArray (2,2) of image points defining corners of the sector.   ", "NV/LIB/TOOLS", "       Written by:     Vance Haemmerle & Joe Spitale, 6/1998          Output is set of image points (x,y) defining the outline of the        ring sector.   ");
  
  

libdata[libdataItem++] = new Array("tools/get_ring_profile_outline_oblique.html", "get_ring_profile_outline_oblique.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_ring_profile_outline_oblique.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_ring_profile_outline_oblique.html#get_ring_profile_outline_oblique", "get_ring_profile_outline_oblique", 'routine in <a href="tools/get_ring_profile_outline_oblique.html">get_ring_profile_outline_oblique.pro</a>', "get_ring_profile_outline_oblique.pro", "", "get_ring_profile_outline_oblique", "       Generates an outline of an oblique ring sector.   ", "dirnradNumber of points in the radial direction.   nlonNumber of points in the longitudinal direction.   cdCamera descriptor.   dkxpointsArray (2,2) of image points defining corners at opposite ends 		on one side of the sector.   pointImage point defining and third corner.   ", "NV/LIB/TOOLS", "       Written by:     Spitale, 8/2006          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_ring_profile_outline_perp.html", "get_ring_profile_outline_perp.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_ring_profile_outline_perp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_ring_profile_outline_perp.html#get_ring_profile_outline_perp", "get_ring_profile_outline_perp", 'routine in <a href="tools/get_ring_profile_outline_perp.html">get_ring_profile_outline_perp.pro</a>', "get_ring_profile_outline_perp.pro", "", "get_ring_profile_outline_perp", "       Generates an outline of a ring sector perpendicular to the 	image-projected radial direction.   ", "dirnradNumber of points in the radial direction.   nlonNumber of points in the longitudinal direction.   cdCamera descriptor.   dkxpointsArray (2,2) of image points defining corners of the sector.   ", "NV/LIB/TOOLS", "       Written by:     Spitale, 8/2006          Array of image points defining the outline of the sector.    ");
  
  

libdata[libdataItem++] = new Array("tools/get_solar_ref.html", "get_solar_ref.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "get_solar_ref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/get_solar_ref.html#get_solar_ref", "get_solar_ref", 'routine in <a href="tools/get_solar_ref.html">get_solar_ref.pro</a>', "get_solar_ref.pro", "", "get_solar_ref", "	Produces inertial unit vectors corresponding to the projection 	of the sun direction into the given disk plane.    ", "dkxArray (nt) of any subclass of DISK.   sundArray (nt) of any subclass of STAR representing the sun.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (1,3,nt) of inertial vectors.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/get_surface_ranges.html", "get_surface_ranges.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "get_surface_ranges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/get_surface_ranges.html#get_surface_ranges", "get_surface_ranges", 'routine in <a href="tools/composite/get_surface_ranges.html">get_surface_ranges.pro</a>', "get_surface_ranges.pro", "", "get_surface_ranges", "	Determines full ranges of valid surface coordinate system.    ", "odbx     Object descriptor (subclass of BODY)    ", "NV/LIB/TOOLS/COMPOSITE", "	Array of 2 points representng the minimum and maximum values of the 	relevant coordinate system.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_altaz_to_local.html", "glb_altaz_to_local.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_altaz_to_local.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_altaz_to_local.html#glb_altaz_to_local", "glb_altaz_to_local", 'routine in <a href="glb/glb_altaz_to_local.html">glb_altaz_to_local.pro</a>', "glb_altaz_to_local.pro", "", "glb_altaz_to_local", "       Converts the given column vectors from the altaz coordinate        system to the local coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   vr", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the local system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_body_to_globe.html", "glb_body_to_globe.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_body_to_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_body_to_globe.html#glb_body_to_globe", "glb_body_to_globe", 'routine in <a href="glb/glb_body_to_globe.html">glb_body_to_globe.pro</a>', "glb_body_to_globe.pro", "", "glb_body_to_globe", "       Transforms the given column vectors from the body coordinate        system to the globe coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the globe frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_body_to_local.html", "glb_body_to_local.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_body_to_local.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_body_to_local.html#glb_body_to_local", "glb_body_to_local", 'routine in <a href="glb/glb_body_to_local.html">glb_body_to_local.pro</a>', "glb_body_to_local.pro", "", "glb_body_to_local", "       Converts the given column vectors from the body coordinate        system to the local coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   vr", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the local system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_body_to_surface.html", "glb_body_to_surface.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_body_to_surface.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_body_to_surface.html#glb_body_to_surface", "glb_body_to_surface", 'routine in <a href="glb/glb_body_to_surface.html">glb_body_to_surface.pro</a>', "glb_body_to_surface.pro", "", "glb_body_to_surface", "", "gbdv", "          -1", "");
  
  libdata[libdataItem++] = new Array("glb/glb_body_to_surface.html#_glb_body_to_surface", "_glb_body_to_surface", 'routine in <a href="glb/glb_body_to_surface.html">glb_body_to_surface.pro</a>', "glb_body_to_surface.pro", "", "_glb_body_to_surface", "", "gbdv", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_create_descriptors.html", "glb_create_descriptors.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_create_descriptors.html#glb_create_descriptors", "glb_create_descriptors", 'routine in <a href="glb/glb_create_descriptors.html">glb_create_descriptors.pro</a>', "glb_create_descriptors.pro", "", "glb_create_descriptors", "	Init method for the GLOBE class.    ", "crdbdsldgbdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedotyperadiiloralrefrrefJnNumber of descriptors to create.   end_keywords", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Newly created or or freshly initialized globe descriptors, depending 	on the presence of the bd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_evolve.html", "glb_evolve.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_evolve.html#glb_evolve", "glb_evolve", 'routine in <a href="glb/glb_evolve.html">glb_evolve.pro</a>', "glb_evolve.pro", "", "glb_evolve", "       Computes new globe descriptors at the given time offsets from        the given globe descriptors using the taylor series expansion        corresponding to the derivatives contained in the given globe        descriptor.    ", "nodv If set, velocities will not be evolved.    gbd Array (ngd) of any subclass of GLOBE descriptors.   dt Array (ndt) of time offsets.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (ngd,ndt) of newly allocated globe descriptors evolved        by time dt, where ngd is the number of gbd, and ndt is the        number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_get_cusp_points.html", "glb_get_cusp_points.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_get_cusp_points.pro", "", "", "	Iteratively computes the two points that occupy the limb from two 	different viewpoints for each given globe object.    ", "", "          -1", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("glb/glb_get_cusp_points.html#_glb_get_cusp_points", "_glb_get_cusp_points", 'routine in <a href="glb/glb_get_cusp_points.html">glb_get_cusp_points.pro</a>', "glb_get_cusp_points.pro", "", "_glb_get_cusp_points", "", "gbdr1r2epsilonniter", "          -1", "");
  
  libdata[libdataItem++] = new Array("glb/glb_get_cusp_points.html#glb_get_cusp_points", "glb_get_cusp_points", 'routine in <a href="glb/glb_get_cusp_points.html">glb_get_cusp_points.pro</a>', "glb_get_cusp_points.pro", "", "glb_get_cusp_points", "", "gbdr1r2epsilonniter", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_get_grid_points.html", "glb_get_grid_points.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_get_grid_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_get_grid_points.html#glb_get_grid_points", "glb_get_grid_points", 'routine in <a href="glb/glb_get_grid_points.html">glb_get_grid_points.pro</a>', "glb_get_grid_points.pro", "", "glb_get_grid_points", "", "latlonscan_latscan_longbd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_get_limb_points.html", "glb_get_limb_points.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_get_limb_points.pro", "", "", "	Iteratively computes the points on the limb for each given globe 	object.    ", "", "          -1", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("glb/glb_get_limb_points.html#_glb_get_limb_points", "_glb_get_limb_points", 'routine in <a href="glb/glb_get_limb_points.html">glb_get_limb_points.pro</a>', "glb_get_limb_points.pro", "", "_glb_get_limb_points", "", "alphagbdrn_pointsepsilonniter", "          -1", "");
  
  libdata[libdataItem++] = new Array("glb/glb_get_limb_points.html#glb_get_limb_points", "glb_get_limb_points", 'routine in <a href="glb/glb_get_limb_points.html">glb_get_limb_points.pro</a>', "glb_get_limb_points.pro", "", "glb_get_limb_points", "", "alphagbdrn_pointsepsilonniter", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_get_radius.html", "glb_get_radius.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_get_radius.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_get_radius.html#glb_get_radius", "glb_get_radius", 'routine in <a href="glb/glb_get_radius.html">glb_get_radius.pro</a>', "glb_get_radius.pro", "", "glb_get_radius", "	Computes the local radius of a GLOBE object at the given lat/lon.    ", "noeventgbdArray (nt) of any subclass of GLOBE descriptors.   latArray (nv) of latitudes.   lonArray (nv) of longitudes.    ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv, nt) of radius values.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_get_ranges.html", "glb_get_ranges.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_get_ranges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_get_ranges.html#glb_get_ranges", "glb_get_ranges", 'routine in <a href="glb/glb_get_ranges.html">glb_get_ranges.pro</a>', "glb_get_ranges.pro", "", "glb_get_ranges", "	Returns ranges of valid coordinates for the given GLOBE object.    ", "gbd", "NV/LIB/GLB", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (2 x 3) giving the ranges in globe coordinates.    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_get_surface_normal.html", "glb_get_surface_normal.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_get_surface_normal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_get_surface_normal.html#glb_get_surface_normal", "glb_get_surface_normal", 'routine in <a href="glb/glb_get_surface_normal.html">glb_get_surface_normal.pro</a>', "glb_get_surface_normal.pro", "", "glb_get_surface_normal", "	Computes the surface normal of a GLOBE object at the given 	globe position.   ", "noeventnonormIf set, the returned vectors are not normalized.   bodyIf set, the inputs given in the BODY system instead of GLOBE.   gbdArray (nt) of any subclass of GLOBE descriptors.   globe_pts", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv, 3, nt) of surface normals in the BODY frame.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("glb/glb_get_surface_normal.html#___glb_get_surface_normal", "___glb_get_surface_normal", 'routine in <a href="glb/glb_get_surface_normal.html">glb_get_surface_normal.pro</a>', "glb_get_surface_normal.pro", "", "___glb_get_surface_normal", "", "noeventgbdlatlon", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_globe_to_body.html", "glb_globe_to_body.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_globe_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_globe_to_body.html#glb_globe_to_body", "glb_globe_to_body", 'routine in <a href="glb/glb_globe_to_body.html">glb_globe_to_body.pro</a>', "glb_globe_to_body.pro", "", "glb_globe_to_body", "       Transforms the given column vectors from the globe coordinate        system to the body coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_globe_to_graphic.html", "glb_globe_to_graphic.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_globe_to_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_globe_to_graphic.html#glb_globe_to_graphic", "glb_globe_to_graphic", 'routine in <a href="glb/glb_globe_to_graphic.html">glb_globe_to_graphic.pro</a>', "glb_globe_to_graphic.pro", "", "glb_globe_to_graphic", "       Converts the given vectors from the globe coordinate        system to the graphic coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the graphic system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_graphic_to_globe.html", "glb_graphic_to_globe.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_graphic_to_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_graphic_to_globe.html#glb_graphic_to_globe", "glb_graphic_to_globe", 'routine in <a href="glb/glb_graphic_to_globe.html">glb_graphic_to_globe.pro</a>', "glb_graphic_to_globe.pro", "", "glb_graphic_to_globe", "       Converts the given vectors from the graphic coordinate        system to the globe coordinate system.    ", "noeventgbd        Array (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the globe system.    STATUS: 	 Not complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_graphic_to_surface.html", "glb_graphic_to_surface.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_graphic_to_surface.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_graphic_to_surface.html#glb_graphic_to_surface", "glb_graphic_to_surface", 'routine in <a href="glb/glb_graphic_to_surface.html">glb_graphic_to_surface.pro</a>', "glb_graphic_to_surface.pro", "", "glb_graphic_to_surface", "", "gbdv", "          -1", "");
  
  libdata[libdataItem++] = new Array("glb/glb_graphic_to_surface.html#_glb_graphic_to_surface", "_glb_graphic_to_surface", 'routine in <a href="glb/glb_graphic_to_surface.html">glb_graphic_to_surface.pro</a>', "glb_graphic_to_surface.pro", "", "_glb_graphic_to_surface", "", "noeventgbdv", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_hide_points.html", "glb_hide_points.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_hide_points.pro", "", "", "	Hides points that are obscured by a GLOBE with respect to a given 	viewpoint.    ", "", "          -1", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("glb/glb_hide_points.html#glb_hide_points", "glb_hide_points", 'routine in <a href="glb/glb_hide_points.html">glb_hide_points.pro</a>', "glb_hide_points.pro", "", "glb_hide_points", "", "gbdvpoints", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_hide_points_limb.html", "glb_hide_points_limb.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_hide_points_limb.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_hide_points_limb.html#glb_hide_points_limb", "glb_hide_points_limb", 'routine in <a href="glb/glb_hide_points_limb.html">glb_hide_points_limb.pro</a>', "glb_hide_points_limb.pro", "", "glb_hide_points_limb", "	Hides points lying on the surface of a GLOBE object that are 	obscured by the limb with respect to a given viewpoint.    ", "gbdArray (nt) of any subclass of GLOBE descriptors.   rColumns vector givnng the BODY-frame position of the viewer.   points", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Subscripts of the points in p that are hidden by the object. 	Note that this routine is only valid for points that lie on 	the surface of the globe.  This routine is faster than 	glb_hide_points.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/glb_image_bounds.html", "glb_image_bounds.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "glb_image_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/glb_image_bounds.html#glb_image_bounds", "glb_image_bounds", 'routine in <a href="tools/glb_image_bounds.html">glb_image_bounds.pro</a>', "glb_image_bounds.pro", "", "glb_image_bounds", "	Determines globe coordinate ranges visible in an image described 	by a given camera descriptor.    ", "slopborder_pts_imcornerscenterlatminlatmaxlonminlonmaxstatuscdCamera descripor.   pd", "NV/LIB/TOOLS", "       Written by:     Spitale   	latmin:	Minimum latitude in image.  	latmax:	Maximum latitude in image.  	lonmin:	Minimum longitude in image.  	lonmax:	Maximum longitude in image.  	border_pts_im:	Array (2,np) of points along the edge of the image.  	status:	-1 if no globe in the image, 0 otherwise.    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_intersect.html", "glb_intersect.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_intersect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_intersect.html#glb_intersect", "glb_intersect", 'routine in <a href="glb/glb_intersect.html">glb_intersect.pro</a>', "glb_intersect.pro", "", "glb_intersect", "	Computes the intersection of rays with GLOBE objects.    ", "hitArray giving the indices of rays the hit the object.   nearIf set, only the  near  points are returned.  More specifically, 		these points correspond to the furthest along the ray from the 		observer to the globe.  If the observer is exterior, these are 		the nearest interesections to the observer; if the observer is 		interior, these intersections are behind the observer.   farIf set, only the  far  points are returned.  See above; if the 		observer is exterior, these are the furthest interesections from 		the observer; if the observer is interior, these intersections 		are in front of the observer.   discriminantDiscriminant of the quadriatic equation used to 			determine the intersections.    nosolveIf set, the intersections are not computed, though the 		 discrimiant is.   validArray in which each element indicates whether the object 		was hit.   gbdArray (nt) of any subclass of GLOBE descriptors.   vArray (nv,3,nt) giving ray origins in the BODY frame.   rArray (nv,3,nt) giving ray directions in the BODY frame.    ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2*nv,3,nt) of points in the BODY frame, where 	int_pts[0:nv-1,*,*] correspond to the near-side intersections 	and int_pts[nv:2*nv-1,*,1] correspond to the far side.  Zero 	vector is returned for points with no solution.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_intersect_discriminant.html", "glb_intersect_discriminant.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_intersect_discriminant.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_intersect_discriminant.html#glb_intersect_discriminant", "glb_intersect_discriminant", 'routine in <a href="glb/glb_intersect_discriminant.html">glb_intersect_discriminant.pro</a>', "glb_intersect_discriminant.pro", "", "glb_intersect_discriminant", "", "noeventalphabetagammagbdvr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_intersect_plane.html", "glb_intersect_plane.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_intersect_plane.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_intersect_plane.html#glb_intersect_plane", "glb_intersect_plane", 'routine in <a href="glb/glb_intersect_plane.html">glb_intersect_plane.pro</a>', "glb_intersect_plane.pro", "", "glb_intersect_plane", "	Computesthe intersection of a plane with a GLOBE object.    ", "npgbdArray (nt) of any subclass of GLOBE descriptors.   vArray (1,3,nt) giving plane origins in the BODY frame.   nArray (1,3,nt) giving the plane unit normals in the 		BODY frame.    ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (np,3,nt) of points in the BODY frame, np is the number of 	points on the curve of intersection.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_intersect_points.html", "glb_intersect_points.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_intersect_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_intersect_points.html#glb_intersect_points", "glb_intersect_points", 'routine in <a href="glb/glb_intersect_points.html">glb_intersect_points.pro</a>', "glb_intersect_points.pro", "", "glb_intersect_points", "", "validnosolvenearfargbdvrdiscriminantalphabetagamma", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_j.html", "glb_j.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_j.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_j.html#glb_j", "glb_j", 'routine in <a href="glb/glb_j.html">glb_j.pro</a>', "glb_j.pro", "", "glb_j", "       Returns the zonal harmonics for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nj,nt) of zonal harmonics associated with each given globe 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_local_to_altaz.html", "glb_local_to_altaz.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_local_to_altaz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_local_to_altaz.html#glb_local_to_altaz", "glb_local_to_altaz", 'routine in <a href="glb/glb_local_to_altaz.html">glb_local_to_altaz.pro</a>', "glb_local_to_altaz.pro", "", "glb_local_to_altaz", "       Converts the given column vectors from the local coordinate        system to the altaz coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   v_r", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the altaz system.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_local_to_body.html", "glb_local_to_body.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_local_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_local_to_body.html#glb_local_to_body", "glb_local_to_body", 'routine in <a href="glb/glb_local_to_body.html">glb_local_to_body.pro</a>', "glb_local_to_body.pro", "", "glb_local_to_body", "       Converts the given column vectors from the local coordinate        system to the body coordinate system.    ", "gbd        Array (nt) of any subclass of GLOBE descriptors.   vr", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nv,3,nt) of column vectors in the body frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_lora.html", "glb_lora.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_lora.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_lora.html#glb_lora", "glb_lora", 'routine in <a href="glb/glb_lora.html">glb_lora.pro</a>', "glb_lora.pro", "", "glb_lora", "	Returns the longitude of the first ellipsoid radius for each 	given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Longitude of the first ellipsoid radius associated with each        given globe descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_lref.html", "glb_lref.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_lref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_lref.html#glb_lref", "glb_lref", 'routine in <a href="glb/glb_lref.html">glb_lref.pro</a>', "glb_lref.pro", "", "glb_lref", "       Returns the longitude system reference for each given globe        descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Longitude system reference associated with each given globe        descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_nj.html", "glb_nj.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_nj.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_nj.html#glb_nj", "glb_nj", 'routine in <a href="glb/glb_nj.html">glb_nj.pro</a>', "glb_nj.pro", "", "glb_nj", "	Returns an integer indicating the maximum number of zonal harmonics 	allowed in the 'j' field of the globe descriptor.  This number 	can be adjusted using the environment variable 'GLB_NJ'.  The default 	is 11.    ", "", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Current nj value.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_npht.html", "glb_npht.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_npht.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_npht.html#glb_npht", "glb_npht", 'routine in <a href="glb/glb_npht.html">glb_npht.pro</a>', "glb_npht.pro", "", "glb_npht", "	Returns an integer indicating the maximum number of parameters 	allowed in the refl_parm and phase-parm fields of the globe 	descriptor.  This number can be adjusted using the environment 	variable 'GLB_NPHT'.  The default is 4.    ", "", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Current npht value.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/glb_projected_resolution.html", "glb_projected_resolution.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "glb_projected_resolution.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/glb_projected_resolution.html#glb_projected_resolution", "glb_projected_resolution", 'routine in <a href="tools/glb_projected_resolution.html">glb_projected_resolution.pro</a>', "glb_projected_resolution.pro", "", "glb_projected_resolution", "", "minmaxrrgbdcdpscale", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_radii.html", "glb_radii.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_radii.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_radii.html#glb_radii", "glb_radii", 'routine in <a href="glb/glb_radii.html">glb_radii.pro</a>', "glb_radii.pro", "", "glb_radii", "       Returns the triaxial radii for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Triaxial radii associated with each given globe descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_reflect.html", "glb_reflect.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_reflect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_reflect.html#glb_reflect", "glb_reflect", 'routine in <a href="glb/glb_reflect.html">glb_reflect.pro</a>', "glb_reflect.pro", "", "glb_reflect", "	Computes the reflection of rays with GLOBE objects.    ", "hitnearIf set, near-side reflections are computed.  This is the default.   far	If set, far-side reflections are computed.   allvalidgbdArray (nt) of any subclass of GLOBE descriptors.   vArray (nv,3,nt) giving observer positions in the BODY frame.   rArray (nv,3,nt) giving point positions in the BODY frame.   epsilonControls the precision of the iteration.  Default 			is 1d-3.   niterMaximum number of iterations, default is 1000    ", "NV/LIB/GLB", " 	Written by:	Spitale, 6/2016   	Array (2*nv,3,nt) of points in the BODY frame, where 	int_pts[0:nv-1,*,*] correspond to the near-side reflections 	and int_pts[nv:2*nv-1,*,1] correspond to the far side.  Zero 	vector is returned for points with no solution.    STATUS: 	Not well tested    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_replicate.html", "glb_replicate.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_replicate.html#glb_replicate", "glb_replicate", 'routine in <a href="glb/glb_replicate.html">glb_replicate.pro</a>', "glb_replicate.pro", "", "glb_replicate", "	Replicates the given globe descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "gbd One descriptor of any subclass of GLOBE descriptor   dim Dimensions of the result.   ", "NV/LIB/GLB", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	globe descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_rm_points.html", "glb_rm_points.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_rm_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_rm_points.html#glb_rm_points", "glb_rm_points", 'routine in <a href="glb/glb_rm_points.html">glb_rm_points.pro</a>', "glb_rm_points.pro", "", "glb_rm_points", "	Hides points that are obscured by, or that obscure a GLOBE with 	respect to a given viewpoint.    ", "gbdArray (nt) of any subclass of GLOBE descriptors.   rColumns vector givnng the BODY-frame position of the viewer.   points", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Subscripts of the points in p that are hidden by, or hide the 	object.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_rref.html", "glb_rref.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_rref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_rref.html#glb_rref", "glb_rref", 'routine in <a href="glb/glb_rref.html">glb_rref.pro</a>', "glb_rref.pro", "", "glb_rref", "       Returns the reference radius for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nt) of reference radii associated with each given globe 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_set_j.html", "glb_set_j.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_set_j.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_set_j.html#glb_set_j", "glb_set_j", 'routine in <a href="glb/glb_set_j.html">glb_set_j.pro</a>', "glb_set_j.pro", "", "glb_set_j", "       Replaces the zonal harmonics for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   J Array (nj,nt) of new zonal harmonics.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("glb/glb_set_lora.html", "glb_set_lora.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_set_lora.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_set_lora.html#glb_set_lora", "glb_set_lora", 'routine in <a href="glb/glb_set_lora.html">glb_set_lora.pro</a>', "glb_set_lora.pro", "", "glb_set_lora", "       Replaces the longitude of the first ellipsoid radius for each        given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   lora Array (nt) of new longitude values of the first ellipsoid radius.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("glb/glb_set_lref.html", "glb_set_lref.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_set_lref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_set_lref.html#glb_set_lref", "glb_set_lref", 'routine in <a href="glb/glb_set_lref.html">glb_set_lref.pro</a>', "glb_set_lref.pro", "", "glb_set_lref", "       Replaces the longitude system reference for each given globe        descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   lref String array (nt) of new longitude system names.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("glb/glb_set_radii.html", "glb_set_radii.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_set_radii.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_set_radii.html#glb_set_radii", "glb_set_radii", 'routine in <a href="glb/glb_set_radii.html">glb_set_radii.pro</a>', "glb_set_radii.pro", "", "glb_set_radii", "       Replaces the triaxial radii for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   radii Array (3,nt) of new triaxial radii.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("glb/glb_set_rref.html", "glb_set_rref.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_set_rref.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_set_rref.html#glb_set_rref", "glb_set_rref", 'routine in <a href="glb/glb_set_rref.html">glb_set_rref.pro</a>', "glb_set_rref.pro", "", "glb_set_rref", "       Replaces the reference radius for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   rref String array (nt) of new reference radii.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("glb/glb_set_type.html", "glb_set_type.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_set_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_set_type.html#glb_set_type", "glb_set_type", 'routine in <a href="glb/glb_set_type.html">glb_set_type.pro</a>', "glb_set_type.pro", "", "glb_set_type", "       Replaces the type string for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   type String array (nt) of new type strings.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("glb/glb_sub_point.html", "glb_sub_point.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_sub_point.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_sub_point.html#glb_sub_point", "glb_sub_point", 'routine in <a href="glb/glb_sub_point.html">glb_sub_point.pro</a>', "glb_sub_point.pro", "", "glb_sub_point", "	Computes the planetocentric sub-point in body coordinates.    ", "noeventgbdArray (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) points in the BODY frame that lie on the surface 	of each globe, directly 'beneath' r, i.e., such that each 	planetocentric surface normal points at each r.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_sub_point_graphic.html", "glb_sub_point_graphic.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_sub_point_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_sub_point_graphic.html#glb_sub_point_graphic", "glb_sub_point_graphic", 'routine in <a href="glb/glb_sub_point_graphic.html">glb_sub_point_graphic.pro</a>', "glb_sub_point_graphic.pro", "", "glb_sub_point_graphic", "	Computes the planetographic sub-point in body coordinates.    ", "noeventgbdArray (nt) of any subclass of GLOBE descriptors.   v", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nv,3,nt) points in the BODY frame that lie on the surface 	of each globe, directly 'beneath' r, i.e., such that each 	planetographic surface normal points at each r.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("glb/glb_surface_to_body.html", "glb_surface_to_body.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_surface_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_surface_to_body.html#glb_surface_to_body", "glb_surface_to_body", 'routine in <a href="glb/glb_surface_to_body.html">glb_surface_to_body.pro</a>', "glb_surface_to_body.pro", "", "glb_surface_to_body", "", "gbdv", "          -1", "");
  
  libdata[libdataItem++] = new Array("glb/glb_surface_to_body.html#_glb_surface_to_body", "_glb_surface_to_body", 'routine in <a href="glb/glb_surface_to_body.html">glb_surface_to_body.pro</a>', "glb_surface_to_body.pro", "", "_glb_surface_to_body", "", "gbdv", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_surface_to_graphic.html", "glb_surface_to_graphic.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_surface_to_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_surface_to_graphic.html#glb_surface_to_graphic", "glb_surface_to_graphic", 'routine in <a href="glb/glb_surface_to_graphic.html">glb_surface_to_graphic.pro</a>', "glb_surface_to_graphic.pro", "", "glb_surface_to_graphic", "", "gbdv", "          -1", "");
  
  libdata[libdataItem++] = new Array("glb/glb_surface_to_graphic.html#_glb_surface_to_graphic", "_glb_surface_to_graphic", 'routine in <a href="glb/glb_surface_to_graphic.html">glb_surface_to_graphic.pro</a>', "glb_surface_to_graphic.pro", "", "_glb_surface_to_graphic", "", "gbdv", "          -1", "");
  
  

libdata[libdataItem++] = new Array("glb/glb_type.html", "glb_type.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "glb_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/glb_type.html#glb_type", "glb_type", 'routine in <a href="glb/glb_type.html">glb_type.pro</a>', "glb_type.pro", "", "glb_type", "       Returns the type string for each given globe descriptor.    ", "noeventgbd Array (nt) of any subclass of GLOBE descriptors.   ", "NV/LIB/GLB", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nt) of type strings associated with each given globe 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/globe_to_image.html", "globe_to_image.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "globe_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/globe_to_image.html#globe_to_image", "globe_to_image", 'routine in <a href="tools/composite/globe_to_image.html">globe_to_image.pro</a>', "globe_to_image.pro", "", "globe_to_image", "       Transforms points in body globe coordinates to image coordinates.    ", "body_ptsvalidcdArray of nt Camera or map descriptor   gbxArray of nt Object descriptor (of type GLOBE)   pArray (nv x 3 x nt) of globe points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/globe_to_map.html", "globe_to_map.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "globe_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/globe_to_map.html#globe_to_map", "globe_to_map", 'routine in <a href="tools/composite/globe_to_map.html">globe_to_map.pro</a>', "globe_to_map.pro", "", "globe_to_map", "       Transforms points in globe coordinates to map coordinates.    ", "mdArray of nt map descriptor.   gbxArray of nt globe descriptor.   globe_ptsArray (nv x 3 x nt) of globe points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of map coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_chisq.html", "icv_chisq.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_chisq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_chisq.html#icv_chisq", "icv_chisq", 'routine in <a href="tools/icv/icv_chisq.html">icv_chisq.pro</a>', "icv_chisq.pro", "", "icv_chisq", "	Computes chi-squared value for given curve fit parameters.    ", "norm	If set, the returned value is normalized by dividing 			it by the number of degrees of freedom.   dxy	Array (2) giving x- and y-offset solution.   dtheta	Scalar giving theta-offset solution.   fix	Array specifying which parameters to fix as 			[dx,dy,dtheta].   cos_alphaArray (n_points) of direction cosines computed by 			icv_compute_directions.   sin_alphaArray (n_points) of direction sines computed by 			icv_compute_directions.   scan_offsetsArray (n_points) containing offset of best correlation 			at each point on the curve.  Produced by icv_scan_strip.   scan_ptsArray (2, n_points) of image coordinates corresponding 			to each scan offset.   axis	Array (2) giving image coordinates of rotation axis 			in the case of a 3-parameter fit.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 6/1998   	The chi-squared value is returned.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_coeff.html", "icv_coeff.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_coeff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_coeff.html#icv_coeff", "icv_coeff", 'routine in <a href="tools/icv/icv_coeff.html">icv_coeff.pro</a>', "icv_coeff.pro", "", "icv_coeff", "	Computes coefficients for the 2- or 3-parameter linear least-square fit.    	Since the fit has been linearized, it can be written as a matrix 	equation:  				Mx = b,  	where x is the 3-element column vector [dx, dy, dtheta] of the 	independent variables. 	This routine computes the matrix M and the 	vector b.  Once these are known, mbfit can be used to solve the 	linear system.  Moreover, since the fit is linear, a simultaneous 	fit can be performed by simply adding together any number of 	coefficient matrices and vectors, which can also be done using 	mbfit.    	The fit associated with these coefficients has been linearized 	and is only valid for small corrections.  For larger corrections, 	this procedure can be iterated.    STATUS: 	Complete.    ", "sigmaUncertainty in each scan_offset.  Defaults to 1.   M3x3 matrix of coefficients for the linear fit.   b3-element column vector rhs of the linear fit.    _cos_alphaArray (n_points) of direction cosines computed by 			icv_compute_directions.   _sin_alphaArray (n_points) of direction sines computed by 			icv_compute_directions.   scan_offsetsArray (n_points) containing offset of best correlation 			at each point on the curve.  Produced by icv_scan_strip.   scan_ptsArray (2, n_points) of image coordinates corresponding 			to each scan offset.   axis	Array (2) giving image coordinates of rotation axis 			in the case of a 3-parameter fit.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_compute_directions.html", "icv_compute_directions.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_compute_directions.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_compute_directions.html#icv_compute_directions", "icv_compute_directions", 'routine in <a href="tools/icv/icv_compute_directions.html">icv_compute_directions.pro</a>', "icv_compute_directions.pro", "", "icv_compute_directions", "	Computes the normal to a specified curve at every point.    	It is assumed that the curve is closed; if this is not the case, then 	the results will not be meaningful at the endpoints of the curve.    	At each point on the specified curve, the two nearest neighbors are 	used to compute the components of the normal.    STATUS: 	Complete    ", "centercos_alphasin_alphacurve_ptsArray (2, n_points) of image points making up the curve.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_convert_scan_offsets.html", "icv_convert_scan_offsets.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_convert_scan_offsets.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_convert_scan_offsets.html#icv_convert_scan_offsets", "icv_convert_scan_offsets", 'routine in <a href="tools/icv/icv_convert_scan_offsets.html">icv_convert_scan_offsets.pro</a>', "icv_convert_scan_offsets.pro", "", "icv_convert_scan_offsets", "	Converts offsets produced by icv_scan_strip to image coordinates.    ", "curve_ptsArray (2, n_points) of image points making up the curve.   scan_offsetsArray (n_points) containing offset of best correlation 			at each point on the curve.  Produced by icv_scan_strip.   cos_alphaArray (n_points) of direction cosines computed by 			icv_compute_directions.   sin_alphaArray (n_points) of direction sines computed by 			icv_compute_directions.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	Array (2, n_points) of image coordinates corresponding to each scan 	offset.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_invert_scan_offsets.html", "icv_invert_scan_offsets.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_invert_scan_offsets.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_invert_scan_offsets.html#icv_invert_scan_offsets", "icv_invert_scan_offsets", 'routine in <a href="tools/icv/icv_invert_scan_offsets.html">icv_invert_scan_offsets.pro</a>', "icv_invert_scan_offsets.pro", "", "icv_invert_scan_offsets", "	Uses scan image coordinates to produce scan offsets and angles.  This 	routine is the reverse of icv_convert_scan_offsets.    ", "curve_ptsArray (2, n_points) of image points making up the curve.   scan_ptsArray (2, n_points) of image coordinates corresponding to each scan 			offset.   cos_alphaArray (n_points) of direction cosines.   sin_alphaArray (n_points) of direction sines.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	Array (2, n_points) of image coordinates corresponding to each scan 	offset.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_reset_scan_precision.html", "icv_reset_scan_precision.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_reset_scan_precision.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_reset_scan_precision.html#icv_reset_scan_precision", "icv_reset_scan_precision", 'routine in <a href="tools/icv/icv_reset_scan_precision.html">icv_reset_scan_precision.pro</a>', "icv_reset_scan_precision.pro", "", "icv_reset_scan_precision", "	Modifies the scan precision by rebinning the given image strip.    	The strip and model are rebinned by the specified precision factor 	using cubic interpolation.    STATUS: 	Complete    ", "strip	Image strip to modify.   model	Corresponding edge models.   szero	Zero-offset position in the strip.   mzero	Zero-offset position in the model.   precisionNew precision in inverse pixels.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	NONE    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip.html", "icv_scan_strip.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_scan_strip.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip.html#icv_scan_strip", "icv_scan_strip", 'routine in <a href="tools/icv/icv_scan_strip.html">icv_scan_strip.pro</a>', "icv_scan_strip.pro", "", "icv_scan_strip", "	At each point along an image strip, determines the point at which 	some criterion is optimized, depending on an externally-supplied 	function.    	This program is a wrapper for a number of functions that use various 	algorithms determined by the 'algorithm' keyword.    STATUS: 	Complete.    ", "ccsigmaalgorithmargstripImage strip (n_points,ns) to be scanned.  Output from 		icv_strip_curve ns must be even.   modelModel (n_points,nm) to correlate with strip at each point 		on the curve.  Must have nm < ns.   szeroZero-offset position in the strip.   mzeroZero-offset position in the model.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	Offset of best correlation at each point on the curve.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip_grad.html", "icv_scan_strip_grad.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_scan_strip_grad.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip_grad.html#icv_scan_strip_grad", "icv_scan_strip_grad", 'routine in <a href="tools/icv/icv_scan_strip_grad.html">icv_scan_strip_grad.pro</a>', "icv_scan_strip_grad.pro", "", "icv_scan_strip_grad", "	At each point along an image strip, finds a sharp edge using the 	maximum-gradient method.    ", "argccNot used, hardwired to 0.9999999d.   sigmaOffset uncertainty for each point on the curve, computed as 		one half of the half-width of the gradient peak.    normIf set, only the absolute value of the gradient is evaluated.   stripImage strip (n_points,ns) to be scanned.  Output from 		icv_strip_curve ns must be even.   modelNot used.   szeroZero-offset position in the strip.   mzeroNot used.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale   	Offset of maximum gradient points at each point on the curve.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip_grad_norm.html", "icv_scan_strip_grad_norm.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_scan_strip_grad_norm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip_grad_norm.html#icv_scan_strip_grad_norm", "icv_scan_strip_grad_norm", 'routine in <a href="tools/icv/icv_scan_strip_grad_norm.html">icv_scan_strip_grad_norm.pro</a>', "icv_scan_strip_grad_norm.pro", "", "icv_scan_strip_grad_norm", "	Calls icv_scan_strip_grad with /norm set.    ", "argccsigmastripImage strip (n_points,ns) to be scanned.  Output from 		icv_strip_curve ns must be even.   modelNot used.   szeroZero-offset position in the strip.   mzeroNot used.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale   	Offset of maximum gradient points at each point on the curve.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip_half.html", "icv_scan_strip_half.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_scan_strip_half.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip_half.html#icv_scan_strip_half", "icv_scan_strip_half", 'routine in <a href="tools/icv/icv_scan_strip_half.html">icv_scan_strip_half.pro</a>', "icv_scan_strip_half.pro", "", "icv_scan_strip_half", "	At each point along an image strip, finds a sharp edge using the 	half-power method.    ", "argccsigmacenterstripImage strip (n_points,ns) to be scanned.  Output from 		icv_strip_curve ns must be even.   modelNot used.   szeroZero-offset position in the strip.   mzeroNot used.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale   	Offset of half-power points at each point on the curve.    STATUS: 	Complete.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip_inflection.html", "icv_scan_strip_inflection.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_scan_strip_inflection.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip_inflection.html#icv_scan_strip_inflection", "icv_scan_strip_inflection", 'routine in <a href="tools/icv/icv_scan_strip_inflection.html">icv_scan_strip_inflection.pro</a>', "icv_scan_strip_inflection.pro", "", "icv_scan_strip_inflection", "", "argccsigmanormstripmodelszeromzero", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip_model.html", "icv_scan_strip_model.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_scan_strip_model.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_scan_strip_model.html#icv_scan_strip_model", "icv_scan_strip_model", 'routine in <a href="tools/icv/icv_scan_strip_model.html">icv_scan_strip_model.pro</a>', "icv_scan_strip_model.pro", "", "icv_scan_strip_model", "	At each point along an image strip, determines the subpixel offset at 	which the correlation coefficient between a specified model and the 	image is maximum.    	At every point on the curve, a correlation coefficient is computed 	for every offset at which the model completely overlays the strip. 	In other words, the model is swept across the strip.  	At each point, Lagrange interpolation is used on the three correlations 	surrounding the correlation peak to find the subpixel offset of maximum 	correlation.    STATUS: 	Complete.    ", "argccsigmacenterstripImage strip (n_points,ns) to be scanned.  Output from 		icv_strip_curve ns must be even.   modelModel (n_points,nm) to correlate with strip at each point 		on the curve.  Must have nm < ns.   szeroZero-offset position in the strip.   mzeroZero-offset position in the model.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	Offset of best correlation at each point on the curve.    ");
  
  

libdata[libdataItem++] = new Array("tools/icv/icv_strip_curve.html", "icv_strip_curve.pro", '.pro file in <a href="tools/icv/dir-overview.html">tools/icv/ directory</a>', "icv_strip_curve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/icv/icv_strip_curve.html#icv_strip_curve", "icv_strip_curve", 'routine in <a href="tools/icv/icv_strip_curve.html">icv_strip_curve.pro</a>', "icv_strip_curve.pro", "", "icv_strip_curve", "	Using Lagrange interpolation, extracts an image strip of a specified 	width centered on the specified curve.    ", "zerogrid_xgrid_ycd	Camera descriptor.   image	Image from which to extract the strip.   curve_ptsArray (2, n_points) of image points making up the curve.   width	Width of the strip in pixels.   nD	Number of samples across the width of the strip.   cos_alphaArray (n_points) of direction cosines computed by 			icv_compute_directions.   sin_alphaArray (n_points) of direction sines computed by 			icv_compute_directions.   ", "NV/LIB/TOOLS/ICV", " 	Written by:	Spitale, 2/1998   	Image strip (n_points, nD).    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/illumination_fraction.html", "illumination_fraction.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "illumination_fraction.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/illumination_fraction.html#illumination_fraction", "illumination_fraction", 'routine in <a href="tools/illumination_fraction.html">illumination_fraction.pro</a>', "illumination_fraction.pro", "", "illumination_fraction", "	Assuming the body gbx is a sphere, this routine computes the fraction of 	its disk that appears illuminated by the source sund, as seen from the 	inertial position vectors v.    ", "gbxAny subclass of GLOBE.   sundAny subclass of STAR representing the sun.   vArray (nv,3) Inertial positions of viewer.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nv) giving the illumination fraction for each gbx.    ");
  
  

libdata[libdataItem++] = new Array("tools/image_ansa.html", "image_ansa.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_ansa.pro", "", "", "	Computes ring ansa true anomalies.    ", "", "          -1", "       Written by:     Spitale   ");
  
  
  libdata[libdataItem++] = new Array("tools/image_ansa.html#ia_compute", "ia_compute", 'routine in <a href="tools/image_ansa.html">image_ansa.pro</a>', "image_ansa.pro", "", "ia_compute", "", "image_ptcdrdradiusta0", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/image_ansa.html#image_ansa", "image_ansa", 'routine in <a href="tools/image_ansa.html">image_ansa.pro</a>', "image_ansa.pro", "", "image_ansa", "", "image_ptscdrdradius", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/image_ansa_far.html", "image_ansa_far.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_ansa_far.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_ansa_far.html#image_ansa_far", "image_ansa_far", 'routine in <a href="tools/image_ansa_far.html">image_ansa_far.pro</a>', "image_ansa_far.pro", "", "image_ansa_far", "	Computes ring ansa longitudes assuming observer is very far from the 	rings.    ", "cdCamera descriptor.   rd", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2) of longitudes    ");
  
  

libdata[libdataItem++] = new Array("tools/image_azimuth.html", "image_azimuth.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_azimuth.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_azimuth.html#image_azimuth", "image_azimuth", 'routine in <a href="tools/image_azimuth.html">image_azimuth.pro</a>', "image_azimuth.pro", "", "image_azimuth", "	Computes azimuth angle of projection of inertial vector v 	into the image plane.    ", "cdAny subclass of GLOBE.   vInertial vector.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Image azimuth.  When the image is displayed with (0,0) at 	the top-left, the azimuth angle is measured counterclockwise from 	 up .    ");
  
  

libdata[libdataItem++] = new Array("tools/image_azimuth_pos.html", "image_azimuth_pos.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_azimuth_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_azimuth_pos.html#image_azimuth_pos", "image_azimuth_pos", 'routine in <a href="tools/image_azimuth_pos.html">image_azimuth_pos.pro</a>', "image_azimuth_pos.pro", "", "image_azimuth_pos", "	Computes azimuth angle of projection of inertial position vector v 	into the image plane.    ", "cdAny subclass of GLOBE.   vInertial position vector.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Image azimuth.  When the image is displayed with (0,0) at 	the top-left, the azimuth angle is measured counterclockwise from 	 up .    ");
  
  

libdata[libdataItem++] = new Array("tools/image_celestial_northangle.html", "image_celestial_northangle.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_celestial_northangle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_celestial_northangle.html#image_celestial_northangle", "image_celestial_northangle", 'routine in <a href="tools/image_celestial_northangle.html">image_celestial_northangle.pro</a>', "image_celestial_northangle.pro", "", "image_celestial_northangle", "	Computes the image azimuth (see image_azimuth.pro) of celestial north.    ", "orientcdCamera descriptor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Angle in radians.     ");
  
  

libdata[libdataItem++] = new Array("tools/image_interp_cam.html", "image_interp_cam.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_interp_cam.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_interp_cam.html#image_interp_cam", "image_interp_cam", 'routine in <a href="tools/image_interp_cam.html">image_interp_cam.pro</a>', "image_interp_cam.pro", "", "image_interp_cam", "       Extracts a region from an image using the desired interpolation, 	accouting for the camera point-spread function is applicable.    ", "cdvalidkinterpkmaxmaskzmaskimageAn array of image point arrays.   grid_xThe grid of x positions for interpolation   grid_yThe grid of y positions for interpolation   argsArguments to pass to the interpolation function.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Array of interpolated points at the (grid_x, grid_y) points.     ");
  
  

libdata[libdataItem++] = new Array("tools/image_northangle.html", "image_northangle.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_northangle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_northangle.html#image_northangle", "image_northangle", 'routine in <a href="tools/image_northangle.html">image_northangle.pro</a>', "image_northangle.pro", "", "image_northangle", "	Computes the image azimuth (see image_azimuth.pro) of the north 	direction on the surface of the given body at the specified pixel 	location p.    ", "validcdCamera descriptor.   gbxAny subclass of GLOBE.   pArray (2) giving the image point.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Angle in radians.     ");
  
  

libdata[libdataItem++] = new Array("tools/composite/image_origin.html", "image_origin.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "image_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/image_origin.html#image_origin", "image_origin", 'routine in <a href="tools/composite/image_origin.html">image_origin.pro</a>', "image_origin.pro", "", "image_origin", "	Returns the origin of a map or camera image.    ", "cd", "NV/LIB/TOOLS/COMPOSITE", "	2-element array giving the origin in the x and y directions.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/image_predict.html", "image_predict.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_predict.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_predict.html#image_predict", "image_predict", 'routine in <a href="tools/image_predict.html">image_predict.pro</a>', "image_predict.pro", "", "image_predict", "", "cGGposcdrxgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/image_predict_orbit.html", "image_predict_orbit.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_predict_orbit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_predict_orbit.html#image_predict_orbit", "image_predict_orbit", 'routine in <a href="tools/image_predict_orbit.html">image_predict_orbit.pro</a>', "image_predict_orbit.pro", "", "image_predict_orbit", "", "cGGposppradecnotestsloprxtcdgbxrx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/image_predict_orbit_error.html", "image_predict_orbit_error.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_predict_orbit_error.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_predict_orbit_error.html#image_predict_orbit_error", "image_predict_orbit_error", 'routine in <a href="tools/image_predict_orbit_error.html">image_predict_orbit_error.pro</a>', "image_predict_orbit_error.pro", "", "image_predict_orbit_error", "", "cGGnsamplesimplecdgbxrxsig_rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/image_predict_ring.html", "image_predict_ring.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_predict_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_predict_ring.html#image_predict_ring", "image_predict_ring", 'routine in <a href="tools/image_predict_ring.html">image_predict_ring.pro</a>', "image_predict_ring.pro", "", "image_predict_ring", "", "sundrxtcdgbxrx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/image_predict_wind.html", "image_predict_wind.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_predict_wind.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_predict_wind.html#image_predict_wind", "image_predict_wind", 'routine in <a href="tools/image_predict_wind.html">image_predict_wind.pro</a>', "image_predict_wind.pro", "", "image_predict_wind", "", "posvdegcdgbxt0surf_ptvel", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/image_shift.html", "image_shift.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "image_shift.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/image_shift.html#image_shift", "image_shift", 'routine in <a href="tools/image_shift.html">image_shift.pro</a>', "image_shift.pro", "", "image_shift", "	Shifts an image by a specified (non-integer) amount using 	interpolation.  If applicable, the camera pont-spread function 	is accounted for in the interpolation.    ", "cdimage2-D array giving the image.   dxOffset in the x direction.   dyOffset in the y direction.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Shifted image.     ");
  
  

libdata[libdataItem++] = new Array("tools/composite/image_size.html", "image_size.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "image_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/image_size.html#image_size", "image_size", 'routine in <a href="tools/composite/image_size.html">image_size.pro</a>', "image_size.pro", "", "image_size", "	Returns the size of a map or camera image.    ", "cd", "NV/LIB/TOOLS/COMPOSITE", "	2-element array giving the size in the x and y directions.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/image_to_body.html", "image_to_body.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "image_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/image_to_body.html#image_to_body", "image_to_body", 'routine in <a href="tools/composite/image_to_body.html">image_to_body.pro</a>', "image_to_body.pro", "", "image_to_body", "       Transforms points in image coordinates to body coordinates on the 	object.    ", "hitbackallcd      Array of nt camera or map descriptor.   bx      Array of nt body descriptor (subclass of GLOBE or DISK).   p      Array (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of body-frame vectors.  Zero vectors are returned if a 	body point cannot be computed (e.g., the ray misses the planet).   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/image_to_disk.html", "image_to_disk.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "image_to_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/image_to_disk.html#image_to_disk", "image_to_disk", 'routine in <a href="tools/composite/image_to_disk.html">image_to_disk.pro</a>', "image_to_disk.pro", "", "image_to_disk", "       Transforms points in image coordinates to disk coordinates    ", "hitvalidbody_ptscdArray of nt camera or map descriptors.   dkxArray of nt object descriptors (subclass of DISK).   pArray (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of disk positions.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/image_to_globe.html", "image_to_globe.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "image_to_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/image_to_globe.html#image_to_globe", "image_to_globe", 'routine in <a href="tools/composite/image_to_globe.html">image_to_globe.pro</a>', "image_to_globe.pro", "", "image_to_globe", "       Transforms points in image coordinates to body globe coordinates    ", "body_ptsdiscriminantvalidcd      Array of nt camera or map descriptors.   od      Array of nt object descriptors (of type GLOBE).   p      Array (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of globe positions.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/image_to_inertial.html", "image_to_inertial.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "image_to_inertial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/image_to_inertial.html#image_to_inertial", "image_to_inertial", 'routine in <a href="tools/composite/image_to_inertial.html">image_to_inertial.pro</a>', "image_to_inertial.pro", "", "image_to_inertial", "       Transforms points in image coordinates to unit vectors with 	inertial coordinates.    ", "cdArray of nt camera descriptors.   pArray (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of of inertial unit vectors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/image_to_map.html", "image_to_map.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "image_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/image_to_map.html#image_to_map", "image_to_map", 'routine in <a href="tools/composite/image_to_map.html">image_to_map.pro</a>', "image_to_map.pro", "", "image_to_map", "       Transforms points in image coordinates to map coordinates.    ", "bxIf md is not a map descriptor, bx gives a subclass of BODY 		needed for transforming surface to map coordinates.   validIndices of valid output points.   body_ptsBody coordinates of output points.    mdArray of nt map or camera descriptors.   pArray (2 x nv x nt) of image points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of map points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/image_to_orbit.html", "image_to_orbit.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "image_to_orbit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/image_to_orbit.html#image_to_orbit", "image_to_orbit", 'routine in <a href="tools/composite/image_to_orbit.html">image_to_orbit.pro</a>', "image_to_orbit.pro", "", "image_to_orbit", "	Computes orbital elements corresponding to image points, assuming 	a circular orbit.    ", "GG_cdArray of nt camera or map descriptors.   _gbxArray of nt globe descriptor describing the primary body.   dkx0image_ptsArray (1,3,nt) of image points.    ", "NV/LIB/TOOLS/COMPOSITE", "	Array of nt disk descriptors reresenting the computed orbits.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/old/image_to_ra_dec.html", "image_to_ra_dec.pro", '.pro file in <a href="tools/composite/old/dir-overview.html">tools/composite/old/ directory</a>', "image_to_ra_dec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/old/image_to_ra_dec.html#image_to_ra_dec", "image_to_ra_dec", 'routine in <a href="tools/composite/old/image_to_ra_dec.html">image_to_ra_dec.pro</a>', "image_to_ra_dec.pro", "", "image_to_ra_dec", "       Translates a point in image coordinates to polar inertial        coordinates (right ascension and declination) with origin at        the camera (spacecraft).    ", "cd      Camera or map descriptor   p      An array of image points   ", "NV/LIB/TOOLS", "       An array of surface positions.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/image_to_radec.html", "image_to_radec.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "image_to_radec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/image_to_radec.html#image_to_radec", "image_to_radec", 'routine in <a href="tools/composite/image_to_radec.html">image_to_radec.pro</a>', "image_to_radec.pro", "", "image_to_radec", "       Transforms points in image coordinates to polar ra/dec coords 	w.r.t the inertial frame.    ", "body_ptscdArray of nt camera descriptors.   pArray (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of radec vectors in the cd BODY frame.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/image_to_surface.html", "image_to_surface.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "image_to_surface.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/image_to_surface.html#image_to_surface", "image_to_surface", 'routine in <a href="tools/composite/image_to_surface.html">image_to_surface.pro</a>', "image_to_surface.pro", "", "image_to_surface", "       Transforms points in image coordinates to surface coordinates.    ", "body_ptsdiscriminanthitvalidcd     Array of nt camera or map descriptor   bx     Array of nt object descriptors (subclass of BODY).   p      Array (2 x nv x nt) of image points.   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of surface points.  In the case of a camera descriptor, ray 	tracing is used.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/impact_param.html", "impact_param.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "impact_param.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/impact_param.html#impact_param", "impact_param", 'routine in <a href="tools/impact_param.html">impact_param.pro</a>', "impact_param.pro", "", "impact_param", "	Computes the impact parameter of a vector originating at the 	given camera, relative to the given planet object.    ", "pcdCamera descriptor.   pdPlanet descriptor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Shifted image.     ");
  
  

libdata[libdataItem++] = new Array("tools/in_image.html", "in_image.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "in_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/in_image.html#in_image", "in_image", 'routine in <a href="tools/in_image.html">in_image.pro</a>', "in_image.pro", "", "in_image", "	Determines which input points lie within an image described by the 	given camera descriptor.    ", "xminxmaxyminymaxslopcornerscdCamera descriptor.   _image_pts", "NV/LIB/TOOLS", "       Written by:     Spitale          Subscripts of points that lie in the image.  -1 if there are none.     ");
  
  

libdata[libdataItem++] = new Array("tools/photometry/incidence_angle.html", "incidence_angle.pro", '.pro file in <a href="tools/photometry/dir-overview.html">tools/photometry/ directory</a>', "incidence_angle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/photometry/incidence_angle.html#incidence_angle", "incidence_angle", 'routine in <a href="tools/photometry/incidence_angle.html">incidence_angle.pro</a>', "incidence_angle.pro", "", "incidence_angle", "", "surface_coordsun_coordvertical", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/composite/inertial_to_disk.html", "inertial_to_disk.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "inertial_to_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/inertial_to_disk.html#inertial_to_disk", "inertial_to_disk", 'routine in <a href="tools/composite/inertial_to_disk.html">inertial_to_disk.pro</a>', "inertial_to_disk.pro", "", "inertial_to_disk", "       Transforms vectors in inertial coordinates to disk coordinates.    ", "dkxArray of nt descriptors, subclass of DISK.   vArray (nv x 3 x nt) of inertial vectors.   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale, 2/2004          Array (nv x 3 x nt) of disk points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/inertial_to_disk_pos.html", "inertial_to_disk_pos.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "inertial_to_disk_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/inertial_to_disk_pos.html#inertial_to_disk_pos", "inertial_to_disk_pos", 'routine in <a href="tools/composite/inertial_to_disk_pos.html">inertial_to_disk_pos.pro</a>', "inertial_to_disk_pos.pro", "", "inertial_to_disk_pos", "       Transforms position vectors in inertial coordinates to disk 	coordinates.    ", "dkxArray of nt descritors, subclass of DISK.   vArray (nv x 3 x nt) of inertial vectors   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale, 3/2004          Array (nv x 3 x nt) of disk points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/inertial_to_globe.html", "inertial_to_globe.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "inertial_to_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/inertial_to_globe.html#inertial_to_globe", "inertial_to_globe", 'routine in <a href="tools/composite/inertial_to_globe.html">inertial_to_globe.pro</a>', "inertial_to_globe.pro", "", "inertial_to_globe", "       Transforms vectors in inertial coordinates to globe coordinates.    ", "gbxArray of nt descriptors, subclass of globe.   vArray (nv x 3 x nt) of inertial vectors.   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale, 9/2012          Array (nv x 3 x nt) of globe points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/inertial_to_globe_pos.html", "inertial_to_globe_pos.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "inertial_to_globe_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/inertial_to_globe_pos.html#inertial_to_globe_pos", "inertial_to_globe_pos", 'routine in <a href="tools/composite/inertial_to_globe_pos.html">inertial_to_globe_pos.pro</a>', "inertial_to_globe_pos.pro", "", "inertial_to_globe_pos", "       Transforms position vectors in inertial coordinates to globe 	coordinates.    ", "gbxArray of nt descritors, subclass of globe.   vArray (nv x 3 x nt) of inertial vectors   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale, 9/2012          Array (nv x 3 x nt) of globe points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/inertial_to_image.html", "inertial_to_image.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "inertial_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/inertial_to_image.html#inertial_to_image", "inertial_to_image", 'routine in <a href="tools/composite/inertial_to_image.html">inertial_to_image.pro</a>', "inertial_to_image.pro", "", "inertial_to_image", "       Transforms vectors in inertial coordinates to image coordinates    ", "cdArray of nt camera descriptors.   vArray (nv x 3 x nt) of inertial vectors   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale          Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/inertial_to_image_pos.html", "inertial_to_image_pos.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "inertial_to_image_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/inertial_to_image_pos.html#inertial_to_image_pos", "inertial_to_image_pos", 'routine in <a href="tools/composite/inertial_to_image_pos.html">inertial_to_image_pos.pro</a>', "inertial_to_image_pos.pro", "", "inertial_to_image_pos", "       Transforms vectors in inertial coordinates to image coordinates    ", "cdArray of nt camera descriptors.   vArray (nv x 3 x nt) of inertial vectors   ", "NV/LIB/TOOLS/COMPOSITE", "       Written by:     Spitale          Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/ipt/ipt_chisq.html", "ipt_chisq.pro", '.pro file in <a href="tools/ipt/dir-overview.html">tools/ipt/ directory</a>', "ipt_chisq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/ipt/ipt_chisq.html#ipt_chisq", "ipt_chisq", 'routine in <a href="tools/ipt/ipt_chisq.html">ipt_chisq.pro</a>', "ipt_chisq.pro", "", "ipt_chisq", "	Computes chi-squared value for given point fit parameters.    ", "norm	If set, the returned value is normalized by dividing 			it by the number of degrees of freedom.   dxy	Array (2) giving x- and y-offset solution.   dtheta	Scalar giving theta-offset solution.   fix	Array specifying which parameters to fix as 			[dx,dy,dtheta].   pts_dx        Array (n_points) containing offset of actual                        point from predicted point in x.   pts_dy        Array (n_points) containing offset of actual                        point from predicted point in y.   pts           Array (2,n_points) of image coordinates corresponding                        to actual point.   axis	Array (2) giving image coordinates of rotation axis 			in the case of a 3-parameter fit.   ", "UTIL/NV/LIB/TOOLS/IPT", " 	Written by:	Haemmerle, 12/1998   	The chi-squared value is returned.    STATUS: 	Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/ipt/ipt_coeff.html", "ipt_coeff.pro", '.pro file in <a href="tools/ipt/dir-overview.html">tools/ipt/ directory</a>', "ipt_coeff.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/ipt/ipt_coeff.html#ipt_coeff", "ipt_coeff", 'routine in <a href="tools/ipt/ipt_coeff.html">ipt_coeff.pro</a>', "ipt_coeff.pro", "", "ipt_coeff", "	Computes coefficients for the 2- or 3-parameter linear least-square fit.    	Since the fit has been linearized, it can be written as a matrix 	equation:  				Mx = b,  	where x is the 3-element column vector [dx, dy, dtheta] of the 	independent variables. 	This routine computes the matrix M and the 	vector b.  Once these are known, mbfit can be used to solve the 	linear system.  Furthermore, since the fit is linear, a simultaneous 	fit can be performed by simply adding together any number of 	coefficient matrices and vectors, which can also be done using 	mbfit.    	The fit associated with these coefficients has been linearized 	and is only valid for small corrections.  For larger corrections, 	this procedure can be iterated.    STATUS: 	Complete.    ", "M3x3 matrix of coefficients for the linear fit.   b3-element column vector rhs of the linear fit.    sigmaUncertainty in each point position.   pts_x        Value containing offset of actual 			point from predicted point in x.   pts_y         Value containing offset of actual                        point from predicted point in y.   pts        Array (2) of image coordinates corresponding 			to actual point.   axis	Array (2) giving image coordinates of rotation axis 			in the case of a 3-parameter fit.   ", "UTIL/NV/LIB/TOOLS/IPT", " 	Written by:	Haemmerle, 5/1998   ");
  
  

libdata[libdataItem++] = new Array("dat/keyval_struct__define.html", "keyval_struct__define.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "keyval_struct__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/keyval_struct__define.html#keyval_struct__define", "keyval_struct__define", 'routine in <a href="dat/keyval_struct__define.html">keyval_struct__define.pro</a>', "keyval_struct__define.pro", "", "keyval_struct__define", "	Structure defining a keyword/value pair.    ", "", "NV/SYS", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("tools/photometry/local_vertical.html", "local_vertical.pro", '.pro file in <a href="tools/photometry/dir-overview.html">tools/photometry/ directory</a>', "local_vertical.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/photometry/local_vertical.html#local_vertical", "local_vertical", 'routine in <a href="tools/photometry/local_vertical.html">local_vertical.pro</a>', "local_vertical.pro", "", "local_vertical", "", "gbdcoords", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/ltcorr.html", "ltcorr.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "ltcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/ltcorr.html#ltcorr", "ltcorr", 'routine in <a href="tools/ltcorr.html">ltcorr.pro</a>', "ltcorr.pro", "", "ltcorr", "	Performs a light-travel-time correction.    ", "cepsiloniterateobs_bxArray(nt) of any subclass of BODY describing the targets.   targ_bx", "NV/LIB/TOOLS", "       Written by:     Spitale   ");
  
  

libdata[libdataItem++] = new Array("map/map_center.html", "map_center.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_center.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_center.html#map_center", "map_center", 'routine in <a href="map/map_center.html">map_center.pro</a>', "map_center.pro", "", "map_center", "	Returns the center for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nt) of centers associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_centric_to_graphic.html", "map_centric_to_graphic.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_centric_to_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_centric_to_graphic.html#map_centric_to_graphic", "map_centric_to_graphic", 'routine in <a href="map/map_centric_to_graphic.html">map_centric_to_graphic.pro</a>', "map_centric_to_graphic.pro", "", "map_centric_to_graphic", "	Converts latitudes from the planetocentric to the planetographic 	convention.    ", "mdArray (nt) of map descriptors.   map_pts0", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map points in which the latitudes are 	planetographic.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_condense.html", "map_condense.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_condense.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_condense.html#map_condense", "map_condense", 'routine in <a href="map/map_condense.html">map_condense.pro</a>', "map_condense.pro", "", "map_condense", "", "mdbounds", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_create_descriptors.html", "map_create_descriptors.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_create_descriptors.html#map_create_descriptors", "map_create_descriptors", 'routine in <a href="map/map_create_descriptors.html">map_create_descriptors.pro</a>', "map_create_descriptors.pro", "", "map_create_descriptors", "	Init method for the MAP class.    ", "crdmdabbrevusernametasksudataunametypefn_map_to_imagefn_image_to_mapfn_data_psizeorigincenterscaleunitsgraphicrotateradiinNumber of descriptors to create.   end_keywords", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998   	Newly created or or freshly initialized disk descriptors, depending 	on the presence of the dkd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_fn_data_p.html", "map_fn_data_p.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_fn_data_p.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_fn_data_p.html#map_fn_data_p", "map_fn_data_p", 'routine in <a href="map/map_fn_data_p.html">map_fn_data_p.pro</a>', "map_fn_data_p.pro", "", "map_fn_data_p", "	Returns the function data pointer for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Function data pointer associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_fn_image_to_map.html", "map_fn_image_to_map.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_fn_image_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_fn_image_to_map.html#map_fn_image_to_map", "map_fn_image_to_map", 'routine in <a href="map/map_fn_image_to_map.html">map_fn_image_to_map.pro</a>', "map_fn_image_to_map.pro", "", "map_fn_image_to_map", "	Returns the name of the image->map function for each given map 	descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of image->map function names associated with each given 	map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_fn_map_to_image.html", "map_fn_map_to_image.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_fn_map_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_fn_map_to_image.html#map_fn_map_to_image", "map_fn_map_to_image", 'routine in <a href="map/map_fn_map_to_image.html">map_fn_map_to_image.pro</a>', "map_fn_map_to_image.pro", "", "map_fn_map_to_image", "	Returns the name of the map->image function for each given map 	descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of map->image function names associated with each given 	map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_fn_valid.html", "map_fn_valid.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_fn_valid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_fn_valid.html#map_fn_valid", "map_fn_valid", 'routine in <a href="map/map_fn_valid.html">map_fn_valid.pro</a>', "map_fn_valid.pro", "", "map_fn_valid", "	Returns the name of the map->image validation function for each given 	map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 8/2012  	Adapted by:	Spitale, 5/2016   	Array (nt) of map->image validation function names associated with each given 	map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_get_grid_points.html", "map_get_grid_points.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_get_grid_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_get_grid_points.html#map_get_grid_points", "map_get_grid_points", 'routine in <a href="map/map_get_grid_points.html">map_get_grid_points.pro</a>', "map_get_grid_points.pro", "", "map_get_grid_points", "	Generates a lat/lon grid of points.    ", "latArray giving the latitudes for each constant latitude line.   lonArray giving the longitudes for each constant longitude line.   ntNumber of grids to produce.   scan_latLatitudes to scan for each constant longitude line.   scan_lonLongitudes to scan for each constant latitude line.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,np,nt) of map coordinate points where np is the number of 	scan_lats times the number of scan_lons.    STATUS: 	Complete  	Adapted by:	Spitale, 5/2016    ");
  
  

libdata[libdataItem++] = new Array("map/map_get_ranges.html", "map_get_ranges.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_get_ranges.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_get_ranges.html#map_get_ranges", "map_get_ranges", 'routine in <a href="map/map_get_ranges.html">map_get_ranges.pro</a>', "map_get_ranges.pro", "", "map_get_ranges", "	Returns ranges of valid coordinates for the given MAP object.    ", "md MAP descriptor.    ", "NV/LIB/MAP", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (2 x 2) giving the ranges in latitude, longitude.    ");
  
  

libdata[libdataItem++] = new Array("map/map_graphic.html", "map_graphic.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_graphic.html#map_graphic", "map_graphic", 'routine in <a href="map/map_graphic.html">map_graphic.pro</a>', "map_graphic.pro", "", "map_graphic", "	Returns the graphic flag for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of graphic flags associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_graphic_to_centric.html", "map_graphic_to_centric.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_graphic_to_centric.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_graphic_to_centric.html#map_graphic_to_centric", "map_graphic_to_centric", 'routine in <a href="map/map_graphic_to_centric.html">map_graphic_to_centric.pro</a>', "map_graphic_to_centric.pro", "", "map_graphic_to_centric", "	Converts latitudes from the planetographic to the planetocentric 	convention.    ", "mdArray (nt) of map descriptors.   map_pts0", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map points in which the latitudes are 	planetocentric.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map.html", "map_image_to_map.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map.html#map_image_to_map", "map_image_to_map", 'routine in <a href="map/map_image_to_map.html">map_image_to_map.pro</a>', "map_image_to_map.pro", "", "map_image_to_map", "	Transforms the given image points to map coordinate points.    ", "validmd_image_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map_equatorial_ring.html", "map_image_to_map_equatorial_ring.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map_equatorial_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_equatorial_ring.html#map_image_to_map_equatorial_ring", "map_image_to_map_equatorial_ring", 'routine in <a href="map/map_image_to_map_equatorial_ring.html">map_image_to_map_equatorial_ring.pro</a>', "map_image_to_map_equatorial_ring.pro", "", "map_image_to_map_equatorial_ring", "	Transforms the given image points to map coordinate points 	using a rectangular projection.    ", "validmdimage_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		lat = (y - origin[1])/a[0] + center[0]  		lon = (x - origin[0])/a[1] + center[1]  	where the latitude equation is solved iteratively.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_equatorial_ring.html#_map_image_to_map_rectangular", "_map_image_to_map_rectangular", 'routine in <a href="map/map_image_to_map_equatorial_ring.html">map_image_to_map_equatorial_ring.pro</a>', "map_image_to_map_equatorial_ring.pro", "", "_map_image_to_map_rectangular", "", "validmdimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map_mercator.html", "map_image_to_map_mercator.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map_mercator.pro", "", "", "	Transforms the given image points to map coordinate points 	using a mercator projection.    ", "", "          -1", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_mercator.html#immc_fn", "immc_fn", 'routine in <a href="map/map_image_to_map_mercator.html">map_image_to_map_mercator.pro</a>', "map_image_to_map_mercator.pro", "", "immc_fn", "", "xdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_mercator.html#map_image_to_map_mercator", "map_image_to_map_mercator", 'routine in <a href="map/map_image_to_map_mercator.html">map_image_to_map_mercator.pro</a>', "map_image_to_map_mercator.pro", "", "map_image_to_map_mercator", "", "validmd_image_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_mercator.html#_map_image_to_map_mercator", "_map_image_to_map_mercator", 'routine in <a href="map/map_image_to_map_mercator.html">map_image_to_map_mercator.pro</a>', "map_image_to_map_mercator.pro", "", "_map_image_to_map_mercator", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map_mollweide.html", "map_image_to_map_mollweide.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map_mollweide.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_mollweide.html#map_image_to_map_mollweide", "map_image_to_map_mollweide", 'routine in <a href="map/map_image_to_map_mollweide.html">map_image_to_map_mollweide.pro</a>', "map_image_to_map_mollweide.pro", "", "map_image_to_map_mollweide", "", "validmd_image_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_mollweide.html#_map_image_to_map_mollweide", "_map_image_to_map_mollweide", 'routine in <a href="map/map_image_to_map_mollweide.html">map_image_to_map_mollweide.pro</a>', "map_image_to_map_mollweide.pro", "", "_map_image_to_map_mollweide", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map_orthographic.html", "map_image_to_map_orthographic.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map_orthographic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_orthographic.html#map_image_to_map_orthographic", "map_image_to_map_orthographic", 'routine in <a href="map/map_image_to_map_orthographic.html">map_image_to_map_orthographic.pro</a>', "map_image_to_map_orthographic.pro", "", "map_image_to_map_orthographic", "	Transforms the given image points to map coordinate points 	using an orthographic projection.    ", "validmd_image_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points in an orthographic 	projection.  This projection portrays a planet as seen from a 	great distance.  Scale is true only at the map center.  Areas 	are distorted, especially away from the map center.  	With:  	  R = min(size[0],size[1])/2 * scale,  	and:  	  rho = sqrt(x^2 + y^2),  	and:  	  c = asin(rho/R),  	the transformation is:  	  lat = asin( cos(c)*sin(center[0]) + 	                    y*sin(c)*cos(center[0])/rho ) / units[0]  	  lon = center[1] + 	          atan( x*sin(c)/(rho*cos(center[0])*cos(c) - 	                        y*sin(center[0])*sin(c)) ) + units[1]   	See [1], p. 150 for the mathematical derivation.  	[1] Snyder (1987) 	    Map projections -- A working manual 	    USGS professional paper 1395     STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_orthographic.html#_map_image_to_map_orthographic", "_map_image_to_map_orthographic", 'routine in <a href="map/map_image_to_map_orthographic.html">map_image_to_map_orthographic.pro</a>', "map_image_to_map_orthographic.pro", "", "_map_image_to_map_orthographic", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map_orthographic_disk.html", "map_image_to_map_orthographic_disk.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map_orthographic_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_orthographic_disk.html#map_image_to_map_orthographic_disk", "map_image_to_map_orthographic_disk", 'routine in <a href="map/map_image_to_map_orthographic_disk.html">map_image_to_map_orthographic_disk.pro</a>', "map_image_to_map_orthographic_disk.pro", "", "map_image_to_map_orthographic_disk", "	Transforms the given image points to map coordinate points 	using an orthographic projection for a disk.    ", "validmd_image_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points in an orthographic disk 	projection.  This projection portrays a disk as seen from a 	great distance.  Scale is uniform, but it is only true if the 	projection is polar.  Likewise, areas are distorted for non-polar 	projections.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_orthographic_disk.html#_map_image_to_map_orthographic_disk", "_map_image_to_map_orthographic_disk", 'routine in <a href="map/map_image_to_map_orthographic_disk.html">map_image_to_map_orthographic_disk.pro</a>', "map_image_to_map_orthographic_disk.pro", "", "_map_image_to_map_orthographic_disk", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map_rectangular.html", "map_image_to_map_rectangular.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map_rectangular.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_rectangular.html#map_image_to_map_rectangular", "map_image_to_map_rectangular", 'routine in <a href="map/map_image_to_map_rectangular.html">map_image_to_map_rectangular.pro</a>', "map_image_to_map_rectangular.pro", "", "map_image_to_map_rectangular", "	Transforms the given image points to map coordinate points 	using a rectangular projection.    ", "validmdimage_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		lat = (y - origin[1])/a[0] + center[0]  		lon = (x - origin[0])/a[1] + center[1]  	where the latitude equation is solved iteratively.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_rectangular.html#_map_image_to_map_rectangular", "_map_image_to_map_rectangular", 'routine in <a href="map/map_image_to_map_rectangular.html">map_image_to_map_rectangular.pro</a>', "map_image_to_map_rectangular.pro", "", "_map_image_to_map_rectangular", "", "validmdimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map_rectangular_disk.html", "map_image_to_map_rectangular_disk.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map_rectangular_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_rectangular_disk.html#map_image_to_map_rectangular_disk", "map_image_to_map_rectangular_disk", 'routine in <a href="map/map_image_to_map_rectangular_disk.html">map_image_to_map_rectangular_disk.pro</a>', "map_image_to_map_rectangular_disk.pro", "", "map_image_to_map_rectangular_disk", "	Transforms the given image points to map coordinate points 	using a rectangular projection on a disk.    ", "validmdimage_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 6/2016   	Array (2,nv,nt) of map coordinate points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		lat = (y - origin[1])/a[0] + center[0]  		lon = (x - origin[0])/a[1] + center[1]  	where the latitude equation is solved iteratively.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map_ring.html", "map_image_to_map_ring.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_ring.html#map_image_to_map_ring", "map_image_to_map_ring", 'routine in <a href="map/map_image_to_map_ring.html">map_image_to_map_ring.pro</a>', "map_image_to_map_ring.pro", "", "map_image_to_map_ring", "	Transforms the given image points to map coordinate points 	using a rectangular projection.    ", "validmdimage_ptsArray (2,nv,nt) of map image points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map coordinate points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		lat = (y - origin[1])/a[0] + center[0]  		lon = (x - origin[0])/a[1] + center[1]  	where the latitude equation is solved iteratively.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_ring.html#_map_image_to_map_rectangular", "_map_image_to_map_rectangular", 'routine in <a href="map/map_image_to_map_ring.html">map_image_to_map_ring.pro</a>', "map_image_to_map_ring.pro", "", "_map_image_to_map_rectangular", "", "validmdimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map_sinusoidal.html", "map_image_to_map_sinusoidal.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map_sinusoidal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_sinusoidal.html#map_image_to_map_sinusoidal", "map_image_to_map_sinusoidal", 'routine in <a href="map/map_image_to_map_sinusoidal.html">map_image_to_map_sinusoidal.pro</a>', "map_image_to_map_sinusoidal.pro", "", "map_image_to_map_sinusoidal", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_image_to_map_stereographic.html", "map_image_to_map_stereographic.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_image_to_map_stereographic.pro", "", "", "	Transforms the given image points to map coordinate points 	using an stereographic projection.    ", "", "          -1", " 	Written by:	Spitale, 1/1998   ");
  
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_stereographic.html#imst_fn", "imst_fn", 'routine in <a href="map/map_image_to_map_stereographic.html">map_image_to_map_stereographic.pro</a>', "map_image_to_map_stereographic.pro", "", "imst_fn", "", "xdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("map/map_image_to_map_stereographic.html#map_image_to_map_stereographic", "map_image_to_map_stereographic", 'routine in <a href="map/map_image_to_map_stereographic.html">map_image_to_map_stereographic.pro</a>', "map_image_to_map_stereographic.pro", "", "map_image_to_map_stereographic", "", "validmd_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_lookup_defaults.html", "map_lookup_defaults.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_lookup_defaults.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_lookup_defaults.html#map_lookup_defaults", "map_lookup_defaults", 'routine in <a href="map/map_lookup_defaults.html">map_lookup_defaults.pro</a>', "map_lookup_defaults.pro", "", "map_lookup_defaults", "", "md0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_lookup_transformations.html", "map_lookup_transformations.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_lookup_transformations.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_lookup_transformations.html#map_lookup_transformations", "map_lookup_transformations", 'routine in <a href="map/map_lookup_transformations.html">map_lookup_transformations.pro</a>', "map_lookup_transformations.pro", "", "map_lookup_transformations", "", "_mdfn_map_to_imagefn_image_to_map", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image.html", "map_map_to_image.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image.html#map_map_to_image", "map_map_to_image", 'routine in <a href="map/map_map_to_image.html">map_map_to_image.pro</a>', "map_map_to_image.pro", "", "map_map_to_image", "	Transforms the given map points to map image points.    ", "validIndices of all input points that correspond to valid 		output image points.  If not se then all points are 		valid.    nowrapIf set, then points that lie outide the map will not be 		around to the other side.   allmd_map_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,nv,nt) of map image points.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image_equatorial_ring.html", "map_map_to_image_equatorial_ring.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image_equatorial_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_equatorial_ring.html#map_map_to_image_equatorial_ring", "map_map_to_image_equatorial_ring", 'routine in <a href="map/map_map_to_image_equatorial_ring.html">map_map_to_image_equatorial_ring.pro</a>', "map_map_to_image_equatorial_ring.pro", "", "map_map_to_image_equatorial_ring", "	Transforms the given map points to map image points using a 	rectangular projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map image points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		x = a[1] * (lon - center[1]) + origin[0]  		y = a[0] * (lat - center[0]) + origin[1]    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_equatorial_ring.html#_map_map_to_image_rectangular", "_map_map_to_image_rectangular", 'routine in <a href="map/map_map_to_image_equatorial_ring.html">map_map_to_image_equatorial_ring.pro</a>', "map_map_to_image_equatorial_ring.pro", "", "_map_map_to_image_rectangular", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image_mercator.html", "map_map_to_image_mercator.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image_mercator.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_mercator.html#map_map_to_image_mercator", "map_map_to_image_mercator", 'routine in <a href="map/map_map_to_image_mercator.html">map_map_to_image_mercator.pro</a>', "map_map_to_image_mercator.pro", "", "map_map_to_image_mercator", "	Transforms the given map points to map image points using the 	mercator projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,nv,nt) of map coordinate points in a mercator projection. 	This projection results from projecting a sphere onto a cylinder 	that is tangent at the equator.  The scale is true along the equator 	only.  Areas are distorted, especially near the poles.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	and:  		e = sqrt(1 - (A/(B+C)/2)^2),  	where A, B, and C are the triaxial ellipsoid radii, the 	transformation is:  		x = a[1] * (lon - center[1]) + origin[0]  		y = a[0] * log( tan(pi/4 + lat/2) * 		  ( (1 - e*sin(lat))/(1 + e*sin(lat)) )^(e/2) ) + origin[1]   	See [1], p. 44 for the mathematical derivation.  	[1] Snyder (1987) 	    Map projections -- A working manual 	    USGS professional paper 1395    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_mercator.html#_map_map_to_image_mercator", "_map_map_to_image_mercator", 'routine in <a href="map/map_map_to_image_mercator.html">map_map_to_image_mercator.pro</a>', "map_map_to_image_mercator.pro", "", "_map_map_to_image_mercator", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image_mollweide.html", "map_map_to_image_mollweide.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image_mollweide.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_mollweide.html#mimw_fn", "mimw_fn", 'routine in <a href="map/map_map_to_image_mollweide.html">map_map_to_image_mollweide.pro</a>', "map_map_to_image_mollweide.pro", "", "mimw_fn", "", "xdata", "          -1", "");
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_mollweide.html#map_map_to_image_mollweide", "map_map_to_image_mollweide", 'routine in <a href="map/map_map_to_image_mollweide.html">map_map_to_image_mollweide.pro</a>', "map_map_to_image_mollweide.pro", "", "map_map_to_image_mollweide", "", "mdmap_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_mollweide.html#_map_map_to_image_mollweide", "_map_map_to_image_mollweide", 'routine in <a href="map/map_map_to_image_mollweide.html">map_map_to_image_mollweide.pro</a>', "map_map_to_image_mollweide.pro", "", "_map_map_to_image_mollweide", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image_orthographic.html", "map_map_to_image_orthographic.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image_orthographic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_orthographic.html#map_map_to_image_orthographic", "map_map_to_image_orthographic", 'routine in <a href="map/map_map_to_image_orthographic.html">map_map_to_image_orthographic.pro</a>', "map_map_to_image_orthographic.pro", "", "map_map_to_image_orthographic", "	Transforms the given map points to map image points using the 	orthographic projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,nv,nt) of map image points in an orthographic 	projection.  This projection portrays a planet as seen from a 	great distance.  Scale is true only at the map center.  Areas 	are distorted, especially away from the map center.  	With:  	  R = min(size[0],size[1])/2 * scale  	the transformation is:  	  x = R * cos(lat/units[0]) * sin(lon/units[1] 0 center[1]) + origin[0]  	  y = R * 	     ( cos(center[0])*sin(lat/units[0]) - 	        sin(center[0])*cos(lat/units[0])*cos(lon - center[1]) ) + 	                                                            origin[1]  	See [1], p. 149 for the mathematical derivation.  	[1] Snyder (1987) 	    Map projections -- A working manual 	    USGS professional paper 1395    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image_orthographic_disk.html", "map_map_to_image_orthographic_disk.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image_orthographic_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_orthographic_disk.html#map_map_to_image_orthographic_disk", "map_map_to_image_orthographic_disk", 'routine in <a href="map/map_map_to_image_orthographic_disk.html">map_map_to_image_orthographic_disk.pro</a>', "map_map_to_image_orthographic_disk.pro", "", "map_map_to_image_orthographic_disk", "	Transforms the given map points to map image points using the 	orthographic projection on a disk.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,nv,nt) of map image points in an orthographic disk 	projection.  This projection portrays a disk as seen from a 	great distance.  Scale is uniform, but it is only true if the 	projection is polar.  Likewise, areas are distorted for non-polar 	projections.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_orthographic_disk.html#_map_map_to_image_orthographic_disk", "_map_map_to_image_orthographic_disk", 'routine in <a href="map/map_map_to_image_orthographic_disk.html">map_map_to_image_orthographic_disk.pro</a>', "map_map_to_image_orthographic_disk.pro", "", "_map_map_to_image_orthographic_disk", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image_rectangular.html", "map_map_to_image_rectangular.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image_rectangular.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_rectangular.html#map_map_to_image_rectangular", "map_map_to_image_rectangular", 'routine in <a href="map/map_map_to_image_rectangular.html">map_map_to_image_rectangular.pro</a>', "map_map_to_image_rectangular.pro", "", "map_map_to_image_rectangular", "	Transforms the given map points to map image points using a 	rectangular projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map image points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		x = a[1] * (lon - center[1]) + origin[0]  		y = a[0] * (lat - center[0]) + origin[1]    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_rectangular.html#_map_map_to_image_rectangular", "_map_map_to_image_rectangular", 'routine in <a href="map/map_map_to_image_rectangular.html">map_map_to_image_rectangular.pro</a>', "map_map_to_image_rectangular.pro", "", "_map_map_to_image_rectangular", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image_rectangular_disk.html", "map_map_to_image_rectangular_disk.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image_rectangular_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_rectangular_disk.html#map_map_to_image_rectangular_disk", "map_map_to_image_rectangular_disk", 'routine in <a href="map/map_map_to_image_rectangular_disk.html">map_map_to_image_rectangular_disk.pro</a>', "map_map_to_image_rectangular_disk.pro", "", "map_map_to_image_rectangular_disk", "	Transforms the given map points to map image points using a 	rectangular projection on a disk.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 6/2016   	Array (2,nv,nt) of map image points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		x = a[1] * (lon - center[1]) + origin[0]  		y = a[0] * (lat - center[0]) + origin[1]    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image_ring.html", "map_map_to_image_ring.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_ring.html#map_map_to_image_ring", "map_map_to_image_ring", 'routine in <a href="map/map_map_to_image_ring.html">map_map_to_image_ring.pro</a>', "map_map_to_image_ring.pro", "", "map_map_to_image_ring", "	Transforms the given map points to map image points using a 	rectangular projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map image points in a rectangular projection. 	In this projection, latitudes map linearly to the the y image 	direction, and longitudes map linearly to the x image direction.  	With:  		a = [size[1]/pi, size[0]/2pi] * scale * units,  	the transformation is:  		x = a[1] * (lon - center[1]) + origin[0]  		y = a[0] * (lat - center[0]) + origin[1]    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_ring.html#_map_map_to_image_rectangular", "_map_map_to_image_rectangular", 'routine in <a href="map/map_map_to_image_ring.html">map_map_to_image_ring.pro</a>', "map_map_to_image_ring.pro", "", "_map_map_to_image_rectangular", "", "validmdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image_sinusoidal.html", "map_map_to_image_sinusoidal.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image_sinusoidal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_sinusoidal.html#map_map_to_image_sinusoidal", "map_map_to_image_sinusoidal", 'routine in <a href="map/map_map_to_image_sinusoidal.html">map_map_to_image_sinusoidal.pro</a>', "map_map_to_image_sinusoidal.pro", "", "map_map_to_image_sinusoidal", "", "mdmap_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_map_to_image_stereographic.html", "map_map_to_image_stereographic.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_map_to_image_stereographic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_map_to_image_stereographic.html#map_map_to_image_stereographic", "map_map_to_image_stereographic", 'routine in <a href="map/map_map_to_image_stereographic.html">map_map_to_image_stereographic.pro</a>', "map_map_to_image_stereographic.pro", "", "map_map_to_image_stereographic", "	Transforms the given map points to map image points using the 	stereographic projection.    ", "mdmap_ptsArray (2,nv,nt) of map points.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nv,nt) of map image points in an stereographic 	projection.  This projection results from the projection through 	a sphere onto a plane, from a point on the surface of the sphere. 	Scale is true only at the map center.  Areas are distorted, 	especially away from the map center.  	With:  	  a = [size[0],size[1]]/4 * scale,  	and:  	  e = sqrt(1 - (A/(B+C)/2)^2),  	where A, B, and C are the triaxial ellipsoid radii, and:  	  lat0 = lat / units[0]  	  lon0 = lon / units[1]  	  m1 = cos(center[0]]) / sqrt(1 - e^2*sin(center[0])^2)  	  X = 2*atan(tan(pi/4 + lat/2) * $ 	       ((1 - e*sin(lat0))/(1 + e*sin(lat0)))^(e/2)) - pi/2  	  X1 = 2*atan(tan(pi/4 + center[0]/2) * 	       ((1 - e*sin(center[0]))/(1 + e*sin(center[0])))^(e/2)) - pi/2d  	  A = 2*a*scale*m1 / 	   ( cos(X1)*(1 + sin(X1)*sin(X) + cos(X1)*cos(X)*cos(lon0 - center[1])) )  	the transformation is:  	  x = A * cos(X)*sin(lon0 - center[1]) + origin[0]  	  y = A * ( cos(X1)*sin(X) - sin(X1)*cos(X)*sin(lon0 - center[1]) ) + 	                                                              origin[1]  	See [1], p. 160 for the mathematical derivation.  	[1] Snyder (1987) 	    Map projections -- A working manual 	    USGS professional paper 1395    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_match_type.html", "map_match_type.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_match_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_match_type.html#map_match_type", "map_match_type", 'routine in <a href="map/map_match_type.html">map_match_type.pro</a>', "map_match_type.pro", "", "map_match_type", "", "_type", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_optimize.html", "map_optimize.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_optimize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_optimize.html#map_optimize", "map_optimize", 'routine in <a href="map/map_optimize.html">map_optimize.pro</a>', "map_optimize.pro", "", "map_optimize", "", "mdtypesizeoriginlatminlonminradmin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_origin.html", "map_origin.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_origin.html#map_origin", "map_origin", 'routine in <a href="map/map_origin.html">map_origin.pro</a>', "map_origin.pro", "", "map_origin", "	Returns the origin for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nt) of origins associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_radii.html", "map_radii.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_radii.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_radii.html#map_radii", "map_radii", 'routine in <a href="map/map_radii.html">map_radii.pro</a>', "map_radii.pro", "", "map_radii", "	Returns the rference radii for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (3,nt) of refernce radii associated with each given map 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_radii_to_ecc.html", "map_radii_to_ecc.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_radii_to_ecc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_radii_to_ecc.html#map_radii_to_ecc", "map_radii_to_ecc", 'routine in <a href="map/map_radii_to_ecc.html">map_radii_to_ecc.pro</a>', "map_radii_to_ecc.pro", "", "map_radii_to_ecc", "", "radradii", "          -1", "");
  
  libdata[libdataItem++] = new Array("map/map_radii_to_ecc.html#___map_radii_to_ecc", "___map_radii_to_ecc", 'routine in <a href="map/map_radii_to_ecc.html">map_radii_to_ecc.pro</a>', "map_radii_to_ecc.pro", "", "___map_radii_to_ecc", "", "radii", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_replicate.html", "map_replicate.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_replicate.html#map_replicate", "map_replicate", 'routine in <a href="map/map_replicate.html">map_replicate.pro</a>', "map_replicate.pro", "", "map_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "md MAP descriptor.   dim Dimensions of the result.   ", "NV/LIB/MAP", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_rotate.html", "map_rotate.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_rotate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_rotate.html#map_rotate", "map_rotate", 'routine in <a href="map/map_rotate.html">map_rotate.pro</a>', "map_rotate.pro", "", "map_rotate", "	Returns the rotate value for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of rotate values associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("map/map_scale.html", "map_scale.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_scale.html#map_scale", "map_scale", 'routine in <a href="map/map_scale.html">map_scale.pro</a>', "map_scale.pro", "", "map_scale", "	Returns the scale factor for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of scale factors associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/map_set_bounds.html", "map_set_bounds.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "map_set_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/map_set_bounds.html#map_set_bounds", "map_set_bounds", 'routine in <a href="tools/map_set_bounds.html">map_set_bounds.pro</a>', "map_set_bounds.pro", "", "map_set_bounds", "", "mdbounds", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_set_center.html", "map_set_center.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_center.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_center.html#map_set_center", "map_set_center", 'routine in <a href="map/map_set_center.html">map_set_center.pro</a>', "map_set_center.pro", "", "map_set_center", "	Replaces the center for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   center Array (2,nt) of new map centers.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_fn_data_p.html", "map_set_fn_data_p.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_fn_data_p.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_fn_data_p.html#map_set_fn_data_p", "map_set_fn_data_p", 'routine in <a href="map/map_set_fn_data_p.html">map_set_fn_data_p.pro</a>', "map_set_fn_data_p.pro", "", "map_set_fn_data_p", "	Replaces the function data pointer for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   p", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_fn_image_to_map.html", "map_set_fn_image_to_map.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_fn_image_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_fn_image_to_map.html#map_set_fn_image_to_map", "map_set_fn_image_to_map", 'routine in <a href="map/map_set_fn_image_to_map.html">map_set_fn_image_to_map.pro</a>', "map_set_fn_image_to_map.pro", "", "map_set_fn_image_to_map", "	Replaces the name of the image->map function for each given map 	descriptor.    ", "noeventmdfn", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_fn_map_to_image.html", "map_set_fn_map_to_image.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_fn_map_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_fn_map_to_image.html#map_set_fn_map_to_image", "map_set_fn_map_to_image", 'routine in <a href="map/map_set_fn_map_to_image.html">map_set_fn_map_to_image.pro</a>', "map_set_fn_map_to_image.pro", "", "map_set_fn_map_to_image", "	Replaces the name of the map->image function for each given map 	descriptor.    ", "noeventmdfn", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_graphic.html", "map_set_graphic.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_graphic.html#map_set_graphic", "map_set_graphic", 'routine in <a href="map/map_set_graphic.html">map_set_graphic.pro</a>', "map_set_graphic.pro", "", "map_set_graphic", "	Replaces the graphic flag for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   graphic Array (nt) of new graphic flags.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_origin.html", "map_set_origin.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_origin.html#map_set_origin", "map_set_origin", 'routine in <a href="map/map_set_origin.html">map_set_origin.pro</a>', "map_set_origin.pro", "", "map_set_origin", "	Replaces the origin for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   origin Array (2,nt) of new map origins.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_radii.html", "map_set_radii.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_radii.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_radii.html#map_set_radii", "map_set_radii", 'routine in <a href="map/map_set_radii.html">map_set_radii.pro</a>', "map_set_radii.pro", "", "map_set_radii", "	Replaces the reference radii for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   radii Array (3,nt) of new reference radii.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_rotate.html", "map_set_rotate.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_rotate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_rotate.html#map_set_rotate", "map_set_rotate", 'routine in <a href="map/map_set_rotate.html">map_set_rotate.pro</a>', "map_set_rotate.pro", "", "map_set_rotate", "	Replaces the rotate value for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   rotate Array (nt) of new rotate values.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_scale.html", "map_set_scale.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_scale.html#map_set_scale", "map_set_scale", 'routine in <a href="map/map_set_scale.html">map_set_scale.pro</a>', "map_set_scale.pro", "", "map_set_scale", "	Replaces the scale factor for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   scale Array (2,nt) of new scale factors.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_size.html", "map_set_size.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_size.html#map_set_size", "map_set_size", 'routine in <a href="map/map_set_size.html">map_set_size.pro</a>', "map_set_size.pro", "", "map_set_size", "	Replaces the size for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   size Array (2,nt) of new map sizes.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_type.html", "map_set_type.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_type.html#map_set_type", "map_set_type", 'routine in <a href="map/map_set_type.html">map_set_type.pro</a>', "map_set_type.pro", "", "map_set_type", "	Replaces the type name for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   type Array (nt) of new type names.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_set_units.html", "map_set_units.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_set_units.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_set_units.html#map_set_units", "map_set_units", 'routine in <a href="map/map_set_units.html">map_set_units.pro</a>', "map_set_units.pro", "", "map_set_units", "	Replaces the units for each given map descriptor.    ", "noeventmd Array (nt) of map descriptors.   units Array (2,nt) of new map units.   ", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/map_size.html", "map_size.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_size.html#map_size", "map_size", 'routine in <a href="map/map_size.html">map_size.pro</a>', "map_size.pro", "", "map_size", "	Returns the size for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nt) of sizes associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/map_to_disk.html", "map_to_disk.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "map_to_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/map_to_disk.html#map_to_disk", "map_to_disk", 'routine in <a href="tools/composite/map_to_disk.html">map_to_disk.pro</a>', "map_to_disk.pro", "", "map_to_disk", "       Transforms points in map coordinates to disk coordinates.    ", "mdArray of nt map descriptors.   dkdmap_pts      Array (2 x nv x nt) of map points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of disk coordinates, with the altitude coordinate set to 	zero.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/map_to_globe.html", "map_to_globe.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "map_to_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/map_to_globe.html#map_to_globe", "map_to_globe", 'routine in <a href="tools/composite/map_to_globe.html">map_to_globe.pro</a>', "map_to_globe.pro", "", "map_to_globe", "       Transforms points in map coordinates to surface coordinates.    ", "mdArray of nt map descriptors.   gbxArray of nt globe descriptors.   map_ptsArray (2 x nv x nt) of map points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of globe coordinates, with the altitude coordinate set to 	zero.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/map_to_image.html", "map_to_image.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "map_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/map_to_image.html#map_to_image", "map_to_image", 'routine in <a href="tools/composite/map_to_image.html">map_to_image.pro</a>', "map_to_image.pro", "", "map_to_image", "       Transforms points from map coordinates to image coordinates.    ", "body_ptsBody coordinates of output points.    validIndices of valid output points.   mdArray of nt map descriptors describing the initial coordinate system. 		If bx is given, then this descriptor is not needed, though 		it may still be used to select between graphic/centric 		latitudes.   cdArray of nt camera or map descriptor describing the final 		coordinate system.   bxArray of nt Object descriptors (subclass of BODY).   map_pts      Array (2 x nv x nt) of map points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/map_to_surface.html", "map_to_surface.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "map_to_surface.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/map_to_surface.html#map_to_surface", "map_to_surface", 'routine in <a href="tools/composite/map_to_surface.html">map_to_surface.pro</a>', "map_to_surface.pro", "", "map_to_surface", "       Transforms points in map coordinates to surface coordinates.    ", "mdArray of nt map descriptors.   bxArray of nt object descriptors (subclass of BODY.   map_ptsArray (2 x nv x nt) of map points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of surface coordinates, with the altitude coordinate 	set to zero.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("map/map_type.html", "map_type.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_type.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_type.html#map_type", "map_type", 'routine in <a href="map/map_type.html">map_type.pro</a>', "map_type.pro", "", "map_type", "	Returns the type name for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nt) of type names associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/map_unfold.html", "map_unfold.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "map_unfold.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/map_unfold.html#map_unfold", "map_unfold", 'routine in <a href="tools/map_unfold.html">map_unfold.pro</a>', "map_unfold.pro", "", "map_unfold", "", "mdmd0map0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_units.html", "map_units.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_units.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_units.html#map_units", "map_units", 'routine in <a href="map/map_units.html">map_units.pro</a>', "map_units.pro", "", "map_units", "	Returns the units for each given map descriptor.    ", "noeventmd", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (2,nt) of units associated with each given map descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/map_units_disk.html", "map_units_disk.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "map_units_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/map_units_disk.html#map_units_disk", "map_units_disk", 'routine in <a href="tools/map_units_disk.html">map_units_disk.pro</a>', "map_units_disk.pro", "", "map_units_disk", "	Computes units for a map descriptor given pixel scales for 	the map center.    ", "resradScale (length/pixel) in radial direction.   reslonScale (radians/pixel) in longitude direction.   mdMap descriptor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2) giving the map units.    ");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points.html", "map_valid_points.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points.html#map_valid_points", "map_valid_points", 'routine in <a href="map/map_valid_points.html">map_valid_points.pro</a>', "map_valid_points.pro", "", "map_valid_points", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points_equatorial_ring.html", "map_valid_points_equatorial_ring.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points_equatorial_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points_equatorial_ring.html#map_valid_points_equatorial_ring", "map_valid_points_equatorial_ring", 'routine in <a href="map/map_valid_points_equatorial_ring.html">map_valid_points_equatorial_ring.pro</a>', "map_valid_points_equatorial_ring.pro", "", "map_valid_points_equatorial_ring", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points_mercator.html", "map_valid_points_mercator.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points_mercator.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points_mercator.html#map_valid_points_mercator", "map_valid_points_mercator", 'routine in <a href="map/map_valid_points_mercator.html">map_valid_points_mercator.pro</a>', "map_valid_points_mercator.pro", "", "map_valid_points_mercator", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points_mollweide.html", "map_valid_points_mollweide.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points_mollweide.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points_mollweide.html#map_valid_points_mollweide", "map_valid_points_mollweide", 'routine in <a href="map/map_valid_points_mollweide.html">map_valid_points_mollweide.pro</a>', "map_valid_points_mollweide.pro", "", "map_valid_points_mollweide", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points_orthographic.html", "map_valid_points_orthographic.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points_orthographic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points_orthographic.html#map_valid_points_orthographic", "map_valid_points_orthographic", 'routine in <a href="map/map_valid_points_orthographic.html">map_valid_points_orthographic.pro</a>', "map_valid_points_orthographic.pro", "", "map_valid_points_orthographic", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points_orthographic_disk.html", "map_valid_points_orthographic_disk.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points_orthographic_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points_orthographic_disk.html#map_valid_points_orthographic_disk", "map_valid_points_orthographic_disk", 'routine in <a href="map/map_valid_points_orthographic_disk.html">map_valid_points_orthographic_disk.pro</a>', "map_valid_points_orthographic_disk.pro", "", "map_valid_points_orthographic_disk", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points_rectangular.html", "map_valid_points_rectangular.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points_rectangular.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points_rectangular.html#map_valid_points_rectangular", "map_valid_points_rectangular", 'routine in <a href="map/map_valid_points_rectangular.html">map_valid_points_rectangular.pro</a>', "map_valid_points_rectangular.pro", "", "map_valid_points_rectangular", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points_rectangular_disk.html", "map_valid_points_rectangular_disk.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points_rectangular_disk.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points_rectangular_disk.html#map_valid_points_rectangular_disk", "map_valid_points_rectangular_disk", 'routine in <a href="map/map_valid_points_rectangular_disk.html">map_valid_points_rectangular_disk.pro</a>', "map_valid_points_rectangular_disk.pro", "", "map_valid_points_rectangular_disk", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points_ring.html", "map_valid_points_ring.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points_ring.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points_ring.html#map_valid_points_ring", "map_valid_points_ring", 'routine in <a href="map/map_valid_points_ring.html">map_valid_points_ring.pro</a>', "map_valid_points_ring.pro", "", "map_valid_points_ring", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points_sinusoidal.html", "map_valid_points_sinusoidal.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points_sinusoidal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points_sinusoidal.html#map_valid_points_sinusoidal", "map_valid_points_sinusoidal", 'routine in <a href="map/map_valid_points_sinusoidal.html">map_valid_points_sinusoidal.pro</a>', "map_valid_points_sinusoidal.pro", "", "map_valid_points_sinusoidal", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_valid_points_stereographic.html", "map_valid_points_stereographic.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_valid_points_stereographic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_valid_points_stereographic.html#map_valid_points_stereographic", "map_valid_points_stereographic", 'routine in <a href="map/map_valid_points_stereographic.html">map_valid_points_stereographic.pro</a>', "map_valid_points_stereographic.pro", "", "map_valid_points_stereographic", "", "_mdmap_ptsimage_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("map/map_wrap_points.html", "map_wrap_points.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "map_wrap_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/map_wrap_points.html#map_wrap_points", "map_wrap_points", 'routine in <a href="map/map_wrap_points.html">map_wrap_points.pro</a>', "map_wrap_points.pro", "", "map_wrap_points", "	Forces all map image points to lie inside a specified map by wrapping 	longitudes.    ", "_md_image_ptsArray (2,nv,nt) of map image points.   _map_pts", "NV/LIB/MAP", " 	Written by:	Spitale, 1/1998   	Array (2,nv,nt) of wrapped map image points.    STATUS: 	Complete    ");
  
  libdata[libdataItem++] = new Array("map/map_wrap_points.html#__map_wrap_points", "__map_wrap_points", 'routine in <a href="map/map_wrap_points.html">map_wrap_points.pro</a>', "map_wrap_points.pro", "", "__map_wrap_points", "", "_md_image_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("map/map_wrap_points.html#_map_wrap_points", "_map_wrap_points", 'routine in <a href="map/map_wrap_points.html">map_wrap_points.pro</a>', "map_wrap_points.pro", "", "_map_wrap_points", "", "_md_image_pts", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/mask_globe.html", "mask_globe.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "mask_globe.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/mask_globe.html#mask_globe", "mask_globe", 'routine in <a href="tools/mask_globe.html">mask_globe.pro</a>', "mask_globe.pro", "", "mask_globe", "	Computes an image mask for a globe.    ", "oversampleslopsubcdCamera descriptor.   _gbxAny subclass of GLOBE.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Angle in radians.     ");
  
  

libdata[libdataItem++] = new Array("tools/minmax_latlon.html", "minmax_latlon.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "minmax_latlon.pro", "", "", "	Computes latitide/longitude ranges visible in a given camera.    ", "", "          -1", "       Written by:     Spitale   ");
  
  
  libdata[libdataItem++] = new Array("tools/minmax_latlon.html#minmax_latlon", "minmax_latlon", 'routine in <a href="tools/minmax_latlon.html">minmax_latlon.pro</a>', "minmax_latlon.pro", "", "minmax_latlon", "", "sloplatminlatmaxlonminlonmaxstatuscdpdrd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/mosaic.html", "mosaic.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "mosaic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/mosaic.html#mosaic", "mosaic", 'routine in <a href="tools/mosaic.html">mosaic.pro</a>', "mosaic.pro", "", "mosaic", "", "combine_fnwt_fnsdatamosaicweightmaps", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/move_points.html", "move_points.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "move_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/move_points.html#move_points", "move_points", 'routine in <a href="tools/move_points.html">move_points.pro</a>', "move_points.pro", "", "move_points", "", "axispointsdxydtheta", "          -1", "");
  
  

libdata[libdataItem++] = new Array("arr/ominas_array__define.html", "ominas_array__define.pro", '.pro file in <a href="arr/dir-overview.html">arr/ directory</a>', "ominas_array__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("arr/ominas_array__define.html#ominas_array::init", "ominas_array::init", 'routine in <a href="arr/ominas_array__define.html">ominas_array__define.pro</a>', "ominas_array__define.pro", "", "ominas_array::init", "", "crdardabbrevusernametasksudataunameprimarysurface_ptsiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("arr/ominas_array__define.html#ominas_array__define", "ominas_array__define", 'routine in <a href="arr/ominas_array__define.html">ominas_array__define.pro</a>', "ominas_array__define.pro", "", "ominas_array__define", "	Class structure for the ARRAY class.    ", "", "NV/LIB/arr", " 	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016  ");
  
  

libdata[libdataItem++] = new Array("bod/ominas_body__define.html", "ominas_body__define.pro", '.pro file in <a href="bod/dir-overview.html">bod/ directory</a>', "ominas_body__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("bod/ominas_body__define.html#ominas_body::init", "ominas_body::init", 'routine in <a href="bod/ominas_body__define.html">ominas_body__define.pro</a>', "ominas_body__define.pro", "", "ominas_body::init", "", "crdbdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("bod/ominas_body__define.html#ominas_body__define", "ominas_body__define", 'routine in <a href="bod/ominas_body__define.html">ominas_body__define.pro</a>', "ominas_body__define.pro", "", "ominas_body__define", "	Class structure for the BODY class.    ", "", "NV/LIB/BOD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cam/ominas_camera__define.html", "ominas_camera__define.pro", '.pro file in <a href="cam/dir-overview.html">cam/ directory</a>', "ominas_camera__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cam/ominas_camera__define.html#ominas_camera::init", "ominas_camera::init", 'routine in <a href="cam/ominas_camera__define.html">ominas_camera__define.pro</a>', "ominas_camera__define.pro", "", "ominas_camera::init", "", "crdbdcdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayfn_focal_to_imagefn_image_to_focalfn_data_pscaleoaxisexposuresizefn_psffiltersfn_body_to_imageiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("cam/ominas_camera__define.html#ominas_camera__define", "ominas_camera__define", 'routine in <a href="cam/ominas_camera__define.html">ominas_camera__define.pro</a>', "ominas_camera__define.pro", "", "ominas_camera__define", "	Class structure fo the CAMERA class.    ", "", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("cor/ominas_core__define.html", "ominas_core__define.pro", '.pro file in <a href="cor/dir-overview.html">cor/ directory</a>', "ominas_core__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("cor/ominas_core__define.html#ominas_core::rereference", "ominas_core::rereference", 'routine in <a href="cor/ominas_core__define.html">ominas_core__define.pro</a>', "ominas_core__define.pro", "", "ominas_core::rereference", "", "struct", "          -1", "");
  
  libdata[libdataItem++] = new Array("cor/ominas_core__define.html#ominas_core::dereference", "ominas_core::dereference", 'routine in <a href="cor/ominas_core__define.html">ominas_core__define.pro</a>', "ominas_core__define.pro", "", "ominas_core::dereference", "", "struct", "          -1", "");
  
  libdata[libdataItem++] = new Array("cor/ominas_core__define.html#ominas_core::init", "ominas_core::init", 'routine in <a href="cor/ominas_core__define.html">ominas_core__define.pro</a>', "ominas_core__define.pro", "", "ominas_core::init", "", "crdabbrevusernametasksudataunameiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("cor/ominas_core__define.html#ominas_core__define", "ominas_core__define", 'routine in <a href="cor/ominas_core__define.html">ominas_core__define.pro</a>', "ominas_core__define.pro", "", "ominas_core__define", "	Class structure for the CORE class.    ", "", "NV/SYS/COR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dat/ominas_data__define.html", "ominas_data__define.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "ominas_data__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dat/ominas_data__define.html#ominas_data::init", "ominas_data::init", 'routine in <a href="dat/ominas_data__define.html">ominas_data__define.pro</a>', "ominas_data__define.pro", "", "ominas_data::init", "", "crdddabbrevusernametasksudataunamefilenamedimtypedatanhistheaderfiletypeinput_fnoutput_fnkeyword_fninstrumentinput_translatorsoutput_translatorsinput_transformsoutput_transformsmaintaincompresstab_translatorsiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("dat/ominas_data__define.html#ominas_data__define", "ominas_data__define", 'routine in <a href="dat/ominas_data__define.html">ominas_data__define.pro</a>', "ominas_data__define.pro", "", "ominas_data__define", "	Structure defining the data descriptor.    ", "", "NV/SYS", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("dsk/ominas_disk__define.html", "ominas_disk__define.pro", '.pro file in <a href="dsk/dir-overview.html">dsk/ directory</a>', "ominas_disk__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dsk/ominas_disk__define.html#ominas_disk::init", "ominas_disk::init", 'routine in <a href="dsk/ominas_disk__define.html">ominas_disk__define.pro</a>', "ominas_disk__define.pro", "", "ominas_disk::init", "", "crdbdslddkdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedosmaeccdapscalenm_memtapmdtapmdtlibamlibmdlibmdtnl_liltaanldtaanldtliballibldlibldtiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("dsk/ominas_disk__define.html#ominas_disk__define", "ominas_disk__define", 'routine in <a href="dsk/ominas_disk__define.html">ominas_disk__define.pro</a>', "ominas_disk__define.pro", "", "ominas_disk__define", "	Class structure for the DISK class.    ", "", "NV/LIB/DSK", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("glb/ominas_globe__define.html", "ominas_globe__define.pro", '.pro file in <a href="glb/dir-overview.html">glb/ directory</a>', "ominas_globe__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("glb/ominas_globe__define.html#ominas_globe::init", "ominas_globe::init", 'routine in <a href="glb/ominas_globe__define.html">ominas_globe__define.pro</a>', "ominas_globe__define.pro", "", "ominas_globe::init", "", "crdbdsldgbdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedotyperadiiloralrefrrefJiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("glb/ominas_globe__define.html#ominas_globe__define", "ominas_globe__define", 'routine in <a href="glb/ominas_globe__define.html">ominas_globe__define.pro</a>', "ominas_globe__define.pro", "", "ominas_globe__define", "	Class structure fo the GLOBE class.    ", "", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("map/ominas_map__define.html", "ominas_map__define.pro", '.pro file in <a href="map/dir-overview.html">map/ directory</a>', "ominas_map__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("map/ominas_map__define.html#ominas_map::init", "ominas_map::init", 'routine in <a href="map/ominas_map__define.html">ominas_map__define.pro</a>', "ominas_map__define.pro", "", "ominas_map::init", "", "crdmdabbrevusernametasksudataunametypefn_map_to_imagefn_image_to_mapfn_data_psizeorigincenterscaleunitsgraphicrotateradiiiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("map/ominas_map__define.html#ominas_map__define", "ominas_map__define", 'routine in <a href="map/ominas_map__define.html">ominas_map__define.pro</a>', "ominas_map__define.pro", "", "ominas_map__define", "	Class structure fo the MAP class.    ", "", "NV/LIB/CAM", " 	Written by:	Spitale, 1/1998   ");
  
  

libdata[libdataItem++] = new Array("plt/ominas_planet__define.html", "ominas_planet__define.pro", '.pro file in <a href="plt/dir-overview.html">plt/ directory</a>', "ominas_planet__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("plt/ominas_planet__define.html#ominas_planet::init", "ominas_planet::init", 'routine in <a href="plt/ominas_planet__define.html">ominas_planet__define.pro</a>', "ominas_planet__define.pro", "", "ominas_planet::init", "", "crdbdsldgbdpdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedotyperadiiloralrefrrefJiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("plt/ominas_planet__define.html#ominas_planet__define", "ominas_planet__define", 'routine in <a href="plt/ominas_planet__define.html">ominas_planet__define.pro</a>', "ominas_planet__define.pro", "", "ominas_planet__define", "	Class structure for the PLANET class.    ", "", "NV/LIB/PLT", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("pnt/ominas_point__define.html", "ominas_point__define.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "ominas_point__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/ominas_point__define.html#ominas_point::init", "ominas_point::init", 'routine in <a href="pnt/ominas_point__define.html">ominas_point__define.pro</a>', "ominas_point__define.pro", "", "ominas_point::init", "", "crdptdabbrevusernametasksudataunamedescinputpointsvectorsflagstagsdataassoc_xdiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("pnt/ominas_point__define.html#ominas_point__define", "ominas_point__define", 'routine in <a href="pnt/ominas_point__define.html">ominas_point__define.pro</a>', "ominas_point__define.pro", "", "ominas_point__define", "	Structure for managing points.    ", "", "NV/SYS/PS", "  Spitale, 11/2015; 	Adapted from pg_POINT__define   ");
  
  

libdata[libdataItem++] = new Array("rng/ominas_ring__define.html", "ominas_ring__define.pro", '.pro file in <a href="rng/dir-overview.html">rng/ directory</a>', "ominas_ring__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("rng/ominas_ring__define.html#ominas_ring::init", "ominas_ring::init", 'routine in <a href="rng/ominas_ring__define.html">ominas_ring__define.pro</a>', "ominas_ring__define.pro", "", "ominas_ring::init", "", "crdbdslddkdrdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedosmaeccdapscalenm_memtapmdtapmdtlibamlibmdlibmdtnl_liltaanldtaanldtliballibldlibldtprimarydesciiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("rng/ominas_ring__define.html#ominas_ring__define", "ominas_ring__define", 'routine in <a href="rng/ominas_ring__define.html">ominas_ring__define.pro</a>', "ominas_ring__define.pro", "", "ominas_ring__define", "	Class structure for the RING class.    ", "", "NV/LIB/RNG", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("sld/ominas_solid__define.html", "ominas_solid__define.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "ominas_solid__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/ominas_solid__define.html#ominas_solid::init", "ominas_solid::init", 'routine in <a href="sld/ominas_solid__define.html">ominas_solid__define.pro</a>', "ominas_solid__define.pro", "", "ominas_solid::init", "", "crdbdsldabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedoiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("sld/ominas_solid__define.html#ominas_solid__define", "ominas_solid__define", 'routine in <a href="sld/ominas_solid__define.html">ominas_solid__define.pro</a>', "ominas_solid__define.pro", "", "ominas_solid__define", "	Class structure fo the SOLID class.    ", "", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("str/ominas_star__define.html", "ominas_star__define.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "ominas_star__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("str/ominas_star__define.html#ominas_star::init", "ominas_star::init", 'routine in <a href="str/ominas_star__define.html">ominas_star__define.pro</a>', "ominas_star__define.pro", "", "ominas_star::init", "", "crdbdsldgbdsdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedotyperadiiloralrefrrefJlumspiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("str/ominas_star__define.html#ominas_star__define", "ominas_star__define", 'routine in <a href="str/ominas_star__define.html">ominas_star__define.pro</a>', "ominas_star__define.pro", "", "ominas_star__define", "	Class structure for the STAR class.    ", "", "NV/LIB/STR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("stn/ominas_station__define.html", "ominas_station__define.pro", '.pro file in <a href="stn/dir-overview.html">stn/ directory</a>', "ominas_station__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("stn/ominas_station__define.html#ominas_station::init", "ominas_station::init", 'routine in <a href="stn/ominas_station__define.html">ominas_station__define.pro</a>', "ominas_station__define.pro", "", "ominas_station::init", "", "crdbdstdabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayiiend_keywords", "          -1", "");
  
  libdata[libdataItem++] = new Array("stn/ominas_station__define.html#ominas_station__define", "ominas_station__define", 'routine in <a href="stn/ominas_station__define.html">ominas_station__define.pro</a>', "ominas_station__define.pro", "", "ominas_station__define", "	Class structure for the STATION class.    ", "", "NV/LIB/STN", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_anom_to_arg.html", "orb_anom_to_arg.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_anom_to_arg.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_anom_to_arg.html#orb_anom_to_arg", "orb_anom_to_arg", 'routine in <a href="tools/orb/orb_anom_to_arg.html">orb_anom_to_arg.pro</a>', "orb_anom_to_arg.pro", "", "orb_anom_to_arg", "", "apxdanomframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_anom_to_lon.html", "orb_anom_to_lon.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_anom_to_lon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_anom_to_lon.html#orb_anom_to_lon", "orb_anom_to_lon", 'routine in <a href="tools/orb/orb_anom_to_lon.html">orb_anom_to_lon.pro</a>', "orb_anom_to_lon.pro", "", "orb_anom_to_lon", "", "apxdanomframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_arg_to_anom.html", "orb_arg_to_anom.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_arg_to_anom.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_arg_to_anom.html#orb_arg_to_anom", "orb_arg_to_anom", 'routine in <a href="tools/orb/orb_arg_to_anom.html">orb_arg_to_anom.pro</a>', "orb_arg_to_anom.pro", "", "orb_arg_to_anom", "", "apxdargframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_arg_to_lon.html", "orb_arg_to_lon.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_arg_to_lon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_arg_to_lon.html#orb_arg_to_lon", "orb_arg_to_lon", 'routine in <a href="tools/orb/orb_arg_to_lon.html">orb_arg_to_lon.pro</a>', "orb_arg_to_lon.pro", "", "orb_arg_to_lon", "", "xdargframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_cartesian_to_orbit.html", "orb_cartesian_to_orbit.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_cartesian_to_orbit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_cartesian_to_orbit.html#orb_cartesian_to_orbit", "orb_cartesian_to_orbit", 'routine in <a href="tools/orb/orb_cartesian_to_orbit.html">orb_cartesian_to_orbit.pro</a>', "orb_cartesian_to_orbit.pro", "", "orb_cartesian_to_orbit", "", "GGcirculargbx_r_v", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_dapdt.html", "orb_compute_dapdt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_dapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_dapdt.html#orb_compute_dapdt", "orb_compute_dapdt", 'routine in <a href="tools/orb/orb_compute_dapdt.html">orb_compute_dapdt.pro</a>', "orb_compute_dapdt.pro", "", "orb_compute_dapdt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_dlandt.html", "orb_compute_dlandt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_dlandt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_dlandt.html#orb_compute_dlandt", "orb_compute_dlandt", 'routine in <a href="tools/orb/orb_compute_dlandt.html">orb_compute_dlandt.pro</a>', "orb_compute_dlandt.pro", "", "orb_compute_dlandt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_dlpdt.html", "orb_compute_dlpdt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_dlpdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_dlpdt.html#orb_compute_dlpdt", "orb_compute_dlpdt", 'routine in <a href="tools/orb/orb_compute_dlpdt.html">orb_compute_dlpdt.pro</a>', "orb_compute_dlpdt.pro", "", "orb_compute_dlpdt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_dmadt.html", "orb_compute_dmadt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_dmadt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_dmadt.html#orb_compute_dmadt", "orb_compute_dmadt", 'routine in <a href="tools/orb/orb_compute_dmadt.html">orb_compute_dmadt.pro</a>', "orb_compute_dmadt.pro", "", "orb_compute_dmadt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_dmldt.html", "orb_compute_dmldt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_dmldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_dmldt.html#orb_compute_dmldt", "orb_compute_dmldt", 'routine in <a href="tools/orb/orb_compute_dmldt.html">orb_compute_dmldt.pro</a>', "orb_compute_dmldt.pro", "", "orb_compute_dmldt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_dtapdt.html", "orb_compute_dtapdt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_dtapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_dtapdt.html#orb_compute_dtapdt", "orb_compute_dtapdt", 'routine in <a href="tools/orb/orb_compute_dtapdt.html">orb_compute_dtapdt.pro</a>', "orb_compute_dtapdt.pro", "", "orb_compute_dtapdt", "", "GGsmaxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_ea.html", "orb_compute_ea.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_ea.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_ea.html#osk_eval", "osk_eval", 'routine in <a href="tools/orb/orb_compute_ea.html">orb_compute_ea.pro</a>', "orb_compute_ea.pro", "", "osk_eval", "", "ea", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_ea.html#orb_compute_ea", "orb_compute_ea", 'routine in <a href="tools/orb/orb_compute_ea.html">orb_compute_ea.pro</a>', "orb_compute_ea.pro", "", "orb_compute_ea", "", "rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_elements.html", "orb_compute_elements.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_elements.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_elements.html#orb_compute_elements", "orb_compute_elements", 'routine in <a href="tools/orb/orb_compute_elements.html">orb_compute_elements.pro</a>', "orb_compute_elements.pro", "", "orb_compute_elements", "", "smaeccincaplandmldtdmadtdapdtliba_apdlibdt_aplib_apdlandtliba_landlibdt_lanlib_lanmamllptatlraddlpdttimerdtgbxtrdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_ma.html", "orb_compute_ma.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_ma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_ma.html#orb_compute_ma", "orb_compute_ma", 'routine in <a href="tools/orb/orb_compute_ma.html">orb_compute_ma.pro</a>', "orb_compute_ma.pro", "", "orb_compute_ma", "", "eccfearx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_r.html", "orb_compute_r.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_r.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_r.html#orb_compute_r", "orb_compute_r", 'routine in <a href="tools/orb/orb_compute_r.html">orb_compute_r.pro</a>', "orb_compute_r.pro", "", "orb_compute_r", "", "rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/old/orb_compute_sma-old.html", "orb_compute_sma-old.pro", '.pro file in <a href="tools/orb/old/dir-overview.html">tools/orb/old/ directory</a>', "orb_compute_sma-old.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/old/orb_compute_sma-old.html#ocsma_fn", "ocsma_fn", 'routine in <a href="tools/orb/old/orb_compute_sma-old.html">orb_compute_sma-old.pro</a>', "orb_compute_sma-old.pro", "", "ocsma_fn", "", "a", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/orb/old/orb_compute_sma-old.html#orb_compute_sma", "orb_compute_sma", 'routine in <a href="tools/orb/old/orb_compute_sma-old.html">orb_compute_sma-old.pro</a>', "orb_compute_sma-old.pro", "", "orb_compute_sma", "", "GGdmldtxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_sma.html", "orb_compute_sma.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_sma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_sma.html#ocsma_fn", "ocsma_fn", 'routine in <a href="tools/orb/orb_compute_sma.html">orb_compute_sma.pro</a>', "orb_compute_sma.pro", "", "ocsma_fn", "", "a", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_sma.html#orb_compute_sma", "orb_compute_sma", 'routine in <a href="tools/orb/orb_compute_sma.html">orb_compute_sma.pro</a>', "orb_compute_sma.pro", "", "orb_compute_sma", "", "GGJdmldtdlpdtdapdtdlandtxdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_compute_ta.html", "orb_compute_ta.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_compute_ta.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_compute_ta.html#orb_compute_ta", "orb_compute_ta", 'routine in <a href="tools/orb/orb_compute_ta.html">orb_compute_ta.pro</a>', "orb_compute_ta.pro", "", "orb_compute_ta", "", "rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_construct_descriptor.html", "orb_construct_descriptor.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_construct_descriptor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_construct_descriptor.html#orb_construct_descriptor", "orb_construct_descriptor", 'routine in <a href="tools/orb/orb_construct_descriptor.html">orb_construct_descriptor.pro</a>', "orb_construct_descriptor.pro", "", "orb_construct_descriptor", "", "namesmaeccinclanaplpmamltatldmldtdmadtdlandtliba_landlibdt_lanlib_landapdtliba_apdlibdt_aplib_apdlpdtmmem_lpmdlpmdtlibamlibmdlibmdtllil_lanldlanldtliballibldlibldttimepptrd0ringGGnoevolvenocomputerdoutgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_evolve.html", "orb_evolve.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_evolve.html#orb_evolve", "orb_evolve", 'routine in <a href="tools/orb/orb_evolve.html">orb_evolve.pro</a>', "orb_evolve.pro", "", "orb_evolve", "", "rxdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_evolve_ma.html", "orb_evolve_ma.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_evolve_ma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_evolve_ma.html#orb_evolve_ma", "orb_evolve_ma", 'routine in <a href="tools/orb/orb_evolve_ma.html">orb_evolve_ma.pro</a>', "orb_evolve_ma.pro", "", "orb_evolve_ma", "", "rxdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_ap.html", "orb_get_ap.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_ap.html#_orb_get_ap", "_orb_get_ap", 'routine in <a href="tools/orb/orb_get_ap.html">orb_get_ap.pro</a>', "orb_get_ap.pro", "", "_orb_get_ap", "", "xdframe_bd", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_ap.html#orb_get_ap", "orb_get_ap", 'routine in <a href="tools/orb/orb_get_ap.html">orb_get_ap.pro</a>', "orb_get_ap.pro", "", "orb_get_ap", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_ascending_node.html", "orb_get_ascending_node.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_ascending_node.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_ascending_node.html#orb_get_ascending_node", "orb_get_ascending_node", 'routine in <a href="tools/orb/orb_get_ascending_node.html">orb_get_ascending_node.pro</a>', "orb_get_ascending_node.pro", "", "orb_get_ascending_node", "", "arbitraryrefsafexdframe_bd", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_ascending_node.html#_orb_get_ascending_node", "_orb_get_ascending_node", 'routine in <a href="tools/orb/orb_get_ascending_node.html">orb_get_ascending_node.pro</a>', "orb_get_ascending_node.pro", "", "_orb_get_ascending_node", "", "arbitraryrefxdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_dapdt.html", "orb_get_dapdt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_dapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_dapdt.html#orb_get_dapdt", "orb_get_dapdt", 'routine in <a href="tools/orb/orb_get_dapdt.html">orb_get_dapdt.pro</a>', "orb_get_dapdt.pro", "", "orb_get_dapdt", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_dlandt.html", "orb_get_dlandt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_dlandt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_dlandt.html#orb_get_dlandt", "orb_get_dlandt", 'routine in <a href="tools/orb/orb_get_dlandt.html">orb_get_dlandt.pro</a>', "orb_get_dlandt.pro", "", "orb_get_dlandt", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_dlibdt_ap.html", "orb_get_dlibdt_ap.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_dlibdt_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_dlibdt_ap.html#orb_get_dlibdt_ap", "orb_get_dlibdt_ap", 'routine in <a href="tools/orb/orb_get_dlibdt_ap.html">orb_get_dlibdt_ap.pro</a>', "orb_get_dlibdt_ap.pro", "", "orb_get_dlibdt_ap", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_dlibdt_lan.html", "orb_get_dlibdt_lan.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_dlibdt_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_dlibdt_lan.html#orb_get_dlibdt_lan", "orb_get_dlibdt_lan", 'routine in <a href="tools/orb/orb_get_dlibdt_lan.html">orb_get_dlibdt_lan.pro</a>', "orb_get_dlibdt_lan.pro", "", "orb_get_dlibdt_lan", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_dmadt.html", "orb_get_dmadt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_dmadt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_dmadt.html#orb_get_dmadt", "orb_get_dmadt", 'routine in <a href="tools/orb/orb_get_dmadt.html">orb_get_dmadt.pro</a>', "orb_get_dmadt.pro", "", "orb_get_dmadt", "", "xdjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_dmldt.html", "orb_get_dmldt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_dmldt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_dmldt.html#orb_get_dmldt", "orb_get_dmldt", 'routine in <a href="tools/orb/orb_get_dmldt.html">orb_get_dmldt.pro</a>', "orb_get_dmldt.pro", "", "orb_get_dmldt", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_ecc.html", "orb_get_ecc.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_ecc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_ecc.html#orb_get_ecc", "orb_get_ecc", 'routine in <a href="tools/orb/orb_get_ecc.html">orb_get_ecc.pro</a>', "orb_get_ecc.pro", "", "orb_get_ecc", "", "xdjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_inc.html", "orb_get_inc.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_inc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_inc.html#orb_get_inc", "orb_get_inc", 'routine in <a href="tools/orb/orb_get_inc.html">orb_get_inc.pro</a>', "orb_get_inc.pro", "", "orb_get_inc", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_lan.html", "orb_get_lan.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_lan.html#orb_get_lan", "orb_get_lan", 'routine in <a href="tools/orb/orb_get_lan.html">orb_get_lan.pro</a>', "orb_get_lan.pro", "", "orb_get_lan", "", "refxdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_lib_ap.html", "orb_get_lib_ap.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_lib_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_lib_ap.html#orb_get_lib_ap", "orb_get_lib_ap", 'routine in <a href="tools/orb/orb_get_lib_ap.html">orb_get_lib_ap.pro</a>', "orb_get_lib_ap.pro", "", "orb_get_lib_ap", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_lib_lan.html", "orb_get_lib_lan.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_lib_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_lib_lan.html#orb_get_lib_lan", "orb_get_lib_lan", 'routine in <a href="tools/orb/orb_get_lib_lan.html">orb_get_lib_lan.pro</a>', "orb_get_lib_lan.pro", "", "orb_get_lib_lan", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_liba_ap.html", "orb_get_liba_ap.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_liba_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_liba_ap.html#orb_get_liba_ap", "orb_get_liba_ap", 'routine in <a href="tools/orb/orb_get_liba_ap.html">orb_get_liba_ap.pro</a>', "orb_get_liba_ap.pro", "", "orb_get_liba_ap", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_liba_lan.html", "orb_get_liba_lan.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_liba_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_liba_lan.html#orb_get_liba_lan", "orb_get_liba_lan", 'routine in <a href="tools/orb/orb_get_liba_lan.html">orb_get_liba_lan.pro</a>', "orb_get_liba_lan.pro", "", "orb_get_liba_lan", "", "xdframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_ma.html", "orb_get_ma.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_ma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_ma.html#orb_get_ma", "orb_get_ma", 'routine in <a href="tools/orb/orb_get_ma.html">orb_get_ma.pro</a>', "orb_get_ma.pro", "", "orb_get_ma", "", "xdjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_get_sma.html", "orb_get_sma.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_get_sma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_get_sma.html#orb_get_sma", "orb_get_sma", 'routine in <a href="tools/orb/orb_get_sma.html">orb_get_sma.pro</a>', "orb_get_sma.pro", "", "orb_get_sma", "", "xdjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_inertialize.html", "orb_inertialize.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_inertialize.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_inertialize.html#orb_inertialize", "orb_inertialize", 'routine in <a href="tools/orb/orb_inertialize.html">orb_inertialize.pro</a>', "orb_inertialize.pro", "", "orb_inertialize", "", "frame_bx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_init_descriptors.html", "orb_init_descriptors.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_init_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_init_descriptors.html#orb_create_descriptors", "orb_create_descriptors", 'routine in <a href="tools/orb/orb_init_descriptors.html">orb_init_descriptors.pro</a>', "orb_init_descriptors.pro", "", "orb_create_descriptors", "", "namesmaeccinclanapmadmadtdlandtdapdttngbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_lon_to_anom.html", "orb_lon_to_anom.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_lon_to_anom.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_lon_to_anom.html#orb_lon_to_anom", "orb_lon_to_anom", 'routine in <a href="tools/orb/orb_lon_to_anom.html">orb_lon_to_anom.pro</a>', "orb_lon_to_anom.pro", "", "orb_lon_to_anom", "", "apxdlonframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_lon_to_arg.html", "orb_lon_to_arg.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_lon_to_arg.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_lon_to_arg.html#orb_lon_to_arg", "orb_lon_to_arg", 'routine in <a href="tools/orb/orb_lon_to_arg.html">orb_lon_to_arg.pro</a>', "orb_lon_to_arg.pro", "", "orb_lon_to_arg", "", "xdlonframe_bd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_lon_to_body.html", "orb_lon_to_body.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_lon_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_lon_to_body.html#orb_lon_to_body", "orb_lon_to_body", 'routine in <a href="tools/orb/orb_lon_to_body.html">orb_lon_to_body.pro</a>', "orb_lon_to_body.pro", "", "orb_lon_to_body", "", "frame_bdxdlon", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_min_distance.html", "orb_min_distance.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_min_distance.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_min_distance.html#_eval_omd", "_eval_omd", 'routine in <a href="tools/orb/orb_min_distance.html">orb_min_distance.pro</a>', "orb_min_distance.pro", "", "_eval_omd", "", "p", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/orb/orb_min_distance.html#orb_min_distance", "orb_min_distance", 'routine in <a href="tools/orb/orb_min_distance.html">orb_min_distance.pro</a>', "orb_min_distance.pro", "", "orb_min_distance", "", "frame_bdlon1lon2distanceslons_xd1_xd2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_plot.html", "orb_plot.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_plot.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_plot.html#orb_plot", "orb_plot", 'routine in <a href="tools/orb/orb_plot.html">orb_plot.pro</a>', "orb_plot.pro", "", "orb_plot", "", "cd_rdframe_bx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_precess.html", "orb_precess.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_precess.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_precess.html#orb_precess", "orb_precess", 'routine in <a href="tools/orb/orb_precess.html">orb_precess.pro</a>', "orb_precess.pro", "", "orb_precess", "", "_pd_rdpd_precessrd_precessobs_bx_pd0pd_rd0", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_print_descriptor.html", "orb_print_descriptor.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_print_descriptor.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_print_descriptor.html#orb_get_elements", "orb_get_elements", 'routine in <a href="tools/orb/orb_print_descriptor.html">orb_print_descriptor.pro</a>', "orb_print_descriptor.pro", "", "orb_get_elements", "", "trdgbx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_ap.html", "orb_set_ap.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_ap.html#orb_set_ap", "orb_set_ap", 'routine in <a href="tools/orb/orb_set_ap.html">orb_set_ap.pro</a>', "orb_set_ap.pro", "", "orb_set_ap", "", "xdframe_bdap", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_dapdt.html", "orb_set_dapdt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_dapdt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_dapdt.html#orb_set_dapdt", "orb_set_dapdt", 'routine in <a href="tools/orb/orb_set_dapdt.html">orb_set_dapdt.pro</a>', "orb_set_dapdt.pro", "", "orb_set_dapdt", "", "xdframe_bddapdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_dlandt.html", "orb_set_dlandt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_dlandt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_dlandt.html#orb_set_dlandt", "orb_set_dlandt", 'routine in <a href="tools/orb/orb_set_dlandt.html">orb_set_dlandt.pro</a>', "orb_set_dlandt.pro", "", "orb_set_dlandt", "", "xdframe_bddlandt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_dlibdt_ap.html", "orb_set_dlibdt_ap.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_dlibdt_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_dlibdt_ap.html#orb_set_dlibdt_ap", "orb_set_dlibdt_ap", 'routine in <a href="tools/orb/orb_set_dlibdt_ap.html">orb_set_dlibdt_ap.pro</a>', "orb_set_dlibdt_ap.pro", "", "orb_set_dlibdt_ap", "", "xdframe_bddlibdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_dlibdt_lan.html", "orb_set_dlibdt_lan.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_dlibdt_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_dlibdt_lan.html#orb_set_dlibdt_lan", "orb_set_dlibdt_lan", 'routine in <a href="tools/orb/orb_set_dlibdt_lan.html">orb_set_dlibdt_lan.pro</a>', "orb_set_dlibdt_lan.pro", "", "orb_set_dlibdt_lan", "", "xdframe_bddlibdt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_dmadt.html", "orb_set_dmadt.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_dmadt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_dmadt.html#orb_set_dmadt", "orb_set_dmadt", 'routine in <a href="tools/orb/orb_set_dmadt.html">orb_set_dmadt.pro</a>', "orb_set_dmadt.pro", "", "orb_set_dmadt", "", "xddmadtjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_ecc.html", "orb_set_ecc.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_ecc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_ecc.html#orb_set_ecc", "orb_set_ecc", 'routine in <a href="tools/orb/orb_set_ecc.html">orb_set_ecc.pro</a>', "orb_set_ecc.pro", "", "orb_set_ecc", "", "xd_eccjunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_inc.html", "orb_set_inc.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_inc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_inc.html#orb_set_inc", "orb_set_inc", 'routine in <a href="tools/orb/orb_set_inc.html">orb_set_inc.pro</a>', "orb_set_inc.pro", "", "orb_set_inc", "", "xdframe_bdinc", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_lan.html", "orb_set_lan.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_lan.html#orb_set_lan", "orb_set_lan", 'routine in <a href="tools/orb/orb_set_lan.html">orb_set_lan.pro</a>', "orb_set_lan.pro", "", "orb_set_lan", "", "xdframe_bdlan", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_lib_ap.html", "orb_set_lib_ap.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_lib_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_lib_ap.html#orb_set_lib_ap", "orb_set_lib_ap", 'routine in <a href="tools/orb/orb_set_lib_ap.html">orb_set_lib_ap.pro</a>', "orb_set_lib_ap.pro", "", "orb_set_lib_ap", "", "xdframe_bdlib", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_lib_lan.html", "orb_set_lib_lan.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_lib_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_lib_lan.html#orb_set_lib_lan", "orb_set_lib_lan", 'routine in <a href="tools/orb/orb_set_lib_lan.html">orb_set_lib_lan.pro</a>', "orb_set_lib_lan.pro", "", "orb_set_lib_lan", "", "xdframe_bdlib_lan", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_liba_ap.html", "orb_set_liba_ap.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_liba_ap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_liba_ap.html#orb_set_liba_ap", "orb_set_liba_ap", 'routine in <a href="tools/orb/orb_set_liba_ap.html">orb_set_liba_ap.pro</a>', "orb_set_liba_ap.pro", "", "orb_set_liba_ap", "", "xdframe_bdliba_ap", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_liba_lan.html", "orb_set_liba_lan.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_liba_lan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_liba_lan.html#orb_set_liba_lan", "orb_set_liba_lan", 'routine in <a href="tools/orb/orb_set_liba_lan.html">orb_set_liba_lan.pro</a>', "orb_set_liba_lan.pro", "", "orb_set_liba_lan", "", "xdframe_bdliba_lan", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_ma.html", "orb_set_ma.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_ma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_ma.html#orb_set_ma", "orb_set_ma", 'routine in <a href="tools/orb/orb_set_ma.html">orb_set_ma.pro</a>', "orb_set_ma.pro", "", "orb_set_ma", "", "xdmajunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_set_sma.html", "orb_set_sma.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_set_sma.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_set_sma.html#orb_set_sma", "orb_set_sma", 'routine in <a href="tools/orb/orb_set_sma.html">orb_set_sma.pro</a>', "orb_set_sma.pro", "", "orb_set_sma", "", "xd_smajunk", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/old/orb_solve_kepler.html", "orb_solve_kepler.pro", '.pro file in <a href="tools/orb/old/dir-overview.html">tools/orb/old/ directory</a>', "orb_solve_kepler.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/old/orb_solve_kepler.html#osk_eval", "osk_eval", 'routine in <a href="tools/orb/old/orb_solve_kepler.html">orb_solve_kepler.pro</a>', "orb_solve_kepler.pro", "", "osk_eval", "", "EE", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/orb/old/orb_solve_kepler.html#orb_solve_kepler", "orb_solve_kepler", 'routine in <a href="tools/orb/old/orb_solve_kepler.html">orb_solve_kepler.pro</a>', "orb_solve_kepler.pro", "", "orb_solve_kepler", "", "rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_span_errors.html", "orb_span_errors.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_span_errors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_span_errors.html#ope_span_mc", "ope_span_mc", 'routine in <a href="tools/orb/orb_span_errors.html">orb_span_errors.pro</a>', "orb_span_errors.pro", "", "ope_span_mc", "", "x0_sig_xnsignseed", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/orb/orb_span_errors.html#ope_span", "ope_span", 'routine in <a href="tools/orb/orb_span_errors.html">orb_span_errors.pro</a>', "orb_span_errors.pro", "", "ope_span", "", "x0_sig_xnsignscanndim", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/orb/orb_span_errors.html#orb_span_errors", "orb_span_errors", 'routine in <a href="tools/orb/orb_span_errors.html">orb_span_errors.pro</a>', "orb_span_errors.pro", "", "orb_span_errors", "", "nsignscannsamplesdkxgbxsig_dkx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_test.html", "orb_test.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_test.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_test.html#orb_test", "orb_test", 'routine in <a href="tools/orb/orb_test.html">orb_test.pro</a>', "orb_test.pro", "", "orb_test", "", "xd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/orb/orb_to_cartesian.html", "orb_to_cartesian.pro", '.pro file in <a href="tools/orb/dir-overview.html">tools/orb/ directory</a>', "orb_to_cartesian.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/orb/orb_to_cartesian.html#orb_to_cartesian", "orb_to_cartesian", 'routine in <a href="tools/orb/orb_to_cartesian.html">orb_to_cartesian.pro</a>', "orb_to_cartesian.pro", "", "orb_to_cartesian", "", "velf_rx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/photometry/phase_angle.html", "phase_angle.pro", '.pro file in <a href="tools/photometry/dir-overview.html">tools/photometry/ directory</a>', "phase_angle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/photometry/phase_angle.html#phase_angle", "phase_angle", 'routine in <a href="tools/photometry/phase_angle.html">phase_angle.pro</a>', "phase_angle.pro", "", "phase_angle", "", "surface_coordcamera_coordsun_coord", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/phase_correction.html", "phase_correction.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "phase_correction.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/phase_correction.html#phase_correction", "phase_correction", 'routine in <a href="tools/phase_correction.html">phase_correction.pro</a>', "phase_correction.pro", "", "phase_correction", "	Assuming body gbx is a sphere, this routine computes the correction 	in pixels needed to obtain its true image center given a measurement 	of its center of light.    ", "cdAny subclass of DISK.   gbxAny subclass of GLOBE.   sundSTAR descriptor representing the sun.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2) giving the phase correction offset.    ");
  
  

libdata[libdataItem++] = new Array("tools/photometry/photometric_angles.html", "photometric_angles.pro", '.pro file in <a href="tools/photometry/dir-overview.html">tools/photometry/ directory</a>', "photometric_angles.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/photometry/photometric_angles.html#photometric_angles", "photometric_angles", 'routine in <a href="tools/photometry/photometric_angles.html">photometric_angles.pro</a>', "photometric_angles.pro", "", "photometric_angles", "", "gbxdkxcdsundcoords", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_angles.html", "pht_angles.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_angles.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_angles.html#pht_angles", "pht_angles", 'routine in <a href="tools/pht/pht_angles.html">pht_angles.pro</a>', "pht_angles.pro", "", "pht_angles", "", "inertialemmincgvalidbody_ptsnorthimage_ptscdbxsund", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_lunar.html", "pht_lunar.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_lunar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_lunar.html#pht_lunar", "pht_lunar", 'routine in <a href="tools/pht/pht_lunar.html">pht_lunar.pro</a>', "pht_lunar.pro", "", "pht_lunar", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_lunar_lambert.html", "pht_lunar_lambert.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_lunar_lambert.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_lunar_lambert.html#pht_lunar_lambert", "pht_lunar_lambert", 'routine in <a href="tools/pht/pht_lunar_lambert.html">pht_lunar_lambert.pro</a>', "pht_lunar_lambert.pro", "", "pht_lunar_lambert", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_minneart.html", "pht_minneart.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_minneart.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_minneart.html#pht_minneart", "pht_minneart", 'routine in <a href="tools/pht/pht_minneart.html">pht_minneart.pro</a>', "pht_minneart.pro", "", "pht_minneart", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_phase_corr.html", "pht_phase_corr.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_phase_corr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_phase_corr.html#pht_phase_corr", "pht_phase_corr", 'routine in <a href="tools/pht/pht_phase_corr.html">pht_phase_corr.pro</a>', "pht_phase_corr.pro", "", "pht_phase_corr", "", "fnparmgg1", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_phase_henyey_greenstein.html", "pht_phase_henyey_greenstein.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_phase_henyey_greenstein.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_phase_henyey_greenstein.html#pht_phase_henyey_greenstein", "pht_phase_henyey_greenstein", 'routine in <a href="tools/pht/pht_phase_henyey_greenstein.html">pht_phase_henyey_greenstein.pro</a>', "pht_phase_henyey_greenstein.pro", "", "pht_phase_henyey_greenstein", "", "gparm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_phase_isotropic.html", "pht_phase_isotropic.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_phase_isotropic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_phase_isotropic.html#pht_phase_isotropic", "pht_phase_isotropic", 'routine in <a href="tools/pht/pht_phase_isotropic.html">pht_phase_isotropic.pro</a>', "pht_phase_isotropic.pro", "", "pht_phase_isotropic", "", "gparm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_refl_corr.html", "pht_refl_corr.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_refl_corr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_refl_corr.html#pht_refl_corr", "pht_refl_corr", 'routine in <a href="tools/pht/pht_refl_corr.html">pht_refl_corr.pro</a>', "pht_refl_corr.pro", "", "pht_refl_corr", "", "fnparmmumu0mu1mu01", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_refl_lunar.html", "pht_refl_lunar.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_refl_lunar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_refl_lunar.html#pht_refl_lunar", "pht_refl_lunar", 'routine in <a href="tools/pht/pht_refl_lunar.html">pht_refl_lunar.pro</a>', "pht_refl_lunar.pro", "", "pht_refl_lunar", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_refl_lunar_lambert.html", "pht_refl_lunar_lambert.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_refl_lunar_lambert.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_refl_lunar_lambert.html#pht_refl_lunar_lambert", "pht_refl_lunar_lambert", 'routine in <a href="tools/pht/pht_refl_lunar_lambert.html">pht_refl_lunar_lambert.pro</a>', "pht_refl_lunar_lambert.pro", "", "pht_refl_lunar_lambert", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pht/pht_refl_minneart.html", "pht_refl_minneart.pro", '.pro file in <a href="tools/pht/dir-overview.html">tools/pht/ directory</a>', "pht_refl_minneart.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pht/pht_refl_minneart.html#pht_refl_minneart", "pht_refl_minneart", 'routine in <a href="tools/pht/pht_refl_minneart.html">pht_refl_minneart.pro</a>', "pht_refl_minneart.pro", "", "pht_refl_minneart", "", "mumu0parm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/pixel_grid.html", "pixel_grid.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "pixel_grid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/pixel_grid.html#pixel_grid", "pixel_grid", 'routine in <a href="tools/pixel_grid.html">pixel_grid.pro</a>', "pixel_grid.pro", "", "pixel_grid", "	Generates grid lines aligned with the image window.    ", "spacingnpwnum", "NV/LIB/TOOLS", "       Written by:     Spitale          Angle in radians.     ");
  
  

libdata[libdataItem++] = new Array("tools/plot_inertial.html", "plot_inertial.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "plot_inertial.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/plot_inertial.html#plot_inertial", "plot_inertial", 'routine in <a href="tools/plot_inertial.html">plot_inertial.pro</a>', "plot_inertial.pro", "", "plot_inertial", "       Plots inertial vectors on a camera image.    ", "colorthicklabelscdCamera descriptor.   _vInertial vectors giving origins of vectors to plot.  If only one 		vector, this will be used as the origin for all of the plotted 		vectors.   rInertial vectors giving the vectors to plot, starting at 		the given origins.   ", "NV/LIB/TOOLS", "       Written by:     Spitale; 7/2002          NONE   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("plt/plt_create_descriptors.html", "plt_create_descriptors.pro", '.pro file in <a href="plt/dir-overview.html">plt/ directory</a>', "plt_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("plt/plt_create_descriptors.html#plt_create_descriptors", "plt_create_descriptors", 'routine in <a href="plt/plt_create_descriptors.html">plt_create_descriptors.pro</a>', "plt_create_descriptors.pro", "", "plt_create_descriptors", "	Init method for the PLANET class.    ", "crdCore descriptor(s) to pass to cor_create_descriptors.   bdBody descriptor(s) to pass to bod_create_descriptors.   sldSolid descriptor(s) to pass to sld_create_descriptors.   gbdGlobe descriptor(s) to pass to glb_create_descriptors.   pdPlanet descriptor(s) to initialize, instead of creating new ones.   abbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedotyperadiiloralrefrrefJn     Number of planet descriptors.   end_keywords", "NV/LIB/PLT", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          An array (n) of planet descriptors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("plt/plt_evolve.html", "plt_evolve.pro", '.pro file in <a href="plt/dir-overview.html">plt/ directory</a>', "plt_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("plt/plt_evolve.html#plt_evolve", "plt_evolve", 'routine in <a href="plt/plt_evolve.html">plt_evolve.pro</a>', "plt_evolve.pro", "", "plt_evolve", "	Computes new planet descriptors at the given time offsets from the 	given planet descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given planet 	descriptor.    ", "nodv If set, derivatives will not be evolved.    pddt Time offset.   ", "NV/LIB/PLT", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (npd,ndt) of newly allocated descriptors, of class PLANET, 	evolved by time dt, where npd is the number of px, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("plt/plt_replicate.html", "plt_replicate.pro", '.pro file in <a href="plt/dir-overview.html">plt/ directory</a>', "plt_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("plt/plt_replicate.html#plt_replicate", "plt_replicate", 'routine in <a href="plt/plt_replicate.html">plt_replicate.pro</a>', "plt_replicate.pro", "", "plt_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "pd Planet descriptor.   dim Dimensions of the result.   ", "NV/LIB/PLT", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_assoc_xd.html", "pnt_assoc_xd.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_assoc_xd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_assoc_xd.html#pnt_assoc_xd", "pnt_assoc_xd", 'routine in <a href="pnt/pnt_assoc_xd.html">pnt_assoc_xd.pro</a>', "pnt_assoc_xd.pro", "", "pnt_assoc_xd", "	Returns the associated descriptor for a POINT object.    ", "noeventIf set, no event is generated.   ptdPoints object.   ", "NV/SYS/PS", " 	Written by:	Spitale, 11/2015   	The associated descriptor for the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_assoc_xd     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_compress.html", "pnt_compress.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_compress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_compress.html#pnt_compress", "pnt_compress", 'routine in <a href="pnt/pnt_compress.html">pnt_compress.pro</a>', "pnt_compress.pro", "", "pnt_compress", "	Compresses many POINT objects into one.  Arrays are concatenated 	in the nv/np directions unless /nt is specified.  Point-by-point data 	arrays must be identical.    ", "nt	If given, arrays are concatenated in the nt dimension. 			this requires that all input arrays have the same number 			of points (nv/np), and only one element in the nt 			direction.   pptd	If given, this points object is used to store the 			result, rather than allocating a new one.   ptd0", "NV/SYS/PS", "  Spitale, 11/2015; 	Adapted from pgs_compress   	POINT object containing the concatenated data.     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_condition.html", "pnt_condition.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_condition.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_condition.html#pnt_condition", "pnt_condition", 'routine in <a href="pnt/pnt_condition.html">pnt_condition.pro</a>', "pnt_condition.pro", "", "pnt_condition", "	Returns predefined condition structures for various common situations.    ", "conditionIf a condition structure is given as in input, it 			is returned.     *** The following keywords are defined in pnt_condition_keywords.include ***   visibleReturns a condition structure corresponding to 			points whose visible flag is not set.   invisibleReturns a condition structure corresponding to 			points whose visible flag is set.   select	Returns a condition structure corresponding to 			points whose select flag is set.   end_keywords", "NV/SYS/PS", "  	Spitale, 11/2015   	Condition structure corresponding to the given keyword.    STATUS: 	Complete    SEE ALSO: pnt_points, pnt_vectors, pnt_data    ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_create_descriptors.html", "pnt_create_descriptors.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_create_descriptors.html#pnt_create_descriptors", "pnt_create_descriptors", 'routine in <a href="pnt/pnt_create_descriptors.html">pnt_create_descriptors.pro</a>', "pnt_create_descriptors.pro", "", "pnt_create_descriptors", "	Creates and initializes a POINT object.    ", "crdptdabbrevusernametasksudataunamedescinputpointsvectorsflagstagsdataassoc_xdnend_keywords", "NV/SYS/PS", " 	Written by:	Spitale, 11/2015   	Newly created and initialized POINT object.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_cull.html", "pnt_cull.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_cull.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_cull.html#pnt_cull", "pnt_cull", 'routine in <a href="pnt/pnt_cull.html">pnt_cull.pro</a>', "pnt_cull.pro", "", "pnt_cull", "	Cleans out an array of POINT object by removing invisible points 	and/or empty POINT object.    ", "visibleIf set, invisible points are removed.   nofree	If set, invalid POINT object are not freed.   ptdArray of POINT objects.   ", "NV/SYS/PS", "  Spitale, 11/2015; 	Adapted from pgs_cull   	Array POINT object, or 0 if all were empty.     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_data.html", "pnt_data.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_data.html#pnt_data", "pnt_data", 'routine in <a href="pnt/pnt_data.html">pnt_data.pro</a>', "pnt_data.pro", "", "pnt_data", "	Returns the point-by-point data associated with a POINT object.    ", "tagsIf given, data arrays are returned only for these tags, 		and are arranged in this order.   sample	Sampling interval in the nv direction.  Default is 1.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   cat	If set, arrays from mulitple input objets are 			concatenated.   conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   noeventIf set, no event is generated.   visibleinvisibleselectptd0end_keywords", "NV/SYS/PS", " 	Written by:	Spitale, 11/2015   	The point-by-point data associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_data     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_desc.html", "pnt_desc.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_desc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_desc.html#pnt_desc", "pnt_desc", 'routine in <a href="pnt/pnt_desc.html">pnt_desc.pro</a>', "pnt_desc.pro", "", "pnt_desc", "	Returns the description associated with a POINT object.    ", "noeventIf set, no event is generated.   ptdPOINT object.   ", "NV/SYS/PS", " 	Written by:	Spitale, 11/2015   	The description associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_desc     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_explode.html", "pnt_explode.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_explode.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_explode.html#pnt_explode", "pnt_explode", 'routine in <a href="pnt/pnt_explode.html">pnt_explode.pro</a>', "pnt_explode.pro", "", "pnt_explode", "	Explodes a POINT object into single-point objects.    ", "ptd	POINT object.   ", "NV/SYS/PS", " 	Adapted from pgs_explode:	Spitale, 11/2015   	Array (nv x nt) of POINT object, each containing a single point.    STATUS: 	Complete      ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_flags.html", "pnt_flags.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_flags.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_flags.html#pnt_flags", "pnt_flags", 'routine in <a href="pnt/pnt_flags.html">pnt_flags.pro</a>', "pnt_flags.pro", "", "pnt_flags", "	Returns the flags associated with a POINT object.    ", "sample	Sampling interval in the nv direction.  Default is 1.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   cat	If set, arrays from mulitple input objets are 			concatenated.   conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   noeventIf set, no event is generated.   visibleinvisibleselectptd0end_keywords", "NV/SYS/PS", " 	Written by:	Spitale, 11/2015   	The flags associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_flags     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_get.html", "pnt_get.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_get.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_get.html#pnt_get", "pnt_get", 'routine in <a href="pnt/pnt_get.html">pnt_get.pro</a>', "pnt_get.pro", "", "pnt_get", "	Returns the fields associated with a POINT object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    ", "cat	If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   nvntpointsvectorsflagsnamedescinputdatatagsudataunameassoc_xdnoeventIf set, no event is generated.   visibleinvisibleselectptdPOINT object.   end_keywords", "NV/SYS/PS", " 	Written by:	Spitale, 12/2015   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_include.html", "pnt_include.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_include.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("pnt/pnt_input.html", "pnt_input.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_input.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_input.html#pnt_input", "pnt_input", 'routine in <a href="pnt/pnt_input.html">pnt_input.pro</a>', "pnt_input.pro", "", "pnt_input", "	Returns the input description associated with a POINT object.    ", "noeventIf set, no event is generated.   ptdPOINT object.   ", "NV/SYS/PS", " 	Written by:	Spitale, 11/2015   	The input description associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_input     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_nt.html", "pnt_nt.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_nt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_nt.html#pnt_nt", "pnt_nt", 'routine in <a href="pnt/pnt_nt.html">pnt_nt.pro</a>', "pnt_nt.pro", "", "pnt_nt", "	Returns the nt dimension of a POINT object.    ", "conditionnoeventIf set, no event is generated.   visibleinvisibleselectptdPOINT object.   end_keywords", "nt/SYS/PS", " 	Written by:	Spitale, 11/2015   	The nt dimensions of the POINT object.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_nv.html", "pnt_nv.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_nv.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_nv.html#pnt_nv", "pnt_nv", 'routine in <a href="pnt/pnt_nv.html">pnt_nv.pro</a>', "pnt_nv.pro", "", "pnt_nv", "	Returns the nv dimension of a POINT object.    ", "conditionnoeventIf set, no event is generated.   visibleinvisibleselectptdPOINT object.   end_keywords", "NV/SYS/PS", " 	Written by:	Spitale, 11/2015   	The nv dimensions of the POINT object.    STATUS: 	Complete     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_offset.html", "pnt_offset.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_offset.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_offset.html#pnt_offset", "pnt_offset", 'routine in <a href="pnt/pnt_offset.html">pnt_offset.pro</a>', "pnt_offset.pro", "", "pnt_offset", "	Offsets points in a POINT object.    ", "noeventptd	POINT object.   offset	Offset to apply.   ", "NV/SYS/PS", "  Spitale, 11/2015; 	Adapted from pgs_offset   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_points.html", "pnt_points.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_points.html#pnt_points", "pnt_points", 'routine in <a href="pnt/pnt_points.html">pnt_points.pro</a>', "pnt_points.pro", "", "pnt_points", "	Returns the points associated with a POINT object.    ", "sample	Sampling interval in the nv direction.  Default is 1.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   cat	If set, arrays from mulitple input objets are 			concatenated.   conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   noeventIf set, no event is generated.   visibleinvisibleselectptd0end_keywords", "NV/SYS/PS", " 	Written by:	Spitale, 11/2015   	The points associated with the POINT object, or zero.    STATUS: 	Complete    SEE ALSO: 	pnt_set_points     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_poly_rectify.html", "pnt_poly_rectify.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_poly_rectify.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_poly_rectify.html#pnt_poly_rectify", "pnt_poly_rectify", 'routine in <a href="pnt/pnt_poly_rectify.html">pnt_poly_rectify.pro</a>', "pnt_poly_rectify.pro", "", "pnt_poly_rectify", "	Rearrangs polygon vertices to mke them contiguous.    ", "ptdArray of POINT object.   ", "NV/SYS/PS", "  Spitale, 12/2015; 	Adapted from pgs_poly_rectify   	Array of POINT object, or 0 if all were empty.     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_read.html", "pnt_read.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_read.pro", "", "", " 	Reads a POINT file.    ", "", "          -1", "  Spitale, 11/2015; 	Adapted from pgs_read_ps   ");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_read.html#pnt_read_0", "pnt_read_0", 'routine in <a href="pnt/pnt_read.html">pnt_read.pro</a>', "pnt_read.pro", "", "pnt_read_0", "", "visiblenamedescflagspointsvectorscommentfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("pnt/pnt_read.html#psrpnt_get_next", "psrpnt_get_next", 'routine in <a href="pnt/pnt_read.html">pnt_read.pro</a>', "pnt_read.pro", "", "psrpnt_get_next", "", "stopstatusnbinbufunittoken", "          -1", "");
  
  libdata[libdataItem++] = new Array("pnt/pnt_read.html#pnt_read_1", "pnt_read_1", 'routine in <a href="pnt/pnt_read.html">pnt_read.pro</a>', "pnt_read.pro", "", "pnt_read_1", "", "visiblenamedescflagspointsvectorscommentinputversiondatatagsfilename", "          -1", "");
  
  libdata[libdataItem++] = new Array("pnt/pnt_read.html#pnt_read", "pnt_read", 'routine in <a href="pnt/pnt_read.html">pnt_read.pro</a>', "pnt_read.pro", "", "pnt_read", "", "binnamedescflagspointsvectorscommentdatatagsfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_scale.html", "pnt_scale.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_scale.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_scale.html#pnt_scale", "pnt_scale", 'routine in <a href="pnt/pnt_scale.html">pnt_scale.pro</a>', "pnt_scale.pro", "", "pnt_scale", "	Scales points in a POINT object.    ", "noeventptd	POINT object.   scale	Scale to apply.   ", "NV/SYS/PS", "  Spitale, 11/2015; 	Adapted from pgs_scale   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_set.html", "pnt_set.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_set.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_set.html#pnt_set", "pnt_set", 'routine in <a href="pnt/pnt_set.html">pnt_set.pro</a>', "pnt_set.pro", "", "pnt_set", "	Replaces fields in a POINT object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    ", "pointsvectorsflagsnamedescinputdatatagsudataunameassoc_xdnoeventIf set, no event is generated.   ptd	POINT object.   ", "NV/SYS", " 	Written by:	Spitale		12/2015   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_set_assoc_xd.html", "pnt_set_assoc_xd.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_set_assoc_xd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_set_assoc_xd.html#pnt_set_assoc_xd", "pnt_set_assoc_xd", 'routine in <a href="pnt/pnt_set_assoc_xd.html">pnt_set_assoc_xd.pro</a>', "pnt_set_assoc_xd.pro", "", "pnt_set_assoc_xd", "	Replaces the assoc_xd field in a POINT object.    ", "noeventIf set, no event is generated.   ps	POINT object.   assoc_xdNew assoc_xd.   ", "NV/SYS", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_set_data.html", "pnt_set_data.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_set_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_set_data.html#pnt_set_data", "pnt_set_data", 'routine in <a href="pnt/pnt_set_data.html">pnt_set_data.pro</a>', "pnt_set_data.pro", "", "pnt_set_data", "	Replaces the point-by-point data in a POINT object.    ", "tagsIf given, data arrays are replaced only for these tags, and in 		this order.   noeventIf set, no event is generated.   ptd	POINT object.   new_data", "NV/SYS", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_set_desc.html", "pnt_set_desc.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_set_desc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_set_desc.html#pnt_set_desc", "pnt_set_desc", 'routine in <a href="pnt/pnt_set_desc.html">pnt_set_desc.pro</a>', "pnt_set_desc.pro", "", "pnt_set_desc", "	Replaces the description field in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   desc	New description.   ", "NV/SYS", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_set_flags.html", "pnt_set_flags.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_set_flags.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_set_flags.html#pnt_set_flags", "pnt_set_flags", 'routine in <a href="pnt/pnt_set_flags.html">pnt_set_flags.pro</a>', "pnt_set_flags.pro", "", "pnt_set_flags", "	Replaces the flags in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   flags	New flags array.   ", "NV/SYS", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_set_input.html", "pnt_set_input.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_set_input.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_set_input.html#pnt_set_input", "pnt_set_input", 'routine in <a href="pnt/pnt_set_input.html">pnt_set_input.pro</a>', "pnt_set_input.pro", "", "pnt_set_input", "	Replaces the input description field in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   input", "NV/SYS", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_set_points.html", "pnt_set_points.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_set_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_set_points.html#pnt_set_points", "pnt_set_points", 'routine in <a href="pnt/pnt_set_points.html">pnt_set_points.pro</a>', "pnt_set_points.pro", "", "pnt_set_points", "	Replaces the points in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   points	New points array.   ", "NV/SYS", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_set_tags.html", "pnt_set_tags.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_set_tags.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_set_tags.html#pnt_set_tags", "pnt_set_tags", 'routine in <a href="pnt/pnt_set_tags.html">pnt_set_tags.pro</a>', "pnt_set_tags.pro", "", "pnt_set_tags", "	Replaces the tags in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   tags	New tags array.   ", "NV/SYS", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_set_vectors.html", "pnt_set_vectors.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_set_vectors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_set_vectors.html#pnt_set_vectors", "pnt_set_vectors", 'routine in <a href="pnt/pnt_set_vectors.html">pnt_set_vectors.pro</a>', "pnt_set_vectors.pro", "", "pnt_set_vectors", "	Replaces the vectors in a POINT object.    ", "noeventIf set, no event is generated.   ptd	POINT object.   vectorsNew vectors array.   ", "NV/SYS", " 	Written by:	Spitale		11/2015   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_tags.html", "pnt_tags.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_tags.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_tags.html#pnt_tags", "pnt_tags", 'routine in <a href="pnt/pnt_tags.html">pnt_tags.pro</a>', "pnt_tags.pro", "", "pnt_tags", "	Returns the tags associated with a POINT object.    ", "noeventIf set, no event is generated.   ptdPOINT object.   ", "NV/SYS/PS", " 	Written by:	Spitale, 11/2015   	The tags associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_tags     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_template.html", "pnt_template.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_template.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_template.html#pnt_template", "pnt_template", 'routine in <a href="pnt/pnt_template.html">pnt_template.pro</a>', "pnt_template.pro", "", "pnt_template", "	Creates a new POINT using an existing one as a template.    ", "ptd0	POINT object.   ", "NV/SYS/PS", " 	Written:	Spitale, 11/2015   	New POINT with array fields left blank.    STATUS: 	Complete      ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_test.html", "pnt_test.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_test.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_test.html#pnt_test", "pnt_test", 'routine in <a href="pnt/pnt_test.html">pnt_test.pro</a>', "pnt_test.pro", "", "pnt_test", "	Assesses the validity of a single POINT object.  This function 	differs from pnt_valid in that it simply returns true or false, rather 	than a list of validity flags.    ", "genericIf set, a generic input is test to determine whether 			it is a POINT object.  Its validity is not tested.   noeventptdArray of POINT objects.   ", "NV/SYS/PS", "  Spitale, 12/2015; 	Adapted from pgs_test   	1 if the given POINT object is valid and contains points, 0 otherwise.    STATUS: 	Complete    SEE ALSO: 	pnt_test    ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_threshold.html", "pnt_threshold.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_threshold.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_threshold.html#pnt_threshold", "pnt_threshold", 'routine in <a href="pnt/pnt_threshold.html">pnt_threshold.pro</a>', "pnt_threshold.pro", "", "pnt_threshold", "	Flags points whose given indicator falls below or above a given 	threshold.    ", "aboveIf set, values above the theshold are allowed.   belowIf set, values below the theshold are allowed.   ptd	POINT object.   indicatorsValues to be tested against the threshold.  One for 			each point in ptd.   thresholdThreshold value.   ", "NV/SYS/PS", "  Spitale, 11/2015; 	Adapted from pgs_threshold   ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_uncompress.html", "pnt_uncompress.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_uncompress.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_uncompress.html#pnt_uncompress", "pnt_uncompress", 'routine in <a href="pnt/pnt_uncompress.html">pnt_uncompress.pro</a>', "pnt_uncompress.pro", "", "pnt_uncompress", "	Explodes a compressed POINT object back into an array of POINT objects 	using the original POINT objects as a template.  The 	compressed POINT object is freed.    ", "nn	If given, it is assumed that there are nn elements 			in the compressed array for each element in the 			original input arrays.   pptdCompressed POINT object.   ptd0", "NV/SYS/PS", "  Spitale, 11/2015; 	Adapted from pgs_uncompress   	Array of POINT objects containing the uncompressed data.     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_valid.html", "pnt_valid.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_valid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_valid.html#pnt_valid", "pnt_valid", 'routine in <a href="pnt/pnt_valid.html">pnt_valid.pro</a>', "pnt_valid.pro", "", "pnt_valid", "	Assesses the validity of POINT objects.    ", "noeventptd0", "NV/SYS/PS", "  Spitale, 11/2015; 	Adapted from pgs_valid   	Array of flags, one for each input PS.  1 indicates that the PS 	contains points.    STATUS: 	Complete    SEE ALSO: 	pnt_test    ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_vectors.html", "pnt_vectors.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_vectors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_vectors.html#pnt_vectors", "pnt_vectors", 'routine in <a href="pnt/pnt_vectors.html">pnt_vectors.pro</a>', "pnt_vectors.pro", "", "pnt_vectors", "	Returns the vectors associated with a POINT object.    ", "sample	Sampling interval in the nv direction.  Default is 1.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.   cat	If set, arrays from mulitple input objets are 			concatenated.   conditionStructure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT objects, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.   noeventIf set, no event is generated.   visibleinvisibleselectptd0end_keywords", "NV/SYS/PS", " 	Written by:	Spitale, 11/2015   	The vectors associated with the POINT object.    STATUS: 	Complete    SEE ALSO: 	pnt_set_vectors     ");
  
  

libdata[libdataItem++] = new Array("pnt/pnt_write.html", "pnt_write.pro", '.pro file in <a href="pnt/dir-overview.html">pnt/ directory</a>', "pnt_write.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pnt/pnt_write.html#pnt_write", "pnt_write", 'routine in <a href="pnt/pnt_write.html">pnt_write.pro</a>', "pnt_write.pro", "", "pnt_write", " 	Writes a POINT object to a file.    ", "binIf set, a binary POINT object file is written;  		not currently implemented.   noeventfilenameName of the file to write.   ptd	POINT object to write.   ", "NV/PNT", "  Spitale, 11/2015; 	Adapted from pgs_write_ps   ");
  
  

libdata[libdataItem++] = new Array("tools/project_map.html", "project_map.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "project_map.pro", "", "", "       Reprojects images.    ", "", "          -1", "       Written by:     Spitale, 6/1998   ");
  
  
  libdata[libdataItem++] = new Array("tools/project_map.html#pm_hide_ring", "pm_hide_ring", 'routine in <a href="tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_hide_ring", "", "rdmap_image_ptscam_image_ptssurface_ptsbody_ptspos_cam", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/project_map.html#pm_hide_globe", "pm_hide_globe", 'routine in <a href="tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_hide_globe", "", "xdmap_image_ptscam_image_ptssurface_ptsbody_ptspos_cam", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/project_map.html#pm_rm_globe", "pm_rm_globe", 'routine in <a href="tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_rm_globe", "", "xdmap_image_ptscam_image_ptssurface_ptsbody_ptspos_cam", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/project_map.html#pm_rm_globe", "pm_rm_globe", 'routine in <a href="tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_rm_globe", "", "xdmap_image_ptscam_image_ptssurface_ptsbody_ptspos_cam", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/project_map.html#pm_bounds", "pm_bounds", 'routine in <a href="tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_bounds", "", "boundssurface_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/project_map.html#pm_hide_points_limb", "pm_hide_points_limb", 'routine in <a href="tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_hide_points_limb", "", "bxpos_cambody_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/project_map.html#pm_wind_zonal", "pm_wind_zonal", 'routine in <a href="tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_wind_zonal", "", "bxmap_ptswind_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/project_map.html#pm_wind_kepler", "pm_wind_kepler", 'routine in <a href="tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "pm_wind_kepler", "", "bxmap_ptswind_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/project_map.html#project_map", "project_map", 'routine in <a href="tools/project_map.html">project_map.pro</a>', "project_map.pro", "", "project_map", "", "mdcdbxsundboundshitvaluehide_fnhide_data_proiinterparg_interpoffsetwind_fnwind_dataedgesmoothimage_pc_xsize_pc_ysize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/radec_angle.html", "radec_angle.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "radec_angle.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/radec_angle.html#radec_angle", "radec_angle", 'routine in <a href="tools/radec_angle.html">radec_angle.pro</a>', "radec_angle.pro", "", "radec_angle", "	Computes angles between vectors specified in the radec system.    ", "radec1Array (nv,3,nt) giving the radec representation of the 		first vector.   radec2Array (nv,3,nt) giving the radec representation of the 		second vector.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Array (nv,nt) of angles between the input vectors.     ");
  
  

libdata[libdataItem++] = new Array("tools/radec_grid.html", "radec_grid.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "radec_grid.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/radec_grid.html#radec_grid", "radec_grid", 'routine in <a href="tools/radec_grid.html">radec_grid.pro</a>', "radec_grid.pro", "", "radec_grid", "", "nnpcd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/radec_image_bounds.html", "radec_image_bounds.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "radec_image_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/radec_image_bounds.html#radec_image_bounds", "radec_image_bounds", 'routine in <a href="tools/radec_image_bounds.html">radec_image_bounds.pro</a>', "radec_image_bounds.pro", "", "radec_image_bounds", "	Determines radec coordinate ranges visible in an image described 	by a given camera descriptor.    ", "slopborder_pts_imraminramaxdecmindecmaxcornersstatuscdCamera descripor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	ramin:	Minimum RA in image.  	ramax:	Maximum RA in image.  	decmin:	Minimum DEC in image.  	decmax:	Maximum DEC in image.  	border_pts_im:	Array (2,np) of points along the edge of the image.  	status:	-1 if no globe in the image, 0 otherwise.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/radec_to_image.html", "radec_to_image.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "radec_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/radec_to_image.html#radec_to_image", "radec_to_image", 'routine in <a href="tools/composite/radec_to_image.html">radec_to_image.pro</a>', "radec_to_image.pro", "", "radec_to_image", "       Transforms points in polar ra/dec coords w.r.t the inertial frame 	to image coords.    ", "body_ptscdArray of nt camera descriptors.   pArray (nv x 3 x nt) of radec points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/radec_to_orient.html", "radec_to_orient.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "radec_to_orient.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/radec_to_orient.html#radec_to_orient", "radec_to_orient", 'routine in <a href="tools/radec_to_orient.html">radec_to_orient.pro</a>', "radec_to_orient.pro", "", "radec_to_orient", "	Computes orientation matrices such that the optic axis (axis 1) 	points in the direction of the given radec and the image y direction 	(axis 2) points toward celestial north (inertial [0,0,1]).    ", "radecArray (nt) giving the radec representations of the 		pointing vectors.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Array (3,3,nt) of orientation matrices.     ");
  
  

libdata[libdataItem++] = new Array("tools/radec_twist_to_cd.html", "radec_twist_to_cd.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "radec_twist_to_cd.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/radec_twist_to_cd.html#radec_twist_to_cd", "radec_twist_to_cd", 'routine in <a href="tools/radec_twist_to_cd.html">radec_twist_to_cd.pro</a>', "radec_twist_to_cd.pro", "", "radec_twist_to_cd", "       Computes a camera orietation matrix from thegiven Euler angles.    ", "cdraRight ascension relative to the inertial frame.   decDeclination relative to the inertial frame.   twistTwist angle relative to the inertial frame.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	cd:	Array (nt) of camera descriptors with new 		orientations.    ");
  
  

libdata[libdataItem++] = new Array("tools/ray_points.html", "ray_points.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "ray_points.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/ray_points.html#ray_points", "ray_points", 'routine in <a href="tools/ray_points.html">ray_points.pro</a>', "ray_points.pro", "", "ray_points", "       Computes points along rays.    ", "cdrArray (nt) of inertial ray origins.   vArray (nt) of inertial ray directions, of unit length.   npNumber of points to compute on each ray.   dpPoint spacing.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	If no camera descriptor is given, an array (np,3,nt) of inertial 	position vectors is returned.  If cd is given, an array (2,np,nt) 	of image points is returned.    ");
  
  

libdata[libdataItem++] = new Array("tools/ray_sub_point_graphic.html", "ray_sub_point_graphic.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "ray_sub_point_graphic.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/ray_sub_point_graphic.html#ray_sub_point_graphic", "ray_sub_point_graphic", 'routine in <a href="tools/ray_sub_point_graphic.html">ray_sub_point_graphic.pro</a>', "ray_sub_point_graphic.pro", "", "ray_sub_point_graphic", "	Iterates to find the point on the surface of the globe where the 	given ray is closest to the surface.   ", "vvnormalpdvArray (nv,3) giving the ray origins in the BODY frame.   rArray (nv,3) giving the ray directions in the BODY frame.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nv,3) of closest approach poitns in the BODY frame.    ");
  
  

libdata[libdataItem++] = new Array("tools/raytrace.html", "raytrace.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "raytrace.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/raytrace.html#raytrace", "raytrace", 'routine in <a href="tools/raytrace.html">raytrace.pro</a>', "raytrace.pro", "", "raytrace", "	Traces rays from a camera to a set of objects.        ", "cd       Camera descriptor.   bx       Array of object descriptors; must be a subclass of BODY.   sbx          Body descriptor for secondary ray tracing.  If set, 	               image_pts and cd are not used; instead, secondary rays 	               are traced from the given hit_matrix points to sbx.   hit_matrix  Array (nray,3,nhit) of body-frame points for nearest 	              ray intersections.   showpenumbra     If set, lighting rays are traced to random points on 	               each secondary body rather then the center.     hit_indices Array (nray) of body indices corresponding to the first 	              intersection for each ray.   range_matrixArray (nhit,nray) giving distance to the near-side 	              ray intersection for each body in the hit_matrix.   hit_list    Array (nhit) giving indices of all bx that have ray 	              intersections.   far_matrix  Array (nray,3,nhit) of body-frame points for all 	              far-side intersections with bodies in the hit_list.   near_matrix  Array (nray,3,nhit) of body-frame points for all 	               near-side intersections with bodies in the hit_list.    backstandoff     If given, secondary vectors are advanced by this distance 	               before tracing in order to avoid hitting target bodies 	               through round-off error.  Default is 1 unit.   limit_sourceimage_pts Array (2,np) of image points relative to cd.  These 	            points will be turned into rays to be traced from the 	            position of the camera.   ", "NV/PG", " 	Written by:	Spitale      STATUS: 	Complete ");
  
  

libdata[libdataItem++] = new Array("tools/remove_lines.html", "remove_lines.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "remove_lines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/remove_lines.html#remove_lines", "remove_lines", 'routine in <a href="tools/remove_lines.html">remove_lines.pro</a>', "remove_lines.pro", "", "remove_lines", "", "slopptdlines", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/render.html", "render.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "render.pro", "", "", "	Performs rendering on an array of bodies.        ", "", "          -1", " 	Written by:	Spitale      STATUS: 	Complete ");
  
  
  libdata[libdataItem++] = new Array("tools/render.html#map_smoothing_width", "map_smoothing_width", 'routine in <a href="tools/render.html">render.pro</a>', "render.pro", "", "map_smoothing_width", "", "datai", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/render.html#rdr_photometry", "rdr_photometry", 'routine in <a href="tools/render.html">render.pro</a>', "render.pro", "", "rdr_photometry", "", "no_phtdatacdsundbxbody_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/render.html#rdr_map", "rdr_map", 'routine in <a href="tools/render.html">render.pro</a>', "render.pro", "", "rdr_map", "", "datapiecebxmdddmapbody_ptsphotii", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/render.html#rdr_piece", "rdr_piece", 'routine in <a href="tools/render.html">render.pro</a>', "render.pro", "", "rdr_piece", "", "dataimage_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/render.html#render", "render", 'routine in <a href="tools/render.html">render.pro</a>', "render.pro", "", "render", "", "cdsundbxddmapmdsamplepc_sizeshowpht_minno_phtstandofflimit_sourcepenumbrano_secondaryimage_pts", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/render.html#test", "test", 'routine in <a href="tools/render.html">render.pro</a>', "render.pro", "", "test", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/reproject_image.html", "reproject_image.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "reproject_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/reproject_image.html#reproject_image", "reproject_image", 'routine in <a href="tools/reproject_image.html">reproject_image.pro</a>', "reproject_image.pro", "", "reproject_image", "       xx    ", "cd    Camera descriptor.   new_cdsizeinterparg_interpimage    Image of body.   pc_xsize    x size of map workspace   pc_ysize    y size of map workspace    ", "NV/LIB/TOOLS", "       Written by:     Spitale, 6/1998          The reprojected image.   ");
  
  

libdata[libdataItem++] = new Array("tools/ringplane_radial_bounds.html", "ringplane_radial_bounds.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "ringplane_radial_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/ringplane_radial_bounds.html#ringplane_radial_bounds", "ringplane_radial_bounds", 'routine in <a href="tools/ringplane_radial_bounds.html">ringplane_radial_bounds.pro</a>', "ringplane_radial_bounds.pro", "", "ringplane_radial_bounds", "	Finds ringplane radial bounds by projecting the camera FOV on 	the ringplane.    ", "cdCamera descriptor.   dkxAny subclass of DISK.   ", "NV/LIB/TOOLS", "       Written by:     Spitale          Array (2) giving the minimum and maximum disk radii visible 	to the camera.     ");
  
  

libdata[libdataItem++] = new Array("rng/rng_create_descriptors.html", "rng_create_descriptors.pro", '.pro file in <a href="rng/dir-overview.html">rng/ directory</a>', "rng_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("rng/rng_create_descriptors.html#rng_create_descriptors", "rng_create_descriptors", 'routine in <a href="rng/rng_create_descriptors.html">rng_create_descriptors.pro</a>', "rng_create_descriptors.pro", "", "rng_create_descriptors", "	Init method for the RING class.    ", "crdCore descriptor(s) to pass to cor_create_descriptors.   bdBody descriptor(s) to pass to bod_create_descriptors.   sldSolid descriptor(s) to pass to sld_create_descriptors.   dkdDisk descriptor(s) to pass to dsk_create_descriptors.   rdRing descriptor(s) to initialize, instead of creating new 		ones.   abbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedosmaeccdapscalenm_memtapmdtapmdtlibamlibmdlibmdtnl_liltaanldtaanldtliballibldlibldtprimaryArray (n) of primary strings.   descArray (n) of description strings.   n     Number of ring descriptors.   end_keywords", "NV/LIB/RNG", "       Written by:     Spitale  	Adapted by:	Spitale, 5/2016          An array (n) of ring descriptors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("rng/rng_desc.html", "rng_desc.pro", '.pro file in <a href="rng/dir-overview.html">rng/ directory</a>', "rng_desc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("rng/rng_desc.html#rng_desc", "rng_desc", 'routine in <a href="rng/rng_desc.html">rng_desc.pro</a>', "rng_desc.pro", "", "rng_desc", "	Returns the description string for each given ring descriptor.    ", "noeventrd Array (nt) of RING descriptors.   ", "NV/LIB/RNG", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Description string associated with each given ring descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("rng/rng_evolve.html", "rng_evolve.pro", '.pro file in <a href="rng/dir-overview.html">rng/ directory</a>', "rng_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("rng/rng_evolve.html#rng_evolve", "rng_evolve", 'routine in <a href="rng/rng_evolve.html">rng_evolve.pro</a>', "rng_evolve.pro", "", "rng_evolve", "	Computes new ring descriptors at the given time offsets from the 	given ring descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given ring 	descriptor.    ", "nodv If set, derivatives will not be evolved.    rd Any subclass of RING.   dt Time offset.   ", "NV/LIB/RNG", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nrd,ndt) of newly allocated descriptors, of class RING, 	evolved by time dt, where nrd is the number of rd, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("rng/rng_primary.html", "rng_primary.pro", '.pro file in <a href="rng/dir-overview.html">rng/ directory</a>', "rng_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("rng/rng_primary.html#rng_primary", "rng_primary", 'routine in <a href="rng/rng_primary.html">rng_primary.pro</a>', "rng_primary.pro", "", "rng_primary", "	Returns the primary string for each given ring descriptor.    ", "noeventrd Array (nt) of RING descriptors.   ", "NV/LIB/RNG", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Primary string associated with each given ring descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("rng/rng_replicate.html", "rng_replicate.pro", '.pro file in <a href="rng/dir-overview.html">rng/ directory</a>', "rng_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("rng/rng_replicate.html#rng_replicate", "rng_replicate", 'routine in <a href="rng/rng_replicate.html">rng_replicate.pro</a>', "rng_replicate.pro", "", "rng_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "rd Ring descriptor.   dim Dimensions of the result.   ", "NV/LIB/RNG", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("rng/rng_set_desc.html", "rng_set_desc.pro", '.pro file in <a href="rng/dir-overview.html">rng/ directory</a>', "rng_set_desc.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("rng/rng_set_desc.html#rng_set_desc", "rng_set_desc", 'routine in <a href="rng/rng_set_desc.html">rng_set_desc.pro</a>', "rng_set_desc.pro", "", "rng_set_desc", "	Replaces the description string in each given ring descriptor.    ", "noeventrdArray (nt) of STATION descriptors.   descArray (nt) of description strings.   ", "NV/LIB/RNG", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("rng/rng_set_primary.html", "rng_set_primary.pro", '.pro file in <a href="rng/dir-overview.html">rng/ directory</a>', "rng_set_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("rng/rng_set_primary.html#rng_set_primary", "rng_set_primary", 'routine in <a href="rng/rng_set_primary.html">rng_set_primary.pro</a>', "rng_set_primary.pro", "", "rng_set_primary", "	Replaces the primary string in each given ring descriptor.    ", "noeventrdArray (nt) of STATION descriptor.   primaryArray (nt) of primary strings.   ", "NV/LIB/RNG", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("tools/composite/set_image_origin.html", "set_image_origin.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "set_image_origin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/set_image_origin.html#set_image_origin", "set_image_origin", 'routine in <a href="tools/composite/set_image_origin.html">set_image_origin.pro</a>', "set_image_origin.pro", "", "set_image_origin", "	Sets the origin of a map or camera image.    ", "cdoriginorigin argument as in map_set_origin    ", "NV/LIB/TOOLS/COMPOSITE", "	NONE.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/set_image_size.html", "set_image_size.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "set_image_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/set_image_size.html#set_image_size", "set_image_size", 'routine in <a href="tools/composite/set_image_size.html">set_image_size.pro</a>', "set_image_size.pro", "", "set_image_size", "	Sets the size of a map or camera image.    ", "cdsize	 Size argument as in map_set_size    ", "NV/LIB/TOOLS/COMPOSITE", "	NONE.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_albedo.html", "sld_albedo.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_albedo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_albedo.html#sld_albedo", "sld_albedo", 'routine in <a href="sld/sld_albedo.html">sld_albedo.pro</a>', "sld_albedo.pro", "", "sld_albedo", "       Returns the bond albedo for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016          Array (nt) of albedos associated with each given solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_create_descriptors.html", "sld_create_descriptors.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_create_descriptors.html#sld_create_descriptors", "sld_create_descriptors", 'routine in <a href="sld/sld_create_descriptors.html">sld_create_descriptors.pro</a>', "sld_create_descriptors.pro", "", "sld_create_descriptors", "	Init method for the SOLID class.    ", "crdbdsldabbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedonNumber of descriptors to create.   end_keywords", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	Newly created or or freshly initialized solid descriptors, depending 	on the presence of the bd keyword.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_evolve.html", "sld_evolve.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_evolve.html#sld_evolve", "sld_evolve", 'routine in <a href="sld/sld_evolve.html">sld_evolve.pro</a>', "sld_evolve.pro", "", "sld_evolve", "       Computes new solid descriptors at the given time offsets from        the given solid descriptors using the taylor series expansion        corresponding to the derivatives contained in the given solid        descriptor.    ", "nodv If set, velocities will not be evolved.    sld Array (nsld) of any subclass of SOLID descriptors.   dt Array (ndt) of time offsets.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (ngd,ndt) of newly allocated solid descriptors evolved        by time dt, where ngd is the number of sld, and ndt is the        number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_gm.html", "sld_gm.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_gm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_gm.html#sld_gm", "sld_gm", 'routine in <a href="sld/sld_gm.html">sld_gm.pro</a>', "sld_gm.pro", "", "sld_gm", "       Returns the GM value for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016          Array (nt) of GM values associated with each given solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_mass.html", "sld_mass.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_mass.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_mass.html#sld_mass", "sld_mass", 'routine in <a href="sld/sld_mass.html">sld_mass.pro</a>', "sld_mass.pro", "", "sld_mass", "       Returns the mass for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016          Array (nt) of mass values associated with each given solid 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_npht.html", "sld_npht.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_npht.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_npht.html#sld_npht", "sld_npht", 'routine in <a href="sld/sld_npht.html">sld_npht.pro</a>', "sld_npht.pro", "", "sld_npht", "	Returns an integer indicating the maximum number of parameters 	allowed in the refl_parm and phase-parm fields of the solid 	descriptor.  This number can be adjusted using the environment 	variable 'SLD_NPHT'.  The default is 4.    ", "", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998   	Current npht value.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_opacity.html", "sld_opacity.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_opacity.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_opacity.html#sld_opacity", "sld_opacity", 'routine in <a href="sld/sld_opacity.html">sld_opacity.pro</a>', "sld_opacity.pro", "", "sld_opacity", "	Returns the opacity for each given solid descriptor.    ", "noeventsld", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   	Opacity value associated with each given solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_phase.html", "sld_phase.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_phase.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_phase.html#sld_phase", "sld_phase", 'routine in <a href="sld/sld_phase.html">sld_phase.pro</a>', "sld_phase.pro", "", "sld_phase", "	Computes a phase function.    	The function indicated by the phase_fn field of the solid descriptor 	is called and its return value is passed through to the caller of 	sld_phase.    STATUS: 	Complete    ", "sld Globe descriptor.   mu Cosine of the emission angle.   mu0 Cosine of the incidence angle.   ", "NV/LIB/SLD", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Phase function value for the given mu and mu0 parameters.    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_phase_fn.html", "sld_phase_fn.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_phase_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_phase_fn.html#sld_phase_fn", "sld_phase_fn", 'routine in <a href="sld/sld_phase_fn.html">sld_phase_fn.pro</a>', "sld_phase_fn.pro", "", "sld_phase_fn", "       Returns the name of the phase function for each given solid 	descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nt) of phase function names associated with each given solid 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_phase_parm.html", "sld_phase_parm.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_phase_parm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_phase_parm.html#sld_phase_parm", "sld_phase_parm", 'routine in <a href="sld/sld_phase_parm.html">sld_phase_parm.pro</a>', "sld_phase_parm.pro", "", "sld_phase_parm", "       Returns the phase function parameters for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (npht,nt) of phase function parameters associated with each 	given solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_refl.html", "sld_refl.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_refl.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_refl.html#sld_refl", "sld_refl", 'routine in <a href="sld/sld_refl.html">sld_refl.pro</a>', "sld_refl.pro", "", "sld_refl", "	Computes a reflection function.    	The function indicated by the refl_fn field of the solid descriptor 	is called and its return value is passed through to the caller of 	sld_phase.    STATUS: 	Complete    ", "sld Globe descriptor.   mu Cosine of the emission angle.   mu0 Cosine of the incidence angle.   ", "NV/LIB/SLD", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Refletion function value for the given mu and mu0 parameters.    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_refl_fn.html", "sld_refl_fn.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_refl_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_refl_fn.html#sld_refl_fn", "sld_refl_fn", 'routine in <a href="sld/sld_refl_fn.html">sld_refl_fn.pro</a>', "sld_refl_fn.pro", "", "sld_refl_fn", "       Returns the name of the reflection function for each given solid 	descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (nt) of reflection function names associated with each given 	solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_refl_parm.html", "sld_refl_parm.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_refl_parm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_refl_parm.html#sld_refl_parm", "sld_refl_parm", 'routine in <a href="sld/sld_refl_parm.html">sld_refl_parm.pro</a>', "sld_refl_parm.pro", "", "sld_refl_parm", "       Returns the reflection function parameters for each given solid 	descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016          Array (npht,nt) of reflection function parameters associated with 	each given solid descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("sld/sld_set_albedo.html", "sld_set_albedo.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_set_albedo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_set_albedo.html#sld_set_albedo", "sld_set_albedo", 'routine in <a href="sld/sld_set_albedo.html">sld_set_albedo.pro</a>', "sld_set_albedo.pro", "", "sld_set_albedo", "       Replaces the bond albedo for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   albedo Array (nt) of new bond albedos.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("sld/sld_set_gm.html", "sld_set_gm.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_set_gm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_set_gm.html#sld_set_gm", "sld_set_gm", 'routine in <a href="sld/sld_set_gm.html">sld_set_gm.pro</a>', "sld_set_gm.pro", "", "sld_set_gm", "       Replaces the GM value for each given solid descriptor.    ", "nosynchnoeventsld Array (nt) of any subclass of SOLID descriptors.   gm Array (nt) of new GM values.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("sld/sld_set_mass.html", "sld_set_mass.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_set_mass.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_set_mass.html#sld_set_mass", "sld_set_mass", 'routine in <a href="sld/sld_set_mass.html">sld_set_mass.pro</a>', "sld_set_mass.pro", "", "sld_set_mass", "       Replaces the mass for each given solid descriptor.    ", "nosynchnoeventsld Array (nt) of any subclass of SOLID descriptors.   mass", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("sld/sld_set_opacity.html", "sld_set_opacity.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_set_opacity.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_set_opacity.html#sld_set_opacity", "sld_set_opacity", 'routine in <a href="sld/sld_set_opacity.html">sld_set_opacity.pro</a>', "sld_set_opacity.pro", "", "sld_set_opacity", "	Replaces the opacity of each given solid descriptor.    ", "noeventsld Any subclass of SOLID.   opacity New opacity value.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("sld/sld_set_phase_fn.html", "sld_set_phase_fn.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_set_phase_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_set_phase_fn.html#sld_set_phase_fn", "sld_set_phase_fn", 'routine in <a href="sld/sld_set_phase_fn.html">sld_set_phase_fn.pro</a>', "sld_set_phase_fn.pro", "", "sld_set_phase_fn", "       Replaces the phase function for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   phase_fnArray (nt) of new phase functions.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("sld/sld_set_refl_fn.html", "sld_set_refl_fn.pro", '.pro file in <a href="sld/dir-overview.html">sld/ directory</a>', "sld_set_refl_fn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sld/sld_set_refl_fn.html#sld_set_refl_fn", "sld_set_refl_fn", 'routine in <a href="sld/sld_set_refl_fn.html">sld_set_refl_fn.pro</a>', "sld_set_refl_fn.pro", "", "sld_set_refl_fn", "       Replaces the reflection function for each given solid descriptor.    ", "noeventsld Array (nt) of any subclass of SOLID descriptors.   refl_fnArray (nt) of new reflection functions.   ", "NV/LIB/SLD", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("tools/smear_psf.html", "smear_psf.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "smear_psf.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/smear_psf.html#smear_psf", "smear_psf", 'routine in <a href="tools/smear_psf.html">smear_psf.pro</a>', "smear_psf.pro", "", "smear_psf", "", "cdbxwidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/smooth_on_curve.html", "smooth_on_curve.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "smooth_on_curve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/smooth_on_curve.html#smooth_on_curve", "smooth_on_curve", 'routine in <a href="tools/smooth_on_curve.html">smooth_on_curve.pro</a>', "smooth_on_curve.pro", "", "smooth_on_curve", "", "cdimagepwidth", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/smooth_on_curve.html#_smooth_on_curve", "_smooth_on_curve", 'routine in <a href="tools/smooth_on_curve.html">smooth_on_curve.pro</a>', "smooth_on_curve.pro", "", "_smooth_on_curve", "", "imagepwidth", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/stellab.html", "stellab.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "stellab.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/stellab.html#stellab", "stellab", 'routine in <a href="tools/stellab.html">stellab.pro</a>', "stellab.pro", "", "stellab", "	Corrects body positions for stellar aberration.    ", "cSpeed of light.   fastobs_bx	Array (nt) of any subclass of BODY describing 			the observer.   targ_bxArray (nt) of any subclass of BODY describing 			the target.  The position of this body is modified.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   ");
  
  libdata[libdataItem++] = new Array("tools/stellab.html#_stellab", "_stellab", 'routine in <a href="tools/stellab.html">stellab.pro</a>', "stellab.pro", "", "_stellab", "", "cfastobs_bxtarg_bx", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/stellab_pos.html", "stellab_pos.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "stellab_pos.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/stellab_pos.html#stellab_pos", "stellab_pos", 'routine in <a href="tools/stellab_pos.html">stellab_pos.pro</a>', "stellab_pos.pro", "", "stellab_pos", "	Corrects positions for stellar aberration.    ", "cSpeed of light.   axisArray (nv,3) of rotation axes corresponding to each 		correction.   thetaArray (nv) of rotation angles corresponding to each 		correction.    fastposArray (nv,3) of target inertial position vectors to be 		corrected.   velArray (nv,3) of observer inertial velocity vectors. 		Note observer is assumed to be at the origin.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nv,3) of corrected position vectors.    ");
  
  

libdata[libdataItem++] = new Array("tools/stellab_radec.html", "stellab_radec.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "stellab_radec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/stellab_radec.html#stellab_radec", "stellab_radec", 'routine in <a href="tools/stellab_radec.html">stellab_radec.pro</a>', "stellab_radec.pro", "", "stellab_radec", "	Corrects positions given in the radec system for stellar 	aberration.    ", "cSpeed of light.   radecArray (nv,3) of target inertial position vectors to be 		corrected, given in the radec system.   velArray (nv,3) of observer inertial velocity vectors. 		Note observer is assumed to be at the origin.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (nv,3) of corrected position vectors in the radec system.    ");
  
  

libdata[libdataItem++] = new Array("tools/stereo_split.html", "stereo_split.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "stereo_split.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/stereo_split.html#stereo_split", "stereo_split", 'routine in <a href="tools/stereo_split.html">stereo_split.pro</a>', "stereo_split.pro", "", "stereo_split", "       Splits a given camera descriptor into a stereo pair.    ", "sepcdCamera descriptor.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Array (2) giving the left and right camera descriptors. 	Each descriptor is cloned from the input descripor, and has 	been translated +/- sep/2 in the camara body 0-axis direction.    ");
  
  

libdata[libdataItem++] = new Array("stn/stn_create_descriptors.html", "stn_create_descriptors.pro", '.pro file in <a href="stn/dir-overview.html">stn/ directory</a>', "stn_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("stn/stn_create_descriptors.html#stn_create_descriptors", "stn_create_descriptors", 'routine in <a href="stn/stn_create_descriptors.html">stn_create_descriptors.pro</a>', "stn_create_descriptors.pro", "", "stn_create_descriptors", "	Init method for the STATION class.    ", "crdCore descriptor(s) to pass to cor_create_descriptors.   bdBody descriptor(s) to pass to bod_create_descriptors.   stdStation descriptor(s) to initialize, instead of creating new 		ones.   abbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayn     Number of station descriptors.   end_keywords", "NV/LIB/STN", "       Written by:     Spitale  	Adapted by:	Spitale, 5/2016          An array (n) of station descriptors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("stn/stn_evolve.html", "stn_evolve.pro", '.pro file in <a href="stn/dir-overview.html">stn/ directory</a>', "stn_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("stn/stn_evolve.html#stn_evolve", "stn_evolve", 'routine in <a href="stn/stn_evolve.html">stn_evolve.pro</a>', "stn_evolve.pro", "", "stn_evolve", "	Computes new station descriptors at the given time offsets from the 	given station descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given station 	descriptor.    ", "nodv If set, derivatives will not be evolved.    stddt Time offset.   ", "NV/LIB/STN", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (nstd,ndt) of newly allocated descriptors, of class STATION, 	evolved by time dt, where nstd is the number of stx, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("stn/stn_primary.html", "stn_primary.pro", '.pro file in <a href="stn/dir-overview.html">stn/ directory</a>', "stn_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("stn/stn_primary.html#stn_primary", "stn_primary", 'routine in <a href="stn/stn_primary.html">stn_primary.pro</a>', "stn_primary.pro", "", "stn_primary", "	Returns the primary string for each given station descriptor.    ", "noeventstd Array (nt) of STATION descriptors.   ", "NV/LIB/STN", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Primary string associated with each given station descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("stn/stn_replicate.html", "stn_replicate.pro", '.pro file in <a href="stn/dir-overview.html">stn/ directory</a>', "stn_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("stn/stn_replicate.html#stn_replicate", "stn_replicate", 'routine in <a href="stn/stn_replicate.html">stn_replicate.pro</a>', "stn_replicate.pro", "", "stn_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "std Station descriptor.   dim Dimensions of the result.   ", "NV/LIB/STN", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("stn/stn_set_primary.html", "stn_set_primary.pro", '.pro file in <a href="stn/dir-overview.html">stn/ directory</a>', "stn_set_primary.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("stn/stn_set_primary.html#stn_set_primary", "stn_set_primary", 'routine in <a href="stn/stn_set_primary.html">stn_set_primary.pro</a>', "stn_set_primary.pro", "", "stn_set_primary", "	Replaces the primary string in each given station descriptor.    ", "noeventstdArray (nt) of STATION descriptors.   primaryArray (nt) of primary strings.   ", "NV/LIB/STN", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("stn/stn_set_surface_pt.html", "stn_set_surface_pt.pro", '.pro file in <a href="stn/dir-overview.html">stn/ directory</a>', "stn_set_surface_pt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("stn/stn_set_surface_pt.html#stn_set_surface_pt", "stn_set_surface_pt", 'routine in <a href="stn/stn_set_surface_pt.html">stn_set_surface_pt.pro</a>', "stn_set_surface_pt.pro", "", "stn_set_surface_pt", "	Replaces the surface_pt vector in each given station descriptor.    ", "noeventstdArray (nt) of STATION descriptors.   surface_ptArray (1,3,nt) of surface_pt vectors.   ", "NV/LIB/STN", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("stn/stn_surface_pt.html", "stn_surface_pt.pro", '.pro file in <a href="stn/dir-overview.html">stn/ directory</a>', "stn_surface_pt.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("stn/stn_surface_pt.html#stn_surface_pt", "stn_surface_pt", 'routine in <a href="stn/stn_surface_pt.html">stn_surface_pt.pro</a>', "stn_surface_pt.pro", "", "stn_surface_pt", "	Returns the surface_pt vector for each given station descriptor.    ", "noeventstd Array (nt) of STATION descriptors.   ", "NV/LIB/STN", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array (1,3,nt) of surface_pt vectors associated with each given 	station descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("str/str_create_descriptors.html", "str_create_descriptors.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "str_create_descriptors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("str/str_create_descriptors.html#str_create_descriptors", "str_create_descriptors", 'routine in <a href="str/str_create_descriptors.html">str_create_descriptors.pro</a>', "str_create_descriptors.pro", "", "str_create_descriptors", "	Init method for the STAR class.    ", "crdCore descriptor(s) to pass to cor_create_descriptors.   bdBody descriptor(s) to pass to bod_create_descriptors.   sldSolid descriptor(s) to pass to sld_create_descriptors.   gbdGlobe descriptor(s) to pass to glb_create_descriptors.   sdStar descriptor(s) to initialize, instead of creating new ones.   abbrevusernametasksudataunametimeorientavelposvelopaquelibv__libdlibdtarrayopacitymassGMrefl_fnrefl_parmphase_fnphase_parmalbedotyperadiiloralrefrrefJlumArray (n) of luminosity values.   spArray (n) of spectral class strings.   n     Number of star descriptors.   end_keywords", "NV/LIB/STR", "       Written by:     Haemmerle, 5/1998  	Adapted by:	Spitale, 5/2016          An array (n) of star descriptors.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("str/str_evolve.html", "str_evolve.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "str_evolve.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("str/str_evolve.html#str_evolve", "str_evolve", 'routine in <a href="str/str_evolve.html">str_evolve.pro</a>', "str_evolve.pro", "", "str_evolve", "	Computes new star descriptors at the given time offsets from the 	given star descriptors using the taylor series expansion 	corresponding to the derivatives contained in the given star 	descriptor.    ", "nodv If set, derivatives will not be evolved.    sddt Time offset.   ", "NV/LIB/STR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   	Array (nsd,ndt) of newly allocated descriptors, of class STAR, 	evolved by time dt, where nsd is the number of sx, and ndt 	is the number of dt.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("str/str_get_mag.html", "str_get_mag.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "str_get_mag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("str/str_get_mag.html#str_get_mag", "str_get_mag", 'routine in <a href="str/str_get_mag.html">str_get_mag.pro</a>', "str_get_mag.pro", "", "str_get_mag", "       Calculates the visual magnitude for each given star descriptor.           Calls str_body to get the position vector.  The position is assumed        to be in meters and the Luminosity (sds.lum) is in J/sec.  Absolute        visual magnitude is calculated by using the formula for the Sun.        Mv = 4.83 - 2.5 log (L/Lsun)        where Lsun = 3.826e+26 J/sec        Visual magnitude is corrected by using the distance modulus.        m = Mv + 5 log (dist/pc) - 5        where pc = 3.085678e+16 m  (parsec)   STATUS:        Completed.    ", "sd   Array (nt) of star descriptors.   ", "NV/LIB/STR", "       Written by:     Haemmerle, 5/1998 	Modified by:	Haemmerle, 12/2000  	Adapted by:	Spitale, 5/2016           An array (nt) of magnitues.   ");
  
  

libdata[libdataItem++] = new Array("str/str_limit_mag.html", "str_limit_mag.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "str_limit_mag.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("str/str_limit_mag.html#str_limit_mag", "str_limit_mag", 'routine in <a href="str/str_limit_mag.html">str_limit_mag.pro</a>', "str_limit_mag.pro", "", "str_limit_mag", "       Returns subscripts of stars with magnitudes within the min, max range.    ", "min   Minimum threshold for magnitude.   max   Maximum threshold for magnitude.   sd   Array of star descriptors.   ", "NV/LIB/STR", "       Written by:     Haemmerle, 5/1998  	Adapted by:	Spitale, 5/2016          An array of subscripts into sd for stars fitting 	min <=  magnitude <= max.    SEE ALSO: 	pg_str_limit_mag   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("str/str_lum.html", "str_lum.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "str_lum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("str/str_lum.html#str_lum", "str_lum", 'routine in <a href="str/str_lum.html">str_lum.pro</a>', "str_lum.pro", "", "str_lum", "       Returns a luminosity for each given star descriptor.    ", "noeventsd   Array (nt) of star descriptors   ", "NV/LIB/STR", "       Written by:     Haemmerle, 5/1998  	Adapted by:	Spitale, 5/2016          An array (nt) of luminosities.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("str/str_replicate.html", "str_replicate.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "str_replicate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("str/str_replicate.html#str_replicate", "str_replicate", 'routine in <a href="str/str_replicate.html">str_replicate.pro</a>', "str_replicate.pro", "", "str_replicate", "	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    ", "sd Star descriptor.   dim Dimensions of the result.   ", "NV/LIB/STR", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   	Array of the given dimensions containing cloned versions of the input 	descriptor.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("str/str_set_lum.html", "str_set_lum.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "str_set_lum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("str/str_set_lum.html#str_set_lum", "str_set_lum", 'routine in <a href="str/str_set_lum.html">str_set_lum.pro</a>', "str_set_lum.pro", "", "str_set_lum", "	Replaces the luminosities for each given star descriptor.    ", "noeventsd Array (nt) of any subclass of STAR.   lum Array (nt) of new luminosity values.   ", "NV/LIB/STR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("str/str_set_sp.html", "str_set_sp.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "str_set_sp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("str/str_set_sp.html#str_set_sp", "str_set_sp", 'routine in <a href="str/str_set_sp.html">str_set_sp.pro</a>', "str_set_sp.pro", "", "str_set_sp", "	Replaces the spectra class for each given star descriptor.    ", "noeventsd Array (nt) of any subclass of STAR.   sp Array (nt) of new sp strings.   ", "NV/LIB/STR", " 	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ");
  
  

libdata[libdataItem++] = new Array("str/str_sp.html", "str_sp.pro", '.pro file in <a href="str/dir-overview.html">str/ directory</a>', "str_sp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("str/str_sp.html#str_sp", "str_sp", 'routine in <a href="str/str_sp.html">str_sp.pro</a>', "str_sp.pro", "", "str_sp", "       Returns a spectral type for each given star descriptor.    ", "noeventsd   Array (t) of star descriptors   ", "NV/LIB/STR", "       Written by:     Haemmerle, 5/1998  	Adapted by:	Spitale, 5/2016          An array (nt) of spectral types which is a three character string.    STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/sub_latlon.html", "sub_latlon.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "sub_latlon.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/sub_latlon.html#sub_latlon", "sub_latlon", 'routine in <a href="tools/sub_latlon.html">sub_latlon.pro</a>', "sub_latlon.pro", "", "sub_latlon", "	Computes sub-observer latitude and longitude on a globe.   ", "body_ptArray (nv,3,nt) giving the sub-observer point in 			BODY coordinates.   surf_ptArray (nv,3,nt) giving the sub-observer point in 			SURFACE coordinates.    graphic  If set, use planetographic coordinates.   gbxArray (nt) of any subclass of GLOBE.   vArray (nv,3,nt) giving the observer position in the BODY frame.   sublatsublon", "NV/LIB/TOOLS", "       Written by:     Spitale   	sublat:	Array (nv,nt) of latitude of sub-observer point on gbx.  	sublon:	Array (nv,nt) of longitude of sub-observer point on gbx.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/surface_image_bounds.html", "surface_image_bounds.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "surface_image_bounds.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/surface_image_bounds.html#surface_image_bounds", "surface_image_bounds", 'routine in <a href="tools/composite/surface_image_bounds.html">surface_image_bounds.pro</a>', "surface_image_bounds.pro", "", "surface_image_bounds", "	Computes latitude / longitude ranges visible in an image.    ", "slopAmount, in pixels, by which to expand the image size 		considered in the calcultaion.   border_pts_imImage points on the border of the image defined by cd.   latminMinimum latitude covered in image   latmaxMaximum latitude covered in image   lonminMinimum longitude covered in image   lonmaxMaximum longitude covered in image    statuscd     Camera descriptor   bx     Object descriptor (subclass of BODY)    ", "NV/LIB/TOOLS/COMPOSITE", "");
  
  

libdata[libdataItem++] = new Array("tools/composite/surface_intersect.html", "surface_intersect.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "surface_intersect.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/surface_intersect.html#surface_intersect", "surface_intersect", 'routine in <a href="tools/composite/surface_intersect.html">surface_intersect.pro</a>', "surface_intersect.pro", "", "surface_intersect", "	Computes the intersection of rays with surface objects.    ", "hitnearfarbxArray (nt) of any subclass of BODY descriptors with 		the expected surface parameters.   vArray (nv,3,nt) giving ray origins in the BODY frame.   rArray (nv,3,nt) giving ray directions in the BODY frame.    ", "NV/LIB/TOOLS/COMPOSITE", " 	Written by:	Spitale, 7/2015   	Array (2*nv,3,nt) of points in the BODY frame, where 	int_pts[0:nv-1,*,*] correspond to the near-side intersections 	and int_pts[nv:2*nv-1,*,1] correspond to the far side.  Zero 	vector is returned for points with no solution.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/surface_normal.html", "surface_normal.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "surface_normal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/surface_normal.html#surface_normal", "surface_normal", 'routine in <a href="tools/surface_normal.html">surface_normal.pro</a>', "surface_normal.pro", "", "surface_normal", "	Computes the normal at points on a surface.    ", "frame_bd Frame descriptor, if required for bx.   north    Passed to dsk_surface_normal.  Causes surface normal 	           to point north regardless of observer position.   bxArray (nt) of any subclass of BODY descriptors with 		the expected surface parameters.   vArray (nv,3,nt) giving observer positions in the BODY frame.   rArray (nv,3,nt) giving surface positions in the BODY frame.    ", "NV/LIB/TOOLS/COMPOSITE", " 	Written by:	Spitale, 7/2015   	Array (nv, 3, nt) of surface unit normals in the BODY frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/surface_normal.html", "surface_normal.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "surface_normal.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/surface_normal.html#surface_normal", "surface_normal", 'routine in <a href="tools/composite/surface_normal.html">surface_normal.pro</a>', "surface_normal.pro", "", "surface_normal", "	Computes the normal at points on a surface.    ", "north    Passed to dsk_surface_normal.  Causes surface normal 	           to point north regardless of observer position.   bxArray (nt) of any subclass of BODY descriptors with 		the expected surface parameters.   vArray (nv,3,nt) giving observer positions in the BODY frame.   rArray (nv,3,nt) giving surface positions in the BODY frame.    ", "NV/LIB/TOOLS/COMPOSITE", " 	Written by:	Spitale, 7/2015   	Array (nv, 3, nt) of surface unit normals in the BODY frame.    STATUS: 	Complete    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/surface_to_body.html", "surface_to_body.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "surface_to_body.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/surface_to_body.html#surface_to_body", "surface_to_body", 'routine in <a href="tools/composite/surface_to_body.html">surface_to_body.pro</a>', "surface_to_body.pro", "", "surface_to_body", "       Transforms points in any surface coordinate system to body 	coordinates.    ", "bx     Array of nt object descriptors (subclass of BODY).   p", "NV/LIB/TOOLS/COMPOSITE", "       Array (nv x 3 x nt) of body coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/surface_to_degrees.html", "surface_to_degrees.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "surface_to_degrees.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/surface_to_degrees.html#surface_to_degrees", "surface_to_degrees", 'routine in <a href="tools/surface_to_degrees.html">surface_to_degrees.pro</a>', "surface_to_degrees.pro", "", "surface_to_degrees", "       Converts angular part of surface vectors from radians to degrees    ", "v      An array of surface vectors (nv,3,nt).   ", "NV/LIB/TOOLS", "       Array of vectors (nv,3,nt)   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/surface_to_image.html", "surface_to_image.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "surface_to_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/surface_to_image.html#surface_to_image", "surface_to_image", 'routine in <a href="tools/composite/surface_to_image.html">surface_to_image.pro</a>', "surface_to_image.pro", "", "surface_to_image", "       Transforms points in any surface coordinate system to image 	coordinates.    ", "body_ptsvalidcd     Array of nt camera or map descriptors.   bx     Array of nt object descriptors (subclass of BODY).   p", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of image points.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/composite/surface_to_map.html", "surface_to_map.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "surface_to_map.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/surface_to_map.html#surface_to_map", "surface_to_map", 'routine in <a href="tools/composite/surface_to_map.html">surface_to_map.pro</a>', "surface_to_map.pro", "", "surface_to_map", "       Transforms points in any surface coordinate system to map 	coordinates.    ", "md     Array of nt map descriptors.   bx     Array of nt object descriptors (subclass of BODY.   surface_pts      Array (nv x 3 x nt) of surface points   ", "NV/LIB/TOOLS/COMPOSITE", "       Array (2 x nv x nt) of map coordinates.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/synth_image.html", "synth_image.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "synth_image.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/synth_image.html#synth_image", "synth_image", 'routine in <a href="tools/synth_image.html">synth_image.pro</a>', "synth_image.pro", "", "synth_image", "", "rdcdpdsund", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/composite/ta_to_az.html", "ta_to_az.pro", '.pro file in <a href="tools/composite/dir-overview.html">tools/composite/ directory</a>', "ta_to_az.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/composite/ta_to_az.html#ta_to_az", "ta_to_az", 'routine in <a href="tools/composite/ta_to_az.html">ta_to_az.pro</a>', "ta_to_az.pro", "", "ta_to_az", "	Computes azimuths relative to a given observer descriptor.    ", "taLongitude.   dkxDisk descriptor.   odObject descriptor (subclass of BODY) describing the observer.   ", "NV/LIB/TOOLS/COMPOSITE", "       An array of azimuths.   STATUS:        Completed.    ");
  
  

libdata[libdataItem++] = new Array("tools/target_altaz.html", "target_altaz.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "target_altaz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/target_altaz.html#target_altaz", "target_altaz", 'routine in <a href="tools/target_altaz.html">target_altaz.pro</a>', "target_altaz.pro", "", "target_altaz", "	Computes altitude/azimuth of a target relative to a point on or near the 	surface of a globe.   ", "bxArray (nt) of any subclass of BODY giving the target.   pdlatLatitude of observer wrt gbx.   lonLongitude of observer wrt gbx.   altAltitude of observer wrt gbx.   ", "NV/LIB/TOOLS", "       Written by:     Spitale   	Vector from observer to target in the altaz system.    ");
  
  

libdata[libdataItem++] = new Array("dat/tr_keyword_value.html", "tr_keyword_value.pro", '.pro file in <a href="dat/dir-overview.html">dat/ directory</a>', "tr_keyword_value.pro", "", "", "	Looks up a keyword in the data descriptor stored keyword/value pairs.    ", "", "          -1", " 	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ");
  
  
  libdata[libdataItem++] = new Array("dat/tr_keyword_value.html#trkv_match", "trkv_match", 'routine in <a href="dat/tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "trkv_match", "", "valuekvikeyword", "          -1", "");
  
  libdata[libdataItem++] = new Array("dat/tr_keyword_value.html#trkv_parse", "trkv_parse", 'routine in <a href="dat/tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "trkv_parse", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("dat/tr_keyword_value.html#tr_keyword_value", "tr_keyword_value", 'routine in <a href="dat/tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "tr_keyword_value", "", "ddkeyword", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/tvxmap.html", "tvxmap.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "tvxmap.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/tvxmap.html#tvxmap", "tvxmap", 'routine in <a href="tools/tvxmap.html">tvxmap.pro</a>', "tvxmap.pro", "", "tvxmap", "", "colorfndatamaxminradiusweightbinoffset_xmap_ptd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("tools/warp_cp.html", "warp_cp.pro", '.pro file in <a href="tools/dir-overview.html">tools/ directory</a>', "warp_cp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("tools/warp_cp.html#wcp_add_quad", "wcp_add_quad", 'routine in <a href="tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_add_quad", "", "triijquadnquadqtrip0", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/warp_cp.html#wcp_longest_side", "wcp_longest_side", 'routine in <a href="tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_longest_side", "", "p0tripq", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/warp_cp.html#wcp_requadrangulate", "wcp_requadrangulate", 'routine in <a href="tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_requadrangulate", "", "p0triqtri", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/warp_cp.html#wcp_map_quad_coords", "wcp_map_quad_coords", 'routine in <a href="tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_map_quad_coords", "", "x0y0p0p1quadx1y1", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/warp_cp.html#wcp_map_quad", "wcp_map_quad", 'routine in <a href="tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_map_quad", "", "cdinterpimagep0p1quadtriqtrisize", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/warp_cp.html#wcp_map_tri_coords", "wcp_map_tri_coords", 'routine in <a href="tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_map_tri_coords", "", "x0y0p0p1trix1y1", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/warp_cp.html#wcp_map_tri", "wcp_map_tri", 'routine in <a href="tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "wcp_map_tri", "", "cdimagep0p1trisize", "          -1", "");
  
  libdata[libdataItem++] = new Array("tools/warp_cp.html#warp_cp", "warp_cp", 'routine in <a href="tools/warp_cp.html">warp_cp.pro</a>', "warp_cp.pro", "", "warp_cp", "", "cdsizequadinterpimagep0p1", "          -1", "");
  
  

