<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- Generated by IDLdoc 3.6.1 on Tue Oct 11 05:38:11 2016 -->

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
    <title>ominas_data__define.pro (OMINAS API Documentation)</title>

    
    <style type="text/css" media="all">
            /* setup page */
      body { font-family: Helvetica, sans-serif; font-size: 12pt; margin: 0; padding: 0; }
      div.content { padding: 1em; }
      p { line-height: 1.4; }
      td p { padding-bottom: 0.5em; }
      img { border: 0; }
      
      /* link styles */
      a { text-decoration: none; }
      a:link, a:visited { color: #0000FF; }
      a:hover, a:focus { background: yellow; border-bottom: 1emx dotted #303099; }
      
      /* dir-overview styles */
      dt.filename { margin-top: 0.5em; }
      dl.file_listing { margin-left: 1em; }
      
      /* titles */
      h1, h2, h3, h4 { font-weight:normal; color: #871E31; margin-top: 1.5em; }
      h4 { margin-bottom: 0.25em; }
      .center { margin-left: auto; margin-right: auto; }
      .small { font-family: Verdana, Helvetica, sans-serif; font-size: 90%; }
      .smaller { font-family: Verdana, Helvetica, sans-serif; font-size: 80%; }
      .smallest { font-family: Verdana, Helvetica, sans-serif; font-size: 70%; }
      h1.basename { margin-top: 0; margin-bottom: 0; }
      h1.basename span.file-attributes { font-size: 70%; margin-left: 3em; color: #384806; }
      h2.directory { font-size: 90%; margin-bottom: 0; }
      h2.routine-name { margin-top: 0; margin-bottom: 0; }
      p.categories { color: #384806; margin-top: 0; }
      span.file_attribute { float: right; color: #384806; margin: 0 0 1em 3em; }
      div#file_comments { margin-top: 1em; }
      
      div.routine-details { border: 1px dotted #C0C0C0; margin-top: 1em; padding: 1em; }
      span.routine-attributes { font-size: 70%; margin-left: 3em; color: #384806; }
      div.details dt { color: #871E31; margin-left: 2em; }
      div.details dt span { color: #384806; margin-left: 2em; }
      div.details dd { margin: 0.5em 2em 1em 4em; }
      a.top {
        font-family: Verdana, Helvetica, sans-serif;
        font-size: 8pt;
        font-weight: bold;
        color: #5070ff;
        text-transform: uppercase;
        float: right;
        margin-left: 1em;
      }
      
      /* comments */
      .pre { white-space: pre; }
      
      /* code styles */
      code { font-family: Monaco, "Courier New", Courier, monospace; font-size: 95%; }
      code.listing { white-space: pre; display: block; margin: 0.75em 0 0.75em 0; padding: 0 3em 0 1em; line-height: 1.4em; }
      code.source { white-space: pre; display: block; }
      code.source span.comments { color: #408080; }
      .syntax { margin-top: 1em; margin-left: 1.5em; text-indent: -1.5em; }
      .var { font-style: italic; }
      .argument { } /* white-space: nowrap; does not work in Safari (and sometimes not even in Firefox) */
      
      dl.routine-summary dt { margin-bottom: 0.25em; }
      dl.routine-summary dd { margin-bottom: 0.5em; margin-left: 2em; }
      
      ul.inherited-method-summary { padding-left: 0em; margin-left: 0em; }
      
      /* general styles */
      ul li { list-style-type: none; }
      table { empty-cells: show; }
      thead { color: #871E31; }
      dd { margin-bottom: 0.35em; }
      input, textarea { background: #F3F6ED; border: #E1D6C6 1px solid; padding: 2px 1em 2px 0.5em; }
      input.text { background: #FFFFC0; }
      
      div.note { margin: 1em 2em 1em 2em; background: #EFEFEF; border: 1px #A0A0A0 dotted; padding: 0 1em 0 1em; }
      p.indent { margin-left: 2em; }
      
      /* An attribute table is a vertical list of name-value pairs. */
      table.box {
        background: #EFEFEF;
        border: 1px #A0A0A0 dotted;
        padding-top: 0.75em;
        padding-bottom: 0.75em;
      }
      table.attribute { padding-left: 0.75em; padding-right: 0.75em; }
      table td { vertical-align: top; }
      table.attribute p { margin: 0; }
      table td.name { font-style: normal; padding-right: 1.5em; }
      ul.fieldslist { padding-top: 0; color: #909090; }
      ul.fieldslist li { margin-bottom: 0.25em; }
      span.fieldname { color: #000000; }
      
      dl.attribute dt { color: #990000; }
      
      /* header/navbar styles */
      div.header { padding: 2em 2em 0 2em; background: #9E9D7B; border-bottom: 2px #262626 solid; }
      div.header h1 { color: white; margin:0; font-weight: normal; }
      div.header h2 { color: white; margin-top: 0; margin-bottom: 1em; font-weight: normal; font-style: italic; font-size: 100%; }
      table.navbar { background: #CCC097; margin: 0; padding: 0; border-bottom: 1px #262626 dotted; width: 100%; }
      table.navbar td { padding: 4px 0.5em 3px 0.5em; white-space: nowrap; vertical-align: top; }
      table.navbar td.flexible { width: 100%; text-align: right; padding-right: 1em; white-space: nowrap; }
      table.navbar td.selected { background: #262626; }
      table.navbar td.selected, table.navbar td.selected a { color: white; }
      table.navbar a:hover, table.navbar a:focus { background: inherit; border-bottom: 1px solid #303099; }
      p.localnavbar { text-align: right; margin: 0.2em 1em 0.2em 0.2em; padding: 0; }
      
      /* CSS graphics styles */
      div.box {
        margin-left: 0.25em;
        display: inline-block;
        width: 0.9em;
        height: 0.9em;
        vertical-align: -1px;
      }
      .red { background-color: #A00; }
      .orange { background-color: #F40; }
      .green { background-color: #480; }
      
      /* index styles */
      span.index_type { margin-left: 1em; }
      dl.index_listing dd { margin-bottom: 0.5em; margin-left: 2em; }
      dl.index_listing dd p { margin-top: 0.2em; margin-bottom: 0em; }
      
      /* search styles */
      fieldset { border: #ddd 1px solid; padding: 1em; margin-top: 3em; }
      legend { color: #871E31; font-size: 120%; }
      label { white-space: nowrap; }
      p.description { margin: 2em 2em 1em 2em; }
      form table td.name { vertical-align: middle; }
      
      /* footer styles */
      div.footer { padding: 0.5em 1em 0.5em 1em; background: #EFEFEF; border-top: 1px #A0A0A0 dotted; }
      div.footer table { width: 100%; }
      div.footer td.right { text-align: right; }

    </style>
    <style type="text/css" media="print">
            p.localnavbar { display: none; }
      
      div.header { background: white; }
      div.header h1 { color: black; }
      div.header h2 { color: black; }

    </style>
    

    <script type="text/javascript">
      function setTitle() {
        parent.document.title="ominas_data__define.pro (OMINAS API Documentation)";
      }
    </script>
  </head>

  <body onload="setTitle();" id="root">
    <div class="content">
      <code class="source">;=============================================================================
; ominas_data::init
;
;=============================================================================
function ominas_data::init, ii, crd=crd0, dd=dd0, $
@dat__keywords.include
end_keywords
@core.include

 void = self->ominas_core::init(ii, crd=crd0, $
@cor__keywords.include
end_keywords)
 if(keyword_set(dd0)) then struct_assign, dd0, self

 self.abbrev = 'DAT'

 if(NOT keyword_set(nhist)) then nhist = 1
 _nhist = getenv('NV_NHIST')
 if(keyword_set(_nhist)) then nhist = fix(_nhist)

 ;-----------------------
 ; filename
 ;-----------------------
 if(keyword_set(filename)) then self.filename = filename

 ;-----------------------
 ; maintain
 ;-----------------------
 if(keyword_set(maintain)) then self.maintain = maintain

 ;-----------------------
 ; compress
 ;-----------------------
 if(keyword_set(compress)) then self.compress = compress

 ;-----------------------
 ; type
 ;-----------------------
 if(keyword_set(type)) then self.type = type

 ;-----------------------
 ; gff
 ;-----------------------
 if(keyword_set(gff)) then self.gffp = nv_ptr_new(gff)

 ;-----------------------
 ; file properties
 ;-----------------------
 if(keyword_set(filetype)) then self.filetype=filetype $
 else self.filetype = dat_detect_filetype(/default)
 if(keyword_set(input_fn)) then self.input_fn=input_fn
 if(keyword_set(output_fn)) then self.output_fn=output_fn
 if(keyword_set(keyword_fn)) then self.keyword_fn=keyword_fn


 ;-----------------------
 ; instrument
 ;-----------------------
 if(keyword_set(instrument)) then self.instrument=instrument $
 else if(keyword_set(filetype) AND keyword_set(header)) then $
  begin
   self.instrument = dat_detect_instrument(header, udata, filetype, silent=silent)
   if(self.instrument EQ '') then $
              nv_message, /continue, $
                     'Unable to detect instrument.', name='data_descriptor::init'
  end


 ;-----------------------
 ; translators
 ;-----------------------
 if(keyword_set(self.instrument)) then $
  begin
   dat_lookup_translators, self.instrument, tab_translators=tab_translators, $
           input_translators, output_translators, input_keyvals, output_keyvals, $
           silent=silent

   if(input_translators[0] EQ '') then $
        nv_message, /continue, 'No input translators available.', $
                                                    name='nv_init_descriptor' $
   else self.input_translators_p=nv_ptr_new(input_translators)

   if(output_translators[0] EQ '') then $
       nv_message, /continue, 'No output translators available.', $
                                                    name='nv_init_descriptor' $
   else self.output_translators_p=nv_ptr_new(output_translators)

   if(keyword_set(input_keyvals)) then $
                   self.input_keyvals_p = nv_ptr_new(dat_parse_keyvals(input_keyvals))
   if(keyword_set(output_keyvals)) then $
                   self.output_keyvals_p = nv_ptr_new(dat_parse_keyvals(output_keyvals))
  end



 ;---------------------------------
 ; handle giving last sibling
 ;---------------------------------
 if(NOT keyword_set(self.sibling_dd_h)) then self.sibling_dd_h = handle_create()

 ;---------------------------------
 ; dimensions
 ;---------------------------------
 if(keyword_set(dim)) then self.dim_p = nv_ptr_new(dim)


 ;-----------------------
 ; cache size
 ;-----------------------
 if(keyword_set(cache)) then self.cache = cache $
 else self.cache = dat_cache()


 ;---------------------------------
 ; transforms
 ;---------------------------------
 if(keyword_set(input_transforms)) then $
		      self.input_transforms_p = nv_ptr_new(input_transforms)
 if(keyword_set(output_transforms)) then $
                        self.output_transforms_p = nv_ptr_new(output_transforms)



 ;-----------------------
 ; data limits
 ;-----------------------
 self.max = -1d100
 self.min = 1d100

 if(defined(min)) then self.min = min
 if(defined(max)) then self.max = max

 if(defined(data)) then $
  begin
   self.max = max(data)
   self.min = min(data)
  end
 

 ;-----------------------
 ; data and header
 ;-----------------------
 dap = self.sample_dap
 data_archive_set, dap, -1, nhist=nhist
 self.sample_dap = dap

 dap = self.order_dap
 data_archive_set, dap, -1, nhist=nhist
 self.order_dap = dap

 if(defined(data)) then dat_set_data, self, data, abscissa=abscissa, /silent


 dat_set_nhist, self, nhist


 _header = ''
 if(keyword_set(header)) then _header = header
 dat_set_header, self, _header


 return, 1
end
;=============================================================================



;=============================================================================
;+
; NAME:
;	ominas_data__define
;
;
; PURPOSE:
;	Structure defining the data descriptor.
;
;
; CATEGORY:
;	NV/SYS
;
;
; CALLING SEQUENCE:
;	N/A 
;
;
; FIELDS:
;	data_dap:	Pointer to data archive containing the data 
;			and nhist past versions.
;
;	abscissa_dap:	Pointer to data archive containing the abscissa 
;			and nhist past versions.
;
;	dap_index:	Index of archived data to use.  
;
;	max:		Maximum data value.
;
;	min:		Minimum data value.
;
;	cache:		Max cache size data array.  Used to deterine whether 
;			to load / unload data samples.  -1 means infinite.
;
;	dim_p:	Pointer to array giving data dimensions.
;
;	type:	Data type code.
;
;	filename:	Name of data file.
;
;	filetype:	Filetype string determined by dat_detect_filetype.
;
;	input_transforms_p:	Pointer to list of input transform 
;				functions determined by dat_lookup_transforms.
;
;	output_transforms_p:	Pointer to list of output transform 
;				functions determined by dat_lookup_transforms.
;
;	input_fn:	Name of function to read data file.
;
;	output_fn:	Name of function to write data file.
;
;	keyword_fn:	Name of function to read/write header keywords.
;
;	instrument:	Instrument string from dat_detect_instrument.
;
;	input_translators_p:	Pointer to list of input translator 
;				functions determined by dat_lookup_translators.
;
;	output_translators_p:	Pointer to list of output translator 
;				functions determined by dat_lookup_translators.
;
;	input_keyvals_p:	Keyword/value pairs for input translators.
;
;	output_keyvals_p:	Keyword/value pairs for output translators.
;
;	transient_keyvals_p:	Transient keyword/value pairs found in the 
;				translator argument string.
;
;	last_translator:	Description of last translator called.
;
;	sampling_fn:		Optional function to perform a transformation
;				on the samples given to dat_data():
;
;				function sampling_fn, dd, samples, data
;
;	dim_fn:			Optional function to cause dat_dim() to report
;				dimensions other than those stored in the
;				data descriptor:
;
;				function dim_fn, dd, data
;
;	compress:	Compression suffix.  The full name of the 
;			compression function is dat_compress_data_&lt;suffix>.
;
;	compress_data_p:	Data for compression function.
;
;	maintain:	Data maintenance mode:
;				  0: load initially
;				  1: load when needed; retain
;				     only ndd data descriptor
;				     arrays in memory.
;				  2: Load when needed, but
; 				     do not retain.
;
;	update:		Data update mode:
;				 -1: Locked; applies to data, header,
;				     and udata.
;				  0: Normal
;				  1: Clone a new descriptor 
;				     and leave original dd
;				     unchanged.
;
;	sibling_dd_h:	Handle giving dd spawned as a result of writing to 
;			this descriptor while update = 1.  Handle is used 
;			to protect this dd from nv_free.
;;
;
; STATUS:
;	Complete
;
;
; MODIFICATION HISTORY:
; 	Written by:	Spitale, 1/1998
; 	Adapted by:	Spitale, 5/2016
;	
;-
;=============================================================================
pro ominas_data__define


 struct = $
    { ominas_data, inherits ominas_core, $
	data_dap:		nv_ptr_new(), $	; Pointer to the data archive
	abscissa_dap:		nv_ptr_new(), $	; Pointer to the abscissa archive
	sample_dap:		nv_ptr_new(), $	; Pointer to the sample archive
	order_dap:		nv_ptr_new(), $	; Pointer to the sample load order
	header_dap:		nv_ptr_new(), $	; Pointer to the generic header archive
        dap_index:		0, $		; data archive index

	cache:			0l, $		; Max. cache size for data array (Mb)
						;  Doesn't apply to maintenance 0

	max:			0d, $		; Maximum data value
	min:			0d, $		; Minimum data value
	dim_p:			nv_ptr_new(), $	; data dimensions
	type:			0b, $		; data type

	filename:		'', $		; Name of source file.
	filetype:		'', $		; Filetype string
	input_transforms_p:	nv_ptr_new(), $	; Input transform function
	output_transforms_p:	nv_ptr_new(), $	; Output transform function
	input_fn:		'', $		; Function to read file
	output_fn:		'', $		; Function to write file
	keyword_fn:		'', $		; Function toread/write header keywords
	instrument:		'', $		; Instrument string
	input_translators_p:	nv_ptr_new(), $	; Names of input translators
	output_translators_p:	nv_ptr_new(), $	; Names of output translators
	input_keyvals_p:	nv_ptr_new(), $	; Keyvals for input translators
	output_keyvals_p:	nv_ptr_new(), $	; Keyvals for output translators
	transient_keyvals_p:	nv_ptr_new(), $	; Keyvals parsed per-command
	last_translator:	lonarr(2), $	; Description of last translator
						; called
	sampling_fn:		'', $		; Optional sampling function.
	dim_fn:			'', $		; Optional dimension function.

	gffp:			nv_ptr_new(), $	; GFF pointer

;	segment:		{nv_seg_struct}, $

	compress:		'', $		; Data compression function suffix
	compress_data_p:	nv_ptr_new(), $

	maintain:		0b, $		; Data maintenance mode:
						;  0: load initially
						;  1: load when needed; retain
						;     only ndd data descriptor
						;     arrays in memory.
						;  2: Load when needed, but
						;     do not retain.

	update:			0, $		; Data update mode:
						; -1: Locked; applies to data, header,
						;     and udata.
						;  0: Normal
						;  1: Clone a new descriptor 
						;     and leave original dd
						;     unchanged.

	sibling_dd_h:		0l $		; Handle giving dd spawned as a result
						;  of writing to this descriptor
						;  while update = 1.
						;  Handle is used to protect that dd
						;  from nv_free.

    }


end
;===========================================================================


</code>
    </div>
  </body>
</html>