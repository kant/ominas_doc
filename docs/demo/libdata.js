/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "OMINAS API Documentation";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("./doc_demo.html", "doc_demo.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "doc_demo.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./install_guide.html", "install_guide.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "install_guide.pro", "", "", "	User Installation Guide  	This guide will cover the installation of OMINAS and common issues with 	configuration, as well as present some common errors and possible 	solutions. Please see the section entitled Troubleshooting for more 	information regarding installation issues with OMINAS.  	Requirements  	To process images from a particular mission, that mission's kernels will 	need to be downloaded separately from the 	NAIF website. A set of kernels can 	be obtained using the UNIX wget or rsync commands, as desired.It is 	recommended to download the set of 	generic_kernels to 	supplement kernels from other missions.  	OMINAS makes use of the NAIF Icy Toolkit to process SPICE kernels. The Icy 	toolkit may optionally be obtained manually from 	NAIF. However, the 	installer utility provided with OMINAS can download and compile Icy 	automatically. Installation of Icy is somewhat platform-dependent, so 	troubleshooting information can be found in Troubleshooting.  	Procedure  	1. Please ensure that OMINAS has been properly downloaded from the 	Github repository by entering 	the following command at the terminal: <span class= code-output > git clone https://github.com/ppenteado/ominas</span> 	A local copy of the OMINAS source will be cloned automatically.  	2. Configuration of OMINAS should be performed using the configuration 	script, configure.sh, which is located in the top-level ominas directory. 	This script can be run from the command line with: <span class= code-output > source configure.sh</span> 	3. A prompt will appear asking which packages should be installed. The 	user should type the numbers of the desired packages separated by spaces. 	If no packages are desired, the default package can be installed by typing 	 def . Star catalogs or SEDR data may be configured without installing 	packages. If no modifications to the package configuration are desired, 	the  no  keyword skips this step.  	4. Enter the location of the mission kernel pool for each desired 	mission package. If the location is not known, or there is a typo, 	the utility will attempt to find the kernel pool automatically by using 	the default name in the NAIF archive (e.g., Cassini kernels are stored 	in a folder called Cassini).  	5. The installer will optionally attempt to install the Icy Toolkit from 	the internet automatically. If a local copy of Icy is present, its 	location may be entered manually or detected automatically. Once Icy 	is installed, this step does not need to be performed again if further 	modifications to the OMINAS configuration are desired.  	6. Test the install of OMINAS has been completed correctly by running the 	the following example scripts: <span class= code-output > idl saturn_example.pro</span> <span class= code-output > idl jupiter_example.pro</span> 	7. A successful Icy installation can be tested with the following IDL 	command: <span class= code-output > help, 'icy', /dlm</span> 	Some text on the installed version of Icy should be displayed. Additionally, 	use the following command: <span class= code-output > print, cspice_tkvrsn('TOOLKIT')</span> 	The version of Icy should be printed. If both of these functions return 	successfully, then Icy has been installed correctly.  	Note: Demo  	If the demo configuration is set for OMINAS, no other types of images can 	be processed other than the example scripts. To change this setting at a 	later point, run the uninstall.sh script to unconfigure OMINAS, then run 	configure.sh again, selecting not to configure the demo.  	Alternatively, the following information can be changed in the 	~/.bash_profile' or '~/.bashrc' file: <span class= code-output > DFLAG=true; source &lt;...&gt;</span> 	where &lt;...&gt; is the rest of the line. This line should be changed to: <span class= code-output > DFLAG=false; source &lt;...&gt;</span>   	Troubleshooting  	This section outlines several common sources of error which are due to 	OMINAS not being configured correctly.  	One of the most common configuration problems manifests as this error: <span class= code-output > % CSPICE_STR2ET: SPICE(NOLEAPSECONDS): [str2et_c-&gt;STR2ET-&gt;TTRANS] The variable that points to the leapseconds (DELTET/DELTA_AT)</span> <span class= code-output >                 could not be located in the kernel pool.  It is likely that the leapseconds kernel has not been loaded via</span> <span class= code-output >                 the routine FURNSH.</span> 	This error comes from the Icy toolkit. It specifically refers to the Leap 	Second Kernel file, however, as the lsk is usually the first kernel which 	is loaded, this error generally means that no kernels are being loaded.  	You can check which kernels have been loaded by entering the following 	IDL commands: <span class= code-output > cspice_ktotal, 'ALL', count</span> <span class= code-output > for i=0,count-1 do begin & cspice_kdata,i,'ALL',file,type,source,handle,found & print,i,file & endfor</span> 	A list will be populated with the currently loaded SPICE kernels, and 	their load order. If no kernels are loaded, then it is likely that a bad 	path was supplied to the kernel pools. Ensure that the kernel pool was 	successfully entered into the environemnt by using the  env  command at 	the terminal prompt. The kernel pool variable names follow a convention 	like so: &lt;MIS&gt;_SPICE_&lt;*K&gt;, where &lt;MIS&gt; is the abbreviated mission name, 	and &lt;*K&gt; is the type of kernel. Therefore, for Cassini, the bash command: <span class= code-output > env | grep CAS_SPICE</span> 	will list the path to directories containing each type of Cassini kernel. 	If the variables are not present, then run the de-configuring utility, in 	the ominas folder: <span class= code-output > source uninstall.sh</span> 	Then run the configuration utility again. Any custom path name supplied to 	the configuration utility must be spelled correctly.  	If the kernel environment variables are present, next check that the kernel 	list contains the correct kernels. The kernel list file manually specifies 	which kernels should be loaded in place of the OMINAS auto-detect 	functionaliy. For Cassini, as an example, this file is located in 	'ominas/config/cas/cassini.kernels'. At the beginning of this file, after 	the header comments, check that the following line is present: <span class= code-output > $CAS_SPICE_LSK/naif00xx.tls</span> 	where xx is the number of the most recent leap second kernel file.  	If no SPK kernels are loaded, the following error will be returned by Icy: <span class= code-output > % CSPICE_SPKGEO: SPICE(NOLOADEDFILES): [spkgeo_c-&gt;SPKGEO-&gt;SPKSFS] At least one SPK file needs to be loaded by SPKLEF before</span> <span class= code-output >                 beginning a search.</span> 	The SPK kernels must be loaded from a mission kernel list. If they are not 	being loaded correctly, then the kernel list is not being read as expected, 	usually this is due to an incorrect kernel list path.  	In some cases, a demo script will run and no error will appear to occur, 	but no pointing will be overlayed on the image. This error generally occurs 	due to the PCK kernels not being loaded or the CK kernels not being loaded 	in the correct order.  	When the frame kernel (FK) is not being loaded correctly for an image, 	Icy will return the following error: <span class= code-output > % CSPICE_PXFORM: SPICE(EMPTYSTRING): [pxform_c] String  from  has length zero.</span> 	This error can be corrected by adding the following line to the kernel 	list, after the LSK kernel line, in this example for Cassini: <span class= code-output > $CAS_SPICE_FK/cas_iss_vXX.tf</span> 	where XX is the most recent FK version.  	Occasionally, in the course of modifying the OMINAS configuration without 	performing a fresh uninstall and reconfigure, the  load order  of the 	packages may be incorrect. When running a demo, the following error may 	occur: <span class= code-output > % Illegal variable attribute: POINTS_P.</span> 	This can be corrected either by running the uninstall script, and then 	the configuration script, or manually by editing the bash_profile or 	bashrc for the user account: <span class= code-output > vim ~/.bash_profile</span>	After editing the file to ensure that ominas_env_def.sh is the first file 	which is loaded, refresh the profile: <span class= code-output > . ~/.bash_profile</span>  	If Icy is not installed, and a script is run, something similar to the 	following error may occur: <span class= code-output > % Attempt to call undefined procedure: 'CSPICE_STR2ET'.</span> 	In general, the undefined procudure may have any cspice prefix. Icy is 	either not configured correctly, or not installed. In IDL, check that 	the Icy path has been added to the IDL path as follows: <span class= code-output > path = pref_get('IDL_PATH')</span> <span class= code-output > print, path</span> <span class= code-output > dlm_path = pref_get('IDL_DLM_PATH')</span> <span class= code-output > print, dlm_path</span> 	The path variable should appear as a colon-separated list with 	&lt;IDL_DEFAULT&gt; as the first entry. Check that both Icy and OMINAS 	directories are added to the IDL_PATH, and that Icy is added to the 	IDL_DLM_PATH. If Icy is not present in the list, it can be added with 	these IDL commands: <span class= code-output > path = path + ':+path/to/icy'</span> <span class= code-output > pref_set, 'IDL_PATH', path, /commit</span> <span class= code-output > dlm_path = dlm_path + ':+path/to/icy'</span> <span class= code-output > pref_set, 'IDL_DLM_PATH', dlm_path, /commit</span> 	You must exit and restart IDL for these changes to take effect.  	When the incorrect kernels are being loaded, an error like this may appear, 	this particular error comes from mosaic_example.pro: <span class= code-output > % Variable is undefined: MU0.</span> <span class= code-output > % Execution halted at: PG_PHOTOM_GLOBE   159 path/to/ominas/nv/com/pg/pg_photom_globe.pro</span> <span class= code-output > %                      PG_PHOTOM          99 path/to/ominas/nv/com/pg/pg_photom.pro</span> <span class= code-output > %                      $MAIN$</span> 	This error occurs when the incorrect kernel list is being used. Generally, 	when processing a Cassini or other mission image, the demo should be turned 	off through the configuration utility. If it is on, the demo kernel list 	will be called, along with the demo translator. This setup will prevent 	OMINAS from auto-detecting the correct kernels to load for the image.  	A simple mistake that might be made can manifest in the following manner: <span class= code-output > -1</span> <span class= code-output > % Variable is undefined: DD.</span> 	Note that OMINAS batch scripts must be opened from the directory from 	which they are located.   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./install_guide.html#install_guide", "install_guide", 'routine in <a href="./install_guide.html">install_guide.pro</a>', "install_guide.pro", "", "install_guide", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./jupiter_example.html", "jupiter_example.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "jupiter_example.pro", "", "", " JUPITER EXAMPLE     Edited by Mark Moretto     June 2016      This example file uses an image of Jupiter, its rings, and satellites to     demonstrate various capabilities of the OMINAS software.  This includes     fitting the limb and rings simultaneously, hiding the limb and/or rings wrt     other objects in the field of view, plotting radial and longitudinal     sectors on the ring and generating map projections.      This example file can be executed from the UNIX command line using: <span class= code-output >idl jupiter.example</span>     or from within IDL using: <span class= code-output >@jupiter.example</span>     After the example stops, later code samples in this file may be executed by     pasting them onto the IDL command line.   Read and display image        This first section uses dat_read to read in the image and then displays    the image using tvim.     dat_read reads the image portion (im) and the label (label) and returns a    data descriptor (dd) containing the image and label and information obtained    through OMINAS' configuration tables.  If a file exists in the same directory    and with the same name as the image, except with the extension  .dh ,    then it is assumed to be a detached header and it is read as well.     The files w1352097259.1 and n1352037683.2 are Cassini wide- and narrow-    angle frames of Jupiter.  2000r.img and 2100r.img are Galileo SSI    images of Ganymede.     ctmod is called to reserve several colors in the case of an 8-bit display.     tvim is called to display the image (im) in a new window with the y    coordinate as top-down: <span class= code-output > file = 'data/N1350122987_2.IMG'</span> <span class= code-output > dd = dat_read(file, im, label, /silent)</span> <span class= code-output > ctmod, top=top</span> <span class= code-output > tvim, im, zoom=0.75, /order, /new, top=top</span>   Obtain descriptors     This section obtains the camera descriptor (cd), planet descriptors    (pd), ring descriptors (rd), and the sun descriptor (sund) for    use with subsequent commands: <span class= code-output > cd = pg_get_cameras(dd)</span> <span class= code-output > pd = pg_get_planets(dd, od=cd)</span> <span class= code-output > rd = pg_get_rings(dd, pd=pd, od=cd)</span> <span class= code-output > sund = pg_get_stars(dd, od=cd, name='SUN')</span>   NOTES     Because the detached header translator dh_std_input appears before    the Cassini Spice input translator in the default translators table, the    descriptors are taken from the detached header if it exists.  If it doesn't    exist, then they are obtained through the SPICE kernels.     The commented lines shows how translator keywords can be passed to    override the keywords given in the translators table.     The keyword 'name' could be used in pg_get_planets to select only Jupiter    and the Galilean satellites.  By default, every body that's relevant to    the mission and can be found in the kernel list is returned.  Also, the    SPICE translator organizes the pd array such that pd[0] gives the    primary target of the observation, if one exists.     The keyword 'name' is used in pg_get_stars to select only the Sun.    Otherwise, star catalog stars would also be returned.  Note, however,    that the star catalog is still searched because it does appear in the    translators table.   Create a generic descriptor     This line creates a  generic  descriptor.  This is a convenience    feature wherein several descriptors are grouped into a structure that    can be passed to functions in one piece.  The field names of a generic    descriptor must follow the convention described in pg_description.txt: <span class= code-output > gd = {cd:cd, gbx:pd, dkx:rd, sund:sund}</span>    cd - camera descriptor part     gbx - globe descriptor part     dkx - disk descriptor part     sund - sun descriptor part   Compute geometric features     These commands compute the limb of each planet, the edges of the Jovian ring    system, and terminators on each planet: <span class= code-output > limb_ptd = pg_limb(gd=gd) & pg_hide, limb_ptd, gd=gd, /rm, /disk</span> <span class= code-output >           pg_hide, limb_ptd, /limb, gd=gd, od=sund</span> <span class= code-output > ring_ptd = pg_disk(gd=gd) & pg_hide, ring_ptd, gd=gd, /globe</span> <span class= code-output > term_ptd = pg_limb(gd=gd, od=gd.sund) & pg_hide, term_ptd, gd=gd, /limb</span>  <span class= code-output > center_ptd = pg_center(gd=gd, bx=pd)</span> <span class= code-output > center_o=pnt_points(center_ptd[0])    ;get the center of Jupiter from the points object</span> <span class= code-output > print, center_o                       ;display the center of Jupiter</span> <span class= code-output > object_ptd = [center_ptd,limb_ptd,ring_ptd,term_ptd]</span>    Note that terminators are computed    using pg_limb by specifying the sun as the observer instead of the camera.   Set plot parameters     The colors, psyms, psizes and plables variables    are defined for the plot.  The center is drawn in the default color    (!p.color), the limb is in yellow (ctyellow) and the inner and outer ring    are in red (ctred).  Here you can see that each ring is treated as two    objects (inner and outer) when defining plot characteristics.  With an    8-bit display, these color routines return the values that were previously    reserved in the color table with ctmod; with a 24-bit display, these    routines return the true color values for these colors.  nlimb stores the    number of points in the limb_ptd structure, nring, the number of points in    the ring point structure.  In plabels, the limb and ring's name is not    plotted since it would be plotted at the center of the object: <span class= code-output > ncent=n_elements(center_ptd)</span> <span class= code-output > nlimb=n_elements(limb_ptd)</span> <span class= code-output > nring=n_elements(ring_ptd)</span> <span class= code-output > nterm=n_elements(term_ptd)</span> <span class= code-output > colors=[make_array(n_elements(pd),value=!p.color), $</span> <span class= code-output >         make_array(n_elements(pd),value=ctyellow()), $</span> <span class= code-output >         make_array(2*n_elements(rd),value=ctred()), $</span> <span class= code-output >         make_array(nterm,value=ctgreen())]</span> <span class= code-output > psyms=[make_array(n_elements(pd),value=1), $</span> <span class= code-output >         make_array(n_elements(pd),value=3), $</span> <span class= code-output >         make_array(2*n_elements(rd),value=3), $</span> <span class= code-output >         make_array(nterm,value=3)]</span> <span class= code-output > psizes=1.0</span> <span class= code-output > csizes=0.75</span> <span class= code-output > plabels=[cor_name(pd), $</span> <span class= code-output >         make_array(n_elements(pd),value=''), $</span> <span class= code-output >         make_array(2*n_elements(rd),value=''), $</span> <span class= code-output >         make_array(nterm,value='')]</span>   Draw the limb, ring and planet center      This section draws the objects in the object array (center, limb, ring,  and terminator) with the colors and plot symbols and labels defined earlier: <span class= code-output >   pg_draw, object_ptd, col=colors, psy=psyms, psi=psizes, csi=csizes, pl=plabels</span>   First-cut Automatic repointing   Refine the pointing of the spacecraft by using pg_farfit, which searches  the whole image for a pattern matching the edges calculated using the  descriptors: <span class= code-output >   edge_ptd = pg_edges(dd, edge=10)                ; Scan image for edges.</span> <span class= code-output >   pg_draw, edge_ptd</span> <span class= code-output >   dxy = pg_farfit(dd, edge_ptd, [limb_ptd[0]])    ; Try to correlate scanned edges with the computed limb.</span> <span class= code-output >   pg_repoint, dxy, 0d, axis=center_ptd[0], gd=gd  ; Change the pointing.</span> <span class= code-output >   tvim, im</span> <span class= code-output >   pg_draw, object_ptd, colors=colors, psyms=psyms, psizes=psizes, plabel=plabels</span>  <span class= code-output >   center_ptd = pg_center(gd=gd, bx=pd)</span> <span class= code-output >   print, 'after automatic repointing, the center was shifted by:', pnt_points(center_ptd[0])-center_o, 'pixels'</span>    Manually repoint the geometry     This pasteable section first clears the screen of the plotted points    by redisplaying the image with tvim.  It then calls pg_drag to allow    the user to use the cursor to drag the pointing, and with it the limb,    ring and planet center.  To move the pointing with pg_drag, use the left    mouse button and translate the pointing in x,y.  Use the middle mouse    button to rotate the pointing about an axis (in this case, the axis of    rotation is set as the planet center (center_ptd[0]).  When the    desired pointing is set, the right mouse button accepts it.  pg_drag    returns the delta x,y amount dragged (dxy) as well as the rotation    angle (dtheta).  pg_repoint uses the dxy and dtheta to update the    camera descriptor (cd, passed by gd).  The limb and center is then    recalculated, the image redisplayed to clear the objects drawn, and    then pg_draw is called to replot: <span class= code-output > tvim, im</span> <span class= code-output > dxy = pg_drag(object_ptd, dtheta=dtheta, axis=center_ptd[0])    ;Do the reponting</span> <span class= code-output > pg_repoint, dxy, dtheta, axis=center_ptd[0], gd=gd              ;Modify the general descriptor</span>  <span class= code-output > ;Recalculate the geometry and redisplay the image with the new overlays</span>  <span class= code-output > limb_ptd = pg_limb(gd=gd) & pg_hide, limb_ptd, gd=gd, /rm, /disk</span> <span class= code-output >        pg_hide, limb_ptd, /limb, gd=gd, od=sund</span> <span class= code-output > ring_ptd = pg_disk(gd=gd) & pg_hide, ring_ptd, gd=gd, /globe</span> <span class= code-output > center_ptd = pg_center(gd=gd, bx=pd)</span> <span class= code-output > term_ptd = pg_limb(gd=gd, od=gd.sund) & pg_hide, term_ptd, gd=gd, /limb</span> <span class= code-output > object_ptd = [center_ptd,limb_ptd,ring_ptd,term_ptd]</span>  <span class= code-output > tvim, im</span> <span class= code-output > pg_draw, object_ptd, colors=colors, psyms=psyms, psizes=psizes, plabel=plabels</span>   Scan the edge to find the limb and use it to correct the pointing using least-squares.     This section calls pg_cvscan to scan the image around the predicted    limb position and the ring edge position (within width of 80 pixels) and    find the points of highest correlation with a given edge model for each    object (edge_model_nav_limb = limb model used in the VICAR program NAV    and edge_model_nav_ring = ring model from NAV) and zeropoint offset in    the given model (lzero).  These points are then plotted: <span class= code-output > cvscan_ptd=pg_cvscan(dd, gd=gd, [limb_ptd[0]], edge=30, width=80, $</span> <span class= code-output >     model=[make_array(nlimb,val=ptr_new(edge_model_nav_limb(zero=lzero)))], $</span> <span class= code-output >     mzero=[make_array(nlimb,val=lzero)] )</span>  <span class= code-output > ; cvscan_ptd=pg_cvscan(dd, [limb_ptd], edge=30, width=20, $</span> <span class= code-output > ;    model=[make_array(nlimb,val=ptr_new(edge_model_atan(10,5, zero=lzero)))], $</span> <span class= code-output > ;    mzero=[make_array(nlimb,val=lzero)] )</span>  <span class= code-output > tvim, im</span> <span class= code-output > pg_draw, cvscan_ptd</span>    The commented command might be more appropriate for images in which    the planet disk is quite small.  In that case, we use a different edge    model (because the nav model cannot be scaled) and we scan a much    narrower region.   Threshold on correlation coefficient     This section calls pg_threshold to remove points with    unacceptable correlation coefficients.  The /relative flag means that    the minimum and maximum thresholds are taken as a fraction of the maximum    correlation coefficient for each set of points. In this case we use a minimun    correlation coefficent of 0.81 and a maximum of 1.0: <span class= code-output > pg_threshold, cvscan_ptd, min=0.81, max=1.0, /rel</span> <span class= code-output > tvim, im</span> <span class= code-output > pg_draw, cvscan_ptd</span>   Removing regions of bad scan points     This pasteable section calls pg_select to remove points within a    polygonal region as defined by the cursor.  Click the left mouse    button to mark a point and move the mouse to the next point and    click.  Use the middle mouse button to erase a point and the right    mouse button to end the region.  pg_trim removes the points in the    just defined region.  The scan points are then replotted.    Repeat these statements for each region a user wants to remove: <span class= code-output > region = pg_select(dd)</span> <span class= code-output > pg_trim, dd, cvscan_ptd, region</span> <span class= code-output > tvim, im</span> <span class= code-output > pg_draw, cvscan_ptd</span>   Fit the pointing to the scanned points using least squares     This section calls pg_cvscan_coeff to determine the linear least-squares    coefficients for a fit to the image coordinate translation and rotation    that matches the computed curve to the scanned curve. It then calls    pg_fit to do the fit with the calculated coefficients to calculate the    correction in translation (dxy) and rotation (dtheta).  It calls    pg_cvchisq to get the chi square of the fit.  Then calls pg_repoint to    update the pointing. Recalculates the limb and center and replots.    The determination of the curves and their subsequent fit can be    iterated on.     Note that, as shown, dx, dy, and dtheta are fit.  To fix any of these    parameters use the 'fix' keyword to pg_cvscan_coeff.  For example    with 'fix=2', dtheta will be zero: <span class= code-output > fix = [2]</span> <span class= code-output > cvscan_cf = pg_cvscan_coeff(cvscan_ptd, axis=center_ptd[0], fix=fix)</span> <span class= code-output > dxy = pg_fit([cvscan_cf], dtheta=dtheta)</span> <span class= code-output > chisq = pg_chisq(dxy, dtheta, cvscan_ptd, axis=center_ptd[0], fix=fix)</span> <span class= code-output > covar = pg_covariance([cvscan_cf])</span> <span class= code-output > print, dxy, dtheta*180./!pi, chisq, covar</span> <span class= code-output > pg_repoint, dxy, dtheta, axis=center_ptd[0], gd=gd</span>  <span class= code-output > limb_ptd = pg_limb(gd=gd) & pg_hide, limb_ptd, gd=gd, /rm, /disk</span> <span class= code-output >         pg_hide, limb_ptd, /limb, gd=gd, od=sund</span> <span class= code-output > ring_ptd = pg_disk(gd=gd) & pg_hide, ring_ptd, gd=gd, /globe</span> <span class= code-output > center_ptd = pg_center(gd=gd, bx=pd)</span> <span class= code-output > term_ptd = pg_limb(gd=gd, od=gd.sund) & pg_hide, term_ptd, gd=gd, /limb</span> <span class= code-output > object_ptd = [center_ptd,limb_ptd,ring_ptd,term_ptd]</span>  <span class= code-output > tvim, im</span> <span class= code-output > pg_draw, object_ptd, colors=colors, psyms=psyms, psizes=psizes, plabel=plabels</span>   Draw planet and ring latitude/longitude grid        This sections calculates a latitude/longitude grid for each planet and a    radius/longitude grid for the rings.  By default it draws 12 latitude    and 12 longitude grid lines.  The longitude grid lines circle the body    and so on a map they will appear as 24 grid lines.  The ring radius grid    uses four grid lines by default between the inner and outer ring radius.    It uses pg_hide to set as not visible the points on the grid behind the    planet and ring for both objects.  It then uses pg_draw to draw the    grid points in blue (ctblue): <span class= code-output > grid_ptd = pg_grid(gd=gd, lat=lat, lon=lon)</span> <span class= code-output > pg_hide, grid_ptd, cd=cd, gbx=pd, /limb</span> <span class= code-output > pg_hide, grid_ptd, cd=cd, gbx=pd, od=sund, /limb</span> <span class= code-output > pg_hide, grid_ptd, gd=gd, /disk</span> <span class= code-output > pg_draw, grid_ptd, color=ctblue()</span>  <span class= code-output > plat_ptd = pg_grid(gd=gd, slon=!dpi/2d, lat=lat, nlon=0)</span> <span class= code-output > pg_hide, plat_ptd[0], cd=cd, gbx=pd[0], /limb</span> <span class= code-output > pg_draw, plat_ptd[0], psym=3, plabel=strtrim(round(lat*180d/!dpi),2), /label_p</span>  <span class= code-output > plon_ptd = pg_grid(gd=gd, slat=0d, lon=lon, nlat=0)</span> <span class= code-output > pg_hide, plon_ptd[0], cd=cd, gbx=pd[0], /limb</span> <span class= code-output > pg_draw, plon_ptd[0], psym=3, plabel=strtrim(round(lon*180d/!dpi),2), /label_p</span>  <span class= code-output > dgrid_ptd=pg_grid(gd=gd, bx=rd) & pg_hide, dgrid_ptd, gd=gd, /globe</span> <span class= code-output > pg_draw, dgrid_ptd, color=ctpurple()</span>   Generate map projections     This section defines a map descriptor for a simple cylindrical projection    using pg_get_maps.  It then calls pg_map to create a map projection and    uses tvim to display it in a new window.  Four different map descriptors    are demonstrated.     We also call pg_grid to calculate a latitude/longitude grid on the map and    then pg_draw to draw the grid in green. For convenience, define a new generic descriptor.    Note that the map descriptor is used for the cd field. Call pg_limb to calculate the limb    on the map and then pg_draw to draw the grid in purple.   Mercator     Map descriptor: <span class= code-output > md = pg_get_maps(/over, bx=pd[0], $</span> <span class= code-output >   type='MERCATOR', $</span> <span class= code-output >   ;type='MOLLWEIDE', $</span> <span class= code-output >   fn_data=ptr_new(), $</span> <span class= code-output >   size=[800,400] $</span> <span class= code-output >   )</span>      Stereographic     Map descriptor: <span class= code-output > md = pg_get_maps(/over, bx=pd[0], $</span> <span class= code-output >   type='STEREOGRAPHIC', $</span> <span class= code-output >   fn_data=ptr_new(), $</span> <span class= code-output >   scale=0.5, $</span> <span class= code-output >   size=[800,800], $</span> <span class= code-output >   center=[!dpi/2d,0d] $</span> <span class= code-output >   )</span>      Orthographic     Map descriptor: <span class= code-output > md = pg_get_maps(/over, bx=pd[0], $</span> <span class= code-output >   type='ORTHOGRAPHIC', $</span> <span class= code-output >   fn_data=ptr_new(), $</span> <span class= code-output >   size=[800,800], $</span> <span class= code-output >   center=[!dpi/6d,!dpi] $</span> <span class= code-output >   ;center=[!dpi/2d,0] $  ; north polar</span> <span class= code-output >   ;center=[-!dpi/2d,0] $ ; south polar</span> <span class= code-output >   )</span>      Rectangular     Map descriptor: <span class= code-output > md = pg_get_maps(/over, bx=pd[0], $</span> <span class= code-output >   type='RECTANGULAR', $</span> <span class= code-output >   /graphic,  $</span> <span class= code-output >   fn_data=ptr_new(), $</span> <span class= code-output >   scale=1.0, $</span> <span class= code-output >   ;center=[0d,!dpi],$</span> <span class= code-output >   size=[800,400] $</span> <span class= code-output >   )</span>       Projecting the maps     Use the pg_map and the map descriptor to project the image onto a map.    Certain regions, such as rings, could be excluded from the projection    and ounds on the map can be set, if desired: <span class= code-output > ;to set projection bounds...</span> <span class= code-output > ;bounds = [-30,30,-180,180]*!dpi/180d</span>  <span class= code-output > map = 0</span> <span class= code-output > dd_map = pg_map(dd, md=md, gd=gd, bx=pd[0], map=map, bounds=bounds)</span>  <span class= code-output > ; to exclude areas covered by rings...</span> <span class= code-output > ;dd_map = pg_map(dd, md=md, gd=gd, bx=pd[0], gbx=pd[0], $</span> <span class= code-output > ;          hide_fn='pm_hide_ring', hide_data_p=ptr_new(rd), map=map, bounds=bounds)</span>  <span class= code-output > tvim, /new, map</span>    Call pg_grid to calculate a latitude/longitude grid on the map and    then pg_draw to draw the grid in green.     For convenience, define a new generic descriptor.  Note that the map    descriptor is used for the cd field: <span class= code-output > gdm={cd:md, od:cd, gbx:cor_select(pd,'JUPITER'), dkx:rd}</span>  <span class= code-output > map_grid_ptd = pg_grid(gd=gdm, lat=lat, lon=lon)</span> <span class= code-output > plat_ptd = pg_grid(gd=gdm, slon=!dpi/2d, lat=lat, nlon=0)</span> <span class= code-output > plon_ptd = pg_grid(gd=gdm, slat=0d, lon=lon, nlat=0)</span>  <span class= code-output > pg_draw, map_grid_ptd, col=ctgreen()</span> <span class= code-output > pg_draw, plat_ptd, psym=7, plabel=strmid(strtrim(lat*180d/!dpi,2),0,3), /label_p</span> <span class= code-output > pg_draw, plon_ptd, psym=7, plabel=strmid(strtrim(lon*180d/!dpi,2),0,3), /label_p</span>    Call pg_limb to calculate the limb on the map and then pg_draw to    draw the grid in purple: <span class= code-output > map_limb_ptd = pg_limb(gd=gdm)</span> <span class= code-output > pg_draw, map_limb_ptd, col=ctred()</span>  <span class= code-output > map_term_ptd = pg_limb(gd=gdm, od=sund)</span> <span class= code-output > pg_draw, map_term_ptd, col=ctyellow()</span>   Reproject the previous map     A map can be reprojected using a second map descriptor    and the original map descriptor as the camera descriptor: <span class= code-output > md1 = pg_get_maps(/over, bx=pd[0], $</span> <span class= code-output >   type='ORTHOGRAPHIC', $</span> <span class= code-output >   ;type='STEREOGRAPHIC', $</span> <span class= code-output >   fn_data=ptr_new(), $</span> <span class= code-output >   size=[800,800], $</span> <span class= code-output >   center=[!dpi/6d,!dpi] $</span> <span class= code-output >   )</span>  <span class= code-output > map=0</span> <span class= code-output > dd_map1 = pg_map(dd_map, md=md1, cd=md, map=map1, bounds=bounds)</span> <span class= code-output > tvim, /new, map1</span>       Output the new state     This section shows how you can save your output.   Output descriptors     These commands write the descriptor information out through the    translators.  The exact behavior is translator-dependent.  The detached    header translator just modifies the detached header (stored in the data    descriptor).  The SPICE output translator writes a C-kernel if a file    name is specified using the ck_out translator keyword (as in the commented    line): <span class= code-output > pg_put_rings, dd, od=gd.cd, rd=rd</span> <span class= code-output > pg_put_planets, dd, od=gd.cd, pd=pd</span> <span class= code-output > pg_put_cameras, dd, gd=gd</span> <span class= code-output > ; cor_set_udata, cd, 'CK_COMMENT', 'This is a comment.'</span> <span class= code-output > ; pg_put_cameras, dd, gd=gd, 'ck_out=./test.bc'</span> <span class= code-output > ; print, spice_daf_comment('./test.bc')</span> <span class= code-output > pg_put_stars, dd, sd=sund, od=gd.cd</span>    Write image file and header     dat_write writes the image file from the data descriptor.  The detached header    is also written into a file with the same name as the image file except with    the extension '.dh'.  If this file does not already exist, it is created: <span class= code-output > split_filename, file, dir, name</span> <span class= code-output > dat_write, './data/' + name, dd</span>   Write map file and header     pg_put_maps causes the detached header translator to generate a new detached    header and write the map descriptor into it.     As above, dat_write writes the map image file and the detached header. Notice    that the filetype is given explicitly because the data descriptor was not    created by dat_read, which would have detected the filetype: <span class= code-output > pg_put_maps, dd_map, md=md</span>  <span class= code-output > split_filename, file, dir, name</span> <span class= code-output > dat_write, './data/' + name + '.map', dd_map, filetype = 'VICAR'</span>    To read the new map file, use dat_read just as the image file was read at the    beginning of this example script.  To read the map descriptor from the    detached header, use: <span class= code-output > md = pg_get_maps(dd_map)</span>  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./mosaic_example.html", "mosaic_example.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mosaic_example.pro", "", "", " MOSAIC EXAMPLE     This example requires the following kernel files, which are    included in the demo's data directory: <span class= code-output > $CAS_SPICE_CK/001103_001105ra.bc</span> <span class= code-output > $CAS_SPICE_CK/001105_001108.bc</span> <span class= code-output > $CAS_SPICE_CK/001026_001029ra.bc</span> <span class= code-output > $CAS_SPICE_CK/001029_001031ra.bc</span>    This example file demonstrates how to construct a mosaic using OMINAS.    This example file can be executed from the UNIX command line using:   	  idl mosaic.example     or from within IDL using:   	  @mosaic.example     After the example stops, later code samples in this file may be executed by    pasting them onto the IDL command line.   Navigate on limbs automatically     pg_farfit finds the limb to within a few pixels.  In reality, you would    want to refine the pointing by scanning for the limb and performing a    least-squares fit, but for the purposes of clarity in this example, the    inital fit will do.  See jup_cassini.example and dione.example for examples    of least-squares fits to image features.   Correct photometry     Here, a crude photometric correction is performed for the purposes    of this example.     In addition to the corrected images, the output descriptors, dd_pht,    will contain the photometric angles in their user data arrays with    the names 'EMM', 'INC' and 'PHASE'.   Project maps     Note that all map projections use the same map descriptor.     Also, aux=['EMM'] is used with pg_map to direct it to reproject    the emmision angle array that was produced and stored in the data descriptor    by pg_photom.  That array will be needed by pg_mosaic.   Introducing wind profiles   Use the commented commands instead to include a zonal wind profile in  the projection.   Construct the mosaic     The combination function 'emm' combines the maps    using wighting proprtional to emm^x, where emm is the emmision    cosine.  It also imposes a minimum emmision cosine, emm0.  Note    that the emission angles were computed by pg_photom and    reprojected by pg_map, as directed by the 'aux' keyword.   Save the mosaic and map info     To read the mosaic and projection info: <span class= code-output > dd = dat_read('./data/test.msc', mosaic, label)</span> <span class= code-output > md = pg_get_maps(dd)</span>  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./multiinstrument_example.html", "multiinstrument_example.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "multiinstrument_example.pro", "", "", " MULTI-INSTRUMENT EXAMPLE     This script demonstrates reading Cassini RADAR SAR, VIMS and ISS images and    projecting them onto an orthographical map for display as a RGB composite.     The SAR data file, BIFQI22N068_D045_T003S01_V02.IMG, must first be    downloaded from PDS,    then unzipped (the zip file is 202MB).     Setup: The instrument detectors, translators and transforms must contain the    RADAR, ISS and VIMS definitions, as is included in demo/data/instrument_detectors.tab,    demo/data/translators.tab, and demo/data/transforms.tab. The PDS detector    and io functions must also be set up    in the corresponding tables, as is in config/tab/filetype_detectors.tab    and config/tab/io.tab.     This example requires SPICE/Icy to have been setup. It can be run just by doing: <span class= code-output > img='~/radar/BIFQI22N068_D045_T003S01_V02.IMG'</span> <span class= code-output > @multiinstrument_example</span>    from the demo directory. Note that you have to set the variable img to the    location of your data file.   Read and display SAR file     Cassini RADAR SAR image to read must be set in the variable img, otherwise    this default location is used: <span class= code-output > img=n_elements(img) ? img : '~/radar/BIFQI22N068_D045_T003S01_V02.IMG'</span> <span class= code-output > ;Read the file</span> <span class= code-output > dd=dat_read(img)</span>    Saturate the data to make the image better looking, since this is just for display    purposes: <span class= code-output > da=dat_data(dd)</span> <span class= code-output > dat_set_data,dd,0&gt;da&lt;1d0</span>    Show it a 1/20 resolution: <span class= code-output > tvim,0d0&gt;da&lt;1d0,zoom=0.05,/order,/new</span>         Read and display VIMS and ISS files       Set up a hash containing the file names and precomputed pointing offsets: <span class= code-output > hdxy=hash()</span> <span class= code-output > hdxy['data/CM_1503358311_1_ir_eg.cub']=[5d0,-1d0]</span> <span class= code-output > hdxy['data/W1477456695_6.IMG']=[0d0,0d0]</span> <span class= code-output > files=(hdxy.keys()).toarray()</span> <span class= code-output > nv = n_elements(files)</span> <span class= code-output > ddv = dat_read(files)</span> <span class= code-output > sb=bytarr(nv)</span> <span class= code-output > for i=0,nv-1 do sb[i]=strmatch(files[i],'*.IMG')</span>      Create an array of global descriptors and populate it: <span class= code-output > gdv = replicate({cd:obj_new(), gbx:obj_new(), dkx:obj_new(), sund:obj_new()}, nv)</span> <span class= code-output > for i=0, nv-1 do gdv[i].cd = pg_get_cameras(ddv[i])</span> <span class= code-output > for i=0, nv-1 do gdv[i].gbx = pg_get_planets(ddv[i], od=gdv[i].cd, name='TITAN')</span> <span class= code-output > for i=0, nv-1 do gdv[i].sund = pg_get_stars(ddv[i], od=gdv[i].cd, name='SUN')</span>      Apply the pointing shifts and compute the limbs: <span class= code-output > dxy = dblarr(2,nv)</span> <span class= code-output > limb_psv=objarr(nv)</span> <span class= code-output > for i=0, nv-1 do dxy[*,i] = hdxy[files[i]]</span> <span class= code-output > for i=0, nv-1 do pg_repoint, dxy[*,i], 0d, gd=gdv[i]</span> <span class= code-output > for i=0, nv-1 do limb_psv[i] = pg_limb(gd=gdv[i])</span>      Display the VIMS and ISS images: <span class= code-output > band=70</span> <span class= code-output > for i=0,1 do begin</span> <span class= code-output >   zoom=sb[i] ? 1 : 8</span> <span class= code-output >   offset=sb[i] ? [200d0,200d0] : [-15,-10]</span> <span class= code-output >   sband=sb[i] ? 0 : band</span> <span class= code-output >   tvim, (dat_data(ddv[i]))[*,*,sband], $</span> <span class= code-output >     zoom=zoom,/order, /new,offset=offset,$</span> <span class= code-output >     xsize=600,ysize=600</span> <span class= code-output >   pg_draw, limb_psv[i]</span> <span class= code-output > endfor</span>                     Correct the illumination with a Lambertian function: <span class= code-output > dd_phtv = objarr(nv)</span> <span class= code-output > for i=0, nv-1 do dd_phtv[i] = pg_photom(ddv[i], gd=gdv[i], refl_fn='pht_lamb', $</span> <span class= code-output >   refl_parm=[0.9d], outline=limb_psv[i])</span>    Map images     SAR data is provided in PDS as a map on the target, in an oblique rectangular projection, shown above.    To use it, first we need to obtain the proper map descriptor from the data object: <span class= code-output > mdr=pg_get_maps(dd)</span>    Now we will display it in an orthogonal projection. First we define it: <span class= code-output > map_xsize = 1000</span> <span class= code-output > map_ysize = 1000</span>    Create the new map descriptor: <span class= code-output > mdp= pg_get_maps(/over,  $</span> <span class= code-output >   name='TITAN',$</span> <span class= code-output >   type='ORTHOGRAPHIC', $</span> <span class= code-output >   size=[map_xsize,map_ysize], $</span> <span class= code-output >   origin=[map_xsize,map_ysize]/2, $</span> <span class= code-output >   center=[0d0,-0.6d0*!dpi])</span>    Now, do the projection of all 3 images: <span class= code-output > for i=0,nv-1 do dat_set_data,dd_phtv[i],(dat_data(dd_phtv[i]))[*,*,sb[i] ? 0 : band]</span> <span class= code-output > dd_mapv = objarr(nv)</span> <span class= code-output > for i=0, nv-1 do dd_mapv[i] = pg_map(dd_phtv[i], md=mdp, gd=gdv[i], aux=['EMM'])</span> <span class= code-output > dd_map=pg_map(dd,md=mdp,cd=mdr,pc_xsize=500,pc_ysize=500)</span>    Renormalize the data for display, so that all 3 are in the 0-1 range: <span class= code-output > mds=[dd_map,dd_mapv]</span> <span class= code-output > for i=0,2 do begin</span> <span class= code-output >   mdd=dat_data(mds[i])</span> <span class= code-output >   mddr=minmax(mdd)</span> <span class= code-output >   dat_set_data,mds[i],(mdd-mddr[0])/(mddr[1]-mddr[0])</span> <span class= code-output > endfor</span>    Visualize the result as 3 planes in grim: <span class= code-output > grim,mds,cd=replicate(mdp,3),overlays=['planet_grid'],/new</span>        ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./radar_example.html", "radar_example.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "radar_example.pro", "", "", " RADAR EXAMPLE     This script demonstrates reading a Cassini RADAR SAR image and projecting it    onto an orthographical map for display.     The data file, BIFQI22N068_D045_T003S01_V02.IMG, must first be    downloaded from PDS,    then unzipped (the zip file is 202MB).     Setup: The instrument detectors, translators and transforms must contain the    RADAR definitions, as is included in demo/data/instrument_detectors.tab,    demo/data/translators.tab, and demo/data/transforms.tab. Since the RADAR    data is in PDS format, the PDS detector and io functions must also be set up    in the corresponding tables, as is in config/tab/filetype_detectors.tab    and config/tab/io.tab.     There is no need for SPICE/Icy for this example. It can be run just by doing: <span class= code-output > img='~/radar/BIFQI22N068_D045_T003S01_V02.IMG'</span> <span class= code-output > @radar_example</span>    from the demo directory. Note that you have to set the variable img to the    location of your data file.   Read SAR file     Cassini RADAR SAR image to read must be set in the variable img, otherwise    this default location is used: <span class= code-output > img=n_elements(img) ? img : '~/radar/BIFQI22N068_D045_T003S01_V02.IMG'</span> <span class= code-output > ;Read the file</span> <span class= code-output > dd=dat_read(img)</span>   Display SAR file     Saturate the data to make the image better looking, since this is just for display    purposes: <span class= code-output > da=dat_data(dd)</span> <span class= code-output > dat_set_data,dd,da&lt;4.5d0</span>    Show it a 1/20 resolution: <span class= code-output > tvim,da&lt;4.5,zoom=0.05,/order,/new</span>         Map SAR file     SAR data is provided in PDS as a map on the target, in an oblique rectangular projection, shown above.    To use it, first we need to obtain the proper map descriptor from the data object: <span class= code-output > mdr=pg_get_maps(dd)</span>    Now we will display it in an orthogonal projection. First we define it: <span class= code-output > map_xsize = 4000</span> <span class= code-output > map_ysize = 4000</span>    Create the new map descriptor: <span class= code-output > mdp= pg_get_maps(/over,  $</span> <span class= code-output >   name='TITAN',$</span> <span class= code-output >   type='ORTHOGRAPHIC', $</span> <span class= code-output >   size=[map_xsize,map_ysize], $</span> <span class= code-output >   origin=[map_xsize,map_ysize]/2, $</span> <span class= code-output >   center=[0d0,-0.4d0*!dpi])</span>    Now, do the projection: <span class= code-output > dd_map=pg_map(dd,md=mdp,cd=mdr,pc_xsize=800,pc_ysize=800)</span>    Visualize the result, now with grim: <span class= code-output > grim,dd_map,cd=mdp,overlays=['planet_grid']</span>        ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./saturn_example.html", "saturn_example.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "saturn_example.pro", "", "", " Saturn Example    	 This example file uses Saturn and its rings to show various   	 capabilities of the software.  This includes fitting the   	 limb and rings simultaneously, hiding the limb and/or rings wrt   	 other objects in the field of view, plotting radial and longitudinal   	 sectors on the ring and mapping the saturn cloud tops.    	 This example file can be executed from the UNIX command line using: <span class= code-output >	  idl ominas saturn.example</span>   	 or from within IDL using: <span class= code-output >	  @saturn.example</span>   	 After the example stops, later code samples in this file may be executed by   	 pasting them onto the IDL command line.   Image read and display  	  	This first section uses dat_read to read in the image.  The image file    c3440346.gem is a Voyager VICAR format file where the image has had    the camera distortions removed with the VICAR program GEOMA.  dat_read    reads the image portion (im) and the image label (label) and its output    is a data descriptor (dd).  ctmod is called to reserve several colors    in the case of an 8-bit display.  tvim is called to display the image    (im) at 1/2 size in a new window with the y coordinate as top-down.  	For Example: <span class= code-output >    dd = dat_read('data/c3440346.gem', im, label)</span> <span class= code-output >  ctmod, top=top</span> <span class= code-output >  tvim, im, zoom=0.5, /order, /new, top=top</span> 	Blah blah    Obtaining the descriptors    	This section obtains the camera descriptor (cd), the planet descriptor   	(pd) and the ring descriptor (rd) for use by the software.  In this   	example, the various elements of these descriptors are overridden with   	values that causes the software not to try to read these values from   	a detached header or through a translator that would access the data   	from the default source.    	Change override to zero to read the data through the translators using   	the Voyager SEDR instead (assuming you have installed the SEDR data   	files, which are not provided in the default installation).     This example, commented out, shows how two objects can be included in   one planet descriptor.   Filling the generic descriptor    	This line fills a  generic  descriptor.  This is a convenience   	feature where in several descriptors are grouped into a structure that   	can be passed to functions in one piece.    	cd - camera descriptor part   	gbx - globe descriptor part   	dkx - disk descriptor part   Calculating the limb, ring and planet center   Determining the plot characteristics    This section uses pg_limb to calculate the limb point structure (limb_ptd)   containing the limb points, the ring point structure (ring_ptd) and also   the planet center (center_ptd) using the routine pg_center.  It uses the   generic descriptor (gd) to pass the camera, planet and ring descriptors   to these routines.  It also uses pg_hide to remove (/rm) points from the   ring (/disk) from the limb points and then again to remove the ring points   covered by the planet (/globe).  It then groups each of these into   object_ptd for plotting.  The colors, psyms, psizes and plables variables   are defined for the plot.  The center is drawn in the default color   (!p.color), the limb is in yellow (ctyellow) and the inner and outer ring   are in red (ctred).  Here you can see that each ring is treated as two   objects (inner and outer) when defining plot characteristics.  With an   8-bit display, these color routines return the values that were previously   reserved in the color table with ctmod; with a 24-bit display, these   routines return the true color values for these colors.  nlimb stores the   number of points in the limb_ptd structure, nring, the number of points in   the ring point structure.  In plabels, the limb and ring's name is not   plotted since it would be plotted at the center of the object.   Drawing the limb, ring and planet center  	   This section draws the objects in the object structure (center, limb  and ring) with the colors and plot symbols and labels defined earlier.  Notice how the limb and ring curves cut off at the points of intersection  between the objects.   Draw planet and ring latitude/longitude grid  	     This sections calculates a latitude/longitude grid for the planet and a   	radius/longitude grid for the rings.  By default it draws 12 latitude   	and 12 longitude grid lines.  The longitude grid lines circle the body   	and so on a map they will appear as 24 grid lines.  The ring radius grid   	uses four grid lines by default between the inner and outer ring radius.   	It uses pg_hide to set as not visible the points on the grid behind the   	planet and ring for both objects.  It then uses pg_draw to draw the   	planet grid points in blue (ctblue) and the ring grid points in purple   	(ctpurple).  Here is where the example then stops.   Manually repointing the geometry    This pasteable section first clears the screen of the plotted points   by redisplaying the image with tvim.  It then calls pg_drag to allow   the user to use the cursor to drag the pointing, and with it the limb,   ring and planet center.  To move the pointing with pg_drag, use the left   mouse button and translate the pointing in x,y.  Use the middle mouse   button to rotate the pointing about an axis (in this case, the axis of   rotation is set as the planet center (center_ptd[0]).  When the   desired pointing is set, the right mouse button accepts it.  pg_drag   returns the delta x,y amount dragged (dxy) as well as the rotation   angle (dtheta).  pg_repoint uses the dxy and dtheta to update the   camera descriptor (cd, passed by gd).  The limb and center is then   recalculated, the image redisplayed to clear the objects drawn, and   then pg_draw is called to replot.   Scanning the edge to find the limb and using it to calculate the pointing    This section calls pg_cvscan to scan the image around the predicted   limb position and the ring edge position (within width of 80 pixels) and   find the points of highest correlation with a given edge model for each   object (edge_model_nav_limb = limb model used in the VICAR program NAV   and edge_model_nav_ring = ring model from NAV) and zeropoint offset in   the given model (lzero).  These points are then plotted.   Thresholding using correlation coefficient    This section (optional) calls pg_threshold to remove points with lower   correlation coefficients.  The /relative flag means that the minimum   and maximum thresholds are taken as a fraction to the maximum value   in the array.  Notice here again that the ring is treated as two   objects.   Removing regions of bad points    This section (optional) calls pg_select to remove points within a   polygonal region as defined by the cursor.  Click the left mouse   button to mark a point and move the mouse to the next point and   click.  Use the middle mouse button to erase a point and the right   mouse button to end the region.  pg_trim removes the points in the   just defined region.  The scan points are then replotted.   Repeat these statements for each region a user wants to remove.   Fitting the pointing to the scanned points    This section calls pg_cvscan_coeff to determine the linear least-squares   coefficients for a fit to the image coordinate translation and rotation   which matches the computed curve to the scanned curve. It then calls   pg_fit to do the fit with the calculated coefficients to calculate the   correction in translation (dxy) and rotation (dtheta).  It calls   pg_cvchisq to get the chi square of the fit.  Then calls pg_repoint to   update the pointing. Recalculates the limb and center and replots.   The determination of the curves and their subsequent fit can be   iterated on.   Defining a ring sector for a plot    To plot a ring radius vs. intensity or longitude vs. intensity, the   user must first define the limits of the ring sector.  Here it is   done in one of two ways, the first is to define the longitude (lon)   and radius (rad) limits in an array.  The second method is to use   the cursor to sweep out a ring sector, pg_ring_sector is called to   do this.  To use the mouse, click in one corner of your desired sector   and move the cursor to the opposite corner.  In this example,   counterclockwise is the direction of increasing longitude.  The chosen   sector is then calculated using pg_profile_ring with the /outline   keyword.  This outline is then drawn with pg_draw.   Plotting ring sector plots    		Below is the code for four different types of plots using pg_profile_ring.   		Radial (default) and longitudinal (/azimuthal), interpolated (default)   		and binned (/bin).  There is an oversamp keyword which defines the amount   		to oversample (vs. 1 pixel).  In the case of a longitudinal bin scan,   		pixelization can cause some bins to contain very low numbers or none at   		all.  In this example oversamp=0.3 to cause the plot to have larger bins   		to help alleviate this problem.  The calculated profile is then plotted   		in a new window.   Draw planet and ring latitude/longitude grid    This sections calculates a latitude/longitude grid for each planet and a   radius/longitude grid for the rings.  By default it draws 12 latitude   and 12 longitude grid lines.  The longitude grid lines circle the body   and so on a map they will appear as 24 grid lines.  The ring radius grid   uses four grid lines by default between the inner and outer ring radius.   It uses pg_hide to set as not visible the points on the grid behind the   planet and ring for both objects.  It then uses pg_draw to draw the   grid points in blue (ctblue).  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./stars_example.html", "stars_example.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "stars_example.pro", "", "", " Star fitting example   Note: One optional image in this example requires the voyager SEDR  files, which is not supplied in the default installation.   This example requires a star catalog. The options are: UCAC4, UCACT,  TYCHO2, SAO, and GSC2. To learn more about where to obtain these  catalogs, please see the documentation for the star catalog translators,  strcat_ucac4_input, strcat_ucact_input, strcat_tycho2_input,  strcat_sao_input, and strcat_gsc2_input.   In this script, the star fitting capabilities of OMINAS will be demonstrated.   This example file can be executed from the UNIX command line using: <span class= code-output >idl stars.example</span>  or from within IDL using: <span class= code-output >@stars.example</span>  After the example stops, later code samples in this file may be executed by  pasting them onto the IDL command line.   Image read and display   This first section uses dat_read to read in the image. There are several  available image files to use for the preocessing:   	c1138223.gem: Voyager VICAR format file where the image has had  	the camera distortions removed with the VICAR program GEOMA.   	N1456251768_1.IMG: Cassini ISS-NA image, obtained from the PDS imaging  	node.   dat_read reads the image portion (im) and the image label (label) and its  output is a data descriptor (dd). tvim is called to display the image (im)  at 3/4 size in a new window with the y coordinate as top-down.   Note: Users with a 24-bit display, you may want to do the device command  'pseudo=8' so that xloadct can be used to contrast enhance the image.   Code: <span class= code-output >;dd = dat_read('data/c1138223.gem', im, label)           ; VICAR format file</span> <span class= code-output >dd = dat_read('data/N1456251768_1.IMG', im, label)       ; Cas ISS-NA image</span> <span class= code-output >tvim, im, zoom=0.75, /order</span>   Filling the descriptors   This section fills the camera descriptor (cd), the planet descriptor  (pd) and the ring descriptor (rd) for use by the software.   In this example, if the Voyager image is chosen, the default translators  are skipped to use a SEDR update from a VICAR program called NAV instead  of using the normal SEDR the regular translator would return.   If the Cassini image is chosen, this option will be ignored.   Code: <span class= code-output >; Voyager descriptor-generating code</span> <span class= code-output >;cd = pg_get_cameras(dd, 'sedr_source=NAV')</span> <span class= code-output >;pd = pg_get_planets(dd, od=cd, 'sedr_source=NAV')</span> <span class= code-output >;rd = pg_get_rings(dd, pd=pd, od=cd, 'sedr_source=NAV')</span> <span class= code-output >; Cassini descriptor-generating code</span> <span class= code-output >cd = pg_get_cameras(dd)</span> <span class= code-output >pd = pg_get_planets(dd, od=cd)</span> <span class= code-output >rd = pg_get_rings(dd, pd=pd, od=cd)</span>   Filling the generic descriptor   This line fills a  generic  descriptor, which is a standard IDL struct.  Generic descriptors are a convenient notation for several descriptors to  be grouped into a structure that can be passed to functions in one piece.   The components of the generic descriptor are: <span class= code-output >cd - camera descriptor part</span> <span class= code-output >gbx - globe descriptor part</span> <span class= code-output >dkx - disk descriptor part</span>  Code: <span class= code-output >gd = {cd:cd, gbx:pd, dkx:rd}</span>   Filling the star descriptor   This line fills a star descriptor by reading the star catalog using  pg_get_stars. pg_get_stars calls back-end functions to read the  translator table. Therefore, for a specific instrument (for instance,  both ISS-NA and ISS-WA), the star catalog should be specified. The  translators.tab for this demo (in data/translators.tab) should contain  a line with the star catalog to be used: <span class= code-output > -   strcat_tycho2_input     -       /j2000    # or /b1950 if desired</span>  This line specifies that the tycho2 catalog should be used, and all  coordinates should be for the j2000 epoch. Likewise, such a line should  be included in the translator for any mission to be processed.   NOTES:   If the keyword 'tr_override' is specified, only the specified   translator is called instead of whatever star catalog   translators are listed in the translators table.    The translator keyword 'faint' selects only stars with magnitudes   brighter than 14.  The keyword, 'bright' may be used place an upper   bound on the brightness.    /no_sort suppresses the default behavior of returning only   the first object found with any given name.  That operation can be   very time consuming when a large number of objects are returned   by the translators.  In the first case, we have specified that only one   translator will be called, and we know that it will not return   duplicate objects.   Code: <span class= code-output >;sd = pg_get_stars(dd, od=cd, /no_sort, tr_ov='strcat_gsc2_input', 'faint=8')</span> <span class= code-output >sd = pg_get_stars(dd, od=cd, 'faint=14')</span>   Calculating the star centers   The star centers are calculated using pg_center. bx is an output  keyword which contains the body descriptor, in this case it is an  array of star descriptors. Each star descriptor describes the  data for one star.   pg_hide is called to remove (/rm) any star points covered by the  planet (/globe). Although there is no planet in the Cassini image,  this technique should be used to hide star points in general, were  there to be a limb_ptd.   Determining the plot characteristics   The star elements are chosen to be red, with a symbol type of *  (code 2), a font size of 2, and labels corresponding to the name of  each star. Stars can have either catalog names or common names.   Code: <span class= code-output >star_ptd=pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, /rm, /globe</span> <span class= code-output >n_stars=n_elements(sd)</span> <span class= code-output >color = ctred()</span> <span class= code-output >psym = 6</span> <span class= code-output >csizes = 2</span> <span class= code-output >plabels = cor_name(sd)</span>   Drawing the star centers   This section draws the stars in the star_ptd with the colors, plot  symbols, font size, and labels defined earlier.   In this particular example, the planet does not appear in the image.   Code: <span class= code-output >pg_draw, star_ptd, color=color, psym=psym, plabel=plabels, csi=csizes</span>   Drawing the stellar spectral types   This pasteable section uses the stellar library function str_sp to return  spectral types of the stars and uses them instead of the star names. If  the spectral type is not available for the catalog, then no information  will be plotted in the labels.   Code: <span class= code-output >tvim, im</span> <span class= code-output >spt=str_sp(sd)</span> <span class= code-output >psyms_str=make_array(n_stars,val=6)</span> <span class= code-output >pg_draw, star_ptd, color=color, psym=psym, plabel=spt, csi=csizes</span>   Drawing stellar magnitudes   This pasteable section uses the stellar library function str_get_mag to get  visual magnitudes of the stars and uses them instead of the star names.   Code: <span class= code-output >tvim, im</span> <span class= code-output >sm = str_get_mag(sd)</span> <span class= code-output >smag = string(sm, format='(f4.1)')</span> <span class= code-output >psyms_str=make_array(n_stars,val=6)</span> <span class= code-output >pg_draw, star_ptd, color=color, psym=psym, plabel=smag, csi=csizes</span>   Manually repointing the geometry   This pasteable section first clears the screen of the plotted points  by redisplaying the image with tvim.  It then calls pg_drag to allow  the user to use the cursor to drag the pointing, and with it the stars.  To move the pointing with pg_drag, use the left mouse button and  translate the pointing in x,y.  Use the middle mouse button to rotate  the pointing about an axis (in this case, the axis of rotation is set  as the optic axis of the image (star_ptd) which is defined using the  routine pnt_create_descrptors with the points being the camera optic  axis as returned by the camera library routine cam_oaxis.  When the  desired pointing is set, the right mouse button accepts it.  pg_drag  returns the delta x,y amount dragged (dxy) as well as the rotation  angle (dtheta).  pg_repoint uses the dxy and dtheta to update the  camera descriptor (cd, passed by gd).  The limb, ring and star points  are then recalculated, the image redisplayed to clear the objects drawn,  and then pg_draw is called to replot.   Code: <span class= code-output >optic_ptd = pnt_create_descriptors(points=cam_oaxis(cd))</span> <span class= code-output >tvim, im</span> <span class= code-output >dxy = pg_drag(star_ptd, dtheta=dtheta, axis=optic_ptd, symbol=6)  ; square</span> <span class= code-output >pg_repoint, dxy, dtheta, axis=optic_ptd, gd=gd</span> <span class= code-output >star_ptd=pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, /rm, /globe</span> <span class= code-output >tvim, im</span> <span class= code-output >pg_draw, star_ptd, color=color, psym=psym, plabel=plabels</span>   Scanning to find the stars and using it to calculate the pointing   This section calls pg_ptscan to scan the image around the predicted  star positions (within width of 40 pixels) and find the pixels with  the highest correlation with a given edge model (example uses the  default gaussian) for each star.  These points are then plotted.   Code: <span class= code-output >ptscan_ptd = pg_ptscan(dd, star_ptd, edge=30, width=40)</span> <span class= code-output >pg_draw, ptscan_ptd, psym=1, col=ctyellow()</span>   Thresholding using correlation coefficient   This section (optional) calls pg_threshold to remove points with lower  correlation coefficients.  This example only keeps stars with a  correlation coefficient above 0.6.  Notice that each object can have  its own min and max value.   Code: <span class= code-output >pg_threshold, ptscan_ptd, min=make_array(n_stars,val=0.6), $</span> <span class= code-output >                          max=make_array(n_stars,val=1.0)</span> <span class= code-output >tvim, im</span> <span class= code-output >pg_draw, object_ptd, colors=colors, psyms=psyms, psizes=psizes, plabel=plabels</span> <span class= code-output >pg_draw, ptscan_ptd, psym=1, col=ctyellow()</span>   Removing regions of bad points   This section (optional) calls pg_select to remove points within a  polygonal region as defined by the cursor.  Click the left mouse  button to mark a point and move the mouse to the next point and  click.  Use the middle mouse button to erase a point and the right  mouse button to end the region.  pg_trim removes the points in the  just defined region.  The scan points are then replotted.  Repeat these statements for each region a user wants to remove.   Code: <span class= code-output >region=pg_select(dd)</span> <span class= code-output >pg_trim, dd, ptscan_ptd, region</span> <span class= code-output >tvim, im</span> <span class= code-output >pg_draw, object_ptd, colors=colors, psyms=psyms, psizes=psizes, plabel=plabels</span> <span class= code-output >pg_draw, ptscan_ptd, psym=1, col=ctyellow()</span>   Fitting the pointing to the found stars   This section calls pg_ptscan_coeff to determine the linear  least-squares coefficients for a fit to the image coordinate translation  and rotation which matches the computed positions to the scanned  positions. It then calls pg_fit to do the fit with the calculated  coefficients to calculate the correction in translation (dxy) and  rotation (dtheta).  It calls pg_ptchisq to get the chi square of the  fit.  It then calls pg_repoint to update the pointing.  Recalculates  the limb, rings and stars and replots.   Code: <span class= code-output >optic_ptd = pnt_create_descriptors(points=cam_oaxis(cd))</span> <span class= code-output >ptscan_cf = pg_ptscan_coeff(ptscan_ptd, axis=optic_ptd)</span> <span class= code-output >dxy = pg_fit([ptscan_cf], dtheta=dtheta)</span> <span class= code-output >chisq = pg_chisq(dxy, dtheta, ptscan_ptd, axis=optic_ptd[0])</span> <span class= code-output >covar = pg_covariance([ptscan_cf])</span> <span class= code-output >print, dxy, dtheta*180./!pi, chisq, covar</span> <span class= code-output >pg_repoint, dxy, dtheta, axis=optic_ptd, gd=gd</span> <span class= code-output >star_ptd = pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, /rm, /globe</span> <span class= code-output >tvim, im</span> <span class= code-output >pg_draw, star_ptd, color=color, psym=psym, plabel=plabels</span>   Output the new state   This section (optional) shows how you can save your output: any changes  to the image data into a new file and the new pointing into a detached  header.   Code: <span class= code-output >pg_put_cameras, dd, gd=gd</span> <span class= code-output >dat_write, 'data/c1138223_nv.gem', dd</span>  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./vims_example.html", "vims_example.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "vims_example.pro", "", "", " VIMS EXAMPLE     This script demonstrates reading Cassini RADAR VIMS cubes and projecting them    onto an equirectangular mosaic.     The data files are provided in the demo/data directory.     Setup: The instrument detectors, translators and transforms must contain the    VIMS definitions, as is included in demo/data/instrument_detectors.tab,    demo/data/translators.tab, and demo/data/transforms.tab.     This example requires SPICE/Icy to have been setup. It can be run just by doing: <span class= code-output > .run vims_example</span>    from the demo directory.   Read VIMS files       Set up a hash containing the file names and precomputed pointing offsets: <span class= code-output > hdxy=hash()</span> <span class= code-output > hdxy['data/CM_1559100372_1_ir_eg.cub']=[-2d0,-2d0]</span> <span class= code-output > hdxy['data/CM_1503358311_1_ir_eg.cub']=[5d0,-1d0]</span> <span class= code-output > hdxy['data/CM_1477456632_1_ir_eg.cub']=[2d0,-3d0]</span> <span class= code-output > hdxy['data/CM_1504754217_1_ir_eg.cub']=[1d0,-2d0]</span> <span class= code-output > files=(hdxy.keys()).toarray()</span> <span class= code-output > n = n_elements(files)</span> <span class= code-output > dd = dat_read(files)</span>   Set up descriptors needed to make the grids and mosaic       Create an array of global descriptors and populate it: <span class= code-output > gd = replicate({cd:obj_new(), gbx:obj_new(), dkx:obj_new(), sund:obj_new()}, n)</span> <span class= code-output > for i=0, n-1 do gd[i].cd = pg_get_cameras(dd[i])</span> <span class= code-output > for i=0, n-1 do gd[i].gbx = pg_get_planets(dd[i], od=gd[i].cd, name='TITAN')</span> <span class= code-output > for i=0, n-1 do gd[i].sund = pg_get_stars(dd[i], od=gd[i].cd, name='SUN')</span>      Apply the pointing shifts and compute the limbs: <span class= code-output > limb_ps = objarr(n)</span> <span class= code-output > dxy = dblarr(2,n)</span> <span class= code-output > for i=0, n-1 do dxy[*,i] = hdxy[files[i]]</span> <span class= code-output > for i=0, n-1 do pg_repoint, dxy[*,i], 0d, gd=gd[i]</span> <span class= code-output > for i=0, n-1 do limb_ps[i] = pg_limb(gd=gd[i])</span>    Display an image of one of the bands with a limb and grid on top       Create an array of global descriptors and populate it: <span class= code-output > xsize=800</span> <span class= code-output > ysize=800</span> <span class= code-output > zoom=8</span> <span class= code-output > offset=[-20,-20]</span> <span class= code-output > for i=0, n-1 do begin</span> <span class= code-output >   tvim, (dat_data(dd[i]))[*,*,70], $</span> <span class= code-output >     zoom=zoom,/order, /new,offset=offset,$</span> <span class= code-output >     xsize=xsize,ysize=ysize</span> <span class= code-output >   pg_draw, limb_ps[i]</span> <span class= code-output >   write_png,tvrd()</span> <span class= code-output > endfor</span> <span class= code-output > tvim, /list, wnum=ww</span>      Create and draw the lat/lon grid and labels: <span class= code-output > for i=0,n-1 do begin</span> <span class= code-output >   grid_ps = pg_grid(gd=gd[i], lat=lat, lon=lon)</span> <span class= code-output >   pg_hide,grid_ps,cd=gd[i].cd,gbx=gd[i].gbx,/limb</span> <span class= code-output >   pg_hide,grid_ps,cd=gd[i].cd,gbx=gd[i].gbx,$</span> <span class= code-output >    od=gd[i].sund,/limb</span> <span class= code-output >   pg_hide, grid_ps, gd=gd[i], /disk</span> <span class= code-output >   pg_draw, grid_ps, color=ctblue(),wnum=ww[i]</span> <span class= code-output >   plat_ps = pg_grid(gd=gd[i], slon=!dpi/2d, $</span> <span class= code-output >    lat=lat, nlon=0)</span> <span class= code-output >   pg_hide,plat_ps[0],cd=gd[i].cd,gbx=gd[0].gbx,/limb</span> <span class= code-output >   pg_draw, plat_ps[0], psym=3, $</span> <span class= code-output >    plabel=strtrim(round(lat*180d/!dpi),2),/label_p,$</span> <span class= code-output >    wnum=ww[i]</span> <span class= code-output >   plon_ps = pg_grid(gd=gd[i], slat=0d, lon=lon, nlat=0)</span> <span class= code-output >   pg_hide,plon_ps[0],cd=gd[i].cd,gbx=gd[i].gbx,/limb</span> <span class= code-output >   pg_draw,vplon_ps[0], psym=3,$</span> <span class= code-output >    plabel=strtrim(round(lon*180d/!dpi),2),/label_p,$</span> <span class= code-output >    wnum=ww[i]</span> <span class= code-output > endfor</span>      These 4 images would look like                                Create a 3-band mosaic       Correct the illumination with a Lambertian function: <span class= code-output > dd_pht = objarr(n)</span> <span class= code-output > for i=0, n-1 do dd_pht[i] = pg_photom(dd[i], gd=gd[i],</span> <span class= code-output >   refl_fn='pht_lamb', refl_parm=[0.9d], outline=limb_ps[i])</span> <span class= code-output > phtdata=list()</span> <span class= code-output > for i=0,n-1 do phtdata.add,(dat_data(dd_pht[i]))</span>      Set up the mosaic: <span class= code-output > bands=[70,104,106]</span> <span class= code-output > map_xsize = 1600</span> <span class= code-output > map_ysize = 800</span> <span class= code-output > moslim=[[0d0,0.2d0],[0d0,0.01d0],[0d0,0.1d0]]</span> <span class= code-output > mosaics=list()</span>      Loop over bands, projecting and displaying each image: <span class= code-output > foreach band,bands,iband do begin</span> <span class= code-output >   for i=0,n-1 do dat_set_data,dd_pht[i],phtdata[i,*,*,band]</span> <span class= code-output >   md = pg_get_maps(/over, gbx = pd1, name='TITAN',$</span> <span class= code-output >    type='RECTANGULAR',fn_data=ptr_new(),$</span> <span class= code-output >    size=[map_xsize,map_ysize],origin=[map_xsize,map_ysize]/2)</span> <span class= code-output >   dd_map = objarr(n)</span> <span class= code-output >   for i=0, n-1 do begin</span> <span class= code-output >    dd_map[i]=pg_map(dd_pht[i],md=md,gd=gd[i],aux=['EMM'])</span> <span class= code-output >    tvim,dat_data(dd_map[i])&lt;max((dat_data(dd[i]))[*,*,band]),/new</span> <span class= code-output >   endfor</span>      These projected images would look like:                                   Combine the images in a mosaic and display it: <span class= code-output >   dd_mosaic = pg_mosaic(dd_map, mosaic=mosaic, $</span> <span class= code-output >     wt='emm', comb='sum', data={x:1, emm0:cos(90d*!dpi/180d)})</span> <span class= code-output >   tvim,moslim[0,iband]&gt;mosaic&lt;moslim[1,iband],/new</span>      Add a grid on top: <span class= code-output >   pd = pg_get_planets(dd[0], od=gd[0].cd)</span> <span class= code-output >   gdm={cd:md,od:(gd[0].cd)[0],gbx:cor_select(pd,'TITAN'),$</span> <span class= code-output >    dkx:gd[0].dkx}</span> <span class= code-output >   map_grid_ps=pg_grid(gd=gdm, lat=lat, lon=lon)</span> <span class= code-output >   plat_ps=pg_grid(gd=gdm, slon=!dpi/2d, lat=lat, nlon=0)</span> <span class= code-output >   plon_ps=pg_grid(gd=gdm, slat=0d, lon=lon, nlat=0)</span> <span class= code-output >   pg_draw, map_grid_ps, col=ctgreen()</span> <span class= code-output >   pg_draw,plat_ps,psym=7,$</span> <span class= code-output >    plabel=strmid(strtrim(lat*180d/!dpi,2),0,3),/label_p</span> <span class= code-output >   pg_draw,plon_ps,psym=7,$</span> <span class= code-output >     plabel=strmid(strtrim(lon*180d/!dpi,2),0,3),/label_p</span> <span class= code-output >   mosaics.add,mosaic</span> <span class= code-output > endforeach</span>      The mosaics would look like, for each band:                       ", "", "          -1", "");
  

