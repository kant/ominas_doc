/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "OMINAS Documentation";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("./cas_radar_example.html", "cas_radar_example.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "cas_radar_example.pro", "", "", " RADAR EXAMPLE     This script demonstrates reading a Cassini RADAR SAR image and projecting it    onto an orthographical map for display.     The data file used, BIFQI22N068_D045_T003S01_V02.IMG, is too large (202 MB)    to include with the OMINAS distribution. This script will look for the file    under ~/ominas_data/sar/, and if not found, will download it from    PDS&lt;http://pds-imaging.jpl.nasa.gov/data/cassini/cassini_orbiter/CORADR_0045/DATA/BIDR/BIFQI22N068_D045_T003S01_V02.ZIP&gt;,    then unzip it.     Setup: The instrument detectors, translators and transforms must contain the    RADAR definitions, as is included in demo/data/instrument_detectors.tab,    demo/data/translators.tab, and demo/data/transforms.tab. Since the RADAR    data is in PDS format, the PDS detector and io functions must also be set up    in the corresponding tables, as is in config/tab/filetype_detectors.tab    and config/tab/io.tab.     There is no need for SPICE/Icy for this example. It can be run just by doing: <span class= code-output > .run radar_example</span>    From within an OMINAS IDL session.   Read SAR file     Cassini RADAR SAR image to read must be set in the variable img, otherwise    this default location is used: <span class= code-output > ;Download the file, if needed</span> <span class= code-output > ldir='~/ominas_data/sar'</span> <span class= code-output > spawn,'eval echo '+ldir,res</span> <span class= code-output > ldir=res</span> <span class= code-output > img=ldir+path_sep()+'BIFQI22N068_D045_T003S01_V02.IMG'</span> <span class= code-output > if ~file_test(img,/read) then begin</span> <span class= code-output >   print,'SAR file needed for the demo not found. Downloading it from PDS...'</span> <span class= code-output >   p=pp_wget('http://pds-imaging.jpl.nasa.gov/data/cassini/cassini_orbiter/CORADR_0045/DATA/BIDR/BIFQI22N068_D045_T003S01_V02.ZIP',localdir=ldir)</span> <span class= code-output >   p.geturl</span> <span class= code-output >   print,'ZIP file downloaded, decompressing it...'</span> <span class= code-output >   file_unzip,ldir+path_sep()+'CORADR_0045/DATA/BIDR/BIFQI22N068_D045_T003S01_V02.ZIP',/verbose</span> <span class= code-output > endif</span>  <span class= code-output > ;Read the file</span> <span class= code-output > dd=dat_read(img)</span>   Display SAR file     Saturate the data to make the image better looking, since this is just for display    purposes: <span class= code-output > da=dat_data(dd)</span> <span class= code-output > dat_set_data,dd,da&lt;4.5d0</span>    Show it a 1/20 resolution: <span class= code-output > tvim,da&lt;4.5,zoom=0.05,/order,/new</span>         Map SAR file     SAR data is provided in PDS as a map on the target, in an oblique rectangular projection, shown above.    To use it, first we need to obtain the proper map descriptor from the data object: <span class= code-output > mdr=pg_get_maps(dd)</span>    Now we will display it in an orthogonal projection. First we define it: <span class= code-output > map_xsize = 4000</span> <span class= code-output > map_ysize = 4000</span>    Create the new map descriptor: <span class= code-output > mdp= pg_get_maps(/over,  $</span> <span class= code-output >   name='TITAN',$</span> <span class= code-output >   projection='ORTHOGRAPHIC', $</span> <span class= code-output >   size=[map_xsize,map_ysize], $</span> <span class= code-output >   origin=[map_xsize,map_ysize]/2, $</span> <span class= code-output >   center=[0d0,-0.4d0*!dpi])</span>    Now, do the projection: <span class= code-output > dd_map=pg_map(dd,md=mdp,cd=mdr,pc_xsize=800,pc_ysize=800)</span>    Visualize the result, now with grim: <span class= code-output > grim,dd_map,cd=mdp;,overlays=['planet_grid']</span>        ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./cas_vims_example.html", "cas_vims_example.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "cas_vims_example.pro", "", "", " VIMS EXAMPLE     This script demonstrates reading Cassini RADAR VIMS cubes and projecting them    onto an equirectangular mosaic.     The data files are provided in the demo/data directory.     Setup: The instrument detectors, translators and transforms must contain the    VIMS definitions, as is included in demo/data/instrument_detectors.tab,    demo/data/translators.tab, and demo/data/transforms.tab.     This example requires SPICE/Icy to have been setup. It can be run just by doing: <span class= code-output > .run vims_example</span>    from within an OMINAS IDL session.   Read VIMS files       Set up a hash containing the file names and precomputed pointing offsets: <span class= code-output > hdxy=hash()</span> <span class= code-output > hdxy['CM_1559100372_1_ir_eg.cub']=[-2d0,-2d0]</span> <span class= code-output > hdxy['CM_1503358311_1_ir_eg.cub']=[5d0,-1d0]</span> <span class= code-output > hdxy['CM_1477456632_1_ir_eg.cub']=[2d0,-3d0]</span> <span class= code-output > hdxy['CM_1504754217_1_ir_eg.cub']=[1d0,-2d0]</span>  <span class= code-output > files=getenv('OMINAS_DIR')+'/demo/data/'+((hdxy.keys()).toarray())</span> <span class= code-output > n = n_elements(files)</span> <span class= code-output > dd = dat_read(files)</span> <span class= code-output > foreach ddd,dd do dat_set_data,ddd,0.&gt;dat_data(ddd)&lt;0.1</span>   Set up descriptors needed to make the grids and mosaic       Create an array of global descriptors and populate it: <span class= code-output > gd = replicate({cd:obj_new(),cds:objarr(256), gbx:obj_new(), dkx:obj_new(), sund:obj_new()}, n)</span> <span class= code-output > for i=0, n-1 do gd[i].cds = pg_get_cameras(dd[i])</span> <span class= code-output > for i=0, n-1 do gd[i].cd=gd[i].cds[0]</span> <span class= code-output > for i=0, n-1 do gd[i].gbx = pg_get_planets(dd[i], od=gd[i].cd, name='TITAN')</span> <span class= code-output > for i=0, n-1 do gd[i].sund = pg_get_stars(dd[i], od=gd[i].cd, name='SUN')</span>      Apply the pointing shifts and compute the limbs: <span class= code-output > limb_ps = objarr(n)</span> <span class= code-output > dxy = dblarr(2,n)</span> <span class= code-output > for i=0, n-1 do dxy[*,i] = hdxy[file_basename(files[i])]</span> <span class= code-output > for i=0, n-1 do for j=0,255 do pg_repoint, dxy[*,i], 0d, cd=gd[i].cds[j]</span> <span class= code-output > for i=0, n-1 do gd[i].cd=gd[i].cds[0]</span> <span class= code-output > for i=0, n-1 do limb_ps[i] = pg_limb(gd=gd[i]);</span>   Display an image of one of the bands with a limb and grid on top       Create an array of global descriptors and populate it: <span class= code-output > xsize=800</span> <span class= code-output > ysize=800</span> <span class= code-output > zoom=8</span> <span class= code-output > offset=[-20,-20]</span> <span class= code-output > for i=0, n-1 do begin</span> <span class= code-output >   tvim, (dat_data(dd[i]))[*,*,70], $</span> <span class= code-output >     zoom=zoom,/order, /new,offset=offset,$</span> <span class= code-output >     xsize=xsize,ysize=ysize</span> <span class= code-output >   pg_draw, limb_ps[i]</span> <span class= code-output >   write_png,tvrd()</span> <span class= code-output > endfor</span> <span class= code-output > tvim, /list, wnum=ww</span>      Create and draw the lat/lon grid and labels: <span class= code-output > imc=0</span> <span class= code-output > for i=0,n-1 do begin</span> <span class= code-output >   grid_ps = pg_grid(gd=gd[i], lat=lat, lon=lon)</span> <span class= code-output >   pg_hide, grid_ps, cd=gd[i].cd, gbx=gd[i].gbx</span> <span class= code-output >   pg_hide, grid_ps, cd=gd[i].cd, gbx=gd[i].gbx,$</span> <span class= code-output >     od=gd[i].sund</span> <span class= code-output >   pg_draw, grid_ps, color=ctblue(),wnum=ww[i]</span> <span class= code-output >   plat_ps = pg_grid(gd=gd[i],slon=!dpi/2d,lat=lat,nlon=0)</span> <span class= code-output >   pg_hide, plat_ps[0], cd=gd[i].cd, gbx=gd[0].gbx</span> <span class= code-output >   pg_draw, plat_ps[0], psym=3, $</span> <span class= code-output >     plabel=strtrim(round(lat*180d/!dpi),2),$</span> <span class= code-output >     /label_p,wnum=ww[i]</span> <span class= code-output >   plon_ps = pg_grid(gd=gd[i], slat=0d, lon=lon, nlat=0)</span> <span class= code-output >   pg_hide, plon_ps[0], cd=gd[i].cd, gbx=gd[i].gbx</span> <span class= code-output >   pg_draw, plon_ps[0], psym=3, $</span> <span class= code-output >     plabel=strtrim(round(lon*180d/!dpi),2),$</span> <span class= code-output >     /label_p,wnum=ww[i]</span> <span class= code-output > endfor</span>      These 4 images would look like                                Create a 3-band mosaic       Correct the illumination with a Lambertian function: <span class= code-output > dd_pht = objarr(n)</span> <span class= code-output > for i=0, n-1 do dd_pht[i] = pg_photom(dd[i], gd=gd[i],</span> <span class= code-output >   refl_fn='pht_lamb', refl_parm=[0.9d], outline=limb_ps[i])</span> <span class= code-output > phtdata=list()</span> <span class= code-output > for i=0,n-1 do phtdata.add,(dat_data(dd_pht[i]))</span>      Set up the mosaic: <span class= code-output > bands=[70,104,106]</span> <span class= code-output > map_xsize = 1600</span> <span class= code-output > map_ysize = 800</span> <span class= code-output > moslim=[[0d0,0.2d0],[0d0,0.01d0],[0d0,0.1d0]]</span> <span class= code-output > mosaics=list()</span>      Loop over bands, projecting and displaying each image: <span class= code-output > foreach band,bands,iband do begin</span> <span class= code-output >   for i=0,n-1 do dat_set_data,dd_pht[i],phtdata[i,*,*,band]</span> <span class= code-output >   md = pg_get_maps(/over, gbx = pd1, name='TITAN',$</span> <span class= code-output >    projection='RECTANGULAR',fn_data=ptr_new(),$</span> <span class= code-output >    size=[map_xsize,map_ysize],origin=[map_xsize,map_ysize]/2)</span> <span class= code-output >   dd_map = objarr(n)</span> <span class= code-output >   for i=0, n-1 do begin</span> <span class= code-output >    dd_map[i]=pg_map(dd_pht[i],md=md,gd=gd[i],aux=['EMM'])</span> <span class= code-output >    tvim,dat_data(dd_map[i])&lt;max((dat_data(dd[i]))[*,*,band]),/new</span> <span class= code-output >   endfor</span>      These projected images would look like:                                   Combine the images in a mosaic and display it: <span class= code-output >   dd_mosaic = pg_mosaic(dd_map, mosaic=mosaic, $</span> <span class= code-output >     wt='emm', comb='sum', data={x:1, emm0:cos(90d*!dpi/180d)})</span> <span class= code-output >   tvim,moslim[0,iband]&gt;mosaic&lt;moslim[1,iband],/new</span>      Add a grid on top: <span class= code-output >   pd = pg_get_planets(dd[0], od=gd[0].cd)</span> <span class= code-output >   gdm={cd:md,od:(gd[0].cd)[0],gbx:cor_select(pd,'TITAN'),$</span> <span class= code-output >    dkx:gd[0].dkx}</span> <span class= code-output >   map_grid_ps=pg_grid(gd=gdm, lat=lat, lon=lon)</span> <span class= code-output >   plat_ps=pg_grid(gd=gdm, slon=!dpi/2d, lat=lat, nlon=0)</span> <span class= code-output >   plon_ps=pg_grid(gd=gdm, slat=0d, lon=lon, nlat=0)</span> <span class= code-output >   pg_draw, map_grid_ps, col=ctgreen()</span> <span class= code-output >   pg_draw,plat_ps,psym=7,$</span> <span class= code-output >    plabel=strmid(strtrim(lat*180d/!dpi,2),0,3),/label_p</span> <span class= code-output >   pg_draw,plon_ps,psym=7,$</span> <span class= code-output >     plabel=strmid(strtrim(lon*180d/!dpi,2),0,3),/label_p</span> <span class= code-output >   mosaics.add,mosaic</span> <span class= code-output > endforeach</span>      The mosaics would look like, for each band:                       ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./graft_example-batch.html", "graft_example-batch.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "graft_example-batch.pro", "", "", "                            GRAFT EXAMPLE    Created by Joe Spitale    This example file demonstrates the use the GRIM interface programs   GRIFT and GRAFT.  While GRIFT cheats GRIM out of its object references,   GRAFT corruptly inserts (or grafts) data arrays into a GRIM instance.    The usage demonstrated here is a bit contrived, as one could accomplish   a better result by specifying the desired overlays in the call to GRIM,   as in grim_example, but let's live a little.    This example file can be executed from the UNIX command line using    	ominas graft_example-batch    or from within IDL using    	@graft_example-batch    You can also just paste line-by-line if you want to inspect the variables   at each step.    After the example stops, later code samples in this file may be executed by   pasting them onto the IDL command line.  READ AND DISPLAY IMAGE    Use GRIM to open and display an image: <span class= code-output > grim, './data/n1350122987.2', zoom=0.75, /order</span>   GRIFT    First, GRIFT the data descriptor out of poor old GRIM.  Note that the   returned object is a reference to the same object as GRIM is using.      grift, dd=dd    Be warned that GRIM jealously watches over its objects and updates whenever   it detects any changes, so you can simultaneously operate on objects from   within GRIM and from the command line.  For example, try:  	dat_set_data, dd, rotate(dat_data(dd),7)    GRIM resigns itself to having its data descriptor tampered with and   updates the display accordingly.  Run the same command again if you   want flip the image back.   OBTAIN GEOMETRY    Now compute geometry for this dd.  This is the same business you have   seen in all of the other demos, cd, pd, etc.  Of course, you could have   just had GRIM do this: <span class= code-output > cd = pg_get_cameras(dd, 'ck_in=auto')</span> <span class= code-output > pd = pg_get_planets(dd, od=cd, $</span> <span class= code-output >        name=['JUPITER', 'IO', 'EUROPA', 'GANYMEDE', 'CALLISTO'])</span> <span class= code-output > rd = pg_get_rings(dd, pd=pd, od=cd)</span> <span class= code-output > sund = pg_get_stars(dd, od=cd, name='SUN')</span>   MAKE A GENERIC DESCRIPTOR    And of course we shove everything into a generic descriptor because it   makes everything so much easier: <span class= code-output > gd = {cd:cd, gbx:pd, dkx:rd, sund:sund}</span>   COMPUTE OVERLAY ARRAYS    Same old story;  PG_LIMB, PG_DISK, PG_HIDE, etc.  GRIM would have been   happy to do this for you: <span class= code-output > limb_ptd = pg_limb(gd=gd) & pg_hide, limb_ptd, gd=gd, /rm, bx=rd</span> <span class= code-output >           pg_hide, limb_ptd, /assoc, gd=gd, bx=pd, od=sund</span> <span class= code-output > ring_ptd = pg_disk(gd=gd) & pg_hide, ring_ptd, gd=gd, bx=pd</span> <span class= code-output > term_ptd = pg_limb(gd=gd, od=gd.sund) & pg_hide, term_ptd, gd=gd, bx=pd, /assoc</span> <span class= code-output > center_ptd = pg_center(gd=gd, bx=pd)</span>   DISPLAY OVERLAYS    Ok, now let's draw those overlays, just like in the PG example.  This   is going to be great: <span class= code-output > pg_draw, center_ptd, col=ctwhite(), psym=1, plabel=cor_name(pd)</span> <span class= code-output > pg_draw, limb_ptd, col=ctyellow()</span> <span class= code-output > pg_draw, term_ptd, col=ctred()</span> <span class= code-output > pg_draw, ring_ptd, col=ctorange()</span>   Now let's zoom in and take a look at things.  You can use the mouse wheel   with Ctrl depressed, or you can use one of the Zoom cursor modes, or you   can use the View-&gt;Zoom menu, or the associated keyboard shortcuts if   have your Xdefaults-grim installed; basically just throw a flip-flop at   your computer and you should be able to make this happen.    But wait, where did my overlays go?  Did they ever even exist?  If you   are older than two years of age and have mastered object permanence,   then you probably have this one figured out.  We need a way to draw   these things permanently; some way of GRAFTing them into GRIM...   GRAFT    GRAFT crams the POINT objects into GRIM.  Note that these are entered   as user arrays in GRIM, so they're pretty much second class as far as   GRIM is concerned.  This would have been way better if you had just   specified these as overlays in your call to GRIM.  Now you have wasted   your time and GRIM's.  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./grift_example-batch.html", "grift_example-batch.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "grift_example-batch.pro", "", "", "                            GRIFT EXAMPLE    Created by Joe Spitale    This example script demonstrates the usage of the GRIM interface program   GRIFT.  GRIFT swindles GRIM into giving up references to its descriptor set   so they can be used against it by some foreign agent.    This example file can be executed from the UNIX command line using    	ominas grim_example-batch    or from within IDL using    	@grim_example-batch  OPEN IMAGE IN GRIM    This is basically it.  GRIM opens the specified image or images, and   computes whatever overlays you specify.  NHIST specifies the number   how far back the data descriptor history should go for the purpose   of undoing.  So now you're finished.  Have fun!       grim, '~/casIss/1350/N1350122987_2.IMG', $                 over=['planet_center','limb','terminator','ring'], nhist=5    RE-POINT FROM COMMAND LINE    Actually there is one more thing just for kicks.  GRIM could do this   from the menu, but you can also do it from the command line.  Just   GRIFT the descriptors out of GRIM, scan for edges and do a farfit.   GRIM sees the update to the camera descriptor and takes the liberty of   recomputing everything that depends on that descriptor.  Neato!      grift, cd=cd, dd=dd, limb_ptd=limb_ptd      edge_ptd = pg_edges(dd, edge=10, np=4000)     pg_draw, edge_ptd      dxy = pg_farfit(dd, edge_ptd, limb_ptd[0])     pg_repoint, dxy, cd=cd  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./grim_example-batch.html", "grim_example-batch.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "grim_example-batch.pro", "", "", "                            GRIM EXAMPLE    Created by Joe Spitale    This example script demonstrates various basic ways to run GRIM, the   graphical interface to OMINAS.  GRIM is kind of like a fancier TVIM,   where you can do all the standard stuff like zooming, panning, and   all manner of other acts that TVIM would never consent to.  You could   just use it exactly like TVIM, using PG_DRAW/PLOTS to draw overlays,   etc., but then none of your overlays would be permanent.  GRIM   maintains arrays internally, so they hang around as you zoom and pan   all over the place.  GRIM also maintains object descriptors and monitors   them very closely; you can barely sneeze around a descriptor without   GRIM refreshing itself several times.  See GRIM.PRO for information   on usage, or just play around with it.    This example file can be executed from the UNIX command line using    	ominas grim_examples-batch    or from within IDL using    	@grim_examples-batch  EXAMPLE 1:    Read a data descriptor and give it to GRIM.  Also specify some overlays.      dd = dat_read(file)     grim, dd, zoom=0.75, /order, $                   overlay=['planet_center', 'limb', 'terminator', 'ring']    EXAMPLE 2:    Example 1 was kind of dumb, because you could have just done this.  Note   the /new.  Without it, GRIM will try to update the existing instance.   If you zoom out, you may notice many objects far from the field of view.      grim, /new, file, zoom=0.75, /order, $                 overlay=['planet_center', 'limb', 'terminator', 'ring']   EXAMPLE 3:    Try specifying some explicit planet names.  This will likely be faster   because the above examples may have returned many more planets, depending   on your translator setup.      grim, /new, file, zoom=0.75, /order, $         overlay=['planet_center:JUPITER,IO,EUROPA,GANYMEDE,CALLISTO', $                                                 'limb', 'terminator', 'ring']   EXAMPLE 4:    Let's get rid of the explicit planet names and just select them based   on geometric criteria.  FOV=-1 selects overlays with 1 field of view   of the viewport.      grim, /new, file, zoom=0.75, /order, $         overlay=['planet_center', 'limb', 'terminator', 'ring'], fov=-1   EXAMPLE 5:    Same as above, except FOV=-1 selects overlays with 1 field of view   of the *image*.      grim, /new, file, zoom=0.75, /order, $         overlay=['planet_center', 'limb', 'terminator', 'ring'], fov=1    And cubes!  Here's an rgb image cube with some overlays...      grim, /new, './data/' + ['N1460072434_1.IMG', $                              'N1460072401_1.IMG', $                              'N1460072467_1.IMG'], $           ext='.cal', visibility=1, channel=[1b,2b,4b], $           over=['planet_center', $                 'limb:SATURN', $                 'terminator:SATURN', $                 'planet_grid:SATURN', $                 'ring']    Here's a spectral cube.  You'll need to stretch the levels to see   anything...      grim, /new, './data/CM_1503358311_1_ir_eg.cub'  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./install_guide.html", "install_guide.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "install_guide.pro", "", "", "	User Installation Guide  	This guide will cover the installation of OMINAS and common issues with 	configuration, as well as present some common errors and possible 	solutions. Please see the section entitled Troubleshooting for more 	information regarding installation issues with OMINAS.  	Requirements  	Currently OMINAS requires IDL 8.2.3 or above, and a bash shell, on Linux or 	Mac OS.  	To process images from a particular mission, that mission's kernels will 	need to be available. The OMINAS installer can automatically download sets of 	kernels for several missions (Cassini, Galileo, Voyager, Dawn).  	OMINAS makes use of the NAIF Icy Toolkit to process SPICE kernels. The Icy 	toolkit may optionally be obtained manually from 	NAIF. However, the 	installer utility provided with OMINAS can download and compile Icy 	automatically. Installation of Icy is somewhat platform-dependent, so 	troubleshooting information can be found in Troubleshooting.  	Procedure  	1. Please ensure that OMINAS has been properly downloaded from the 	Github repository by entering 	the following command at the terminal: <span class= code-output > git clone https://github.com/ppenteado/ominas</span> 	A local copy of the OMINAS source will be cloned automatically.  	2. Configuration of OMINAS should be performed using the configuration 	script, configure.sh, which is located in the top-level ominas directory. 	This script can be run from the command line with: <span class= code-output > source configure.sh</span> 	3. A prompt will appear asking which packages should be installed. The 	user should type the numbers of the desired packages separated by spaces. 	We recomend, at a minimum, setting up packages 1, 2 and 3 (OMINAS Core, Demo and Icy). 	To automatically download and setup all the packages, use the all option.  	4. When setting up an individual kernel or data package (selections 4-13), 	one can either provide a path for an existing directory containing the required files, 	or tell the installer to download them.  	5. Test the install of OMINAS has been completed correctly by running the 	the following example scripts: <span class= code-output > ominas saturn_example.pro</span> <span class= code-output > ominas jupiter_example.pro</span> 	6. A successful Icy installation can be tested with the following IDL 	command from within an OMINAS IDL session: <span class= code-output > help, 'icy', /dlm</span> 	Some text on the installed version of Icy should be displayed. Additionally, 	use the following command: <span class= code-output > print, cspice_tkvrsn('TOOLKIT')</span> 	The version of Icy should be printed. If both of these functions return 	successfully, then Icy has been installed correctly.   Example installation walkthrough   From a fresh account (that never had OMINAS, Icy or any IDL libraries setup  before), for the 3 main packages (Core, Demo and Icy): <span class= code-output > ;[ominas_test_8@cmp ~]$ git clone https://github.com/ppenteado/ominas.git</span> <span class= code-output > ;Cloning into 'ominas'...</span> <span class= code-output > ;Username for 'https://github.com': ppenteado</span> <span class= code-output > ;Password for 'https://ppenteado@github.com':</span> <span class= code-output > ;remote: Counting objects: 13377, done.</span> <span class= code-output > ;remote: Compressing objects: 100% (85/85), done.</span> <span class= code-output > ;remote: Total 13377 (delta 51), reused 71 (delta 34), pack-reused 13258</span> <span class= code-output > ;Receiving objects: 100% (13377/13377), 200.48 MiB | 8.10 MiB/s, done.</span> <span class= code-output > ;Resolving deltas: 100% (7628/7628), done.</span> <span class= code-output > ;Checking connectivity... done.</span> <span class= code-output > ;Checking out files: 100% (3479/3479), done.</span>  At this point, a copy of OMINAS will be in a newly-created directory called  ominas, under the current directory. Note that if a non-empty ominas directory  was already present, git would notice it and refuse to download OMINAS into that  directory.    Now, getting into the ominas directory and running the installer: <span class= code-output >;[ominas_test_8@cmp ~]$ cd ominas/</span> <span class= code-output >;[ominas_test_8@cmp ominas]$ source configure.sh</span> <span class= code-output >;Detecting .bash_profile...</span> <span class= code-output >;.bash_profile detected!</span> <span class= code-output >;Detecting .bashrc...</span> <span class= code-output >;.bashrc detected!</span> <span class= code-output >;Using IDL at /usr/local/bin/idl</span> <span class= code-output >;IDL Version 8.5.1 (linux x86_64 m64). (c) 2015, Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation.</span> <span class= code-output >;Installation number: XXXXXX.</span> <span class= code-output >;Licensed for use by: XXXXXX</span> <span class= code-output >;</span> <span class= code-output >;Creating ~/.ominas directory</span> <span class= code-output >;Creating ~/ominas_data directory</span> <span class= code-output >;The setup will guide you through the installation of OMINAS</span> <span class= code-output >;OMINAS files located in /home/ominas_test_8/ominas</span> <span class= code-output >;</span> <span class= code-output >;IDL Version 8.5.1 (linux x86_64 m64). (c) 2015, Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation.</span> <span class= code-output >;Installation number: XXXXX.</span> <span class= code-output >;Licensed for use by: XXXXX</span> <span class= code-output >;</span> <span class= code-output >;% Compiled module: OMINAS_ICY_TEST.</span> <span class= code-output >;Icy: Icy not found</span> <span class= code-output >;Current OMINAS configuration settings</span> <span class= code-output >;Required:</span> <span class= code-output >;1) OMINAS Core  . . . . . . . . . . . . .  NOT CONFIGURED</span> <span class= code-output >;Contains the OMINAS code. If you select only one</span> <span class= code-output >;of the other packages, this will be included.</span> <span class= code-output >;Optional packages:</span> <span class= code-output >;2) Demo package . . . . . . . . . . . . .  NOT CONFIGURED</span> <span class= code-output >;Contains the demo scripts and the data required</span> <span class= code-output >;to run then.</span> <span class= code-output >;These files are always present (in ominas/demo),</span> <span class= code-output >;this option is to set up the environment so that</span> <span class= code-output >;the demos can be run.</span> <span class= code-output >;3) SPICE Icy  . . . . . . . . . . . . . .  NOT CONFIGURED</span> <span class= code-output >;Library maintained by JPL's NAIF (Navigation and Ancillary</span> <span class= code-output >;Information Facility, https://naif.jpl.nasa.gov/naif/toolkit.html,</span> <span class= code-output >;required to use spacecraft / planetary kernel files.</span> <span class= code-output >;</span> <span class= code-output >;Mission Packages:</span> <span class= code-output >;Kernels used for each mission's position and</span> <span class= code-output >;pointing data. If you do not already have them,</span> <span class= code-output >;an option to download them from PDS will be provided.</span> <span class= code-output >;If you already have them, you will need to provide</span> <span class= code-output >;the path to your kernel files.</span> <span class= code-output >;Note: the NAIF Generic Kernels (one of the optional</span> <span class= code-output >;data packages) are not required for the missions, they</span> <span class= code-output >;already contain a copy the subset of the generic kernel</span> <span class= code-output >;files they need.</span> <span class= code-output >;4) Cassini . . . . . . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;Subsetted, about 16 GB as of Dec/2016</span> <span class= code-output >;5) Galileo (GLL) . . . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;About 833 MB as of Dec/2016</span> <span class= code-output >;6) Voyager . . . . . . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;About 163 MB as of Dec/2016</span> <span class= code-output >;7) Dawn  . . . . . . . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;Subsetted, about 8 GB as of Jan/2017</span> <span class= code-output >;Data:</span> <span class= code-output >;8) NAIF Generic Kernels . . . . . . . . .  NOT CONFIGURED</span> <span class= code-output >;About 22 GB as of Dec/2016</span> <span class= code-output >;9) SEDR image data . . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;10) TYCHO2 star catalog . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;About 161 MB download, 665 MB unpacked</span> <span class= code-output >;11) SAO star catalog . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;About 19 MB download, 70 MB unpacked</span> <span class= code-output >;12) GSC star catalog . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;13) UCAC4 star catalog . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;About 8.5 GB download</span> <span class= code-output >;For more information, see</span> <span class= code-output >;https://ppenteado.github.io/ominas_doc/demo/install_guide.html</span> <span class= code-output >;Modify Current OMINAS configuration (Exit/Auto/Uninstall 1 2 ...)?  1 2 3</span> <span class= code-output >;Settiing OMINAS Core...</span> <span class= code-output >;OMINAS requires the NAIF Icy toolkit to process SPICE kernels.</span> <span class= code-output >;Would you like to install Icy from the internet now? [y]</span> <span class= code-output >;http://naif.jpl.nasa.gov/pub/naif/toolkit//IDL/PC_Linux_GCC_IDL8.x_64bit/packages/icy.tar.Z ~/ominas_data/icy.tar.Z</span> <span class= code-output >;http://naif.jpl.nasa.gov/pub/naif/toolkit//IDL/PC_Linux_GCC_IDL8.x_64bit/packages/icy.tar.Z --localdir=/home/ominas_test_8/ominas_data/</span> <span class= code-output >;</span> <span class= code-output >;IDL Version 8.5.1 (linux x86_64 m64). (c) 2015, Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation.</span> <span class= code-output >;Installation number: XXXXXX.</span> <span class= code-output >;Licensed for use by: XXXXXX</span> <span class= code-output >;</span> <span class= code-output >;% Compiled module: PP_WGETCL.</span> <span class= code-output >;% Compiled module: PP_COMMAND_LINE_ARGS_PARSE.</span> <span class= code-output >;% Loaded DLM: URL.</span> <span class= code-output >;% Compiled module: PP_WGET__DEFINE.</span> <span class= code-output >;util/downloader/ca-bundle.crt</span> <span class= code-output >;% Compiled module: PARSE_URL.</span> <span class= code-output >;downloading http://naif.jpl.nasa.gov/pub/naif/toolkit//IDL/PC_Linux_GCC_IDL8.x_64bit/packages/icy.tar.Z</span> <span class= code-output >;% Compiled module: PP_READABLESIZE.</span> <span class= code-output >;Content Length:  276.00000 B</span> <span class= code-output >;% Compiled module: PP_PARSE_DATE.</span> <span class= code-output >;% Compiled module: JULDAY.</span> <span class= code-output >;Content Length:  43.669736 MB</span> <span class= code-output >;% Compiled module: CALDAT.</span> <span class= code-output >;Extracting Icy source files...</span> <span class= code-output >;Compiling Icy...</span> <span class= code-output >;Icy compiled. Log is at ~/.ominas/icy_make.log</span> <span class= code-output >;writing /home/ominas_test_8/.ominas/ominas_setup.sh</span> <span class= code-output >;‘/home/ominas_test_8/.ominas/ominas_setup.sh’ -&gt; ‘/home/ominas_test_8/.ominas/ominas_setup_old.sh’</span> <span class= code-output >;</span> <span class= code-output >;</span> <span class= code-output >;</span> <span class= code-output >;</span> <span class= code-output >;</span> <span class= code-output >;</span> <span class= code-output >;done with writing /home/ominas_test_8/.ominas/ominas_setup.sh</span> <span class= code-output >;IDL Version 8.5.1 (linux x86_64 m64). (c) 2015, Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation.</span> <span class= code-output >;Installation number: XXXXXX.</span> <span class= code-output >;Licensed for use by: XXXXXX</span> <span class= code-output >;</span> <span class= code-output >;% Compiled module: OMINAS_PATHS_ADD.</span> <span class= code-output >;Checking to see if IDL paths need to be changed...</span> <span class= code-output >;% Compiled module: IDLASTRO_DOWNLOAD.</span> <span class= code-output >;% Compiled module: ROUTINE_EXISTS.</span> <span class= code-output >;There are missing IDLAstro routines.</span> <span class= code-output >;Auto installing</span> <span class= code-output >;git clone https://github.com/wlandsman/IDLAstro.git /home/ominas_test_8/ominas_data/idlastro</span> <span class= code-output >;Cloning into '/home/ominas_test_8/ominas_data/idlastro'...</span> <span class= code-output >;remote: Counting objects: 1400, done.</span> <span class= code-output >;remote: Compressing objects: 100% (7/7), done.</span> <span class= code-output >;remote: Total 1400 (delta 1), reused 3 (delta 1), pack-reused 1392</span> <span class= code-output >;Receiving objects: 100% (1400/1400), 11.63 MiB | 4.85 MiB/s, done.</span> <span class= code-output >;Resolving deltas: 100% (556/556), done.</span> <span class= code-output >;Checking connectivity... done.</span> <span class= code-output >;IDLAstro path set in preferences:  &lt;IDL_DEFAULT&gt;:+/home/ominas_test_8/ominas_data/idlastro/pro</span> <span class= code-output >;OMINAS paths set in IDL preferences</span> <span class= code-output >;Icy path set in IDL preferences</span> <span class= code-output >;OMINAS aliase set in /home/ominas_test_8/.bashrc.</span> <span class= code-output >;OMINAS aliase set in /home/ominas_test_8/.bash_profile.</span> <span class= code-output >;IDL Version 8.5.1 (linux x86_64 m64). (c) 2015, Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation.</span> <span class= code-output >;Installation number: 5502667.</span> <span class= code-output >;Licensed for use by: NASA - Jet Propulsion Laboratory</span> <span class= code-output >;</span> <span class= code-output >;% Compiled module: OMINAS_ICY_TEST.</span> <span class= code-output >;% Loaded DLM: ICY.</span> <span class= code-output >;Icy: /home/ominas_test_8/ominas_data/icy/lib/icy.so</span> <span class= code-output >;Current OMINAS configuration settings</span> <span class= code-output >;Required:</span> <span class= code-output >;1) OMINAS Core  . . . . . . . . . . . . .  CONFIGURED</span> <span class= code-output >;Contains the OMINAS code. If you select only one</span> <span class= code-output >;of the other packages, this will be included.</span> <span class= code-output >;Optional packages:</span> <span class= code-output >;2) Demo package . . . . . . . . . . . . .  CONFIGURED</span> <span class= code-output >;Contains the demo scripts and the data required</span> <span class= code-output >;to run then.</span> <span class= code-output >;These files are always present (in ominas/demo),</span> <span class= code-output >;this option is to set up the environment so that</span> <span class= code-output >;the demos can be run.</span> <span class= code-output >;3) SPICE Icy  . . . . . . . . . . . . . .  CONFIGURED</span> <span class= code-output >;Library maintained by JPL's NAIF (Navigation and Ancillary</span> <span class= code-output >;Information Facility, https://naif.jpl.nasa.gov/naif/toolkit.html,</span> <span class= code-output >;required to use spacecraft / planetary kernel files.</span> <span class= code-output >;</span> <span class= code-output >;Mission Packages:</span> <span class= code-output >;Kernels used for each mission's position and</span> <span class= code-output >;pointing data. If you do not already have them,</span> <span class= code-output >;an option to download them from PDS will be provided.</span> <span class= code-output >;If you already have them, you will need to provide</span> <span class= code-output >;the path to your kernel files.</span> <span class= code-output >;Note: the NAIF Generic Kernels (one of the optional</span> <span class= code-output >;data packages) are not required for the missions, they</span> <span class= code-output >;already contain a copy the subset of the generic kernel</span> <span class= code-output >;files they need.</span> <span class= code-output >;4) Cassini . . . . . . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;Subsetted, about 16 GB as of Dec/2016</span> <span class= code-output >;5) Galileo (GLL) . . . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;About 833 MB as of Dec/2016</span> <span class= code-output >;6) Voyager . . . . . . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;About 163 MB as of Dec/2016</span> <span class= code-output >;7) Dawn  . . . . . . . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;Subsetted, about 8 GB as of Jan/2017</span> <span class= code-output >;Data:</span> <span class= code-output >;8) NAIF Generic Kernels . . . . . . . . .  NOT CONFIGURED</span> <span class= code-output >;About 22 GB as of Dec/2016</span> <span class= code-output >;9) SEDR image data . . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;10) TYCHO2 star catalog . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;About 161 MB download, 665 MB unpacked</span> <span class= code-output >;11) SAO star catalog . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;About 19 MB download, 70 MB unpacked</span> <span class= code-output >;12) GSC star catalog . . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;13) UCAC4 star catalog . . . . . . . . . . NOT CONFIGURED</span> <span class= code-output >;About 8.5 GB download</span> <span class= code-output >;For more information, see</span> <span class= code-output >;https://ppenteado.github.io/ominas_doc/demo/install_guide.html</span> <span class= code-output >;Modify Current OMINAS configuration (Exit/Auto/Uninstall 1 2 ...)?  e</span> <span class= code-output >;Setup has completed. It is recommended to restart your terminal session before using OMINAS.</span> <span class= code-output >;You may want to try some of the tutorials at https://ppenteado.github.io/ominas_doc/demo/</span>   At this point, one can run a few tests of the enviroment: <span class= code-output > ;[ominas_test_8@cmp ominas]$ which ominas</span> <span class= code-output > ;alias ominas='/home/ominas_test_8/.ominas/ominas'</span> <span class= code-output > ;~/.ominas/ominas</span> <span class= code-output > ;[ominas_test_8@cmp ominas]$ which ominasde</span> <span class= code-output > ;alias ominasde='/home/ominas_test_8/.ominas/ominasde'</span> <span class= code-output > ;~/.ominas/ominasde</span>  Which shows both ominas and ominasde are defined. Use ominas to start and IDL  session in which to use OMINAS, and ominasde to start an IDL DE session in  which to use OMINAS.   Now, to check on the ominas_setup file, which sets the environment for the OMINAS  core and all currently set packages (in this example, only Core, Demo and Icy are set): <span class= code-output > ;[ominas_test_8@cmp ominas]$ cat ~/.ominas/ominas_setup.sh</span> <span class= code-output > ;#!/usr/bin/env bash</span> <span class= code-output > ;alias ominas=~/.ominas/ominas</span> <span class= code-output > ;alias ominasde=~/.ominas/ominasde</span> <span class= code-output > ;export OMINAS_DIR=/home/ominas_test_8/ominas</span> <span class= code-output > ;export DFLAG=true</span> <span class= code-output > ;source /home/ominas_test_8/ominas/config/ominas_env_def.sh</span> <span class= code-output > ;unset NV_Generic_kernels_DATA</span> <span class= code-output > ;unset NV_SEDR_DATA</span> <span class= code-output > ;unset NV_TYCHO2_DATA</span> <span class= code-output > ;unset NV_SAO_DATA</span> <span class= code-output > ;unset NV_GSC_DATA</span> <span class= code-output > ;unset NV_UCAC4_DATA</span>  Now, to check that the right environment is see from an OMINAS session: <span class= code-output > ;[ominas_test_8@cmp ominas]$ ominas -e 'spawn, env | grep NV '</span> <span class= code-output > ;IDL Version 8.5.1 (linux x86_64 m64). (c) 2015, Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation.</span> <span class= code-output > ;Installation number: XXXXX.</span> <span class= code-output > ;Licensed for use by: XXXXX</span> <span class= code-output > ;</span> <span class= code-output > ;NV_TRANSLATORS=/home/ominas_test_8/ominas/config/tab/translators.tab:/home/ominas_test_8/ominas/demo/data/translators.tab</span> <span class= code-output > ;NV_CONFIG=/home/ominas_test_8/ominas/config</span> <span class= code-output > ;NV_IO=/home/ominas_test_8/ominas/config/tab/io.tab</span> <span class= code-output > ;NV_SPICE=/home/ominas_test_8/ominas/config/spice</span> <span class= code-output > ;NV_ORBIT_DATA=/home/ominas_test_8/ominas/config/orb/</span> <span class= code-output > ;NV_ARRAY_DATA=/home/ominas_test_8/ominas/config/arr/dat/</span> <span class= code-output > ;NV_TRANSFORMS=/home/ominas_test_8/ominas/config/tab/transforms.tab:/home/ominas_test_8/ominas/demo/data/transforms.tab</span> <span class= code-output > ;NV_STATION_DATA=/home/ominas_test_8/ominas/config/stn/</span> <span class= code-output > ;NV_RING_DATA=/home/ominas_test_8/ominas/config/rings/</span> <span class= code-output > ;NV_FTP_DETECT=/home/ominas_test_8/ominas/config/tab/filetype_detectors.tab</span> <span class= code-output > ;NV_SPICE_KER=::/home/ominas_test_8/ominas/demo/data</span> <span class= code-output > ;NV_INS_DETECT=/home/ominas_test_8/ominas/config/tab/instrument_detectors.tab:/home/ominas_test_8/ominas/demo/data/instrument_detectors.tab</span>  Now, to check that the OMINAS paths show up inside an OMINAS IDL session: <span class= code-output > ;[ominas_test_8@cmp ominas]$ ominas -e 'print,pref_get( IDL_PATH )'</span> <span class= code-output > ;IDL Version 8.5.1 (linux x86_64 m64). (c) 2015, Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation.</span> <span class= code-output > ;Installation number: XXXXX.</span> <span class= code-output > ;Licensed for use by: XXXXX</span> <span class= code-output > ;</span> <span class= code-output > ;&lt;IDL_DEFAULT&gt;:+/home/ominas_test_8/ominas_data/idlastro/pro:+/home/ominas_test_8/ominas_data/icy/lib:+/home/ominas_test_8/ominas:+/home/ominas_test_8/ominas/util/xidl</span> <span class= code-output > ;[ominas_test_8@cmp ominas]$ ominas -e 'print,pref_get( IDL_DLM_PATH )'</span> <span class= code-output > ;IDL Version 8.5.1 (linux x86_64 m64). (c) 2015, Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation.</span> <span class= code-output > ;Installation number: XXXXX.</span> <span class= code-output > ;Licensed for use by: XXXXX</span> <span class= code-output > ;</span> <span class= code-output > ;&lt;IDL_DEFAULT&gt;:+/home/ominas_test_8/ominas_data/icy/lib</span>  With this environment, one can run some demo scripts, such as: <span class= code-output > ;ominas saturn_example</span> <span class= code-output > ;ominas jupiter_example</span>     Testing the environment with ominas_env_info         OMINAS includes a utilty script that prints out the most commonly relevant about your OMINAS environment, which can be useful for debugging        (both for yourself, and when you send us questions). It can be run by calling ominas_env_info, from an ominas/ominasde session. If an argument        is provided, it will be the filename where the output will be saved into (as opposed to printing it to the console). One example: <span class= code-output > ;[user@cmp ~]$ ominas</span> <span class= code-output > ;IDL Version 8.5.1 (linux x86_64 m64). (c) 2015, Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation.</span> <span class= code-output > ;Installation number: XXXXXX.</span> <span class= code-output > ;Licensed for use by: XXXXXX</span> <span class= code-output > ;</span> <span class= code-output > ;IDL&gt; ominas_env_info,'~/ominas_env_info.txt'</span>        Which produces: <span class= code-output > ;OMINAS variables:</span> <span class= code-output > ;OMINAS_RC=/home/user/.ominas</span> <span class= code-output > ;OMINAS_DEMO=/home/user/ominas/demo</span> <span class= code-output > ;OMINAS_DIR=/home/user/ominas</span> <span class= code-output > ;OMINAS_DATA=/home/user/ominas_data</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;NV variables:</span> <span class= code-output > ;NV_TRANSLATORS=/home/user/ominas/config/tab/translators.tab:/home/user/ominas/demo/data/translators.tab</span> <span class= code-output > ;NV_CONFIG=/home/user/ominas/config</span> <span class= code-output > ;NV_IO=/home/user/ominas/config/tab/io.tab</span> <span class= code-output > ;NV_SPICE=/home/user/ominas/config/spice</span> <span class= code-output > ;NV_ORBIT_DATA=/home/user/ominas/config/orb/</span> <span class= code-output > ;NV_ARRAY_DATA=/home/user/ominas/config/arr/dat/</span> <span class= code-output > ;NV_TRANSFORMS=/home/user/ominas/config/tab/transforms.tab:/home/user/ominas/demo/data/transforms.tab</span> <span class= code-output > ;NV_STATION_DATA=/home/user/ominas/config/stn/</span> <span class= code-output > ;NV_RING_DATA=/home/user/ominas/config/rings/</span> <span class= code-output > ;NV_FTP_DETECT=/home/user/ominas/config/tab/filetype_detectors.tab</span> <span class= code-output > ;NV_SPICE_KER=::/home/user/ominas/demo/data</span> <span class= code-output > ;NV_INS_DETECT=/home/user/ominas/config/tab/instrument_detectors.tab:/home/user/ominas/demo/data/instrument_detectors.tab</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;ominas_setup.sh:</span> <span class= code-output > ;#!/usr/bin/env bash</span> <span class= code-output > ;alias ominas=~/.ominas/ominas</span> <span class= code-output > ;alias ominasde=~/.ominas/ominasde</span> <span class= code-output > ;export OMINAS_DIR=/home/user/ominas</span> <span class= code-output > ;export OMINAS_DATA=/home/user/ominas_data</span> <span class= code-output > ;export OMINAS_RC=/home/user/.ominas</span> <span class= code-output > ;export DFLAG=true</span> <span class= code-output > ;source /home/user/ominas/config/ominas_env_def.sh</span> <span class= code-output > ;unset NV_Generic_kernels_DATA</span> <span class= code-output > ;unset NV_SEDR_DATA</span> <span class= code-output > ;unset NV_TYCHO2_DATA</span> <span class= code-output > ;unset NV_SAO_DATA</span> <span class= code-output > ;unset NV_GSC_DATA</span> <span class= code-output > ;unset NV_UCAC4_DATA</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;</span> <span class= code-output > ;IDL:</span> <span class= code-output > ;** Structure !VERSION, 8 tags, length=104, data length=100:</span> <span class= code-output > ;   ARCH            STRING    'x86_64'</span> <span class= code-output > ;   OS              STRING    'linux'</span> <span class= code-output > ;   OS_FAMILY       STRING    'unix'</span> <span class= code-output > ;   OS_NAME         STRING    'linux'</span> <span class= code-output > ;   RELEASE         STRING    '8.5.1'</span> <span class= code-output > ;   BUILD_DATE      STRING    'Nov 14 2015'</span> <span class= code-output > ;   MEMORY_BITS     INT             64</span> <span class= code-output > ;   FILE_OFFSET_BITS</span> <span class= code-output > ;                   INT             64</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;environment IDL_PATH</span> <span class= code-output > ;</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;environment IDL_DLM_PATH</span> <span class= code-output > ;</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;preferences IDL_PATH</span> <span class= code-output > ;&lt;IDL_DEFAULT&gt;:+/home/user/ominas_data/idlastro/pro:+/home/user/ominas:+/home/user/ominas/util/xidl:+/home/user/ominas_data/icy/lib</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;preferences IDL_DLM_PATH</span> <span class= code-output > ;&lt;IDL_DEFAULT&gt;:+/home/user/ominas_data/icy/lib</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;</span> <span class= code-output > ;Icy:</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;** ICY - IDL/CSPICE interface from JPL/NAIF (not loaded)</span> <span class= code-output > ;    Version: 1.8.0, Build Date: 05-JAN-2017, Source: ed.wright@jpl.nasa.gov</span> <span class= code-output > ;    Path: /home/user/ominas_data/icy/lib/icy.so</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;CSPICE_N0066</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;0 loaded kernels:</span> <span class= code-output > ;--------------------------------------------------------------------------------</span> <span class= code-output > ;</span> <span class= code-output > ;OMINAS repository:</span> <span class= code-output > ;On branch master</span> <span class= code-output > ;Your branch is up-to-date with 'origin/master'.</span> <span class= code-output > ;Last commit:</span> <span class= code-output > ;b373f70 Paulo Penteado Wed Jun 14 14:03:42 2017 -0700</span>   	Troubleshooting  	This section outlines several common sources of error which are due to 	OMINAS not being configured correctly.  	One of the most common configuration problems manifests as this error: <span class= code-output > % CSPICE_STR2ET: SPICE(NOLEAPSECONDS): [str2et_c-&gt;STR2ET-&gt;TTRANS] The variable that points to the leapseconds (DELTET/DELTA_AT)</span> <span class= code-output >                 could not be located in the kernel pool.  It is likely that the leapseconds kernel has not been loaded via</span> <span class= code-output >                 the routine FURNSH.</span> 	This error comes from the Icy toolkit. It specifically refers to the Leap 	Second Kernel file, however, as the lsk is usually the first kernel which 	is loaded, this error generally means that no kernels are being loaded.  	You can check which kernels have been loaded by entering the following 	IDL commands: <span class= code-output > cspice_ktotal, 'ALL', count</span> <span class= code-output > for i=0,count-1 do begin & cspice_kdata,i,'ALL',file,type,source,handle,found & print,i,file & endfor</span> 	A list will be populated with the currently loaded SPICE kernels, and 	their load order. If no kernels are loaded, then it is likely that a bad 	path was supplied to the kernel pools. Ensure that the kernel pool was 	successfully entered into the environemnt by using the  env  command at 	the terminal prompt. The kernel pool variable names follow a convention 	like so: &lt;MIS&gt;_SPICE_&lt;*K&gt;, where &lt;MIS&gt; is the abbreviated mission name, 	and &lt;*K&gt; is the type of kernel. Therefore, for Cassini, the IDL command: <span class= code-output > spawn, env | grep CAS_SPICE </span> 	will list the path to directories containing each type of Cassini kernel. 	If the variables are not present, the easiest fix might be to run the OMINAS 	installer again  	 source configure.sh  	From the ominas directory. Then, if the Cassini package shows as installed, 	select that option at the menu (4), to uninstall it. You will be presented with 	the possibility of preserving files the OMINAS installer previously downloaded, 	or deleting them. After the uninstallation is complete, you will be returned to 	the installer menu, and Cassini should show as not configured. Then select the Cassini 	option to set it up again.  	In some cases, a demo script will run and no error will appear to occur, 	but no pointing will be overlayed on the image. This error generally occurs 	due to the PCK kernels not being loaded or the CK kernels not being loaded 	in the correct order.  	When the frame kernel (FK) is not being loaded correctly for an image, 	Icy will return the following error: <span class= code-output > % CSPICE_PXFORM: SPICE(EMPTYSTRING): [pxform_c] String  from  has length zero.</span> 	If Icy is not installed, and a script is run, something similar to the 	following error may occur: <span class= code-output > % Attempt to call undefined procedure: 'CSPICE_STR2ET'.</span> 	In general, the undefined procudure may have any cspice prefix. Icy is 	either not configured correctly, or not installed. In IDL, check that 	the Icy path has been added to the IDL path as follows: <span class= code-output > path = pref_get('IDL_PATH')</span> <span class= code-output > print, path</span> <span class= code-output > dlm_path = pref_get('IDL_DLM_PATH')</span> <span class= code-output > print, dlm_path</span> 	The path variable should appear as a colon-separated list with 	&lt;IDL_DEFAULT&gt; as the first entry. Check that both Icy and OMINAS 	directories are added to the IDL_PATH, and that Icy is added to the 	IDL_DLM_PATH. If either Icy or OMINAS are not present, the best way to fix 	it probably is to get back into the OMINAS directory and run the configure.sh 	script to uninstall/install the Core, Demo or Icy packages again.   ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./mosaic_example-batch.html", "mosaic_example-batch.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "mosaic_example-batch.pro", "", "", " MOSAIC EXAMPLE    Created by Joe Spitale   Edited for manual by Mark Moretto     This example file demonstrates how to construct a mosaic using OMINAS.    The example can be executed from the UNIX command line using:   	  ominas mosaic_example-batch     or from within an OMINAS IDL session using:   	  @mosaic_example-batch     After the example stops, later code samples in this file may be executed    by pasting them onto the IDL command line. ;    This first section uses DAT_READ to read in the image and then displays    the image using tvim.   Read and display image     DAT_READ reads the image portion (im) and the label (label) and returns a    data descriptor (dd) containing the image and label and information obtained    through OMINAS' configuration tables.  If a file exists in the same directory    and with the same name as the image, except with the extension  .dh ,    then it is assumed to be a detached header and it is read as well.     The files w1352097259.1 and n1352037683.2 are Cassini wide- and narrow-    angle frames of Jupiter.  2000r.img and 2100r.img are Galileo SSI    images of Ganymede.     TVIM is called to display the image (im) in a new window with the y    coordinate as top-down: <span class= code-output > files = getenv('OMINAS_DIR')+'/demo/data/'+['n1350122987.2','/n1351469359.2']</span>  <span class= code-output > dd = dat_read(files, count=n)</span>  <span class= code-output > zoom = 0.3</span> <span class= code-output > for i=0, n-1 do tvim, dat_data(dd[i]), zoom=zoom, /order, /new</span> <span class= code-output > tvim, /list, wnum=ww</span>              Get camera, planets, rings and sun objects: <span class= code-output > _gd = {cd:obj_new(), gbx:obj_new(), dkx:obj_new(), sund:obj_new()}</span> <span class= code-output > gd = replicate(_gd, n)</span>  <span class= code-output > for i=0, n-1 do gd[i].cd = pg_get_cameras(dd[i])</span> <span class= code-output > for i=0, n-1 do gd[i].gbx = pg_get_planets(dd[i], od=gd[i].cd, name='JUPITER')</span> <span class= code-output > for i=0, n-1 do gd[i].dkx = pg_get_rings(dd[i], pd=gd[i].gbx, od=gd[i].cd)</span> <span class= code-output > for i=0, n-1 do gd[i].sund = pg_get_stars(dd[i], od=gd[i].cd, name='SUN')</span>    Compute limb: <span class= code-output > limb_ptd = objarr(n)</span> <span class= code-output > for i=0, n-1 do limb_ptd[i] = pg_limb(gd=gd[i])</span>   Navigate on limbs automatically     PG_FARFIT finds the limb to within a few pixels.  In reality, you would    want to refine the pointing by scanning for the limb and performing a    least-squares fit, but for the purposes of clarity in this example, the    inital fit will do: <span class= code-output > edge_ptd = objarr(n)</span> <span class= code-output > for i=0, n-1 do edge_ptd[i] = pg_edges(dd[i], edge=10)</span>    Run PG_FARFIT to obtain the offsets between the computed points (limb_ptd)    and the image edges (edge_ptd) and apply the offsets with pg_repoint: <span class= code-output > dxy = dblarr(2,n)</span> <span class= code-output > for i=0, n-1 do dxy[*,i] = pg_farfit(dd[i], edge_ptd[i], [limb_ptd[i]], ns=[5,5])</span> <span class= code-output > for i=0, n-1 do pg_repoint, dxy[*,i], 0d, gd=gd[i]</span>    Recompute the geometry now that the pointing was corrected: <span class= code-output > for i=0, n-1 do limb_ptd[i] = pg_limb(gd=gd[i])</span> <span class= code-output > for i=0, n-1 do  pg_draw, limb_ptd[i], wnum=ww[i]</span>              See the PG example for examples of least-squares fits to image features    Correct photometry     Here, a crude photometric correction is performed for the purposes    of this example.     In addition to the corrected images, the output descriptors, dd_pht,    will contain the photometric angles in their user data arrays with    the names 'EMM', 'INC' and 'PHASE': <span class= code-output > dd_pht = objarr(n)</span> <span class= code-output > for i=0, n-1 do dd_pht[i] = pg_photom(dd[i], gd=gd[i], $</span> <span class= code-output >   refl_fn='pht_refl_minneart',refl_parm=[0.9d], outline=limb_ptd[i])</span>  <span class= code-output > for i=0, n-1 do tvim, dat_data(dd_pht[i]), ww[i]</span>             Project maps     Note that all map projections use the same map descriptor.     Also, aux=['EMM'] is used with pg_map to direct it to reproject    the emmision angle array that was produced and stored in the data descriptor    by pg_photom.  That array will be needed by pg_mosaic: <span class= code-output > map_xsize = 800</span> <span class= code-output > map_ysize = 400</span>    Create the map descriptor to use for the projections: <span class= code-output > md = pg_get_maps(/over, gbx = pd1, $</span> <span class= code-output >   name='JUPITER',$</span> <span class= code-output >   projection='RECTANGULAR', $</span> <span class= code-output >   fn_data=ptr_new(), $</span> <span class= code-output >   size=[map_xsize,map_ysize], $</span> <span class= code-output >   origin=[map_xsize,map_ysize]/2 )</span>  <span class= code-output > Do the map projections, frmo objects dd_pht, using map descriptor md:</span>      dd_map = objarr(n)      for i=0, n-1 do dd_map[i] = pg_map(dd_pht[i], md=md, gd=gd[i], aux=['EMM'])     Display the results: <span class= code-output > for i=0, n-1 do tvim, dat_data(dd_map[i]), /new</span>             Introducing wind profiles   Use the commented commands instead to include a zonal wind profile in  the projection: <span class= code-output > for i=0, n-1 do $</span> <span class= code-output >   dd_map[i] = pg_map(dd_pht[i], md=md, gd=gd[i], aux=['EMM'], $</span> <span class= code-output >   shear_fn='pm_shear_zonal', $</span> <span class= code-output >   shear_data={vel:cos((dindgen(181)-90)*!dpi/180d) * 100d, $</span> <span class= code-output >   dt:bod_time(gd[i].cd)-bod_time(gd[0].cd)})</span>   Construct the mosaic     The combination function 'emm' combines the maps    using wighting proprtional to emm^x, where emm is the emmision    cosine.  It also imposes a minimum emmision cosine, emm0.  Note    that the emission angles were computed by pg_photom and    reprojected by pg_map, as directed by the 'aux' keyword: <span class= code-output > dd_mosaic = pg_mosaic(dd_map, mosaic=mosaic, $</span> <span class= code-output >   wt='emm', comb='sum', data={x:5, emm0:cos(85d*!dpi/180d)})</span> <span class= code-output > tvim, mosaic, /new</span>        Save the mosaic and map info     To read the mosaic and projection info: <span class= code-output > dd = dat_read('./data/test.msc', mosaic, label)</span> <span class= code-output > md = pg_get_maps(dd)</span>  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./multiinstrument_example.html", "multiinstrument_example.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "multiinstrument_example.pro", "", "", " MULTI-INSTRUMENT EXAMPLE     This script demonstrates reading Cassini RADAR SAR, VIMS and ISS images and    projecting them onto an orthographical map for display as a RGB composite.     The SAR data file used, BIFQI22N068_D045_T003S01_V02.IMG, is too large (202 MB)    to include with the OMINAS distribution. This script will look for the file    under ~/ominas_data/sar/, and if not found, will download it from    PDS&lt;http://pds-imaging.jpl.nasa.gov/data/cassini/cassini_orbiter/CORADR_0045/DATA/BIDR/BIFQI22N068_D045_T003S01_V02.ZIP&gt;,    then unzip it.     Setup: The instrument detectors, translators and transforms must contain the    RADAR, ISS and VIMS definitions, as is included in demo/data/instrument_detectors.tab,    demo/data/translators.tab, and demo/data/transforms.tab. The PDS detector    and io functions must also be set up    in the corresponding tables, as is in config/tab/filetype_detectors.tab    and config/tab/io.tab.     This example requires SPICE/Icy to have been setup. It can be run just by doing: <span class= code-output > .run multiinstrument_example</span>    From within an OMINAS IDL session.     Troubleshooting: This example uses ISS, VIMS and RADAR data, so each of these    3 might independently fail. If this example fails, it may be helpful to try first    running the 3 individual instrument's example scripts first: jupiter_example.pro (ISS),    vims_example.pro and radar_example.pro, to see which instruments work in your    setup and which do not.   Read and display SAR file     Download the Cassini RADAR SAR image and unzip it, if needed: <span class= code-output > ;Download the SAR file, if needed</span> <span class= code-output > ldir='~/ominas_data/sar'</span> <span class= code-output > spawn,'eval echo '+ldir,res</span> <span class= code-output > ldir=res</span> <span class= code-output > img=ldir+path_sep()+'BIFQI22N068_D045_T003S01_V02.IMG'</span> <span class= code-output > if ~file_test(img,/read) then begin</span> <span class= code-output >   print,'SAR file needed for the demo not found. Downloading it from PDS...'</span> <span class= code-output >   p=pp_wget('http://pds-imaging.jpl.nasa.gov/data/cassini/cassini_orbiter/CORADR_0045/DATA/BIDR/BIFQI22N068_D045_T003S01_V02.ZIP',localdir=ldir)</span> <span class= code-output >   p.geturl</span> <span class= code-output >   print,'ZIP file downloaded, decompressing it...'</span> <span class= code-output >   file_unzip,ldir+path_sep()+'CORADR_0045/DATA/BIDR/BIFQI22N068_D045_T003S01_V02.ZIP',/verbose</span> <span class= code-output > endif</span> <span class= code-output > ;Read the file</span> <span class= code-output > dd=dat_read(img)</span>    Saturate the data to make the image better looking, since this is just for display    purposes: <span class= code-output > da=dat_data(dd)</span> <span class= code-output > dat_set_data,dd,0&gt;da&lt;1d0</span>    Show it a 1/20 resolution: <span class= code-output > tvim,0d0&gt;da&lt;1d0,zoom=0.05,/order,/new</span>         Read and display VIMS and ISS files       Set up a hash containing the file names and precomputed pointing offsets: <span class= code-output > hdxy=hash()</span> <span class= code-output > hdxy['data/CM_1503358311_1_ir_eg.cub']=[5d0,-1d0]</span> <span class= code-output > hdxy['data/W1477456695_6.IMG']=[0d0,0d0]</span> <span class= code-output > files=getenv('OMINAS_DIR')+'/demo/data/'+(hdxy.keys()).toarray()</span> <span class= code-output > nv = n_elements(files)</span> <span class= code-output > ddv = dat_read(files)</span> <span class= code-output > sb=bytarr(nv)</span> <span class= code-output > for i=0,nv-1 do sb[i]=strmatch(files[i],'*.IMG')</span>      Create an array of global descriptors and populate it: <span class= code-output > gdv = replicate({cd:obj_new(), gbx:obj_new(), dkx:obj_new(), sund:obj_new()}, nv)</span> <span class= code-output > for i=0, nv-1 do gdv[i].cd = pg_get_cameras(ddv[i])</span> <span class= code-output > for i=0, nv-1 do gdv[i].gbx = pg_get_planets(ddv[i], od=gdv[i].cd, name='TITAN')</span> <span class= code-output > for i=0, nv-1 do gdv[i].sund = pg_get_stars(ddv[i], od=gdv[i].cd, name='SUN')</span>      Apply the pointing shifts and compute the limbs: <span class= code-output > dxy = dblarr(2,nv)</span> <span class= code-output > limb_psv=objarr(nv)</span> <span class= code-output > for i=0, nv-1 do dxy[*,i] = hdxy[file_basename(files[i])]</span> <span class= code-output > for i=0, nv-1 do pg_repoint, dxy[*,i], 0d, gd=gdv[i]</span> <span class= code-output > for i=0, nv-1 do limb_psv[i] = pg_limb(gd=gdv[i])</span>      Display the VIMS and ISS images: <span class= code-output > band=70</span> <span class= code-output > for i=0,1 do begin</span> <span class= code-output >   zoom=sb[i] ? 1 : 8</span> <span class= code-output >   offset=sb[i] ? [200d0,200d0] : [-15,-10]</span> <span class= code-output >   sband=sb[i] ? 0 : band</span> <span class= code-output >   tvim, (dat_data(ddv[i]))[*,*,sband], $</span> <span class= code-output >     zoom=zoom,/order, /new,offset=offset,$</span> <span class= code-output >     xsize=600,ysize=600</span> <span class= code-output >   pg_draw, limb_psv[i]</span> <span class= code-output > endfor</span>                     Correct the illumination with a Lambertian function: <span class= code-output > dd_phtv = objarr(nv)</span> <span class= code-output > for i=0, nv-1 do dd_phtv[i] = pg_photom(ddv[i], gd=gdv[i], refl_fn='pht_lamb', $</span> <span class= code-output >   refl_parm=[0.9d], outline=limb_psv[i])</span>    Map images     SAR data is provided in PDS as a map on the target, in an oblique rectangular projection, shown above.    To use it, first we need to obtain the proper map descriptor from the data object: <span class= code-output > mdr=pg_get_maps(dd)</span>    Now we will display it in an orthogonal projection. First we define it: <span class= code-output > map_xsize = 1000</span> <span class= code-output > map_ysize = 1000</span>    Create the new map descriptor: <span class= code-output > mdp= pg_get_maps(/over,  $</span> <span class= code-output >   name='TITAN',$</span> <span class= code-output >   projection='ORTHOGRAPHIC', $</span> <span class= code-output >   size=[map_xsize,map_ysize], $</span> <span class= code-output >   origin=[map_xsize,map_ysize]/2, $</span> <span class= code-output >   center=[0d0,-0.6d0*!dpi])</span>    Now, do the projection of all 3 images: <span class= code-output > for i=0,nv-1 do dat_set_data,dd_phtv[i],(dat_data(dd_phtv[i]))[*,*,sb[i] ? 0 : band]</span> <span class= code-output > dd_mapv = objarr(nv)</span> <span class= code-output > for i=0, nv-1 do dd_mapv[i] = pg_map(dd_phtv[i], md=mdp, gd=gdv[i], aux=['EMM'])</span> <span class= code-output > dd_map=pg_map(dd,md=mdp,cd=mdr,pc_xsize=500,pc_ysize=500)</span>    Renormalize the data for display, so that all 3 are in the 0-1 range: <span class= code-output > mds=[dd_map,dd_mapv]</span> <span class= code-output > for i=0,2 do begin</span> <span class= code-output >   mdd=dat_data(mds[i])</span> <span class= code-output >   mddr=minmax(mdd)</span> <span class= code-output >   dat_set_data,mds[i],(mdd-mddr[0])/(mddr[1]-mddr[0])</span> <span class= code-output > endfor</span>    Visualize the result as 3 planes in grim: <span class= code-output > grim,mds,cd=replicate(mdp,3),/new;,overlays=['planet_grid']</span>        ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./multimission_example-batch.html", "multimission_example-batch.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "multimission_example-batch.pro", "", "", " MULTI-MISSION EXAMPLE    Created by Joe Spitale      This example file loads images from various missions onto planes of a     GRIM window and computes the centers of all available planets for each     image to demonstrates OMINAS' multi-mission capabilities.      This example file can be executed from the UNIX command line using: <span class= code-output >ominas multimission_example.pro</span>     or from within an OMINAS IDL session using: <span class= code-output >@multimission_example.pro</span>    Load the 3 images into grim, with planet centers as overlays: <span class= code-output > grim, over='planet_center', dat_read(getenv('OMINAS_DIR')+'/demo/data/'+ $</span> <span class= code-output > ['N1350122987_2.IMG','2100r.img','c3440346.gem'])</span>    The Jupiter observation (from Cassini, the first one displayed in grim) looks like:          And the Ganymede observation (from Galileo) looks like:          (that image is in the second plane in grim: use the     Plane-&gt;next menu option, or click the black double right-arrow button on the left     side of the top toolbar to switch planes)     And the Saturn observation (from Voyager) looks like:          (that image is in the third plane in grim: use the     Plane-&gt;next menu option, or click the black double right-arrow button on the left     side of the top toolbar to switch planes)  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./override_example-batch.html", "override_example-batch.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "override_example-batch.pro", "", "", "                            OVERRIDE EXAMPLE    Created by Joe Spitale    This example demonstrates the use of OMINAS with no translators.  All   geometric values are manually entered.  I don't know why you would   want to do this, but it's a useful way to test OMINAS without needing   any translator packages installed.    This example file can be executed from the UNIX command line using    	ominas override_example-batch    or from within IDL using    	@override_example-batch    After the example stops, later code samples in this file may be executed by   pasting them at the IDL command prompt.  READ AND DISPLAY IMAGE  	    DAT_READ is OMINAS' program for reading data files.  It figures out   file readers, sorts out translators (or lack thereof), etc.  It returns   a data descriptor (dd) -- an object containing the data array and a whole   bunch of other stuff, most of which you'll probably never use.      dd = dat_read('./data/c3440346.gem', im, label)    TVIM is OMINAS' basic image display program.  It's like WINDOW, except   it sets up the data coordinate system so that all of your points will   display properly.      tvim, im, zoom=0.5, /order, /new    OBTAIN GEOMETRY    Here we obtain the objects that describe the geometry of the data set   contained in the data descriptor.  The camera descriptor (cd) contains   the camera position, orientation, and relevant constant parameters.  The   other objects -- planet descriptor (pd) and ring descriptor (rd) --   describe the states of those bodies, as seen from the camera at the   time of the observation.  /OVERRIDE tells the PG_GET_* programs not to   call the translators.  Instead all values are entered manually, like   in the good old days.     Camera descriptor: <span class= code-output >cd = pg_get_cameras(dd, /override, $</span> <span class= code-output >       name='VGR1_ISS_NA', $</span> <span class= code-output >       orient= $</span> <span class= code-output >            [ [-0.177287575, -0.966450211, -0.185857758 ], $</span> <span class= code-output >              [ 0.507898045, -0.251604865,  0.823853487 ], $</span> <span class= code-output >              [ 0.842976092, -0.051662194, -0.535464589 ] ], $</span> <span class= code-output >       avel=tr([0.0, 0.0, 0.0]), $</span> <span class= code-output >       pos=tr([0.0, 0.0, 0.0]), $</span> <span class= code-output >       vel=tr([0.0, 0.0, 0.0]), $</span> <span class= code-output >       time=972603249.d, $</span> <span class= code-output >       scale=[7.858656e-06,7.858656e-06], $</span> <span class= code-output >       oaxis=[499.0,499.0], $</span> <span class= code-output >       size=[1000,1000], $</span> <span class= code-output >       fn_focal_to_image='cam_focal_to_image_linear', $</span> <span class= code-output >       fn_image_to_focal='cam_image_to_focal_linear', $</span> <span class= code-output >       fi_data=ptr_new() $</span> <span class= code-output >  )</span>    Planet descriptor: <span class= code-output >pd = pg_get_planets(dd, od=cd, /override, $</span> <span class= code-output >       name='SATURN', $</span> <span class= code-output >       orient= $</span> <span class= code-output >            [ [-0.254669368,  0.963251789,  0.085378596], $</span> <span class= code-output >              [-0.962535206, -0.260997177,  0.073528563], $</span> <span class= code-output >              [ 0.093110093, -0.063454432,  0.993631746] ], $</span> <span class= code-output >       avel=tr([0.0854, 0.0732, 0.9937])*1.74e-4, $</span> <span class= code-output >       pos=tr([-23433172000.0, -6105736000.0, -1223129375.0]), $</span> <span class= code-output >       vel=[ tr([9500.0, 0.0, 0.0]), $</span> <span class= code-output >             tr([0.0, 0.1, 0.0]) ], $</span> <span class= code-output >       time=972603249.d, $</span> <span class= code-output >       radii=[60268000.,60268000.,54364000.], $</span> <span class= code-output >       lora=0.0 $</span> <span class= code-output > )</span>    Ring descriptor: <span class= code-output >rd = pg_get_rings(dd, pd=pd, od=cd, /override, $</span> <span class= code-output >       name='MAIN_RING_SYSTEM', $</span> <span class= code-output >       gd={xd0:pd}, $</span> <span class= code-output >       orient= $</span> <span class= code-output >            [ [-0.254669368,  0.963251789,  0.085378596], $</span> <span class= code-output >              [-0.962535206, -0.260997177,  0.073528563], $</span> <span class= code-output >              [ 0.093110093, -0.063454432,  0.993631746] ], $</span> <span class= code-output >       avel=tr([0.0854, 0.0732, 0.9937])*1.74e-4, $</span> <span class= code-output >       pos=tr([-23433172000.0, -6105736000.0, -1223129375.0]), $</span> <span class= code-output >       vel=[tr([9500.0, 0.0, 0.0]), $</span> <span class= code-output >            tr([0.0, 0.1, 0.0]) ] , $</span> <span class= code-output >       time=972603249.d, $</span> <span class= code-output >       sma=tr([75000000.0,136800000.0]), $</span> <span class= code-output >       ecc=tr([0.0, 0.0]) $</span> <span class= code-output > )</span>    Star descriptor: <span class= code-output >sund = pg_get_stars(dd, od=cd, /override, $</span> <span class= code-output >       name='SUN', $</span> <span class= code-output >       pos=tr([1.421392d12,4.3105676d10,-4.3613585d10]) $</span> <span class= code-output >  )</span>  -   MAKE A GENERIC DESCRIPTOR    At this level, a generic descriptor is just a convenient shorthand   to keep all of your object descriptors together.  All PG programs   accept individual descriptor as well as generic descriptors as   arguments.  GBX means any subclass of GLOBE, DKX means any SUBCLASS   of DSK.  These are arguments to the PG programs that we'll be working   with.      gd = {cd:cd, gbx:pd, dkx:rd, sund:sund}    Here are a couple of tips regarding generic descriptors:     1) I never use them like this.     2) They are nevertheless a handy way to keep the full geometry of a       scene in one place, and they're used all over the place way down in       the core.   COMPUTE OVERLAY ARRAYS    Here we compute various overlays using some PG programs.  The overlay   arrays are contained in POINT objects; limb_ptd, ring_ptd, etc.  Note   that the generic descriptor does not always contain enough information   to get the job done.  PG_CENTER requires an explicit bx (arbitrary body)   argument to tell it which of the bodies in gd are intended.  PG_HIDE   hide the given points with respect to whatever bodies you give it.      limb_ptd = pg_limb(gd=gd, count=nlimb) & pg_hide, limb_ptd, gd=gd     ring_ptd = pg_disk(gd=gd, count=nring) & pg_hide, ring_ptd, gd=gd     shadow_ptd = pg_shadow_globe(gd=gd, ring_ptd)     center_ptd = pg_center(gd=gd, bx=pd)    PUT THE OVERLAYS IN ONE ARRAY    I seriously never do things this way, but I guess it illustrates various   ways to use the software.  We're putting all of the POINT objects into   one array, and making corresponding arrays for the colors, plotting   symbols, etc.    The CT programs are used to get color indices for some basic colors   without having to know what type of visual class you're using.      object_ptd = [center_ptd,limb_ptd,ring_ptd,shadow_ptd]     colors = [!p.color,ctyellow(),ctred(),ctred(),ctblue()]     psyms=[1,3,3,3,3]     psizes=[0.5]     plabels = [cor_name(pd), '', '']    DRAW EVERYTHING  	    PG_DRAW is the basic program for drawing overlays in OMINAS.  It does   the same thing as PLOTS (which you could use instead), but it accepts   POINT objects are arguments and allows you to use specify multiple colors   symbols, etc.  PG_DRAW also accepts raw points arrays (i.e. 2 x np).      pg_draw, object_ptd, $                 colors=colors, psyms=psyms, psizes=psizes, plabel=plabels    MAKE IT OFFICIAL BY ADDING GRIDS  	    PG_GRID will put a grid on just about anything.  At least anything   with a surface described by two angle-like coordinates: a planet, a map,   the sky, a disk (in that case, the radius is one of the coordinates), etc.   Those kinds of coordinate systems are referred to as surface coordinate   systems in OMINAS.  Because their representations are analogous, their   corresponding objects can be pretty much interchanged all over the place.   This is such a place.  On that topic, coordinate systems using image   points (i.e., CAMERA and MAP image systems) are similarly interchangeable.      grid_ptd = pg_grid(gd=gd, bx=pd)        pg_hide, grid_ptd, gd=gd, bx=pd, /assoc        pg_hide, grid_ptd, gd=gd, bx=rd     pg_draw, grid_ptd, color=ctblue()     dgrid_ptd = pg_grid(gd=gd, bx=rd) & pg_hide, dgrid_ptd, gd=gd, bx=pd    pg_draw, dgrid_ptd, color=ctpurple()    DEFINE A RING SECTOR    Let's define a sector so we can make a plot of intensity vs. radius   or longitude.  First, we'll specify the longitude and radius limits   explicitly.  Note that we're working in meters here because all of our   inputs for the descriptors were in meters.  Units in OMINAS are   determined by the translators.  Of course, all angles are in radians.      lon = [175,177] * !dpi/180d     rad = [65000,138000] * 1000d     tvim,im     outline_ptd = pg_ring_sector(gd=gd, rad=rad, lon=lon)     pg_draw, outline_ptd, col=ctgreen()    MANUALLY DEFINE A RING SECTOR    You can also define the ring sector using the mouse.  Just leave out   the bounds in the call to PG_RING_SECTOR.  Have we fixed that thing   where the sector wraps around wrong?  You'd think so by now.      tvim,im     outline_ptd = pg_ring_sector(gd=gd)     pg_draw, outline_ptd, col=ctgreen()               PLOT INTENSITY VS. RADIUS AND LONGITUDE    The POINT object returned by PG_RING_SECTOR can be used as an input   to PG_PROFILE_RING to produce radial and azimuthal profiles.   PG_PROFILE_RING returns a data descriptor containing the plot.  It   also outputs the profile itself and the disk coordinates of each point   in the profile so you don't have to dereference the data descriptor.    Radial scan: <span class= code-output >  .. image:: graphics/saturn_sector_2.jpeg</span>  <span class= code-output > dd_prof = pg_profile_ring(dd, gd=gd, outline_ptd, $</span> <span class= code-output >                                         dsk_pts=dsk_pts, profile=profile)</span> <span class= code-output > window, /free, xs=500, ys=300</span> <span class= code-output > plot, dsk_pts[*,0], profile</span>    Azimuthal scan:            dd_prof = pg_profile_ring(dd, gd=gd, outline_ptd, /azimuthal, $                                             dsk_pts=dsk_pts, profile=profile)     window, /free, xs=500, ys=300     plot, dsk_pts[*,1], profile, /yno   ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("./pg_example-batch.html", "pg_example-batch.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "pg_example-batch.pro", "", "", "                              PG EXAMPLE    Created by Joe Spitale   Edited by Mark Moretto for manual     This example demonstrates various capabilities of the PG programming    interface, OMINAS' command-line API.  It can be executed from the UNIX    command line using: <span class= code-output > ominas pg_example-batch</span>  <span class= code-output >or from within an OMINAS IDL session using:</span> <span class= code-output >@pg_example-batch</span>     After the example stops, later code samples in this file may be executed by     pasting them onto the IDL command line.   READ AND DISPLAY IMAGE        Use DAT_READ to read the image and then display the image using TVIM.    With DAT_READ, it is not necessary to specify the file format.  DAT_READ    uses your file type detectors to determine the format, and gets the    appropriate reader from your I/O table.  DAT_READ returns a data    descriptor (dd), which contains all of the data associated with the file.    For convenience, it also returns the data array (im) and header (label)    in its second and third arguments.     TVIM is called to display the image (im) in a new window with the y    coordinate as top-down: <span class= code-output > dd = dat_read('./demo/data/N1350122987_2.IMG', im, label)</span> <span class= code-output > tvim, im, zoom=0.75, /order, /new</span>   OBTAIN GEOMETRY     This section obtains the geometric information describing the scene.    Note that there is no reference to the source of the this information.    That is handled by the translator system, which is controlled by    a series of translators tables telling OMINAS which translators to use    for a given instrument.  The translators tables are parsed by DAT_READ,    which stores the list of translators in the data descriptor.     If you are using the default demo configuration, then the geometry    data are obtained via the NAIF/SPICE translator package and the detached    header package.  The NAIF/SPICE translators use database files    provided by NAIF or by individual projects.  The detached header    translators read and write geometry descriptors in a text-based file    that resides in the same directory as the data file and has the    extension '.dh'.  Because the detached header translator dh_std_input    appears before the Cassini Spice input translator in the default    translators table, the descriptors are taken from the detached header    if it exists, and if the relevant descriptors are present.  Otherwise,    they are obtained from the SPICE kernels.       cd = pg_get_cameras(dd)                        ; CAMERA descriptor      pd = pg_get_planets(dd, od=cd, count=npd)      ; PLANET descriptor(s)      rd = pg_get_rings(dd, pd=pd, od=cd, count=nrd) ; RING descriptor(s)      sund = pg_get_stars(dd, od=cd, name='SUN')     ; STAR descriptor for Sun     The calls to PG_GET_PLANETS, PG_GET_RINGS, and PG_GET_STARS include    an observer descriptor, od.  Without this, it would not be possible    to perform aberration corrections on the returned objects.  In that    case, the returned descriptors would represent the real states of the    bodies at the time of observation at their respective positions rather    than from the point of view of the observer.     Note the 'name' keyword in the call to PG_GET_STARS. This is a CORE    attribute, so it may be applied to any body.  For example, if you are    only interested in Jupiter and the Galilean satellites, you could    write: <span class= code-output > pd = pg_get_planets(dd, od=cd, $</span> <span class= code-output >          name=['JUPITER', 'IO', 'EUROPA', 'GANYMEDE', 'CALLISTO'])</span>   INSTRUMENT-SPECIFIC USAGE     It is possible to communicate directly with the translators from the    PG API via the use of translator keywords.  Translator keywords are    keyword=value strings that are passed directly to the translator system    with no interpretation by OMINAS.  They may be permanently coded in    the translators table to be passed to a specific translator, or    transient inputs may be provided to the PG_GET_* programs as a string    argument.  In the latter case, they are accessible to all translators    pertaining to that PG_GET_* program and they precede translator keywords    from the translators table.     Here are some examples of controlling the NAIF/SPICE interface in a    call to PG_GET_CAMERAS: <span class= code-output > cd = pg_get_cameras(dd, 'klist=my_klist.txt')     ; Use personal kernel</span> <span class= code-output >                                                   ; list file.</span>  <span class= code-output > cd = pg_get_cameras(dd, 'ck_in=./test.bc')        ; Use a specified C kernel.</span>  <span class= code-output > cd = pg_get_cameras(dd, 'ck_in=./auto')           ; Use the C-kernel auto-</span> <span class= code-output >                                                   ; detect function.</span>  <span class= code-output > cd = pg_get_cameras(dd, 'klist=my_klist.txt, $    ; Multiple arguments</span> <span class= code-output >                          ck_in=test.bc;test1.bc') ; separated by commas;</span> <span class= code-output >                                                   ; multiple elements</span> <span class= code-output >                                                   ; separated by semicolons.</span>   MAKE A GENERIC DESCRIPTOR     Here we go with the generic descriptors again.  The story with these    things is that long ago before GRIM was summoned from the lowest levels    of heck, OMINAS (or MINAS, or NV) was purely command-based.  That's    what you want because you can always build a GUI on top of it, but    it doesn't really work to start with a graphical tool and try to    build a command-based system out of that.  Therefore, I decided to have    mercy on the poor jerks (mostly me up to now) who had to type (really    paste) all of this nonsense in.  The generic descriptor was therefore    spawned as a way to cut down on all the cd=this, pd=that, bx=whatever    that tends to go on.  So we just shove it all into one structure and    all of the PG programs know to look in there if one is given.  Any    explicit descriptor arguments take precedence, though.  So if these    things make you happy, then you're welcome.  I rarely use them in this    way.  They live on because it turns out they have amazing utility in    other ways.  So anyway, it's like this: <span class= code-output > gd = {cd:cd, gbx:pd, dkx:rd, sund:sund}</span>   COMPUTE OVERLAY ARRAYS     These commands compute the center, limb, and terminator of each planet,    as well as the edges of the rings.  Note that the terminator is computed    using PG_LIMB with the Sun as the observer.: <span class= code-output > limb_ptd = pg_limb(gd=gd) & pg_hide, limb_ptd, gd=gd, bx=rd, /rm</span> <span class= code-output >           pg_hide, limb_ptd, /assoc, gd=gd, bx=pd, od=sund</span> <span class= code-output > ring_ptd = pg_disk(gd=gd) & pg_hide, ring_ptd, gd=gd, bx=pd</span> <span class= code-output > term_ptd = pg_limb(gd=gd, od=gd.sund) & pg_hide, term_ptd, gd=gd, bx=pd, /assoc</span> <span class= code-output > center_ptd = pg_center(gd=gd, bx=pd)</span>   SET UP FOR PLOTTING    This just makes the calls to PG_DRAW a little easier, since they will   need to be repeated every time we change things and recompute.  We put   all of the POINT descriptors in one array and then make corresponding   arrays for the plot parameters.      object_ptd = [center_ptd,limb_ptd,ring_ptd,term_ptd]     colors=[make_array(npd,value=!p.color), $             make_array(npd,value=ctyellow()), $             make_array(2*nrd,value=ctred()), $             make_array(npd,value=ctgreen())]     psyms=[make_array(npd,value=1), $            make_array(npd,value=3), $            make_array(2*nrd,value=3), $            make_array(npd,value=3)]     psizes=1.0     csizes=0.75     plabels=[cor_name(pd), $             make_array(npd,value=''), $             make_array(2*nrd,value=''), $             make_array(npd,value='')]   DRAW EVERYTHING      Now we can do a nice simple call to PG_DRAW to draw everything: <span class= code-output >   pg_draw, object_ptd, $</span> <span class= code-output >             col=colors, psy=psyms, psi=psizes, csi=csizes, pl=plabels</span>   FIRST-CUT AUTOMATIC REPOINTING     Refine the pointing of the spacecraft by using PG_FARFIT, which searches    the image for a pattern matching the edges calculated using the    geometry descriptors.  First scan the images for edges, ignoring the    a 10-pixel zone at the edge of the image: <span class= code-output > edge_ptd = pg_edges(dd, edge=10)</span> <span class= code-output > pg_draw, edge_ptd</span>          Next, use PG_FARFIT to find the x/y offset that best matches the limb of    planet 0 (which is Jupiter because the translators return the observation    target as number 0 if it is known): <span class= code-output > dxy = pg_farfit(dd, edge_ptd, [limb_ptd[0]])</span>    BTW, you have been duped.  PG_FARFIT fails a lot because the search    is pretty sparse.  We cherry-picked an image that usually works pretty    well.  The sparse search makes PG_FARFIT pretty fast, though.  Ok,    now repoint using the farfit solution: <span class= code-output > pg_repoint, dxy, gd=gd</span>    Now that the camera pointing has changed, everything has to be recomputed,    just like before:  <span class= code-output >limb_ptd = pg_limb(gd=gd) & pg_hide, limb_ptd, gd=gd, bx=rd, /rm</span> <span class= code-output >       pg_hide, limb_ptd, /assoc, gd=gd, bx=pd, od=sund</span> <span class= code-output >ring_ptd = pg_disk(gd=gd) & pg_hide, ring_ptd, gd=gd, bx=pd</span> <span class= code-output >center_ptd = pg_center(gd=gd, bx=pd)</span> <span class= code-output >term_ptd = pg_limb(gd=gd, od=gd.sund) & pg_hide, term_ptd, gd=gd, bx=pd, /assoc</span> <span class= code-output >object_ptd = [center_ptd,limb_ptd,ring_ptd,term_ptd]</span>    And now we can see the result:      tvim, im     pg_draw, object_ptd, $                 colors=colors, psyms=psyms, psizes=psizes, plabel=plabels         MANUALLY REPOINT THE GEOMETRY     If you have a little time, you can just drag the pointing around    by hand.  We just need to get it close enough to really nail down in    the next section.  There's a good chance PG_FARFIT really dropped    the ball on the last step anyway.  Just paste this in and follow    the directions: <span class= code-output >tvim, im</span> <span class= code-output >dxy = pg_drag(object_ptd, dtheta=dtheta, axis=center_ptd[0])</span>    Like PG_FARFIT, PG_DRAG returns an x/y offset that can be input to    PG_REPOINT, but it also returns a twist offset, so we need to input    that and an axis to PG_REPOINT: <span class= code-output >pg_repoint, dxy, dtheta, axis=center_ptd[0], gd=gd</span>    And now you have to recompute and redraw again.  It's the same as    above.  Please don't make me write it out.   PRECISE EDGE SCAN     Not satisfied with PG_FARFIT?  I wouldn't be, it's just not a sub-pixel    kind of thing.  Sometimes its results can be very super-pixel.  However,    once we get within a few tens of pixels of the correct pointing, we can    use PG_CVSCAN to pick up the edges with a more rigorous algorithm.    PG_CVSCAN scans around a predicted edge (in this case Jupiter's limb)    comparing the brightness profile with a model profile.  In this case,    we use the limb edge model developed by Gary Yagi and used in the old    VICAR NAV program (Ugh, remember VICAR?  That's kind of the whole reason    we're doing any of this).  Indeed this whole CVSCAN business is the same    exact algorithm that Andy Ingersoll scribbled down on a piece of paper    sometime in the 1980s, just gussied up and vectorized with a bunch of    pg_this and gd_that and all manner of other whatnot.     Anyway, here we are staying 30 pixels from the image edge, and scanning    with a width of 80 pixels.  The lzero and mzero are coordinating the    zero pointing of the model: <span class= code-output >cvscan_ptd=pg_cvscan(dd, gd=gd, limb_ptd[0], edge=30, width=80, $</span> <span class= code-output >   model=[make_array(npd,val=ptr_new(edge_model_nav_limb(zero=lzero)))], $</span> <span class= code-output >   mzero=[make_array(npd,val=lzero)] )</span>    And then we draw the points: <span class= code-output >tvim, im</span> <span class= code-output >pg_draw, cvscan_ptd</span>         THRESHOLD ON CORRELATION COEFFICIENT     This section calls pg_threshold to remove points with unacceptable    correlation coefficients.  The /relative flag means that the minimum    and maximum thresholds are taken as a fraction of the maximum    correlation coefficient for each set of points. In this case we use    a minimum correlation coefficient of 0.81 and a maximum of 1.0: <span class= code-output > pg_threshold, cvscan_ptd, min=0.81, max=1.0, /rel</span> <span class= code-output > tvim, im</span> <span class= code-output > pg_draw, cvscan_ptd</span>   MANUALLY EDIT THE SCANNED POINTS     PG_SELECT is used to manually remove points within a polygonal region    defined by the cursor.  PG_TRIM removes the points in the defined    region: <span class= code-output > region = pg_select(dd)</span> <span class= code-output > pg_trim, dd, cvscan_ptd, region</span> <span class= code-output > tvim, im</span> <span class= code-output > pg_draw, cvscan_ptd</span>   SUB-PIXEL POINTING CORRECTION     PG_CVSCAN_COEFF determines the linear least-squares coefficients for a    fit to the image coordinate translation and rotation that matches the    computed curve to the scanned curve.  PG_FIT uses the resulting    coefficients to calculate the corrections.  In this case, we fix    the rotation offset (fix=2) because the limb gives little leverage on    that parameter: <span class= code-output >cvscan_cf = pg_cvscan_coeff(cvscan_ptd, fix=2)</span> <span class= code-output >dxy = pg_fit(cvscan_cf)</span>    The reason that these two programs are separate is that a simultaneous    fit can be performed by simply adding all of the linear coefficients.    If PG_FIT is given an array of coefficient structures, it will add them    before performing the fit, so, for example, you could compute coefficients    to fit stars in the image (using PG_PTSCAN), and include them in the    call to PG_FIT to get a simultaneous fit to the stars and the limb.     Once again, you need to recompute and redraw to see the new pointing:        FIT STATISTICS     You can get the statistics using PG_CHISQ and PG_COVARIANCE: <span class= code-output >chisq = pg_chisq(dxy, 0, cvscan_ptd, fix=2)</span> <span class= code-output >covar = pg_covariance(cvscan_cf)</span> <span class= code-output >print, dxy, dtheta*180./!pi, chisq, covar</span>   PLANET AND RING LATITUDE/LONGITUDE GRID        This section calculates a latitude/longitude grid for each planet and a    radius/longitude grid for the rings.  By default it draws 12 latitude    and 12 longitude grid lines.  The longitude grid lines circle the body    and so on a map they will appear as 24 grid lines.  The ring radius grid    uses four grid lines by default between the inner and outer ring radius.    It uses PG_HIDE to set as not visible the points on the grid behind the    planet and ring for both objects.  It then uses PG_DRAW to draw the    grid points in blue (ctblue): <span class= code-output > grid_ptd = pg_grid(gd=gd, lat=lat, lon=lon)</span> <span class= code-output > pg_hide, grid_ptd, cd=cd, bx=pd, /assoc</span> <span class= code-output > pg_hide, grid_ptd, cd=cd, bx=pd, od=sund, /assoc</span> <span class= code-output > pg_hide, grid_ptd, gd=gd, bx=rd</span> <span class= code-output > pg_draw, grid_ptd, color=ctblue()</span>  <span class= code-output > plat_ptd = pg_grid(gd=gd, slon=!dpi/2d, lat=lat, nlon=0)</span> <span class= code-output > pg_hide, plat_ptd[0], cd=cd, bx=pd[0], /, bx=pd</span> <span class= code-output > pg_draw, plat_ptd[0], psym=3, plabel=strtrim(round(lat*180d/!dpi),2), /label_p</span>  <span class= code-output > plon_ptd = pg_grid(gd=gd, slat=0d, lon=lon, nlat=0)</span> <span class= code-output > pg_hide, plon_ptd[0], cd=cd, bx=pd[0], /assoc</span> <span class= code-output > pg_draw, plon_ptd[0], psym=3, plabel=strtrim(round(lon*180d/!dpi),2), /label_p</span>  <span class= code-output > dgrid_ptd=pg_grid(gd=gd, bx=rd) & pg_hide, dgrid_ptd, gd=gd, bx=pd</span> <span class= code-output > pg_draw, dgrid_ptd, color=ctpurple()</span>   MAP DESCRIPTORS     PG_GET_MAPS is used to define map descriptors for various projections.    Paste the one you want:  <span class= code-output >Rectangular:</span> <span class= code-output > md = pg_get_maps(/over, bx=pd[0], $</span> <span class= code-output >        projection='RECTANGULAR', $</span> <span class= code-output >        /map_graphic,</span> <span class= code-output >        size=[400,200])</span>  <span class= code-output >     .. image:: graphics/jupiter_rectangular.jpeg</span>      Orthographic: <span class= code-output >  md = pg_get_maps(/over, bx=pd[0], $</span> <span class= code-output >        projection='ORTHOGRAPHIC', $</span> <span class= code-output >        size=[400,400], $</span> <span class= code-output >        center=[!dpi/6d,!dpi])</span>  <span class= code-output >     .. image:: graphics/jupiter_orthographic.jpeg</span>      Stereographic: <span class= code-output >  md = pg_get_maps(/over, bx=pd[0], $</span> <span class= code-output >         projection='STEREOGRAPHIC', $</span> <span class= code-output >         scale=0.5, $</span> <span class= code-output >         size=[400,400], center=[!dpi/2d,0d])</span>  <span class= code-output >     .. image:: graphics/jupiter_stereographic.jpeg</span>      Mercator: <span class= code-output >  md = pg_get_maps(/over, bx=pd[0], $</span> <span class= code-output >        projection='MERCATOR', $</span> <span class= code-output >         size=[400,200])</span>  <span class= code-output >     .. image:: graphics/jupiter_mercator.jpeg</span>   MAP PROJECTIONS     PG_MAP creates a map projection and returns it in a data descriptor.    The map is also returned a a keyword for convenience: <span class= code-output > dd_map = pg_map(dd, md=md, gd=gd, bx=pd[0], map=map)</span> <span class= code-output > tvim, /new, map</span>  <span class= code-output >Rectangular:</span> <span class= code-output >     .. image:: graphics/jupiter_rectangular.jpeg</span>     Orthographic: <span class= code-output >     .. image:: graphics/jupiter_orthographic.jpeg</span>     Stereographic: <span class= code-output >     .. image:: graphics/jupiter_stereographic.jpeg</span>     Mercator: <span class= code-output >     .. image:: graphics/jupiter_mercator.jpeg</span>     You could bound the map like this: <span class= code-output > dd_map = pg_map(dd, md=md, gd=gd, bx=pd[0], map=map, $</span> <span class= code-output >                  bounds=bounds = [-30,30,-180,180]*!dpi/180d)</span>     Or exclude the areas covered by the rings: <span class= code-output > dd_map = pg_map(dd, md=md, gd=gd, bx=pd[0], gbx=pd[0], $</span> <span class= code-output >                    hide_fn='pm_hide_ring', hide_bx=rd, map=map)</span>   PUT A GRID ON IT     PG_GRID computes a latitude/longitude grid.  This is the same program    used in other examples to draw grids on other things; here we're    using a map descriptor instead of a camera descriptor.     First, define a new generic descriptor.  : <span class= code-output > gdm={cd:md, od:cd, gbx:pd[0], dkx:rd}</span>  <span class= code-output > map_grid_ptd = pg_grid(gd=gdm, lat=lat, lon=lon)</span> <span class= code-output > plat_ptd = pg_grid(gd=gdm, slon=!dpi/2d, lat=lat, nlon=0)</span> <span class= code-output > plon_ptd = pg_grid(gd=gdm, slat=0d, lon=lon, nlat=0)</span>  <span class= code-output > pg_draw, map_grid_ptd, col=ctgreen()</span> <span class= code-output > pg_draw, plat_ptd, psym=7, plabel=strmid(strtrim(lat*180d/!dpi,2),0,3), /label_p</span> <span class= code-output > pg_draw, plon_ptd, psym=7, plabel=strmid(strtrim(lon*180d/!dpi,2),0,3), /label_p</span>   OBSERVATION-SPECIFIC OVERLAYS     Use PG_LIMB to compute a limb and a terminator by specifying an    observer descriptor.      map_limb_ptd = pg_limb(gd=gdm, od=cd)     map_term_ptd = pg_limb(gd=gdm, od=sund)      pg_draw, map_limb_ptd, col=ctred()     pg_draw, map_term_ptd, col=ctyellow()    MAP-TO-MAP PROJECTION     A map can be reprojected using a second map descriptor with the    original map descriptor in place of the camera descriptor: <span class= code-output > md1 = pg_get_maps(/over, bx=pd[0], $</span> <span class= code-output >    projection='ORTHOGRAPHIC', $</span> <span class= code-output >    size=[400,400], $</span> <span class= code-output >    center=[!dpi/6d,!dpi])</span>  <span class= code-output > dd_map1 = pg_map(dd_map, md=md1, cd=md, map=map1)</span> <span class= code-output > tvim, /new, map1</span>       OUTPUT DESCRIPTORS     These commands write the descriptor information out through the    translators.  The exact behavior is translator-dependent.  In the default    configuration, the detached header translator modifies the detached header    stored in the data descriptor.  It is not written until DAT_WRITE is called.       pg_put_rings, dd, od=cd, rd=rd      pg_put_planets, dd, od=cd, pd=pd      pg_put_cameras, dd, cd=cd      pg_put_stars, dd, sd=sund, od=cd     The detached head may be viewed using: <span class= code-output > print, transpose(dat_dh(dd))</span>    If using the NAIF/SPICE translator, a C kernel may be written by    specifying a file name using the ck_out translator keyword.  A comment    can be included in the output kernel by making a user data value    named  CK_COMMENT : <span class= code-output > cor_set_udata, cd, 'CK_COMMENT', 'This is a comment.'</span> <span class= code-output > pg_put_cameras, dd, cd=cd, 'ck_out=./outputs/test.bc'</span>   WRITE DATA FILE     DAT_WRITE writes the data array in the data descriptor using whatever    output function was given in the I/O table.  The detached header is    is also written into a file with the same name as the image file except    with the extension '.dh'.  If this file does not already exist, it is    created.       dat_write, './outputs/' + cor_name(dd), dd    WRITE MAP FILE     PG_PUT_MAPS causes the detached header translator to generate a new    detached header and write the map descriptor into it.     As above, DAT_WRITE writes the map image file and the detached header.    Notice that the file type is given explicitly because the data descriptor    was not created by DAT_READ, which would have detected the file type: <span class= code-output > pg_put_maps, dd_map, md=md</span> <span class= code-output > dat_write, './outputs/' + cor_name(dd) + '.map', dd_map, filetype = 'VICAR'</span>    To read the new map file, use DAT_READ just as the image file was read at    the beginning of this example script.  To read the map descriptor from the    detached header, use PG_GET_MAPS: <span class= code-output > dd_map = dat_read(./outputs/&lt;nme&gt;.map', map)</span> <span class= code-output > md = pg_get_maps(dd_map)</span> <span class= code-output > tvim, /new, map</span>  ", "", "          -1", "");
  

libdata[libdataItem++] = new Array("defunct/stars_example.html", "stars_example.pro", '.pro file in <a href="defunct/dir-overview.html">defunct/ directory</a>', "stars_example.pro", "", "", " Star fitting example   This example requires a star catalog. The options are: UCAC4, UCACT,  TYCHO2, SAO, and GSC2. To learn more about where to obtain these  catalogs, please see the documentation for the star catalog translators,  strcat_ucac4_input, strcat_ucact_input, strcat_tycho2_input,  strcat_sao_input, and strcat_gsc2_input.   In this script, the star fitting capabilities of OMINAS will be demonstrated.   This example file can be executed from the UNIX command line using: <span class= code-output >ominas stars_example</span>  or from within an OMINAS IDL session using: <span class= code-output >@stars_example</span>  After the example stops, later code samples in this file may be executed by  pasting them onto the IDL command line.   Image read and display   This first section uses dat_read to read in the image. There are several  available image files to use for the preocessing:   	c1138223.gem: Voyager VICAR format file where the image has had  	the camera distortions removed with the VICAR program GEOMA.   	N1456251768_1.IMG: Cassini ISS-NA image, obtained from the PDS imaging  	node.   dat_read reads the image portion (im) and the image label (label) and its  output is a data descriptor (dd). tvim is called to display the image (im)  at 3/4 size in a new window with the y coordinate as top-down.   Note: Users with a 24-bit display, you may want to do the device command  'pseudo=8' so that xloadct can be used to contrast enhance the image.   Code: <span class= code-output >;dd = dat_read('data/c1138223.gem', im, label)           ; VICAR format file</span> <span class= code-output >dd = dat_read(getenv('OMINAS_DIR')+'/demo/data/N1456251768_1.IMG', im, label)    ; Cas ISS-NA image</span> <span class= code-output >tvim, im, zoom=0.75, /order</span>   Filling the descriptors   This section fills the camera descriptor (cd), the planet descriptor  (pd) and the ring descriptor (rd) for use by the software.   Code: <span class= code-output >cd = pg_get_cameras(dd)</span> <span class= code-output >pd = pg_get_planets(dd, od=cd)</span> <span class= code-output >rd = pg_get_rings(dd, pd=pd, od=cd)</span>   Filling the generic descriptor   This line fills a  generic  descriptor, which is a standard IDL struct.  Generic descriptors are a convenient notation for several descriptors to  be grouped into a structure that can be passed to functions in one piece.   The components of the generic descriptor are: <span class= code-output >cd - camera descriptor part</span> <span class= code-output >gbx - globe descriptor part</span> <span class= code-output >dkx - disk descriptor part</span>  Code: <span class= code-output >gd = {cd:cd, gbx:pd, dkx:rd}</span>   Filling the star descriptor   This line fills a star descriptor by reading the star catalog using  pg_get_stars. pg_get_stars calls back-end functions to read the  translator table. Therefore, for a specific instrument (for instance,  both ISS-NA and ISS-WA), the star catalog should be specified. The  translators.tab for this demo (in data/translators.tab) should contain  a line with the star catalog to be used: <span class= code-output > -   strcat_tycho2_input     -       /j2000    # or /b1950 if desired</span>  This line specifies that the tycho2 catalog should be used, and all  coordinates should be for the j2000 epoch. Likewise, such a line should  be included in the translator for any mission to be processed.   NOTES:   If the keyword 'tr_override' is specified, only the specified   translator is called instead of whatever star catalog   translators are listed in the translators table.    The translator keyword 'faint' selects only stars with magnitudes   brighter than 14.  The keyword, 'bright' may be used place an upper   bound on the brightness.    /no_sort suppresses the default behavior of returning only   the first object found with any given name.  That operation can be   very time consuming when a large number of objects are returned   by the translators.  In the first case, we have specified that only one   translator will be called, and we know that it will not return   duplicate objects.   Code: <span class= code-output >;sd = pg_get_stars(dd, od=cd, /no_sort, tr_ov='strcat_gsc2_input', 'faint=8')</span> <span class= code-output >sd = pg_get_stars(dd, od=cd, 'faint=14')</span>   Calculating the star centers   The star centers are calculated using pg_center. bx is an output  keyword which contains the body descriptor, in this case it is an  array of star descriptors. Each star descriptor describes the  data for one star.   pg_hide is called to remove (/rm) any star points covered by the  planet (/globe). Although there is no planet in the Cassini image,  this technique should be used to hide star points in general, were  there to be a limb_ptd.   Determining the plot characteristics   The star elements are chosen to be red, with a symbol type of *  (code 2), a font size of 2, and labels corresponding to the name of  each star. Stars can have either catalog names or common names.   Code: <span class= code-output >star_ptd=pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, bx=pd, /rm</span> <span class= code-output >n_stars=n_elements(sd)</span> <span class= code-output >color = ctred()</span> <span class= code-output >psym = 6</span> <span class= code-output >csizes = 2</span> <span class= code-output >plabels = cor_name(sd)</span>   Drawing the star centers   This section draws the stars in the star_ptd with the colors, plot  symbols, font size, and labels defined earlier.   In this particular example, the planet does not appear in the image.   Code: <span class= code-output >pg_draw, star_ptd, color=color, psym=psym, plabel=plabels, csi=csizes</span>   Drawing the stellar spectral types   This pasteable section uses the stellar library function str_sp to return  spectral types of the stars and uses them instead of the star names. If  the spectral type is not available for the catalog, then no information  will be plotted in the labels.   Code: <span class= code-output >tvim, im</span> <span class= code-output >spt=str_sp(sd)</span> <span class= code-output >psyms_str=make_array(n_stars,val=6)</span> <span class= code-output >pg_draw, star_ptd, color=color, psym=psym, plabel=spt, csi=csizes</span>   Drawing stellar magnitudes   This pasteable section uses the stellar library function str_get_mag to get  visual magnitudes of the stars and uses them instead of the star names.   Code: <span class= code-output >tvim, im</span> <span class= code-output >sm = str_get_mag(sd)</span> <span class= code-output >smag = string(sm, format='(f4.1)')</span> <span class= code-output >psyms_str=make_array(n_stars,val=6)</span> <span class= code-output >pg_draw, star_ptd, color=color, psym=psym, plabel=smag, csi=csizes</span>   Manually repointing the geometry   This pasteable section first clears the screen of the plotted points  by redisplaying the image with tvim.  It then calls pg_drag to allow  the user to use the cursor to drag the pointing, and with it the stars.  To move the pointing with pg_drag, use the left mouse button and  translate the pointing in x,y.  Use the middle mouse button to rotate  the pointing about an axis (in this case, the axis of rotation is set  as the optic axis of the image (star_ptd) which is defined using the  routine pnt_create_descrptors with the points being the camera optic  axis as returned by the camera library routine cam_oaxis.  When the  desired pointing is set, the right mouse button accepts it.  pg_drag  returns the delta x,y amount dragged (dxy) as well as the rotation  angle (dtheta).  pg_repoint uses the dxy and dtheta to update the  camera descriptor (cd, passed by gd).  The limb, ring and star points  are then recalculated, the image redisplayed to clear the objects drawn,  and then pg_draw is called to replot.   Code: <span class= code-output >optic_ptd = pnt_create_descriptors(points=cam_oaxis(cd))</span> <span class= code-output >tvim, im</span> <span class= code-output >dxy = pg_drag(star_ptd, dtheta=dtheta, axis=optic_ptd, symbol=6)  ; square</span> <span class= code-output >pg_repoint, dxy, dtheta, axis=optic_ptd, gd=gd</span> <span class= code-output >star_ptd=pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, bx=pd, /rm</span> <span class= code-output >tvim, im</span> <span class= code-output >pg_draw, star_ptd, color=color, psym=psym, plabel=plabels</span>   Scanning to find the stars and using it to calculate the pointing   This section calls pg_ptscan to scan the image around the predicted  star positions (within width of 40 pixels) and find the pixels with  the highest correlation with a given edge model (example uses the  default gaussian) for each star.  These points are then plotted.   Code: <span class= code-output >ptscan_ptd = pg_ptscan(dd, star_ptd, edge=30, width=40)</span> <span class= code-output >pg_draw, ptscan_ptd, psym=1, col=ctyellow()</span>   Thresholding using correlation coefficient   This section (optional) calls pg_threshold to remove points with lower  correlation coefficients.  This example only keeps stars with a  correlation coefficient above 0.6.  Notice that each object can have  its own min and max value.   Code: <span class= code-output >pg_threshold, ptscan_ptd, min=make_array(n_stars,val=0.6), $</span> <span class= code-output >                          max=make_array(n_stars,val=1.0)</span> <span class= code-output >tvim, im</span> <span class= code-output >pg_draw, object_ptd, colors=colors, psyms=psyms, psizes=psizes, plabel=plabels</span> <span class= code-output >pg_draw, ptscan_ptd, psym=1, col=ctyellow()</span>   Removing regions of bad points   This section (optional) calls pg_select to remove points within a  polygonal region as defined by the cursor.  Click the left mouse  button to mark a point and move the mouse to the next point and  click.  Use the middle mouse button to erase a point and the right  mouse button to end the region.  pg_trim removes the points in the  just defined region.  The scan points are then replotted.  Repeat these statements for each region a user wants to remove.   Code: <span class= code-output >region=pg_select(dd)</span> <span class= code-output >pg_trim, dd, ptscan_ptd, region</span> <span class= code-output >tvim, im</span> <span class= code-output >pg_draw, object_ptd, colors=colors, psyms=psyms, psizes=psizes, plabel=plabels</span> <span class= code-output >pg_draw, ptscan_ptd, psym=1, col=ctyellow()</span>   Fitting the pointing to the found stars   This section calls pg_ptscan_coeff to determine the linear  least-squares coefficients for a fit to the image coordinate translation  and rotation which matches the computed positions to the scanned  positions. It then calls pg_fit to do the fit with the calculated  coefficients to calculate the correction in translation (dxy) and  rotation (dtheta).  It calls pg_ptchisq to get the chi square of the  fit.  It then calls pg_repoint to update the pointing.  Recalculates  the limb, rings and stars and replots.   Code: <span class= code-output >optic_ptd = pnt_create_descriptors(points=cam_oaxis(cd))</span> <span class= code-output >ptscan_cf = pg_ptscan_coeff(ptscan_ptd, axis=optic_ptd)</span> <span class= code-output >dxy = pg_fit([ptscan_cf], dtheta=dtheta)</span> <span class= code-output >chisq = pg_chisq(dxy, dtheta, ptscan_ptd, axis=optic_ptd[0])</span> <span class= code-output >covar = pg_covariance([ptscan_cf])</span> <span class= code-output >print, dxy, dtheta*180./!pi, chisq, covar</span> <span class= code-output >pg_repoint, dxy, dtheta, axis=optic_ptd, gd=gd</span> <span class= code-output >star_ptd = pg_center(bx=sd, gd=gd) & pg_hide, star_ptd, gd=gd, bx=pd, /rm</span> <span class= code-output >tvim, im</span> <span class= code-output >pg_draw, star_ptd, color=color, psym=psym, plabel=plabels</span>   Output the new state   This section (optional) shows how you can save your output: any changes  to the image data into a new file and the new pointing into a detached  header.   Code: <span class= code-output >pg_put_cameras, dd, gd=gd</span> <span class= code-output >dat_write, getenv('OMINAS_DIR')+'/demo/data/c1138223_nv.gem', dd</span>  ", "", "          -1", "");
  

