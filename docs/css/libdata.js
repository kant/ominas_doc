/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "OMINAS Documentation";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("./_dat_compress_data.html", "_dat_compress_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "_dat_compress_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./_dat_compress_data.html#_dat_compress_data", "_dat_compress_data", 'routine in <a href="./_dat_compress_data.html">_dat_compress_data.pro</a>', "_dat_compress_data.pro", "", "_dat_compress_data", "", "cdatacabscissa_dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./_dat_compute_size.html", "_dat_compute_size.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "_dat_compute_size.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./_dat_compute_size.html#_dat_compute_size", "_dat_compute_size", 'routine in <a href="./_dat_compute_size.html">_dat_compute_size.pro</a>', "_dat_compute_size.pro", "", "_dat_compute_size", "", "_ddsamples", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./_dat_uncompress_data.html", "_dat_uncompress_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "_dat_uncompress_data.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./_dat_uncompress_data.html#_dat_uncompress_data", "_dat_uncompress_data", 'routine in <a href="./_dat_uncompress_data.html">_dat_uncompress_data.pro</a>', "_dat_uncompress_data.pro", "", "_dat_uncompress_data", "", "cdatacabscissa_dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_add_transient_keyvals.html", "dat_add_transient_keyvals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_add_transient_keyvals.pro", "", "", " NAME: 	dat_add_transient_keyvals    PURPOSE: 	Records keyword/value pairs from a transient argument string.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_add_transient_keyvals, dd, trs    ARGUMENTS:   INPUT: 	dd:	Data descriptor in which to record transient keyvals.  	trs:	Transient argument string.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_add_transient_keyvals.html#dat_add_transient_keyvals", "dat_add_transient_keyvals", 'routine in <a href="./dat_add_transient_keyvals.html">dat_add_transient_keyvals.pro</a>', "dat_add_transient_keyvals.pro", "", "dat_add_transient_keyvals", "", "_ddtrs", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_assign.html", "dat_assign.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_assign.pro", "", "", " NAME: 	dat_assign    PURPOSE: 	Replaces fields in a CAMERA object.  This is a convenient way of 	setting multiple fields in one call, and only a single event is 	generated.    CATEGORY: 	NV/OBJ/CAM    CALLING SEQUENCE: 	dat_assign, cd, <keywords>=<values>    ARGUMENTS:   INPUT: 	cd:		CAMERA object.    OUTPUT: NONE    KEYWORDS:   INPUT: 	<keywords>:	CAMERA fields to set.  	noevent:	If set, no event is generated.    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    SEE ALSO: 	dat_set_*     MODIFICATION HISTORY:  	Written by:	Spitale		2/2017   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_assign.html#dat_assign", "dat_assign", 'routine in <a href="./dat_assign.html">dat_assign.pro</a>', "dat_assign.pro", "", "dat_assign", "", "noeventxd@dat__keywords.include", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_cache.html", "dat_cache.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_cache.pro", "", "", " NAME: 	dat_cache    PURPOSE: 	Returns a long integer indicating the maximum size of a data array. 	This value may be adjusted using the environment variable 'DAT_CACHE'. 	-1 is returned if it cannot be determined.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	cache = dat_cache()    ARGUMENTS:   INPUT: NONE    OUTPUT: NONE    KEYWORDS:   INPUT: NONE     OUTPUT: NONE    ENVIRONMENT VARIABLES: 	DAT_CACHE:	Sets the size of the cache.    RETURN: 	Current cache value.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 8/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_cache.html#dat_cache", "dat_cache", 'routine in <a href="./dat_cache.html">dat_cache.pro</a>', "dat_cache.pro", "", "dat_cache", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_compress.html", "dat_compress.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_compress.pro", "", "", " NAME: 	dat_compress    PURPOSE: 	Returns the compression function suffix associated with a data 	descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	suffix = dat_compress(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	String giving the compression suffix.  The full name 	of the compression function is dat_compress_data_<suffix>.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_compress.html#dat_compress", "dat_compress", 'routine in <a href="./dat_compress.html">dat_compress.pro</a>', "dat_compress.pro", "", "dat_compress", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_compress_data_mask.html", "dat_compress_data_mask.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_compress_data_mask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_compress_data_mask.html#dat_compress_data_mask", "dat_compress_data_mask", 'routine in <a href="./dat_compress_data_mask.html">dat_compress_data_mask.pro</a>', "dat_compress_data_mask.pro", "", "dat_compress_data_mask", "", "_dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_create_descriptors.html", "dat_create_descriptors.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_create_descriptors.pro", "", "", " NAME: 	dat_create_descriptors    PURPOSE: 	Creates and initializes a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dd = dat_create_descriptors(n)    ARGUMENTS:   INPUT: 	n:	 Number of descriptors to create.    OUTPUT: NONE    KEYWORDS:   INPUT: 	filename:	Name of data file.  	dim:		Array giving the dimensions of the data array.  	typecode:	Integer giving the type code of the data array.  	data:		Data array.  	nhist:		Number of past version of the data array to archive. 			If not given, the environment variable NV_NHIST is 			used.  If that is not set, then nhist defaults to 1.  	header:		Header array.  	filetype:	Filetype identifier string.  If not given 			an attempt is made to detect it.  	input_fn:	Name of function to read data file.  	output_fn:	Name of function to write data file.  	keyword_fn:	Name of function to read/write header keywords.  	instrument:	Instrument string.  If not given an 			attempt is made to detect it.  	input_transforms:	String array giving the names of the 				input transforms.  	output_transforms:	String array giving the names of the 				output transforms.  	maintain:	Data maintenance mode.  	compress:	Compression suffix.     OUTPUT: NONE 	input_translators:	String array giving the names of the 				input translators.  	output_translators:	String array giving the names of the 				output translators.     RETURN: 	Newly created and initialized data descriptor.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_create_descriptors.html#dat_create_descriptors", "dat_create_descriptors", 'routine in <a href="./dat_create_descriptors.html">dat_create_descriptors.pro</a>', "dat_create_descriptors.pro", "", "dat_create_descriptors", "", "crdddn@dat__keywords.include", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_data.html", "dat_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_data.pro", "", "", " NAME: 	dat_data    PURPOSE: 	Returns the data array associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	data = dat_data(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: 	samples:  Sampling indices.  If set, only these data elements are 		  returned.  May be 1D or the same number of dimensions as 		  the data array.  	slice:	  Slice coordinates.  	current:  If set, the current loaded samples are returned.  In this 		  case, the sample indices are returned in the  samples  		  keyword.  	nd:       If set, the samples input is taken to be an ND coordinate 	          rather than a 1D subscript.  dat_data can normally tell 	          the difference automatically, but there is an ambiguity 	          if a single ND point is requested.  In that case, dat_data 	          interprets that as an array of 1D subscripts, unless /nd 	          is set.  	true:     If set, the actual data array is returned, even if there is 	          a sampling function.    OUTPUT: 	abscissa: The abscissa is returned in this array.  	samples:  Output sample indices for /current.    RETURN: 	The data array associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_data    MODIFICATION HISTORY:  	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_data.html#dat_data", "dat_data", 'routine in <a href="./dat_data.html">dat_data.pro</a>', "dat_data.pro", "", "dat_data", "", "samplescurrentslicendtruenoeventabscissadd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_detect_filetype.html", "dat_detect_filetype.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_detect_filetype.pro", "", "", " NAME: 	dat_detect_filetype    PURPOSE: 	Attempts to detect the type of the given file by calling the 	detectors in the filetype detectors table.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	filetype = dat_detect_filetype(dd)    ARGUMENTS:   INPUT: 	dd:		Data descriptor containing filename to test.    OUTPUT: NONE    KEYWORDS:   INPUT: 	default:	If set, the 'default' filetype is returned. 			The default filetype is the first item in the table 			whose action is not 'IGNORE'.  	all:	If set, all filetypes in the table are returned.    OUTPUT: NONE    RETURN: 	String giving the filetype, or null string if none detected.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_detect_filetype.html#dat_detect_filetype", "dat_detect_filetype", 'routine in <a href="./dat_detect_filetype.html">dat_detect_filetype.pro</a>', "dat_detect_filetype.pro", "", "dat_detect_filetype", "", "defaultallactiondd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_detect_instrument.html", "dat_detect_instrument.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_detect_instrument.pro", "", "", " NAME: 	dat_detect_instrument    PURPOSE: 	Attempts to detect the instrument for a data set by calling the 	detectors in the instrument detectors table.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	instrument = dat_detect_instrument(dd)    ARGUMENTS:   INPUT: 	dd:		Data descriptor containing header an filetype.  	filetype:	Filetype from dat_detect_filetype.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	String giving the instrument, or 'DEFAULT' if none detected.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_detect_instrument.html#dat_detect_instrument", "dat_detect_instrument", 'routine in <a href="./dat_detect_instrument.html">dat_detect_instrument.pro</a>', "dat_detect_instrument.pro", "", "dat_detect_instrument", "", "dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_dh.html", "dat_dh.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_dh.pro", "", "", " NAME: 	dat_dh    PURPOSE: 	Returns the maintenance value associated with a data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	data = dat_dh(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The maintenance value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_dh.html#dat_dh", "dat_dh", 'routine in <a href="./dat_dh.html">dat_dh.pro</a>', "dat_dh.pro", "", "dat_dh", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_dim.html", "dat_dim.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_dim.pro", "", "", " NAME: 	dat_dim    PURPOSE: 	Returns the dimensions of the data array in the given data 	descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dim = dat_dim(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: 	true:	If set, the dimension function is not called and the true 	 	dimensions of the dat are returned.    OUTPUT: NONE    RETURN: 	Array giving the dimensions of the data in the data descriptor.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_dim.html#dat_dim", "dat_dim", 'routine in <a href="./dat_dim.html">dat_dim.pro</a>', "dat_dim.pro", "", "dat_dim", "", "truenoeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_dim_data.html", "dat_dim_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_dim_data.pro", "", "", " NAME: 	dat_dim_data    PURPOSE: 	Returns the dimension function associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dim_data = dat_dim_data(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The dim_data associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_dim_data    MODIFICATION HISTORY:  	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_dim_data.html#dat_dim_data", "dat_dim_data", 'routine in <a href="./dat_dim_data.html">dat_dim_data.pro</a>', "dat_dim_data.pro", "", "dat_dim_data", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_dim_fn.html", "dat_dim_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_dim_fn.pro", "", "", " NAME: 	dat_dim_fn    PURPOSE: 	Returns the dimension function associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dim_fn = dat_dim_fn(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The dim_fn associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_dim_fn    MODIFICATION HISTORY:  	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_dim_fn.html#dat_dim_fn", "dat_dim_fn", 'routine in <a href="./dat_dim_fn.html">dat_dim_fn.pro</a>', "dat_dim_fn.pro", "", "dat_dim_fn", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_filename.html", "dat_filename.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_filename.pro", "", "", " NAME: 	dat_filename    PURPOSE: 	Returns the file name associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	filename = dat_filename(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	String giving the filename.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 12/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_filename.html#dat_filename", "dat_filename", 'routine in <a href="./dat_filename.html">dat_filename.pro</a>', "dat_filename.pro", "", "dat_filename", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_filetype.html", "dat_filetype.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_filetype.pro", "", "", " NAME: 	dat_filetype    PURPOSE: 	Returns the filetype associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	filetype = dat_filetype(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	String giving the filetype.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_filetype.html#dat_filetype", "dat_filetype", 'routine in <a href="./dat_filetype.html">dat_filetype.pro</a>', "dat_filetype.pro", "", "dat_filetype", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_gd.html", "dat_gd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_gd.pro", "", "", " NAME: 	dat_gd    PURPOSE: 	Dereferences a given generic descriptor, or the generic descriptor 	contained in a data descriptor.  Similar to cor_gd, but data 	descriptors are handled specially.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	xd = dat_gd(gd, <descriptor keywords>)    ARGUMENTS:   INPUT: 	gd:	Generic descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: 	dd:	Data descriptor.  If gd is undefined, the generic descriptor 		contained in this data descriptor is used instead.  If this 		keyword is set (i.e., /dd), then it is treated like the 		other descriptor keywords and a data desctipro is returned 		if one exists in the generic descriptor.  	<x>d:	Standard descriptor keywords.  Setting a keyword causes the 		corresponding field of the generic descriptor to be returned 		in the output array.    OUTPUT: NONE    RETURN: Array of descriptors corresponding to the selected keywords.     MODIFICATION HISTORY:  	Written by:	Spitale		2/2017   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_gd.html#dat_gd", "dat_gd", 'routine in <a href="./dat_gd.html">dat_gd.pro</a>', "dat_gd.pro", "", "dat_gd", "", "dd_ref_extra_gd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_get_value.html", "dat_get_value.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_get_value.pro", "", "", " NAME: 	dat_get_value    PURPOSE: 	Calls input translators, supplying the given keyword, and builds 	a list of returned descriptors.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	xds = dat_get_value(dd, keyword)    ARGUMENTS:   INPUT: 	dd:		Data descriptors.  Must all have the same instrument 			string.  	keyword:	Keyword to pass to translators, describing the 			requested quantity.    OUTPUT: NONE    KEYWORDS:   INPUT: 	trs:		Transient argument string.  	tr_disable:	If set, dat_get_value returns without performing 			any action.  	tr_override:	Comma-delimited list of translators to use instead 			of those stored in dd.  	tr_first:	If set, dat_get_value returns after the first 			successful translator.  	tr_nosort:	By default, output descriptors are sorted to remove 			those with duplicate names, retaining only the first 			descriptor of a given name for each input data 			descriptor.  /tr_nosort disables this action.  	tr_order:	If set (and tr_nosort not set), dat_get_value selects 			the latest of any duplicately named output descriptors 			instead of the earliest.     OUTPUT: 	status:		0 if at least one translator call was successful, 			-1 otherwise.    RETURN: 	Array of descriptors returned from all successful translator calls. 	Descriptors are returned in the same order that the corresponding 	translators were called.  Each translator may produce multiple 	descriptors.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_get_value.html#dat_get_value", "dat_get_value", 'routine in <a href="./dat_get_value.html">dat_get_value.pro</a>', "dat_get_value.pro", "", "dat_get_value", "", "statustrsddkeyword@nv_trs_keywords_include.pro", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_gff.html", "dat_gff.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_gff.pro", "", "", " NAME: 	dat_gff    PURPOSE: 	Returns the maintenance value associated with a data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	data = dat_gff(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The maintenance value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_gff.html#dat_gff", "dat_gff", 'routine in <a href="./dat_gff.html">dat_gff.pro</a>', "dat_gff.pro", "", "dat_gff", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_header.html", "dat_header.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_header.pro", "", "", " NAME: 	dat_header    PURPOSE: 	Returns the header array associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	header = dat_header(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The header array associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_header    MODIFICATION HISTORY:  	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_header.html#dat_header", "dat_header", 'routine in <a href="./dat_header.html">dat_header.pro</a>', "dat_header.pro", "", "dat_header", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_header_value.html", "dat_header_value.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_header_value.pro", "", "", " NAME: 	dat_header_value    PURPOSE: 	Reads and write header keyword values.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_header_value, dd, keyword, get=get, set=set    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	keyword:	String giving the name of the keyword to get or set.    OUTPUT: NONE    KEYWORDS:   INPUT: 	set:	New value to write to the specified keyword.     OUTPUT: NONE 	get:	Value of the specified keyword read from the header.     STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 8/2013  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_header_value.html#dat_header_value", "dat_header_value", 'routine in <a href="./dat_header_value.html">dat_header_value.pro</a>', "dat_header_value.pro", "", "dat_header_value", "", "getsetnoeventddkeyword", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_input_fn.html", "dat_input_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_input_fn.pro", "", "", " NAME: 	dat_input_fn    PURPOSE: 	Returns the input_fn value associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	data = dat_input_fn(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The input_fn value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_input_fn.html#dat_input_fn", "dat_input_fn", 'routine in <a href="./dat_input_fn.html">dat_input_fn.pro</a>', "dat_input_fn.pro", "", "dat_input_fn", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_input_keyvals.html", "dat_input_keyvals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_input_keyvals.pro", "", "", " NAME: 	dat_input_keyvals    PURPOSE: 	Returns the maintenance value associated with a data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	data = dat_input_keyvals(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The maintenance value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_input_keyvals.html#dat_input_keyvals", "dat_input_keyvals", 'routine in <a href="./dat_input_keyvals.html">dat_input_keyvals.pro</a>', "dat_input_keyvals.pro", "", "dat_input_keyvals", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_input_transforms.html", "dat_input_transforms.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_input_transforms.pro", "", "", " NAME: 	dat_input_transforms    PURPOSE: 	Returns the maintenance value associated with a data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	data = dat_input_transforms(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The maintenance value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_input_transforms.html#dat_input_transforms", "dat_input_transforms", 'routine in <a href="./dat_input_transforms.html">dat_input_transforms.pro</a>', "dat_input_transforms.pro", "", "dat_input_transforms", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_input_translators.html", "dat_input_translators.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_input_translators.pro", "", "", " NAME: 	dat_input_translators    PURPOSE: 	Returns the maintenance value associated with a data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	data = dat_input_translators(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The maintenance value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_input_translators.html#dat_input_translators", "dat_input_translators", 'routine in <a href="./dat_input_translators.html">dat_input_translators.pro</a>', "dat_input_translators.pro", "", "dat_input_translators", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_instrument.html", "dat_instrument.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_instrument.pro", "", "", " NAME: 	dat_instrument    PURPOSE: 	Returns the instrument string associated with a data descriptor.    CATEGORY: 	NV/OBJ/COR    CALLING SEQUENCE: 	instrument = dat_instrument(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The instrument string associated with the data descriptor.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 9/2001  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_instrument.html#dat_instrument", "dat_instrument", 'routine in <a href="./dat_instrument.html">dat_instrument.pro</a>', "dat_instrument.pro", "", "dat_instrument", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_keyword_fn.html", "dat_keyword_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_keyword_fn.pro", "", "", " NAME: 	dat_keyword_fn    PURPOSE: 	Returns the keyword_fn value associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	data = dat_keyword_fn(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The keyword_fn value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_keyword_fn.html#dat_keyword_fn", "dat_keyword_fn", 'routine in <a href="./dat_keyword_fn.html">dat_keyword_fn.pro</a>', "dat_keyword_fn.pro", "", "dat_keyword_fn", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_load_data.html", "dat_load_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_load_data.pro", "", "", " NAME: 	dat_load_data    PURPOSE: 	Loads the data array for a given data descriptor.  Adds to 	NV state maintained list if maintain == 1.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	data = dat_load_data(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor to test.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	Loaded data array.    KNOWN BUGS: 	Subsampling (ie. caching) is unreliable.  Lines or other anomalies 	often appear in subsampled images.  This does not seem to happen 	with integer sampling (e.g. integer zooms in tvim or grim), so it 	may be related to rounding or truncating of indices.  It may also be 	a problem with the set arithmetic.  Caching is currently disabled 	(see (*_dd.dd0p).cache = -1 below) until it can be fixed.    STATUS: 	Some bugs.    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_load_data.html#dat_load_data", "dat_load_data", 'routine in <a href="./dat_load_data.html">dat_load_data.pro</a>', "dat_load_data.pro", "", "dat_load_data", "", "sampledatadd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_lookup_io.html", "dat_lookup_io.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_lookup_io.pro", "", "", " NAME: 	dat_lookup_io    PURPOSE: 	Looks up the names of the data input and output functions in 	the I/O table.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_lookup_io, filetype, input_fn, output_fn    ARGUMENTS:   INPUT: 	filetype:	Filetype string from dat_detect_filetype.    OUTPUT: 	input_fn:	Name of the input function.  	output_fn:	Name of the output function.    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_lookup_io.html#dat_lookup_io", "dat_lookup_io", 'routine in <a href="./dat_lookup_io.html">dat_lookup_io.pro</a>', "dat_lookup_io.pro", "", "dat_lookup_io", "", "filetypeinput_fnoutput_fnkeyword_fn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_lookup_transforms.html", "dat_lookup_transforms.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_lookup_transforms.pro", "", "", " NAME: 	dat_lookup_transforms    PURPOSE: 	Looks up the names of the data input and output functions in 	the I/O table.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_lookup_transforms, instrument, input_transforms, output_transforms    ARGUMENTS:   INPUT: 	instrument:	Instrument string from dat_detect_instrument.    OUTPUT: 	input_transforms:	Array giving the names of the input transform 				functions.  	output_transforms:	Array giving the names of the output transform 				functions.    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_lookup_transforms.html#dat_lookup_transforms", "dat_lookup_transforms", 'routine in <a href="./dat_lookup_transforms.html">dat_lookup_transforms.pro</a>', "dat_lookup_transforms.pro", "", "dat_lookup_transforms", "", "tab_transformsinstrumentinput_transformsoutput_transforms", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_lookup_translators.html", "dat_lookup_translators.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_lookup_translators.pro", "", "", " NAME: 	dat_lookup_translators    PURPOSE: 	Looks up the names of the data input and output tranlators in 	the translators table.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_lookup_translators, instrument, input_translators, output_translators    ARGUMENTS:   INPUT: 	instrument:	Instrument string from dat_detect_instrument.    OUTPUT: 	input_translators:	Array giving the names of the input translator 				functions.  	output_translators:	Array giving the names of the output translator 				functions.  	input_keyvals:	Array giving the keyword/value pairs the from the 			translators table, for each input translator.  	output_keyvals:	Array giving the keyword/value pairs the from the 			translators table, for each output translator.    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_lookup_translators.html#dltr_extract", "dltr_extract", 'routine in <a href="./dat_lookup_translators.html">dat_lookup_translators.pro</a>', "dat_lookup_translators.pro", "", "dltr_extract", "", "tableinstrumentinput_translatorsoutput_translatorsinput_keyvalsoutput_keyvals", "          -1", "");
  
  libdata[libdataItem++] = new Array("./dat_lookup_translators.html#dat_lookup_translators", "dat_lookup_translators", 'routine in <a href="./dat_lookup_translators.html">dat_lookup_translators.pro</a>', "dat_lookup_translators.pro", "", "dat_lookup_translators", "", "tab_translatorsinstrumentinput_translatorsoutput_translatorsinput_keyvalsoutput_keyvals", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_maintain.html", "dat_maintain.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_maintain.pro", "", "", " NAME: 	dat_maintain    PURPOSE: 	Returns the maintenance value associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	data = dat_maintain(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The maintenance value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_maintain.html#dat_maintain", "dat_maintain", 'routine in <a href="./dat_maintain.html">dat_maintain.pro</a>', "dat_maintain.pro", "", "dat_maintain", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_manage_dd.html", "dat_manage_dd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_manage_dd.pro", "", "", " NAME: 	dat_manage_dd    PURPOSE: 	Adds a data descriptor to the NV state maintained list.  If the list 	is full, the oldest descriptor is unloaded and removed.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_manage_dd, dd    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_manage_dd.html#dat_manage_dd", "dat_manage_dd", 'routine in <a href="./dat_manage_dd.html">dat_manage_dd.pro</a>', "dat_manage_dd.pro", "", "dat_manage_dd", "", "dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_max.html", "dat_max.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_max.pro", "", "", " NAME: 	dat_max    PURPOSE: 	Returns the max value associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	data = dat_max(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The max value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_max.html#dat_max", "dat_max", 'routine in <a href="./dat_max.html">dat_max.pro</a>', "dat_max.pro", "", "dat_max", "", "noeventabscissadd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_min.html", "dat_min.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_min.pro", "", "", " NAME: 	dat_min    PURPOSE: 	Returns the min value associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	data = dat_min(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The min value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_min.html#dat_min", "dat_min", 'routine in <a href="./dat_min.html">dat_min.pro</a>', "dat_min.pro", "", "dat_min", "", "noeventabscissadd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_n.html", "dat_n.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_n.pro", "", "", " NAME: 	dat_n    PURPOSE: 	Returns the number of elements in the data array in the given data 	descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dim = dat_n(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: 	true:	If set, the dimension function is not called and the true 	 	length of the data is returned.    OUTPUT: NONE    RETURN: 	Number of elements in the data in the data descriptor.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 6/2017   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_n.html#dat_n", "dat_n", 'routine in <a href="./dat_n.html">dat_n.pro</a>', "dat_n.pro", "", "dat_n", "", "truenoeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_ndd.html", "dat_ndd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_ndd.pro", "", "", " NAME: 	dat_ndd    PURPOSE: 	Returns the global maintenance ndd value.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	data = dat_ndd(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The global maintenance ndd value.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_ndd.html#dat_ndd", "dat_ndd", 'routine in <a href="./dat_ndd.html">dat_ndd.pro</a>', "dat_ndd.pro", "", "dat_ndd", "", "dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_nhist.html", "dat_nhist.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_nhist.pro", "", "", " NAME: 	dat_nhist    PURPOSE: 	Returns the number of archived data states.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	nhist = dat_nhist(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	Integer giving the number of past data states archived 	in the data descriptor.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_nhist.html#dat_nhist", "dat_nhist", 'routine in <a href="./dat_nhist.html">dat_nhist.pro</a>', "dat_nhist.pro", "", "dat_nhist", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_output_fn.html", "dat_output_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_output_fn.pro", "", "", " NAME: 	dat_output_fn    PURPOSE: 	Returns the output_fn value associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	data = dat_output_fn(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The output_fn value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 10/2012  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_output_fn.html#dat_output_fn", "dat_output_fn", 'routine in <a href="./dat_output_fn.html">dat_output_fn.pro</a>', "dat_output_fn.pro", "", "dat_output_fn", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_output_keyvals.html", "dat_output_keyvals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_output_keyvals.pro", "", "", " NAME: 	dat_output_keyvals    PURPOSE: 	Returns the maintenance value associated with a data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	data = dat_output_keyvals(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The maintenance value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_output_keyvals.html#dat_output_keyvals", "dat_output_keyvals", 'routine in <a href="./dat_output_keyvals.html">dat_output_keyvals.pro</a>', "dat_output_keyvals.pro", "", "dat_output_keyvals", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_output_transforms.html", "dat_output_transforms.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_output_transforms.pro", "", "", " NAME: 	dat_output_transforms    PURPOSE: 	Returns the maintenance value associated with a data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	data = dat_output_transforms(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The maintenance value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_output_transforms.html#dat_output_transforms", "dat_output_transforms", 'routine in <a href="./dat_output_transforms.html">dat_output_transforms.pro</a>', "dat_output_transforms.pro", "", "dat_output_transforms", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_output_translators.html", "dat_output_translators.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_output_translators.pro", "", "", " NAME: 	dat_output_translators    PURPOSE: 	Returns the maintenance value associated with a data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	data = dat_output_translators(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The maintenance value associated with the data descriptor.    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 7/2008  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_output_translators.html#dat_output_translators", "dat_output_translators", 'routine in <a href="./dat_output_translators.html">dat_output_translators.pro</a>', "dat_output_translators.pro", "", "dat_output_translators", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_parse_keyval.html", "dat_parse_keyval.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_parse_keyval.pro", "", "", " NAME: 	dat_parse_keyval    PURPOSE: 	Parses a string containing a keyword=value pair.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_parse_keyval, keyval, keyword, value    ARGUMENTS:   INPUT: 	keyval:		String of the form <keyword>=<value>.    OUTPUT: 	keyword:	String giving the keyword.  	value:		String giving the value.    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_parse_keyval.html#dat_parse_keyval", "dat_parse_keyval", 'routine in <a href="./dat_parse_keyval.html">dat_parse_keyval.pro</a>', "dat_parse_keyval.pro", "", "dat_parse_keyval", "", "_keyvalkeywordvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_parse_keyvals.html", "dat_parse_keyvals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_parse_keyvals.pro", "", "", " NAME: 	dat_parse_keyvals    PURPOSE: 	Parses an array strings containing keyword=value pairs.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	kv = dat_parse_keyvals(keyvals)    ARGUMENTS:   INPUT: 	keyvals:	Array of strings of the form <keyword>=<value>.    OUTPUT:    KEYWORDS:   INPUT: NONE    OUTPUT: 	keywords:	Array of keywords.    RETURN: 	Array of type keyval_struct containing the parsed keywords 	and values.  One element per input array element.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_parse_keyvals.html#dat_parse_keyvals", "dat_parse_keyvals", 'routine in <a href="./dat_parse_keyvals.html">dat_parse_keyvals.pro</a>', "dat_parse_keyvals.pro", "", "dat_parse_keyvals", "", "keywordskeyvals", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_parse_transient_keyvals.html", "dat_parse_transient_keyvals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_parse_transient_keyvals.pro", "", "", " NAME: 	dat_parse_transient_keyvals    PURPOSE: 	Parses a comma-delimited transient argument string into an of array 	of strings containing keyword=value pairs.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	keyvals = dat_parse_transient_keyvals(trs)    ARGUMENTS:   INPUT: 	trs:	Transient argument string.    OUTPUT:    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	Array of strings containing keyword=value pairs.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_parse_transient_keyvals.html#dat_parse_transient_keyvals", "dat_parse_transient_keyvals", 'routine in <a href="./dat_parse_transient_keyvals.html">dat_parse_transient_keyvals.pro</a>', "dat_parse_transient_keyvals.pro", "", "dat_parse_transient_keyvals", "", "trs", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_put_value.html", "dat_put_value.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_put_value.pro", "", "", " NAME: 	dat_put_value    PURPOSE: 	Calls output translators, supplying the given keyword and value.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_put_value, dd, keyword, value    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	keyword:	Keyword to pass to translators, describing the 			requested quantity.  	value:		Value to write through the translators.    OUTPUT: NONE    KEYWORDS:   INPUT: 	trs:		Transient argument string.  	tr_disable:	If set, dat_get_value returns without performing 			any action.  	tr_override:	Comma-delimited list of translators to use instead 			of those stored in dd.    OUTPUT: 	status:		0 if at least one translator call was successful, 			-1 otherwise.    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_put_value.html#dat_put_value", "dat_put_value", 'routine in <a href="./dat_put_value.html">dat_put_value.pro</a>', "dat_put_value.pro", "", "dat_put_value", "", "trsstatusddkeywordvalue@nv_trs_keywords_include.pro", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_query.html", "dat_query.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_query.pro", "", "", " NAME: 	dat_query    PURPOSE: 	Returns the fields associated with a CAMERA object.  This is a 	convenient way of getting multiple fields in one call, and only a 	single event is generated.    CATEGORY: 	NV/OBJ/CAM    CALLING SEQUENCE: 	dat_query, cd, <keywords>=<values>    ARGUMENTS:   INPUT: 	cd:	CAMERA object.    OUTPUT: NONE    KEYWORDS:   INPUT: 	<keywords>:	CAMERA object fields to set.  	condition:	Structure specifing a mask and a condition with which to 			match flag values.  The structure must contain the fields 			MASK and STATE.  MASK is a bitmask to test against 			the flags field of the POINT object, and STATE 			is either PS_TRUE and PS_FALSE.  Note that in this case, 			the values will be returned as a list, with no separation 			into nv and nt dimensions.  	cat:		If set, arrays from mulitple input objets are 			concatenated.  	<condition>:	All of the predefined conditions (e.g. /visible) are 			accepted; see pnt_condition_keywords.include.  	noevent:	If set, no event is generated.    OUTPUT: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale, 2/2017   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_query.html#dat_query", "dat_query", 'routine in <a href="./dat_query.html">dat_query.pro</a>', "dat_query.pro", "", "dat_query", "", "conditioncatnoeventxd@dat__keywords.include", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_read.html", "dat_read.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_read.pro", "", "", " NAME: 	dat_read    PURPOSE: 	Reads a data file of arbitrary format and produces a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dd = dat_read(filespec [, data, header])    ARGUMENTS:   INPUT: 	filespec:	Array of strings giving file specifications for 			file to read.    OUTPUT: 	data:		Data array from the last file read.  This is provided 			as a convenience when reading single files so that 			it is not necessary to call dat_data to get the array.  	header:		Header array from the last file read.  This is provided 			as a convenience when reading single files so that 			it is not necessary to call dat_header to get the array.    KEYWORDS:   INPUT: 	filetype:	Overrides automatic filetype detection.  	input_fn:	Overrides input function lookup.  	output_fn:	Overrides output function lookup.  	tab_translators:	Name of translators table to use instead of 				that given by the environment variable 				NV_TRANSLATORS.  If no path is given, then the 				file is assumed to reside in the same directory 				as the translator named by the NV_TRANSLATORS 				environment variable.  	input_translator:	Use this input translator name instead of 				looking it up in the table.  	output_translator:	Use this output translator name instead of 				looking it up in the table.  	instrument:	Use this instrument name instead of attempting to 			detect it.  	sample:		Vector giving the sampling indices in the input data 			file.  This parameter is passed through to the input 			function, which may choose to ignore it.  	extensions:	If given, these extensions are attempted for each file. 			If a file with the extension is not found, then the next 			extension is tried until no extensions are left to try. 			If no extensions work, then the raw filename is attemtped.     OUTPUT: NONE     ENVIRONMENT VARIABLES: 	NV_TRANSLATORS:		Name(s) of the translators table(s) to use unless 				overridden by the tab_translators keyword. 				Multiple table names are delimited with ':'.  	NV_FTP_DETECT:		Name(s) of the filetype detectors table(s). 				Multiple table names are delimited with ':'.  	NV_IO:			Name(s) of the I/O table(s). 				Multiple table names are delimited with ':'.  	NV_INS_DETECT:		Name(s) of the instrument detectors table(s). 				Multiple table names are delimited with ':'.    RETURN: 	Array of data descriptors - one for each file resulting from the 	expansion of the given file specifications.    PROCEDURE: 	dat_read expands all file specifications and then attempts to detect 	the filetype for each resulting filename using the filetype detectors 	table.  If a filetype is detected, dat_read looks up the I/O functions 	and calls the input function to read the file.  Finally, it calls 	nv_init_descriptor to obtain a data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_write    MODIFICATION HISTORY:  	Written by:	Spitale, 2/1998   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_read.html#drd_read", "drd_read", 'routine in <a href="./dat_read.html">dat_read.pro</a>', "dat_read.pro", "", "drd_read", "", "filetypeinput_fnoutput_fnkeyword_fninstrumentinput_translatorsoutput_translatorsinput_transformsoutput_transformstab_translatorsmaintaincompresssamplenodatanamenhistextensions_filenamedataheader", "          -1", "");
  
  libdata[libdataItem++] = new Array("./dat_read.html#dat_read", "dat_read", 'routine in <a href="./dat_read.html">dat_read.pro</a>', "dat_read.pro", "", "dat_read", "", "filetypeinput_fnoutput_fnkeyword_fninstrumentinput_translatorsoutput_translatorsinput_transformsoutput_transformstab_translatorsmaintaincompresssamplenodatanamenhistextensionsfilespecdataheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_read_config.html", "dat_read_config.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_read_config.pro", "", "", " NAME: 	dat_read_config    PURPOSE: 	Reads an NV configuration table.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_read_config, env, table_p, filenames_p    ARGUMENTS:   INPUT: 	env:	Name of an environment variable giving the names of the 		configuration files to read, delimited by ':'.    OUTPUT: 	table_p:	Pointer to the configuration table contructed by 			concatenating the contents of each file.  	filenames_p:	List of configuration filenames that were read.    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_read_config.html#dat_read_config", "dat_read_config", 'routine in <a href="./dat_read_config.html">dat_read_config.pro</a>', "dat_read_config.pro", "", "dat_read_config", "", "continuestatusenvtable_pfilenames_p", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_redo.html", "dat_redo.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_redo.pro", "", "", " NAME: 	dat_redo    PURPOSE: 	Decrements the data archive index in the data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	dat_redo, dd    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 7/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_redo.html#dat_redo", "dat_redo", 'routine in <a href="./dat_redo.html">dat_redo.pro</a>', "dat_redo.pro", "", "dat_redo", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_replicate.html", "dat_replicate.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_replicate.pro", "", "", " NAME: 	dat_replicate    PURPOSE: 	Replicates the given descriptor, producing an array of the given 	dimensions containing cloned versions of the input descriptor.    CATEGORY: 	NV/LIB/BOD    CALLING SEQUENCE: 	dds = dat_replicate(dd, dim)    ARGUMENTS:   INPUT: 	dd:	 Data deccriptor to replicate.  	dim:	 Dimensions of the result.    OUTPUT: NONE    KEYWORDS:   INPUT: 	fn:	Name of the cloning function.  Default is nv_clone.    OUTPUT: NONE    RETURN: 	Array of the given dimensions containing cloned versions of the input 	data descriptor.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_replicate.html#dat_replicate", "dat_replicate", 'routine in <a href="./dat_replicate.html">dat_replicate.pro</a>', "dat_replicate.pro", "", "dat_replicate", "", "fndddim", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_sampling_data.html", "dat_sampling_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_sampling_data.pro", "", "", " NAME: 	dat_sampling_data    PURPOSE: 	Returns the sampling function associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	sampling_data = dat_sampling_data(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The sampling_data associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_sampling_data    MODIFICATION HISTORY:  	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_sampling_data.html#dat_sampling_data", "dat_sampling_data", 'routine in <a href="./dat_sampling_data.html">dat_sampling_data.pro</a>', "dat_sampling_data.pro", "", "dat_sampling_data", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_sampling_fn.html", "dat_sampling_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_sampling_fn.pro", "", "", " NAME: 	dat_sampling_fn    PURPOSE: 	Returns the sampling function associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	sampling_fn = dat_sampling_fn(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	The sampling_fn associated with the data descriptor.    STATUS: 	Complete    SEE ALSO: 	dat_set_sampling_fn    MODIFICATION HISTORY:  	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_sampling_fn.html#dat_sampling_fn", "dat_sampling_fn", 'routine in <a href="./dat_sampling_fn.html">dat_sampling_fn.pro</a>', "dat_sampling_fn.pro", "", "dat_sampling_fn", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_compress.html", "dat_set_compress.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_compress.pro", "", "", " NAME: 	dat_set_compress    PURPOSE: 	Replaces the name of the compression function in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_compress, dd, compress    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	compress:	String giving the name of a new compression function.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_compress.html#dat_set_compress", "dat_set_compress", 'routine in <a href="./dat_set_compress.html">dat_set_compress.pro</a>', "dat_set_compress.pro", "", "dat_set_compress", "", "ddcompress", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_data.html", "dat_set_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_data.pro", "", "", " NAME: 	dat_set_data    PURPOSE: 	Replaces the data array associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_data, dd, data    ARGUMENTS:   INPUT: 	dd:	Data descriptor.  	data:	New data array.    OUTPUT: 	dd:	Modified data descriptor.    KEYWORDS:   INPUT: 	abscissa: If set, the given array is taken as the abscissa.  	update:	Update mode flag.  If not given, it will be taken from dd.    OUTPUT: NONE    RETURN: NONE    STATUS: 	Does not yet support sampling.    SEE ALSO: 	dat_data    MODIFICATION HISTORY:  	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_data.html#dat_set_data", "dat_set_data", 'routine in <a href="./dat_set_data.html">dat_set_data.pro</a>', "dat_set_data.pro", "", "dat_set_data", "", "updatenoeventabscissasampledd_data", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_dh.html", "dat_set_dh.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_dh.pro", "", "", " NAME: 	dat_set_dh    PURPOSE: 	Replaces the dh value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_dh, dd, dh    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	dh:	New dh value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_dh.html#dat_set_dh", "dat_set_dh", 'routine in <a href="./dat_set_dh.html">dat_set_dh.pro</a>', "dat_set_dh.pro", "", "dat_set_dh", "", "noeventdddh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_dim.html", "dat_set_dim.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_dim.pro", "", "", " NAME: 	dat_set_dim    PURPOSE: 	Replaces the dimensions in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_dim, dd, dim    ARGUMENTS:   INPUT: 	dd:	Data descriptor.  	dim:	New dimensions.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_dim.html#dat_set_dim", "dat_set_dim", 'routine in <a href="./dat_set_dim.html">dat_set_dim.pro</a>', "dat_set_dim.pro", "", "dat_set_dim", "", "noeventdddim", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_dim_data.html", "dat_set_dim_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_dim_data.pro", "", "", " NAME: 	dat_set_dim_data    PURPOSE: 	Replaces the dimension function data associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_dim_data, dd, dim_data    ARGUMENTS:   INPUT: 	dd:			Data descriptor.  	dim_data:	New sampling function data.    OUTPUT: 	dd:	Modified data descriptor.    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    SEE ALSO: 	dat_dim_data    MODIFICATION HISTORY:  	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_dim_data.html#dat_set_dim_data", "dat_set_dim_data", 'routine in <a href="./dat_set_dim_data.html">dat_set_dim_data.pro</a>', "dat_set_dim_data.pro", "", "dat_set_dim_data", "", "noeventdddata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_dim_fn.html", "dat_set_dim_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_dim_fn.pro", "", "", " NAME: 	dat_set_dim_fn    PURPOSE: 	Replaces the dimension function associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_dim_fn, dd, dim_fn    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	dim_fn:	New sampling function.    OUTPUT: 	dd:	Modified data descriptor.    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    SEE ALSO: 	dat_dim_fn    MODIFICATION HISTORY:  	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_dim_fn.html#dat_set_dim_fn", "dat_set_dim_fn", 'routine in <a href="./dat_set_dim_fn.html">dat_set_dim_fn.pro</a>', "dat_set_dim_fn.pro", "", "dat_set_dim_fn", "", "noeventdddim_fn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_filename.html", "dat_set_filename.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_filename.pro", "", "", " NAME: 	dat_set_filename    PURPOSE: 	Changes the file name associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_filename, dd, filename    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	filename:	New file name.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_filename.html#dat_set_filename", "dat_set_filename", 'routine in <a href="./dat_set_filename.html">dat_set_filename.pro</a>', "dat_set_filename.pro", "", "dat_set_filename", "", "noeventddfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_filetype.html", "dat_set_filetype.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_filetype.pro", "", "", " NAME: 	dat_set_filetype    PURPOSE: 	Changes the file name associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_filetype, dd, filetype    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	filetype:	New file name.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_filetype.html#dat_set_filetype", "dat_set_filetype", 'routine in <a href="./dat_set_filetype.html">dat_set_filetype.pro</a>', "dat_set_filetype.pro", "", "dat_set_filetype", "", "noeventddfiletype", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_gd.html", "dat_set_gd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_gd.pro", "", "", " NAME: 	dat_set_gd    PURPOSE: 	Updates a generic descriptor contained in an object.  Similar to 	cor_set_gd, except descriptor inputs are sorted according to the 	data descriptors contained in their generic descriptors.    CATEGORY: 	NV/PG    CALLING SEQUENCE: 	dat_set_gd, xd, gd, <descriptor keywords>    ARGUMENTS:   INPUT: 	xd:	Objects to modify.  The fields from any existing generic 		descriptors in these objects are retained in the new ones.  	gd:	New generic descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: 	<x>d:	Input keyword for each descriptor type.  These are sorted 		according to associated data descriptors.     OUTPUT: NONE    RETURN: NONE     MODIFICATION HISTORY:  	Written by:	Spitale		2/2017   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_gd.html#dat_set_gd", "dat_set_gd", 'routine in <a href="./dat_set_gd.html">dat_set_gd.pro</a>', "dat_set_gd.pro", "", "dat_set_gd", "", "_extraxdgd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_gff.html", "dat_set_gff.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_gff.pro", "", "", " NAME: 	dat_set_gff    PURPOSE: 	Replaces the gff value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_gff, dd, gff    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	gff:	New gff value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_gff.html#dat_set_gff", "dat_set_gff", 'routine in <a href="./dat_set_gff.html">dat_set_gff.pro</a>', "dat_set_gff.pro", "", "dat_set_gff", "", "noeventddgff", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_header.html", "dat_set_header.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_header.pro", "", "", " NAME: 	dat_set_header    PURPOSE: 	Replaces the header array associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_header, dd, header    ARGUMENTS:   INPUT: 	dd:	Data descriptor.  	header:	New header array.    OUTPUT: 	dd:	Modified data descriptor.    KEYWORDS:   INPUT: 	update:	Update mode flag.  If not given, it will be taken from dd.    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    SEE ALSO: 	dat_header    MODIFICATION HISTORY:  	Written by:	Spitale, 2/1998  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_header.html#dat_set_header", "dat_set_header", 'routine in <a href="./dat_set_header.html">dat_set_header.pro</a>', "dat_set_header.pro", "", "dat_set_header", "", "updatenoeventddheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_input_fn.html", "dat_set_input_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_input_fn.pro", "", "", " NAME: 	dat_set_input_fn    PURPOSE: 	Replaces the input_fn value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_input_fn, dd, input_fn    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	input_fn:	New input_fn value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_input_fn.html#dat_set_input_fn", "dat_set_input_fn", 'routine in <a href="./dat_set_input_fn.html">dat_set_input_fn.pro</a>', "dat_set_input_fn.pro", "", "dat_set_input_fn", "", "noeventddinput_fn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_input_keyvals.html", "dat_set_input_keyvals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_input_keyvals.pro", "", "", " NAME: 	dat_set_input_keyvals    PURPOSE: 	Replaces the input_keyvals value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_input_keyvals, dd, input_keyvals    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	input_keyvals:	New input_keyvals value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_input_keyvals.html#dat_set_input_keyvals", "dat_set_input_keyvals", 'routine in <a href="./dat_set_input_keyvals.html">dat_set_input_keyvals.pro</a>', "dat_set_input_keyvals.pro", "", "dat_set_input_keyvals", "", "noeventddinput_keyvals", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_input_transforms.html", "dat_set_input_transforms.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_input_transforms.pro", "", "", " NAME: 	dat_set_input_transforms    PURPOSE: 	Replaces the input_transforms value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_input_transforms, dd, input_transforms    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	input_transforms:	New input_transforms value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_input_transforms.html#dat_set_input_transforms", "dat_set_input_transforms", 'routine in <a href="./dat_set_input_transforms.html">dat_set_input_transforms.pro</a>', "dat_set_input_transforms.pro", "", "dat_set_input_transforms", "", "noeventddinput_transforms", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_input_translators.html", "dat_set_input_translators.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_input_translators.pro", "", "", " NAME: 	dat_set_input_translators    PURPOSE: 	Replaces the input_translators value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_input_translators, dd, input_translators    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	input_translators:	New input_translators value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_input_translators.html#dat_set_input_translators", "dat_set_input_translators", 'routine in <a href="./dat_set_input_translators.html">dat_set_input_translators.pro</a>', "dat_set_input_translators.pro", "", "dat_set_input_translators", "", "noeventddinput_translators", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_instrument.html", "dat_set_instrument.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_instrument.pro", "", "", " NAME: 	dat_set_instrument    PURPOSE: 	Changes the file name associated with a data descriptor.    CATEGORY: 	NV/OBJ/COR    CALLING SEQUENCE: 	dat_set_instrument, dd, instrument    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	instrument:	New instrument name.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_instrument.html#dat_set_instrument", "dat_set_instrument", 'routine in <a href="./dat_set_instrument.html">dat_set_instrument.pro</a>', "dat_set_instrument.pro", "", "dat_set_instrument", "", "noeventddinstrument", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_keyword_fn.html", "dat_set_keyword_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_keyword_fn.pro", "", "", " NAME: 	dat_set_keyword_fn    PURPOSE: 	Replaces the keyword_fn value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_keyword_fn, dd, keyword_fn    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	keyword_fn:	New keyword_fn value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_keyword_fn.html#dat_set_keyword_fn", "dat_set_keyword_fn", 'routine in <a href="./dat_set_keyword_fn.html">dat_set_keyword_fn.pro</a>', "dat_set_keyword_fn.pro", "", "dat_set_keyword_fn", "", "noeventddkeyword_fn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_maintain.html", "dat_set_maintain.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_maintain.pro", "", "", " NAME: 	dat_set_maintain    PURPOSE: 	Replaces the maintain flag in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_maintain, dd, maintain    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	maintain:	New maintain flag.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_maintain.html#dat_set_maintain", "dat_set_maintain", 'routine in <a href="./dat_set_maintain.html">dat_set_maintain.pro</a>', "dat_set_maintain.pro", "", "dat_set_maintain", "", "noeventddmaintain", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_max.html", "dat_set_max.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_max.pro", "", "", " NAME: 	dat_set_max    PURPOSE: 	Replaces the max value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_max, dd, max    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	max:	New max value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_max.html#dat_set_max", "dat_set_max", 'routine in <a href="./dat_set_max.html">dat_set_max.pro</a>', "dat_set_max.pro", "", "dat_set_max", "", "noeventabscissaddmax", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_min.html", "dat_set_min.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_min.pro", "", "", " NAME: 	dat_set_min    PURPOSE: 	Replaces the min value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_min, dd, min    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	min:	New min value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_min.html#dat_set_min", "dat_set_min", 'routine in <a href="./dat_set_min.html">dat_set_min.pro</a>', "dat_set_min.pro", "", "dat_set_min", "", "noeventabscissaddmin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_ndd.html", "dat_set_ndd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_ndd.pro", "", "", " NAME: 	dat_set_ndd    PURPOSE: 	Sets a new ndd value in the NV state structure.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_ndd, ndd    ARGUMENTS:   INPUT: 	ndd:	New ndd value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 1998   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_ndd.html#dat_set_ndd", "dat_set_ndd", 'routine in <a href="./dat_set_ndd.html">dat_set_ndd.pro</a>', "dat_set_ndd.pro", "", "dat_set_ndd", "", "ndd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_nhist.html", "dat_set_nhist.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_nhist.pro", "", "", " NAME: 	dat_set_nhist    PURPOSE: 	Changes the number of past states archived in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_nhist, dd, nhist    ARGUMENTS:   INPUT: 	dd:	Data descriptor.  	nhist:	New nhist value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_nhist.html#dat_set_nhist", "dat_set_nhist", 'routine in <a href="./dat_set_nhist.html">dat_set_nhist.pro</a>', "dat_set_nhist.pro", "", "dat_set_nhist", "", "noeventddnhist", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_output_fn.html", "dat_set_output_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_output_fn.pro", "", "", " NAME: 	dat_set_output_fn    PURPOSE: 	Replaces the output_fn value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_output_fn, dd, output_fn    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	output_fn:	New output_fn value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_output_fn.html#dat_set_output_fn", "dat_set_output_fn", 'routine in <a href="./dat_set_output_fn.html">dat_set_output_fn.pro</a>', "dat_set_output_fn.pro", "", "dat_set_output_fn", "", "noeventddoutput_fn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_output_keyvals.html", "dat_set_output_keyvals.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_output_keyvals.pro", "", "", " NAME: 	dat_set_output_keyvals    PURPOSE: 	Replaces the output_keyvals value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_output_keyvals, dd, output_keyvals    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	output_keyvals:	New output_keyvals value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_output_keyvals.html#dat_set_output_keyvals", "dat_set_output_keyvals", 'routine in <a href="./dat_set_output_keyvals.html">dat_set_output_keyvals.pro</a>', "dat_set_output_keyvals.pro", "", "dat_set_output_keyvals", "", "noeventddoutput_keyvals", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_output_transforms.html", "dat_set_output_transforms.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_output_transforms.pro", "", "", " NAME: 	dat_set_output_transforms    PURPOSE: 	Replaces the output_transforms value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_output_transforms, dd, output_transforms    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	output_transforms:	New output_transforms value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_output_transforms.html#dat_set_output_transforms", "dat_set_output_transforms", 'routine in <a href="./dat_set_output_transforms.html">dat_set_output_transforms.pro</a>', "dat_set_output_transforms.pro", "", "dat_set_output_transforms", "", "noeventddoutput_transforms", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_output_translators.html", "dat_set_output_translators.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_output_translators.pro", "", "", " NAME: 	dat_set_output_translators    PURPOSE: 	Replaces the output_translators value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_output_translators, dd, output_translators    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	output_translators:	New output_translators value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_output_translators.html#dat_set_output_translators", "dat_set_output_translators", 'routine in <a href="./dat_set_output_translators.html">dat_set_output_translators.pro</a>', "dat_set_output_translators.pro", "", "dat_set_output_translators", "", "noeventddoutput_translators", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_sampling_data.html", "dat_set_sampling_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_sampling_data.pro", "", "", " NAME: 	dat_set_sampling_data    PURPOSE: 	Replaces the sampling function data associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_sampling_data, dd, sampling_data    ARGUMENTS:   INPUT: 	dd:			Data descriptor.  	sampling_data:	New sampling function data.    OUTPUT: 	dd:	Modified data descriptor.    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    SEE ALSO: 	dat_sampling_data    MODIFICATION HISTORY:  	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_sampling_data.html#dat_set_sampling_data", "dat_set_sampling_data", 'routine in <a href="./dat_set_sampling_data.html">dat_set_sampling_data.pro</a>', "dat_set_sampling_data.pro", "", "dat_set_sampling_data", "", "noeventdddata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_sampling_fn.html", "dat_set_sampling_fn.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_sampling_fn.pro", "", "", " NAME: 	dat_set_sampling_fn    PURPOSE: 	Replaces the sampling function associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_sampling_fn, dd, sampling_fn    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	sampling_fn:	New sampling function.    OUTPUT: 	dd:	Modified data descriptor.    KEYWORDS:   INPUT: 	data 	Data to be sent to the sampling function.    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    SEE ALSO: 	dat_sampling_fn    MODIFICATION HISTORY:  	Written by:	Spitale, 7/2015  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_sampling_fn.html#dat_set_sampling_fn", "dat_set_sampling_fn", 'routine in <a href="./dat_set_sampling_fn.html">dat_set_sampling_fn.pro</a>', "dat_set_sampling_fn.pro", "", "dat_set_sampling_fn", "", "datanoeventddsampling_fn", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_sibling.html", "dat_set_sibling.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_sibling.pro", "", "", " NAME: 	dat_set_sibling    PURPOSE: 	Changes the sibling in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_sibling, dd, dd_sibling    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	dd_sibling:	Data descriptor of new sibling.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_sibling.html#dat_set_sibling", "dat_set_sibling", 'routine in <a href="./dat_set_sibling.html">dat_set_sibling.pro</a>', "dat_set_sibling.pro", "", "dat_set_sibling", "", "noeventdddd_sibling", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_slice.html", "dat_set_slice.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_slice.pro", "", "", " NAME: 	dat_set_slice    PURPOSE: 	Sets slice coordinates in a data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	dat_set_slice, dd, dd0, slice    ARGUMENTS:   INPUT: 	dd:	Data descriptorin which to set the slice coordinates.  	dd0:	Data descriptorin describing the source data array.  	slice:	Array giving the slice coordinates.    OUTPUT: NONE    KEYWORDS:   INPUT: 	new:	If set, a new slice pointer is allocated instead of overwriting 		the exiting data.    OUTPUT: NONE    RETURN: NONE    MODIFICATION HISTORY:  	Written by:	Spitale		6/2017   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_slice.html#dat_set_slice", "dat_set_slice", 'routine in <a href="./dat_set_slice.html">dat_set_slice.pro</a>', "dat_set_slice.pro", "", "dat_set_slice", "", "newdddd0slice", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_typecode.html", "dat_set_typecode.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_typecode.pro", "", "", " NAME: 	dat_set_typecode    PURPOSE: 	Replaces the typecode value in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_typecode, dd, typecode    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	typecode:	New typecode value.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_typecode.html#dat_set_typecode", "dat_set_typecode", 'routine in <a href="./dat_set_typecode.html">dat_set_typecode.pro</a>', "dat_set_typecode.pro", "", "dat_set_typecode", "", "noeventddtypecode", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_set_update.html", "dat_set_update.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_set_update.pro", "", "", " NAME: 	dat_set_update    PURPOSE: 	Changes the update flag in a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_set_update, dd, update    ARGUMENTS:   INPUT: 	dd:	Data descriptor.  	update:	New update flag.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete     MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_set_update.html#dat_set_update", "dat_set_update", 'routine in <a href="./dat_set_update.html">dat_set_update.pro</a>', "dat_set_update.pro", "", "dat_set_update", "", "noeventddupdate", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_sibling.html", "dat_sibling.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_sibling.pro", "", "", " NAME: 	dat_sibling    PURPOSE: 	Returns the sibling data descriptor associated with a data 	descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	sibling_dd = dat_sibling(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	Data descriptor of the sibling.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_sibling.html#dat_sibling", "dat_sibling", 'routine in <a href="./dat_sibling.html">dat_sibling.pro</a>', "dat_sibling.pro", "", "dat_sibling", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_slice.html", "dat_slice.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_slice.pro", "", "", " NAME: 	dat_slice    PURPOSE: 	Returns the slice coordinates for the given data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dim = dat_slice(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	Array giving the slice coordinates for the data descriptor.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 6/2017   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_slice.html#dat_slice", "dat_slice", 'routine in <a href="./dat_slice.html">dat_slice.pro</a>', "dat_slice.pro", "", "dat_slice", "", "dd0noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_slice__define.html", "dat_slice__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_slice__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_slice__define.html#dat_slice__define", "dat_slice__define", 'routine in <a href="./dat_slice__define.html">dat_slice__define.pro</a>', "dat_slice__define.pro", "", "dat_slice__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_slice_offset.html", "dat_slice_offset.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_slice_offset.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_slice_offset.html#dat_slice_offset", "dat_slice_offset", 'routine in <a href="./dat_slice_offset.html">dat_slice_offset.pro</a>', "dat_slice_offset.pro", "", "dat_slice_offset", "", "arg", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_slices.html", "dat_slices.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_slices.pro", "", "", " NAME: 	dat_slices    PURPOSE: 	Creates new data descriptors that point to a subarray slices in a given 	data descriptor.    CATEGORY: 	NV/OBJ/DAT    CALLING SEQUENCE: 	new_dd = dat_slices(dd, h, q)    ARGUMENTS:   INPUT: 	dd:	Data descriptor containing N-dimensional data array.  	slice:	m x n array giving coordinates of n m-dimensional arrays to 		select. If not given, the original data array is sliced into 		arrays of one dimension smaller, i.e., a cube is sliced 		into its constituent images, and an image is sliced into its 		constituent lines etc.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	New data descriptors for the selected data arrays.  Dimensions are N - m. 	Note that new data arrays are not allocated.  Instead, the returned 	descriptors point to the subarray within the data array of the input 	data descriptor.    EXAMPLE: 	1) Extract the ith image of a 3-dimensional data cube:  		new_dd = dat_slices(dd, i)  	2) Extract the ith cube of a 4-dimensional data array:  		new_dd = dat_slices(dd, i)  	3) Extract the ith image in the jth cube of a 4-dimensional data array:  		new_dd = dat_slices(dd, [i,j])     MODIFICATION HISTORY:  	Written by:	Spitale		6/2017   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_slices.html#dat_slices", "dat_slices", 'routine in <a href="./dat_slices.html">dat_slices.pro</a>', "dat_slices.pro", "", "dat_slices", "", "dd0slice", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_test_dd.html", "dat_test_dd.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_test_dd.pro", "", "", " NAME: 	dat_test_dd    PURPOSE: 	Determines whether the argument is a valid data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	test = dat_test_dd(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor to test.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	True if the argument is present, is a valid pointer, and 	points to a data descriptor.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_test_dd.html#dat_test_dd", "dat_test_dd", 'routine in <a href="./dat_test_dd.html">dat_test_dd.pro</a>', "dat_test_dd.pro", "", "dat_test_dd", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_transform_input.html", "dat_transform_input.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_transform_input.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_transform_input.html#dat_transform_input", "dat_transform_input", 'routine in <a href="./dat_transform_input.html">dat_transform_input.pro</a>', "dat_transform_input.pro", "", "dat_transform_input", "", "_dddataheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_transform_output.html", "dat_transform_output.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_transform_output.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_transform_output.html#dat_transform_output", "dat_transform_output", 'routine in <a href="./dat_transform_output.html">dat_transform_output.pro</a>', "dat_transform_output.pro", "", "dat_transform_output", "", "_dddataheader", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_typecode.html", "dat_typecode.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_typecode.pro", "", "", " NAME: 	dat_typecode    PURPOSE: 	Returns the type code associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	typecode = dat_typecode(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	Integer giving the typecode.    STATUS: Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_typecode.html#dat_typecode", "dat_typecode", 'routine in <a href="./dat_typecode.html">dat_typecode.pro</a>', "dat_typecode.pro", "", "dat_typecode", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_uncompress_data_mask.html", "dat_uncompress_data_mask.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_uncompress_data_mask.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_uncompress_data_mask.html#dat_uncompress_data_mask", "dat_uncompress_data_mask", 'routine in <a href="./dat_uncompress_data_mask.html">dat_uncompress_data_mask.pro</a>', "dat_uncompress_data_mask.pro", "", "dat_uncompress_data_mask", "", "_dd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_undo.html", "dat_undo.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_undo.pro", "", "", " NAME: 	dat_undo    PURPOSE: 	Increments the data archive index in the data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_undo, dd    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_undo.html#dat_undo", "dat_undo", 'routine in <a href="./dat_undo.html">dat_undo.pro</a>', "dat_undo.pro", "", "dat_undo", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_unload_data.html", "dat_unload_data.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_unload_data.pro", "", "", " NAME: 	dat_unload_data    PURPOSE: 	Unloads the dat descriptor data array and removes dd from the NV 	state maintained list if present.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_unload_data, dd    ARGUMENTS:   INPUT: 	dd:	Data descriptor to test.    OUTPUT: NONE    KEYWORDS:   INPUT: 	all:	If set, all maintained data descriptors are unloaded.    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_unload_data.html#dat_unload_data", "dat_unload_data", 'routine in <a href="./dat_unload_data.html">dat_unload_data.pro</a>', "dat_unload_data.pro", "", "dat_unload_data", "", "alldd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_update.html", "dat_update.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_update.pro", "", "", " NAME: 	dat_update    PURPOSE: 	Returns the update flag associated with a data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	update = dat_update(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	Data descriptor update flag.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_update.html#dat_update", "dat_update", 'routine in <a href="./dat_update.html">dat_update.pro</a>', "dat_update.pro", "", "dat_update", "", "noeventdd", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_valid_descriptor.html", "dat_valid_descriptor.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_valid_descriptor.pro", "", "", " NAME: 	dat_valid_descriptor    PURPOSE: 	Determines whether the argument is a valid data descriptor, 	or data descriptor structure.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	test = dat_valid_descriptor(dd)    ARGUMENTS:   INPUT: 	dd:	Data descriptor to test.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	True if the argument is a data descriptor structure or a 	pointer to one.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_valid_descriptor.html#dat_valid_descriptor", "dat_valid_descriptor", 'routine in <a href="./dat_valid_descriptor.html">dat_valid_descriptor.pro</a>', "dat_valid_descriptor.pro", "", "dat_valid_descriptor", "", "ddp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./dat_write.html", "dat_write.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "dat_write.pro", "", "", " NAME: 	dat_write    PURPOSE: 	Writes a data file of arbitrary format.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	dat_write, filespec, dd 	dat_write, dd    ARGUMENTS:   INPUT: 	filespec:	Array of strings giving file specifications for 			file to write.  Data descriptor filespec is 			updated unless /override.  	dd:		Array of data descriptors.  dd can also be given as the 			first argument, in which case, the file specifications 			are taken from the filename field of dd.    OUTPUT: NONE    KEYWORDS:   INPUT: 	filetype:	Overrides data descriptor filetype (and thus the 			output function).  Data descriptor filetype is 			updated unless /override.  	output_fn:	Overrides data descriptor output function.  Data 			descriptor output_fn is updated unless /override.  	override:	If set, filespec, filetype, and output_fn inputs 			are used for this call, but not updated in the data 			descriptor.     OUTPUT: NONE    RETURN: NONE    PROCEDURE: 	dat_write expands all file specifications and attempts to write a 	file corresponding to each given data descriptor.  An error results 	if the filespec expands to a different number of files than the number 	of given data descriptors.    STATUS: 	Complete    SEE ALSO: 	dat_read    MODIFICATION HISTORY:  	Written by:	Spitale, 7/1998  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./dat_write.html#dat_write", "dat_write", 'routine in <a href="./dat_write.html">dat_write.pro</a>', "dat_write.pro", "", "dat_write", "", "nodatafiletypeoutput_fnoverridearg1arg2", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/detect_dh.html", "detect_dh.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "detect_dh.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/detect_dh.html#detect_dh", "detect_dh", 'routine in <a href="dh/util/detect_dh.html">detect_dh.pro</a>', "detect_dh.pro", "", "detect_dh", "", "ddudata", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_create.html", "dh_create.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_create.pro", "", "", " NAME: 	dh_create    PURPOSE: 	Creates a minimal detached header.    CATEGORY: 	UTIL/DH    CALLING SEQUENCE: 	result = dh_create()    ARGUMENTS:   INPUT: NONE    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	String array in which each element is a line of the detached header.    PROCEDURE: 	dh_create creates a detached header containing a history line and 	the '<updates>' separator.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 7/1998   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_create.html#dh_create", "dh_create", 'routine in <a href="dh/util/dh_create.html">dh_create.pro</a>', "dh_create.pro", "", "dh_create", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_create_section.html", "dh_create_section.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_create_section.pro", "", "", " NAME: 	dh_create_section    PURPOSE: 	Creates a minimal detached header section.    CATEGORY: 	UTIL/DH    CALLING SEQUENCE: 	result = dh_create_section(section)    ARGUMENTS:   INPUT: 	section:	Name of section to create.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	String array in which each element is a line of the new section.     STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 12/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_create_section.html#dh_create_section", "dh_create_section", 'routine in <a href="dh/util/dh_create_section.html">dh_create_section.pro</a>', "dh_create_section.pro", "", "dh_create_section", "", "section", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_field_name.html", "dh_field_name.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_field_name.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_field_name.html#dh_field_name", "dh_field_name", 'routine in <a href="dh/util/dh_field_name.html">dh_field_name.pro</a>', "dh_field_name.pro", "", "dh_field_name", "", "fieldprefix", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_fname.html", "dh_fname.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_fname.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_fname.html#dhfn_findfile", "dhfn_findfile", 'routine in <a href="dh/util/dh_fname.html">dh_fname.pro</a>', "dh_fname.pro", "", "dhfn_findfile", "", "dirnameext", "          -1", "");
  
  libdata[libdataItem++] = new Array("dh/util/dh_fname.html#dh_fname", "dh_fname", 'routine in <a href="dh/util/dh_fname.html">dh_fname.pro</a>', "dh_fname.pro", "", "dh_fname", "", "writefilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/dh_format_comment.html", "dh_format_comment.pro", '.pro file in <a href="dh/dir-overview.html">dh/ directory</a>', "dh_format_comment.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/dh_format_comment.html#dh_format_comment", "dh_format_comment", 'routine in <a href="dh/dh_format_comment.html">dh_format_comment.pro</a>', "dh_format_comment.pro", "", "dh_format_comment", "", "formatvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/dh_from_ominas.html", "dh_from_ominas.pro", '.pro file in <a href="dh/dir-overview.html">dh/ directory</a>', "dh_from_ominas.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/dh_from_ominas.html#dh_from_ominas", "dh_from_ominas", 'routine in <a href="dh/dh_from_ominas.html">dh_from_ominas.pro</a>', "dh_from_ominas.pro", "", "dh_from_ominas", "", "formatvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_get_string.html", "dh_get_string.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_get_string.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_get_string.html#dh_get_string", "dh_get_string", 'routine in <a href="dh/util/dh_get_string.html">dh_get_string.pro</a>', "dh_get_string.pro", "", "dh_get_string", "", "history_indexn_objdimstatussectiondhkeyword", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_get_value.html", "dh_get_value.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_get_value.pro", "", "", " NAME: 	dh_get_value    PURPOSE: 	Gets the value of a specified keyword.    CATEGORY: 	UTIL/DH    CALLING SEQUENCE: 	result = dh_get_value(dh, keyword)    ARGUMENTS:   INPUT: 	dh:		String giving the detached header.  	keyword:	String giving the keyword whose value is to be obtained.    OUTPUT: NONE    KEYWORDS:   INPUT: 	n_match:	Maximum number of matches to return.  If not given, 			all matches are returned.  	all_match:	If set, match all occurrences.  	all_object:	If set, match all object indices.  If not set, then 			match only object index 0.  	all_history:	If set, match all history indices.  If not set, then 			only the highest history index is matched.  	object_index:	If given, then match only this object index.  	history_index:	If given, then match only this history index.  	prefix:		If set, then match any keyword that begins with the 			given keyword string instead of requiring an exact 			match.  	section:	Name of detached header section from which to read the 			data.  If not specified, the data is read from the 			'updates' section.     OUTPUT: 	count:		Integer giving the numebr of keywords matched.  	match_keys:	String array giving the names of the keywords that were 			matched.  	match_objects:	Array giving the object index for each keyword returned 			in match_keywords.  	match_hist:	Array giving the history index for each keyword returned 			in match_keywords.    RETURN: 	Array giving values for all matching keywords.  The type of array is 	determined by the value found in the detached header.  Strings are 	returned as strings, numeric values are converted to double.    STATUS: 	Complete    SEE ALSO: 	dh_put_value, dh_rm_value    MODIFICATION HISTORY:  	Written by:	Spitale, 7/1998 	Added 'section' keyword: Spitale; 11/2001   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_get_value.html#dhgv_convert_value", "dhgv_convert_value", 'routine in <a href="dh/util/dh_get_value.html">dh_get_value.pro</a>', "dh_get_value.pro", "", "dhgv_convert_value", "", "val", "          -1", "");
  
  libdata[libdataItem++] = new Array("dh/util/dh_get_value.html#dh_get_value", "dh_get_value", 'routine in <a href="dh/util/dh_get_value.html">dh_get_value.pro</a>', "dh_get_value.pro", "", "dh_get_value", "", "n_matchall_matchall_objectall_historymatch_keyscountmatch_objectsmatch_historiesobject_indexhistory_indexprefixsection_dhkeyword", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_put_value.html", "dh_put_value.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_put_value.pro", "", "", " NAME: 	dh_put_value    PURPOSE: 	Sets the value of a specified keyword.    CATEGORY: 	UTIL/DH    CALLING SEQUENCE: 	dh_put_value, dh, keyword, value, $                          object_index=object_index, comment=comment    ARGUMENTS:   INPUT: 	dh:		String array giving the detached header.  If undefined, 			a minimal detached header is first created.  	keyword:	String giving the keyword whose value is to be updated.  	value:		Value to associate with this keyword.    OUTPUT: 	dh:		The dh argument is modified on return.    KEYWORDS:   INPUT: 	object_index:	Object index to use for this update.  Default is 0.  	comment:	String giving optional comment.  	section:	Section in which to place the data.  If not specified, 			the data is placed in the 'updates' section.  If 			the specified section does not exist, it is created.     OUTPUT: NONE    RETURN: NONE    SIDE EFFECTS: 	See procedure below; 'utime' and 'history' keywords are modified.    PROCEDURE: 	The data is appended to the top of the specified section of the detached 	header using the given object index and a history index that is one 	greater than the current value found in the detached header for this 	keyword.  The value of the 'utime' keyword corresponding to this history 	index is modified to reflect the current time.  If this history index is 	greater than that given by the 'history' keyword, then that value is 	modified as well.  	If 'value' is an array, then each element is written on a different line 	using the keyword with the same object index, history index, and 	comment, but whose element indices reflect the order that the data 	appear in the array.  	If 'value' is of string type, then each entry is enclosed in quotes.    EXAMPLE: 	The following commands:  		IDL> val=[7,6,5,4,3] 		IDL> dh_put_value, dh, 'test_key', val  	produce the following detached header:  	 history = -1 / Current history value 	 <updates> 	 utime = 2451022.404086 / Julian day of update - Mon Jul 27 9:41:53 1998 	 test_key(0) = 7 	 test_key(1) = 6 	 test_key(2) = 5 	 test_key(3) = 4 	 test_key(4) = 3     STATUS: 	Complete    SEE ALSO: 	dh_get_value, dh_rm_value    MODIFICATION HISTORY:  	Written by:	Spitale, 7/1998 	Added 'section' keyword: Spitale; 11/2001   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_put_value.html#dhpv_put", "dhpv_put", 'routine in <a href="dh/util/dh_put_value.html">dh_put_value.pro</a>', "dh_put_value.pro", "", "dhpv_put", "", "commentarrayformatdhlinekeywordvalueelemobjhist", "          -1", "");
  
  libdata[libdataItem++] = new Array("dh/util/dh_put_value.html#dh_put_value", "dh_put_value", 'routine in <a href="dh/util/dh_put_value.html">dh_put_value.pro</a>', "dh_put_value.pro", "", "dh_put_value", "", "object_indexcommentsectiondhkeywordvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_read.html", "dh_read.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_read.pro", "", "", " NAME: 	dh_read    PURPOSE: 	Reads a detached header file.    CATEGORY: 	UTIL/DH    CALLING SEQUENCE: 	result = dh_read(filename)    ARGUMENTS:   INPUT: 	filename:	Name of file to be read.    OUTPUT: NONE    KEYWORDS:   INPUT: 	buflen:		Number of lines to allocate at a time.  Default is 1000. 			The routine is faster with larger values of buflen, but 			less memory efficient.    OUTPUT: NONE    RETURN: 	String array in which each line is a line of the detached header. 	a blank detached header is created and returned if the file is 	not found.    STATUS: 	Complete    SEE ALSO: 	dh_write    MODIFICATION HISTORY:  	Written by:	Spitale, 7/1998   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_read.html#dh_read", "dh_read", 'routine in <a href="dh/util/dh_read.html">dh_read.pro</a>', "dh_read.pro", "", "dh_read", "", "buflenfilename", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_rm_value.html", "dh_rm_value.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_rm_value.pro", "", "", " NAME: 	dh_rm_value    PURPOSE: 	Deletes a specified keyword/value pair.    CATEGORY: 	UTIL/DH    CALLING SEQUENCE: 	dh_rm_value, dh, keyword    ARGUMENTS:   INPUT: 	dh:		String giving the detached header.  	keyword:	String giving the keyword to be deleted.    OUTPUT: 	dh:		dh is modified on return.     KEYWORDS:   INPUT: 	n_match:	Maximum number of matches to return.  If not given, 			all matches are returned.  	all_match:	If set, match all occurrences.  	all_object:	If set, match all object indices.  If not set, then 			match only object index 0.  	all_history:	If set, match all history indices.  If not set, 			then only the highest history index is matched.  	object_index:	If given, then match only this object index.  	history_index:	If given, then match only this history index.  	prefix:		If set, then match any keyword which begins with the 			given keyword string instead of requiring an exact 			match.    OUTPUT: 	count:		Integer giving the numebr of keywords matched.    RETURN: NONE    STATUS: 	Complete    SEE ALSO: 	dh_get_value, dh_put_value    MODIFICATION HISTORY:  	Written by:	Spitale, 7/1998   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_rm_value.html#dh_rm_value", "dh_rm_value", 'routine in <a href="dh/util/dh_rm_value.html">dh_rm_value.pro</a>', "dh_rm_value.pro", "", "dh_rm_value", "", "n_matchall_matchall_objectall_historycountobject_indexhistory_indexprefixdhkeyword", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_set.html", "dh_set.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_set.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_set.html#dh_set", "dh_set", 'routine in <a href="dh/util/dh_set.html">dh_set.pro</a>', "dh_set.pro", "", "dh_set", "", "dddh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/dh_std_input.html", "dh_std_input.pro", '.pro file in <a href="dh/dir-overview.html">dh/ directory</a>', "dh_std_input.pro", "", "", " NAME: 	dh_std_input    PURPOSE: 	Input translator for detached header    CATEGORY: 	NV/CONFIG    CALLING SEQUENCE(only to be called by dat_get_value): 	result = dh_std_input(dd, keyword)    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	keyword:	String giving the name of the translator quantity to 			read.    OUTPUT: 	NONE    KEYWORDS:   INPUT: 	NONE    OUTPUT: 	status:		Zero if valid data is returned     TRANSLATOR KEYWORDS: 	history:	History index to use in matching the keyword.  If not 			specified, the keyowrd with the highest history index 			is matched.    RETURN: 	Data associated with the requested keyword.    STATUS: 	Complete    SEE ALSO: 	dh_std_output    MODIFICATION HISTORY:  	Written by:	Spitale, 1998   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/dh_std_input.html#dhsi_associate_object", "dhsi_associate_object", 'routine in <a href="dh/dh_std_input.html">dh_std_input.pro</a>', "dh_std_input.pro", "", "dhsi_associate_object", "", "nameddall_xds", "          -1", "");
  
  libdata[libdataItem++] = new Array("dh/dh_std_input.html#dhsi_get", "dhsi_get", 'routine in <a href="dh/dh_std_input.html">dh_std_input.pro</a>', "dh_std_input.pro", "", "dhsi_get", "", "objhidhprefixddall_xds", "          -1", "");
  
  libdata[libdataItem++] = new Array("dh/dh_std_input.html#dh_std_input", "dh_std_input", 'routine in <a href="dh/dh_std_input.html">dh_std_input.pro</a>', "dh_std_input.pro", "", "dh_std_input", "", "valuesstatusddkeyword@nv_trs_keywords_include.pro", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/dh_std_output.html", "dh_std_output.pro", '.pro file in <a href="dh/dir-overview.html">dh/ directory</a>', "dh_std_output.pro", "", "", " NAME: 	dh_std_output    PURPOSE: 	Output translator for detached headers.    CATEGORY: 	NV/CONFIG    CALLING SEQUENCE(only to be called by dat_put_value): 	dh_std_output, dd, keyword, value    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  	keyword:	String giving the name of the translator quantity to 			write.  	value:		The data to write.    OUTPUT: 	NONE    KEYWORDS:   INPUT: 	NONE    OUTPUT: 	status:		Zero unless a problem occurs.     TRANSLATOR KEYWORDS: 	format:		String giving the name of the output representation. 			Default is OMINAS internal representation.  The null 			string, '', indicates the default.    SIDE EFFECTS: 	The detached header in the data descriptor is modified.    STATUS: 	Complete    SEE ALSO: 	dh_std_input    MODIFICATION HISTORY:  	Written by:	Spitale, 1998   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/dh_std_output.html#dhso_put", "dhso_put", 'routine in <a href="dh/dh_std_output.html">dh_std_output.pro</a>', "dh_std_output.pro", "", "dhso_put", "", "objdddh_odprefix", "          -1", "");
  
  libdata[libdataItem++] = new Array("dh/dh_std_output.html#dh_std_output", "dh_std_output", 'routine in <a href="dh/dh_std_output.html">dh_std_output.pro</a>', "dh_std_output.pro", "", "dh_std_output", "", "statusddkeywordvalue@nv_trs_keywords_include.pro", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/dh_to_ominas.html", "dh_to_ominas.pro", '.pro file in <a href="dh/dir-overview.html">dh/ directory</a>', "dh_to_ominas.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/dh_to_ominas.html#dh_to_ominas", "dh_to_ominas", 'routine in <a href="dh/dh_to_ominas.html">dh_to_ominas.pro</a>', "dh_to_ominas.pro", "", "dh_to_ominas", "", "formatvalue", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dh_write.html", "dh_write.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dh_write.pro", "", "", " NAME: 	dh_write    PURPOSE: 	Writes a detached header file.    CATEGORY: 	UTIL/DH    CALLING SEQUENCE: 	dh_write, filename, dh    ARGUMENTS:   INPUT: 	filename:	Name of file to be written.  	dh:		String array giving the detached header to write.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: NONE    STATUS: 	Complete    SEE ALSO: 	dh_read    MODIFICATION HISTORY:  	Written by:	Spitale, 7/1998   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dh_write.html#dh_write", "dh_write", 'routine in <a href="dh/util/dh_write.html">dh_write.pro</a>', "dh_write.pro", "", "dh_write", "", "filenamedh", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dhh_extract.html", "dhh_extract.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dhh_extract.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dhh_extract.html#dhh_extract", "dhh_extract", 'routine in <a href="dh/util/dhh_extract.html">dhh_extract.pro</a>', "dhh_extract.pro", "", "dhh_extract", "", "dh_historydhsection", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dhh_insert.html", "dhh_insert.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dhh_insert.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dhh_insert.html#dhh_insert", "dhh_insert", 'routine in <a href="dh/util/dhh_insert.html">dhh_insert.pro</a>', "dhh_insert.pro", "", "dhh_insert", "", "dh_historydhdh_section", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dhh_parse_keyword.html", "dhh_parse_keyword.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dhh_parse_keyword.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dhh_parse_keyword.html#dhh_parse_keyword", "dhh_parse_keyword", 'routine in <a href="dh/util/dhh_parse_keyword.html">dhh_parse_keyword.pro</a>', "dhh_parse_keyword.pro", "", "dhh_parse_keyword", "", "rkwkwelm_indexobj_indexhist_index", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dhh_parse_line.html", "dhh_parse_line.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dhh_parse_line.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dhh_parse_line.html#dhh_parse_line", "dhh_parse_line", 'routine in <a href="dh/util/dhh_parse_line.html">dhh_parse_line.pro</a>', "dhh_parse_line.pro", "", "dhh_parse_line", "", "linerkwval", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dhh_search.html", "dhh_search.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dhh_search.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dhh_search.html#dhh_search", "dhh_search", 'routine in <a href="dh/util/dhh_search.html">dhh_search.pro</a>', "dhh_search.pro", "", "dhh_search", "", "linesdhkeyword", "          -1", "");
  
  

libdata[libdataItem++] = new Array("dh/util/dhh_separate.html", "dhh_separate.pro", '.pro file in <a href="dh/util/dir-overview.html">dh/util/ directory</a>', "dhh_separate.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("dh/util/dhh_separate.html#dhh_separate", "dhh_separate", 'routine in <a href="dh/util/dhh_separate.html">dhh_separate.pro</a>', "dhh_separate.pro", "", "dhh_separate", "", "dh_sectionsdhdh_history", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./keyval_struct__define.html", "keyval_struct__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "keyval_struct__define.pro", "", "", " NAME: 	keyval_struct__define    PURPOSE: 	Structure defining a keyword/value pair.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	N/A    FIELDS: 	keywords_p:	Pointer to list of keywords.  	values_p:	Pointer to list of value strings.   STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 1/1998   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./keyval_struct__define.html#keyval_struct__define", "keyval_struct__define", 'routine in <a href="./keyval_struct__define.html">keyval_struct__define.pro</a>', "keyval_struct__define.pro", "", "keyval_struct__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./ominas_data__define.html", "ominas_data__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "ominas_data__define.pro", "", "", " NAME: 	ominas_data__define    PURPOSE: 	Structure defining the data descriptor.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	N/A    FIELDS: 	data_dap:	Pointer to data archive containing the data 			and nhist past versions.  	abscissa_dap:	Pointer to data archive containing the abscissa 			and nhist past versions.  	header_dap:	Pointer to data archive containing the header 			and nhist past versions.  	dap_index:	Index of archived data to use.  	dhp:		Pointer to detached header.  	max:		Maximum data value.  	min:		Minimum data value.  	abmax:		Maximum abscissa value.  	abmin:		Minimum abscissa value.  	cache:		Max cache size data array.  Used to deterine whether 			to load / unload data samples.  -1 means infinite.  	dim:		Array giving data dimensions.  	slice_struct:	Structure containing array giving coordinates for a 			subarray.  If slice coordinates exist, the dat methods 			act as if the data descriptor contains only this slice of 			data.  Dimensions, min, and max are set accordingly. 			Dimensions of the subarray are the difference between 			the dimensions of the full array and the dimensionality 			of the slice coordinates.  	typecode:	Data type code.  	filename:	Name of data file.  	filetype:	Filetype string determined by dat_detect_filetype.  	input_transforms_p:	Pointer to list of input transform 				functions determined by dat_lookup_transforms.  	output_transforms_p:	Pointer to list of output transform 				functions determined by dat_lookup_transforms.  	input_fn:	Name of function to read data file.  	output_fn:	Name of function to write data file.  	keyword_fn:	Name of function to read/write header keywords.  	instrument:	Instrument string from dat_detect_instrument.  	input_translators_p:	Pointer to list of input translator 				functions determined by dat_lookup_translators.  	output_translators_p:	Pointer to list of output translator 				functions determined by dat_lookup_translators.  	input_keyvals_p:	Keyword/value pairs for input translators.  	output_keyvals_p:	Keyword/value pairs for output translators.  	transient_keyvals_p:	Transient keyword/value pairs found in the 				translator argument string.  	last_translator:	Description of last translator called.  	sampling_fn:		Optional function to perform a transformation 				on the samples given to dat_data():  				function sampling_fn, dd, samples, data  	dim_fn:			Optional function to cause dat_dim() to report 				dimensions other than those stored in the 				data descriptor:  				function dim_fn, dd, data  	compress:	Compression suffix.  The full name of the 			compression function is dat_compress_data_<suffix>.  	compress_data_p:	Data for compression function.  	maintain:	Data maintenance mode: 				  0: load initially 				  1: load when needed; retain 				     only ndd data descriptor 				     arrays in memory. 				  2: Load when needed, but  				     do not retain.  	update:		Data update mode: 				 -1: Locked; applies to data, header, 				     and udata. 				  0: Normal 				  1: Clone a new descriptor 				     and leave original dd 				     unchanged.  	sibling_dd_h:	Handle giving dd spawned as a result of writing to 			this descriptor while update = 1.  Handle is used 			to protect this dd from nv_free. ;   STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale, 1/1998  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./ominas_data__define.html#ominas_data::init", "ominas_data::init", 'routine in <a href="./ominas_data__define.html">ominas_data__define.pro</a>', "ominas_data__define.pro", "", "ominas_data::init", "", "crdddii@dat__keywords.include", "          -1", "");
  
  libdata[libdataItem++] = new Array("./ominas_data__define.html#dat_dd0_struct__define", "dat_dd0_struct__define", 'routine in <a href="./ominas_data__define.html">ominas_data__define.pro</a>', "ominas_data__define.pro", "", "dat_dd0_struct__define", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./ominas_data__define.html#ominas_data__define", "ominas_data__define", 'routine in <a href="./ominas_data__define.html">ominas_data__define.pro</a>', "ominas_data__define.pro", "", "ominas_data__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./tr_keyword_value.html", "tr_keyword_value.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "tr_keyword_value.pro", "", "", " NAME: 	tr_keyword_value    PURPOSE: 	Looks up a keyword in the data descriptor-stored keyword/value pairs.    CATEGORY: 	NV/SYS    CALLING SEQUENCE: 	value = tr_keyword_value(dd, keyword)    ARGUMENTS:   INPUT: 	dd:		Data descriptor.  If an array, only the first element is 			considered.  	keyword:	Keyword to look up.    OUTPUT: NONE    KEYWORDS:   INPUT: NONE    OUTPUT: NONE    RETURN: 	Value string associated with the given keyword.  Note that transient 	keyword/value pairs take precedence.    STATUS: 	Complete    MODIFICATION HISTORY:  	Written by:	Spitale  	Adapted by:	Spitale, 5/2016   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./tr_keyword_value.html#trkv_match", "trkv_match", 'routine in <a href="./tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "trkv_match", "", "valuekvikeyword", "          -1", "");
  
  libdata[libdataItem++] = new Array("./tr_keyword_value.html#trkv_parse", "trkv_parse", 'routine in <a href="./tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "trkv_parse", "", "value", "          -1", "");
  
  libdata[libdataItem++] = new Array("./tr_keyword_value.html#tr_keyword_value", "tr_keyword_value", 'routine in <a href="./tr_keyword_value.html">tr_keyword_value.pro</a>', "tr_keyword_value.pro", "", "tr_keyword_value", "", "ddkeyword", "          -1", "");
  
  

